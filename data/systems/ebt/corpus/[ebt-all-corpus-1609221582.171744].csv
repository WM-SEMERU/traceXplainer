~ids~filenames~text~type~bpe8k~bpe32k~bpe128k~conv
0~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ107.txt~RQ107.txt~"The user shall be able to delete subscriptions.
"~req~['▁the', '▁user', '▁shall', '▁be', '▁able', '▁to', '▁de', 'lete', '▁sub', 'sc', 'ript', 'ions', '.', '\n']~['▁the', '▁user', '▁shall', '▁be', '▁able', '▁to', '▁de', 'lete', '▁subsc', 'riptions', '.', '\n']~['▁the', '▁user', '▁shall', '▁be', '▁able', '▁to', '▁delete', '▁subscriptions', '.', '\n']~user shall abl delet subscript
1~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ117.txt~RQ117.txt~"The subscriber manager shall re execute the model using the speculative values.
"~req~['▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁shall', '▁re', '▁ex', 'ec', 'ute', '▁the', '▁model', '▁using', '▁the', '▁spec', 'ul', 'ative', '▁values', '.', '\n']~['▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁shall', '▁re', '▁execute', '▁the', '▁model', '▁using', '▁the', '▁speculative', '▁values', '.', '\n']~['▁the', '▁subscriber', '▁manager', '▁shall', '▁re', '▁execute', '▁the', '▁model', '▁using', '▁the', '▁speculative', '▁values', '.', '\n']~subscrib manag shall execut model use specul valu
2~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ139.txt~RQ139.txt~"The user shall eliminate unnecessary traces that were temporarily constructed by the eventserver during initial event processing.
"~req~['▁the', '▁user', '▁shall', '▁elimin', 'ate', '▁un', 'n', 'ecess', 'ary', '▁tr', 'aces', '▁that', '▁were', '▁tem', 'por', 'arily', '▁constructed', '▁by', '▁the', '▁events', 'er', 'ver', '▁during', '▁initial', '▁event', '▁process', 'ing', '.', '\n']~['▁the', '▁user', '▁shall', '▁eliminate', '▁unnecessary', '▁traces', '▁that', '▁were', '▁temporarily', '▁constructed', '▁by', '▁the', '▁events', 'erver', '▁during', '▁initial', '▁event', '▁processing', '.', '\n']~['▁the', '▁user', '▁shall', '▁eliminate', '▁unnecessary', '▁traces', '▁that', '▁were', '▁temporarily', '▁constructed', '▁by', '▁the', '▁events', 'erver', '▁during', '▁initial', '▁event', '▁processing', '.', '\n']~user shall elimin unnecessari trace temporarili construct eventserv initi event process
3~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ120.txt~RQ120.txt~"The prototype system shall utilize a driver to trigger events.
"~req~['▁the', '▁prot', 'oty', 'pe', '▁system', '▁shall', '▁util', 'ize', '▁a', '▁driver', '▁to', '▁tr', 'ig', 'ger', '▁events', '.', '\n']~['▁the', '▁prototype', '▁system', '▁shall', '▁utilize', '▁a', '▁driver', '▁to', '▁trigger', '▁events', '.', '\n']~['▁the', '▁prototype', '▁system', '▁shall', '▁utilize', '▁a', '▁driver', '▁to', '▁trigger', '▁events', '.', '\n']~prototyp system shall util driver trigger event
4~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ113.txt~RQ113.txt~"On receipt of an event message; the subscriber manager shall differentiate between speculative and evolutionary events.
"~req~['▁on', '▁rece', 'ip', 't', '▁of', '▁an', '▁event', '▁message', ';', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁shall', '▁different', 'i', 'ate', '▁between', '▁spec', 'ul', 'ative', '▁and', '▁evolution', 'ary', '▁events', '.', '\n']~['▁on', '▁receip', 't', '▁of', '▁an', '▁event', '▁message', ';', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁shall', '▁differentiate', '▁between', '▁speculative', '▁and', '▁evolutionary', '▁events', '.', '\n']~['▁on', '▁receipt', '▁of', '▁an', '▁event', '▁message', ';', '▁the', '▁subscriber', '▁manager', '▁shall', '▁differentiate', '▁between', '▁speculative', '▁and', '▁evolutionary', '▁events', '.', '\n']~receipt event messag subscrib manag shall differenti specul evolutionari event
5~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ100.txt~RQ100.txt~"Requirements shall be managed in a 3rd party requirements management tool such as DOORS.
"~req~['▁requirements', '▁shall', '▁be', '▁managed', '▁in', '▁a', '▁3', 'rd', '▁party', '▁requirements', '▁management', '▁to', 'ol', '▁such', '▁as', '▁do', 'ors', '.', '\n']~['▁requirements', '▁shall', '▁be', '▁managed', '▁in', '▁a', '▁3', 'rd', '▁party', '▁requirements', '▁management', '▁tool', '▁such', '▁as', '▁doors', '.', '\n']~['▁requirements', '▁shall', '▁be', '▁managed', '▁in', '▁a', '▁3', 'rd', '▁party', '▁requirements', '▁management', '▁tool', '▁such', '▁as', '▁doors', '.', '\n']~requir shall manag parti requir manag tool door
6~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ140.txt~RQ140.txt~"The notification processing system shall automatically eliminate any events that are not longer valid as a result of the user eliminating temporary traces.
"~req~['▁the', '▁not', 'ification', '▁process', 'ing', '▁system', '▁shall', '▁autom', 'at', 'ically', '▁elimin', 'ate', '▁any', '▁events', '▁that', '▁are', '▁not', '▁longer', '▁val', 'id', '▁as', '▁a', '▁result', '▁of', '▁the', '▁user', '▁elimin', 'ating', '▁tem', 'porary', '▁tr', 'aces', '.', '\n']~['▁the', '▁not', 'ification', '▁processing', '▁system', '▁shall', '▁automatically', '▁eliminate', '▁any', '▁events', '▁that', '▁are', '▁not', '▁longer', '▁valid', '▁as', '▁a', '▁result', '▁of', '▁the', '▁user', '▁eliminating', '▁temporary', '▁traces', '.', '\n']~['▁the', '▁notification', '▁processing', '▁system', '▁shall', '▁automatically', '▁eliminate', '▁any', '▁events', '▁that', '▁are', '▁not', '▁longer', '▁valid', '▁as', '▁a', '▁result', '▁of', '▁the', '▁user', '▁eliminating', '▁temporary', '▁traces', '.', '\n']~notif process system shall automat elimin event longer valid result user elimin temporari trace
7~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ115.txt~RQ115.txt~"The user shall be able to construct speculative queries using a GUI.
"~req~['▁the', '▁user', '▁shall', '▁be', '▁able', '▁to', '▁construct', '▁spec', 'ul', 'ative', '▁qu', 'er', 'ies', '▁using', '▁a', '▁gu', 'i', '.', '\n']~['▁the', '▁user', '▁shall', '▁be', '▁able', '▁to', '▁construct', '▁speculative', '▁qu', 'eries', '▁using', '▁a', '▁gu', 'i', '.', '\n']~['▁the', '▁user', '▁shall', '▁be', '▁able', '▁to', '▁construct', '▁speculative', '▁queries', '▁using', '▁a', '▁gui', '.', '\n']~user shall abl construct specul queri use gui
8~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ124.txt~RQ124.txt~"Event types shall include modifying a requirement.
"~req~['▁event', '▁types', '▁shall', '▁include', '▁mod', 'ifying', '▁a', '▁require', 'ment', '.', '\n']~['▁event', '▁types', '▁shall', '▁include', '▁mod', 'ifying', '▁a', '▁requirement', '.', '\n']~['▁event', '▁types', '▁shall', '▁include', '▁modifying', '▁a', '▁requirement', '.', '\n']~event type shall includ modifi requir
9~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ137.txt~RQ137.txt~"The user shall view all evolutionary events received for a specific artifact in the order in which they were received.
"~req~['▁the', '▁user', '▁shall', '▁view', '▁all', '▁evolution', 'ary', '▁events', '▁received', '▁for', '▁a', '▁specific', '▁art', 'if', 'act', '▁in', '▁the', '▁order', '▁in', '▁which', '▁they', '▁were', '▁received', '.', '\n']~['▁the', '▁user', '▁shall', '▁view', '▁all', '▁evolutionary', '▁events', '▁received', '▁for', '▁a', '▁specific', '▁artif', 'act', '▁in', '▁the', '▁order', '▁in', '▁which', '▁they', '▁were', '▁received', '.', '\n']~['▁the', '▁user', '▁shall', '▁view', '▁all', '▁evolutionary', '▁events', '▁received', '▁for', '▁a', '▁specific', '▁artifact', '▁in', '▁the', '▁order', '▁in', '▁which', '▁they', '▁were', '▁received', '.', '\n']~user shall view evolutionari event receiv specif artifact order receiv
10~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ102.txt~RQ102.txt~"Only registered subscribers shall be allowed to establish traces.
"~req~['▁only', '▁registered', '▁sub', 'sc', 'rib', 'ers', '▁shall', '▁be', '▁allowed', '▁to', '▁establish', '▁tr', 'aces', '.', '\n']~['▁only', '▁registered', '▁subscribers', '▁shall', '▁be', '▁allowed', '▁to', '▁establish', '▁traces', '.', '\n']~['▁only', '▁registered', '▁subscribers', '▁shall', '▁be', '▁allowed', '▁to', '▁establish', '▁traces', '.', '\n']~regist subscrib shall allow establish trace
11~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ111.txt~RQ111.txt~"A subscriber manager shall receive event notifications on behalf of the artifacts that it manages.
"~req~['▁a', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁shall', '▁receive', '▁event', '▁not', 'ifications', '▁on', '▁beh', 'al', 'f', '▁of', '▁the', '▁art', 'if', 'act', 's', '▁that', '▁it', '▁man', 'ages', '.', '\n']~['▁a', '▁subsc', 'ri', 'ber', '▁manager', '▁shall', '▁receive', '▁event', '▁not', 'ifications', '▁on', '▁behalf', '▁of', '▁the', '▁artifacts', '▁that', '▁it', '▁manages', '.', '\n']~['▁a', '▁subscriber', '▁manager', '▁shall', '▁receive', '▁event', '▁notifications', '▁on', '▁behalf', '▁of', '▁the', '▁artifacts', '▁that', '▁it', '▁manages', '.', '\n']~subscrib manag shall receiv event notif behalf artifact manag
12~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ118.txt~RQ118.txt~"The subscriber manager shall report results indicating whether the speculative change negatively impacts other requirements and constraints.
"~req~['▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁shall', '▁report', '▁results', '▁indic', 'ating', '▁whether', '▁the', '▁spec', 'ul', 'ative', '▁change', '▁neg', 'atively', '▁impact', 's', '▁other', '▁requirements', '▁and', '▁constr', 'aints', '.', '\n']~['▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁shall', '▁report', '▁results', '▁indicating', '▁whether', '▁the', '▁speculative', '▁change', '▁negatively', '▁impacts', '▁other', '▁requirements', '▁and', '▁constraints', '.', '\n']~['▁the', '▁subscriber', '▁manager', '▁shall', '▁report', '▁results', '▁indicating', '▁whether', '▁the', '▁speculative', '▁change', '▁negatively', '▁impacts', '▁other', '▁requirements', '▁and', '▁constraints', '.', '\n']~subscrib manag shall report result indic whether specul chang negat impact requir constraint
13~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ127.txt~RQ127.txt~"The eventserver shall receive event messages when a requirement changes.
"~req~['▁the', '▁events', 'er', 'ver', '▁shall', '▁receive', '▁event', '▁mess', 'ages', '▁when', '▁a', '▁require', 'ment', '▁changes', '.', '\n']~['▁the', '▁events', 'erver', '▁shall', '▁receive', '▁event', '▁messages', '▁when', '▁a', '▁requirement', '▁changes', '.', '\n']~['▁the', '▁events', 'erver', '▁shall', '▁receive', '▁event', '▁messages', '▁when', '▁a', '▁requirement', '▁changes', '.', '\n']~eventserv shall receiv event messag requir chang
14~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ125.txt~RQ125.txt~"Event types shall include deleting a requirement.
"~req~['▁event', '▁types', '▁shall', '▁include', '▁de', 'let', 'ing', '▁a', '▁require', 'ment', '.', '\n']~['▁event', '▁types', '▁shall', '▁include', '▁de', 'let', 'ing', '▁a', '▁requirement', '.', '\n']~['▁event', '▁types', '▁shall', '▁include', '▁deleting', '▁a', '▁requirement', '.', '\n']~event type shall includ delet requir
15~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ105.txt~RQ105.txt~"The user shall establish traces between requirements and other types of artifacts by establishing a subscription from an artifact to the relevant requirement
"~req~['▁the', '▁user', '▁shall', '▁establish', '▁tr', 'aces', '▁between', '▁requirements', '▁and', '▁other', '▁types', '▁of', '▁art', 'if', 'act', 's', '▁by', '▁establish', 'ing', '▁a', '▁sub', 'sc', 'ription', '▁from', '▁an', '▁art', 'if', 'act', '▁to', '▁the', '▁rele', 'vant', '▁require', 'ment', '\n']~['▁the', '▁user', '▁shall', '▁establish', '▁traces', '▁between', '▁requirements', '▁and', '▁other', '▁types', '▁of', '▁artifacts', '▁by', '▁establishing', '▁a', '▁subscription', '▁from', '▁an', '▁artif', 'act', '▁to', '▁the', '▁relevant', '▁requirement', '\n']~['▁the', '▁user', '▁shall', '▁establish', '▁traces', '▁between', '▁requirements', '▁and', '▁other', '▁types', '▁of', '▁artifacts', '▁by', '▁establishing', '▁a', '▁subscription', '▁from', '▁an', '▁artifact', '▁to', '▁the', '▁relevant', '▁requirement', '\n']~user shall establish trace requir type artifact establish subscript artifact relev requir
16~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ128.txt~RQ128.txt~"On receipt of an event message the eventserver shall record the event in an eventlog.
"~req~['▁on', '▁rece', 'ip', 't', '▁of', '▁an', '▁event', '▁message', '▁the', '▁events', 'er', 'ver', '▁shall', '▁record', '▁the', '▁event', '▁in', '▁an', '▁event', 'l', 'og', '.', '\n']~['▁on', '▁receip', 't', '▁of', '▁an', '▁event', '▁message', '▁the', '▁events', 'erver', '▁shall', '▁record', '▁the', '▁event', '▁in', '▁an', '▁event', 'log', '.', '\n']~['▁on', '▁receipt', '▁of', '▁an', '▁event', '▁message', '▁the', '▁events', 'erver', '▁shall', '▁record', '▁the', '▁event', '▁in', '▁an', '▁event', 'log', '.', '\n']~receipt event messag eventserv shall record event eventlog
17~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ119.txt~RQ119.txt~"The subscriber manager shall restore the executable model to its prior state.
"~req~['▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁shall', '▁rest', 'ore', '▁the', '▁execut', 'able', '▁model', '▁to', '▁its', '▁prior', '▁state', '.', '\n']~['▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁shall', '▁restore', '▁the', '▁execut', 'able', '▁model', '▁to', '▁its', '▁prior', '▁state', '.', '\n']~['▁the', '▁subscriber', '▁manager', '▁shall', '▁restore', '▁the', '▁executable', '▁model', '▁to', '▁its', '▁prior', '▁state', '.', '\n']~subscrib manag shall restor execut model prior state
18~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ126.txt~RQ126.txt~"Event types shall include merging requirements.
"~req~['▁event', '▁types', '▁shall', '▁include', '▁mer', 'ging', '▁requirements', '.', '\n']~['▁event', '▁types', '▁shall', '▁include', '▁merging', '▁requirements', '.', '\n']~['▁event', '▁types', '▁shall', '▁include', '▁merging', '▁requirements', '.', '\n']~event type shall includ merg requir
19~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ121.txt~RQ121.txt~"Event types shall include adding new requirements.
"~req~['▁event', '▁types', '▁shall', '▁include', '▁add', 'ing', '▁new', '▁requirements', '.', '\n']~['▁event', '▁types', '▁shall', '▁include', '▁adding', '▁new', '▁requirements', '.', '\n']~['▁event', '▁types', '▁shall', '▁include', '▁adding', '▁new', '▁requirements', '.', '\n']~event type shall includ new requir
20~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ123.txt~RQ123.txt~"Event types shall include refining one requirement by adding an additional requirement to the existing one.
"~req~['▁event', '▁types', '▁shall', '▁include', '▁ref', 'ining', '▁one', '▁require', 'ment', '▁by', '▁add', 'ing', '▁an', '▁additional', '▁require', 'ment', '▁to', '▁the', '▁existing', '▁one', '.', '\n']~['▁event', '▁types', '▁shall', '▁include', '▁ref', 'ining', '▁one', '▁requirement', '▁by', '▁adding', '▁an', '▁additional', '▁requirement', '▁to', '▁the', '▁existing', '▁one', '.', '\n']~['▁event', '▁types', '▁shall', '▁include', '▁refining', '▁one', '▁requirement', '▁by', '▁adding', '▁an', '▁additional', '▁requirement', '▁to', '▁the', '▁existing', '▁one', '.', '\n']~event type shall includ refin one requir addit requir exist one
21~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ130.txt~RQ130.txt~"The eventserver shall differentiate between evolutionary and speculative events.
"~req~['▁the', '▁events', 'er', 'ver', '▁shall', '▁different', 'i', 'ate', '▁between', '▁evolution', 'ary', '▁and', '▁spec', 'ul', 'ative', '▁events', '.', '\n']~['▁the', '▁events', 'erver', '▁shall', '▁differentiate', '▁between', '▁evolutionary', '▁and', '▁speculative', '▁events', '.', '\n']~['▁the', '▁events', 'erver', '▁shall', '▁differentiate', '▁between', '▁evolutionary', '▁and', '▁speculative', '▁events', '.', '\n']~eventserv shall differenti evolutionari specul event
22~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ138.txt~RQ138.txt~"The user shall update related artifacts according to the information contained in the event messages.
"~req~['▁the', '▁user', '▁shall', '▁upd', 'ate', '▁related', '▁art', 'if', 'act', 's', '▁according', '▁to', '▁the', '▁information', '▁contained', '▁in', '▁the', '▁event', '▁mess', 'ages', '.', '\n']~['▁the', '▁user', '▁shall', '▁update', '▁related', '▁artifacts', '▁according', '▁to', '▁the', '▁information', '▁contained', '▁in', '▁the', '▁event', '▁messages', '.', '\n']~['▁the', '▁user', '▁shall', '▁update', '▁related', '▁artifacts', '▁according', '▁to', '▁the', '▁information', '▁contained', '▁in', '▁the', '▁event', '▁messages', '.', '\n']~user shall updat relat artifact accord inform contain event messag
23~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ134.txt~RQ134.txt~"The eventserver shall retrieve quantitative values related to these additional requirements and constraints through querying the requirements management tool.
"~req~['▁the', '▁events', 'er', 'ver', '▁shall', '▁retrie', 've', '▁quant', 'it', 'ative', '▁values', '▁related', '▁to', '▁these', '▁additional', '▁requirements', '▁and', '▁constr', 'aints', '▁through', '▁qu', 'ery', 'ing', '▁the', '▁requirements', '▁management', '▁to', 'ol', '.', '\n']~['▁the', '▁events', 'erver', '▁shall', '▁retrieve', '▁quantitative', '▁values', '▁related', '▁to', '▁these', '▁additional', '▁requirements', '▁and', '▁constraints', '▁through', '▁query', 'ing', '▁the', '▁requirements', '▁management', '▁tool', '.', '\n']~['▁the', '▁events', 'erver', '▁shall', '▁retrieve', '▁quantitative', '▁values', '▁related', '▁to', '▁these', '▁additional', '▁requirements', '▁and', '▁constraints', '▁through', '▁query', 'ing', '▁the', '▁requirements', '▁management', '▁tool', '.', '\n']~eventserv shall retriev quantit valu relat addit requir constraint queri requir manag tool
24~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ135.txt~RQ135.txt~"The eventserver shall create a composite speculative message which includes the speculative event plus all related requirements and constraint values for each impacted model.
"~req~['▁the', '▁events', 'er', 'ver', '▁shall', '▁create', '▁a', '▁compos', 'ite', '▁spec', 'ul', 'ative', '▁message', '▁which', '▁includes', '▁the', '▁spec', 'ul', 'ative', '▁event', '▁plus', '▁all', '▁related', '▁requirements', '▁and', '▁constr', 'aint', '▁values', '▁for', '▁each', '▁impact', 'ed', '▁model', '.', '\n']~['▁the', '▁events', 'erver', '▁shall', '▁create', '▁a', '▁composite', '▁speculative', '▁message', '▁which', '▁includes', '▁the', '▁speculative', '▁event', '▁plus', '▁all', '▁related', '▁requirements', '▁and', '▁constr', 'aint', '▁values', '▁for', '▁each', '▁impacted', '▁model', '.', '\n']~['▁the', '▁events', 'erver', '▁shall', '▁create', '▁a', '▁composite', '▁speculative', '▁message', '▁which', '▁includes', '▁the', '▁speculative', '▁event', '▁plus', '▁all', '▁related', '▁requirements', '▁and', '▁constraint', '▁values', '▁for', '▁each', '▁impacted', '▁model', '.', '\n']~eventserv shall creat composit specul messag includ specul event plus relat requir constraint valu impact model
25~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ104.txt~RQ104.txt~"On registration a subscriber shall register itself under the control of a subscriber manager
"~req~['▁on', '▁reg', 'istr', 'ation', '▁a', '▁sub', 'sc', 'ri', 'ber', '▁shall', '▁register', '▁itself', '▁under', '▁the', '▁control', '▁of', '▁a', '▁sub', 'sc', 'ri', 'ber', '▁manager', '\n']~['▁on', '▁registration', '▁a', '▁subsc', 'ri', 'ber', '▁shall', '▁register', '▁itself', '▁under', '▁the', '▁control', '▁of', '▁a', '▁subsc', 'ri', 'ber', '▁manager', '\n']~['▁on', '▁registration', '▁a', '▁subscriber', '▁shall', '▁register', '▁itself', '▁under', '▁the', '▁control', '▁of', '▁a', '▁subscriber', '▁manager', '\n']~registr subscrib shall regist control subscrib manag
26~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ116.txt~RQ116.txt~"The subscriber manager shall immediately process speculative events.
"~req~['▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁shall', '▁immediately', '▁process', '▁spec', 'ul', 'ative', '▁events', '.', '\n']~['▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁shall', '▁immediately', '▁process', '▁speculative', '▁events', '.', '\n']~['▁the', '▁subscriber', '▁manager', '▁shall', '▁immediately', '▁process', '▁speculative', '▁events', '.', '\n']~subscrib manag shall immedi process specul event
27~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ114.txt~RQ114.txt~"The subscriber manager shall store information for evolutionary events in an eventlog.
"~req~['▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁shall', '▁store', '▁information', '▁for', '▁evolution', 'ary', '▁events', '▁in', '▁an', '▁event', 'l', 'og', '.', '\n']~['▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁shall', '▁store', '▁information', '▁for', '▁evolutionary', '▁events', '▁in', '▁an', '▁event', 'log', '.', '\n']~['▁the', '▁subscriber', '▁manager', '▁shall', '▁store', '▁information', '▁for', '▁evolutionary', '▁events', '▁in', '▁an', '▁event', 'log', '.', '\n']~subscrib manag shall store inform evolutionari event eventlog
28~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ136.txt~RQ136.txt~"The eventserver shall send the customized message to each impacted executable model.
"~req~['▁the', '▁events', 'er', 'ver', '▁shall', '▁s', 'end', '▁the', '▁custom', 'ized', '▁message', '▁to', '▁each', '▁impact', 'ed', '▁execut', 'able', '▁model', '.', '\n']~['▁the', '▁events', 'erver', '▁shall', '▁send', '▁the', '▁custom', 'ized', '▁message', '▁to', '▁each', '▁impacted', '▁execut', 'able', '▁model', '.', '\n']~['▁the', '▁events', 'erver', '▁shall', '▁send', '▁the', '▁customized', '▁message', '▁to', '▁each', '▁impacted', '▁executable', '▁model', '.', '\n']~eventserv shall send custom messag impact execut model
29~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ109.txt~RQ109.txt~"If the subscriber manager is online; the push model shall be used to send it event notifications in real time.
"~req~['▁if', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁is', '▁online', ';', '▁the', '▁p', 'ush', '▁model', '▁shall', '▁be', '▁used', '▁to', '▁s', 'end', '▁it', '▁event', '▁not', 'ifications', '▁in', '▁real', '▁time', '.', '\n']~['▁if', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁is', '▁online', ';', '▁the', '▁push', '▁model', '▁shall', '▁be', '▁used', '▁to', '▁send', '▁it', '▁event', '▁not', 'ifications', '▁in', '▁real', '▁time', '.', '\n']~['▁if', '▁the', '▁subscriber', '▁manager', '▁is', '▁online', ';', '▁the', '▁push', '▁model', '▁shall', '▁be', '▁used', '▁to', '▁send', '▁it', '▁event', '▁notifications', '▁in', '▁real', '▁time', '.', '\n']~subscrib manag onlin push model shall use send event notif real time
30~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ108.txt~RQ108.txt~"A subscriber manager shall register itself with the eventserver so that it may receive relevant event messages.
"~req~['▁a', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁shall', '▁register', '▁itself', '▁with', '▁the', '▁events', 'er', 'ver', '▁so', '▁that', '▁it', '▁may', '▁receive', '▁rele', 'vant', '▁event', '▁mess', 'ages', '.', '\n']~['▁a', '▁subsc', 'ri', 'ber', '▁manager', '▁shall', '▁register', '▁itself', '▁with', '▁the', '▁events', 'erver', '▁so', '▁that', '▁it', '▁may', '▁receive', '▁relevant', '▁event', '▁messages', '.', '\n']~['▁a', '▁subscriber', '▁manager', '▁shall', '▁register', '▁itself', '▁with', '▁the', '▁events', 'erver', '▁so', '▁that', '▁it', '▁may', '▁receive', '▁relevant', '▁event', '▁messages', '.', '\n']~subscrib manag shall regist eventserv may receiv relev event messag
31~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ106.txt~RQ106.txt~"Each artifact shall be placed under the control of a subscriber manager
"~req~['▁each', '▁art', 'if', 'act', '▁shall', '▁be', '▁placed', '▁under', '▁the', '▁control', '▁of', '▁a', '▁sub', 'sc', 'ri', 'ber', '▁manager', '\n']~['▁each', '▁artif', 'act', '▁shall', '▁be', '▁placed', '▁under', '▁the', '▁control', '▁of', '▁a', '▁subsc', 'ri', 'ber', '▁manager', '\n']~['▁each', '▁artifact', '▁shall', '▁be', '▁placed', '▁under', '▁the', '▁control', '▁of', '▁a', '▁subscriber', '▁manager', '\n']~artifact shall place control subscrib manag
32~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ132.txt~RQ132.txt~"For speculative events; the eventserver shall construct a composite event message.
"~req~['▁for', '▁spec', 'ul', 'ative', '▁events', ';', '▁the', '▁events', 'er', 'ver', '▁shall', '▁construct', '▁a', '▁compos', 'ite', '▁event', '▁message', '.', '\n']~['▁for', '▁speculative', '▁events', ';', '▁the', '▁events', 'erver', '▁shall', '▁construct', '▁a', '▁composite', '▁event', '▁message', '.', '\n']~['▁for', '▁speculative', '▁events', ';', '▁the', '▁events', 'erver', '▁shall', '▁construct', '▁a', '▁composite', '▁event', '▁message', '.', '\n']~specul event eventserv shall construct composit event messag
33~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ133.txt~RQ133.txt~"The eventserver shall identify all related requirements and constraints for each impacted executable model.
"~req~['▁the', '▁events', 'er', 'ver', '▁shall', '▁ident', 'ify', '▁all', '▁related', '▁requirements', '▁and', '▁constr', 'aints', '▁for', '▁each', '▁impact', 'ed', '▁execut', 'able', '▁model', '.', '\n']~['▁the', '▁events', 'erver', '▁shall', '▁identify', '▁all', '▁related', '▁requirements', '▁and', '▁constraints', '▁for', '▁each', '▁impacted', '▁execut', 'able', '▁model', '.', '\n']~['▁the', '▁events', 'erver', '▁shall', '▁identify', '▁all', '▁related', '▁requirements', '▁and', '▁constraints', '▁for', '▁each', '▁impacted', '▁executable', '▁model', '.', '\n']~eventserv shall identifi relat requir constraint impact execut model
34~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ129.txt~RQ129.txt~"On receipt of an event; the eventserver shall identify all relevant subscribers for the event.
"~req~['▁on', '▁rece', 'ip', 't', '▁of', '▁an', '▁event', ';', '▁the', '▁events', 'er', 'ver', '▁shall', '▁ident', 'ify', '▁all', '▁rele', 'vant', '▁sub', 'sc', 'rib', 'ers', '▁for', '▁the', '▁event', '.', '\n']~['▁on', '▁receip', 't', '▁of', '▁an', '▁event', ';', '▁the', '▁events', 'erver', '▁shall', '▁identify', '▁all', '▁relevant', '▁subscribers', '▁for', '▁the', '▁event', '.', '\n']~['▁on', '▁receipt', '▁of', '▁an', '▁event', ';', '▁the', '▁events', 'erver', '▁shall', '▁identify', '▁all', '▁relevant', '▁subscribers', '▁for', '▁the', '▁event', '.', '\n']~receipt event eventserv shall identifi relev subscrib event
35~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ131.txt~RQ131.txt~"When an evolutionary event occurs; the eventserver shall notify subscribers of the event.
"~req~['▁when', '▁an', '▁evolution', 'ary', '▁event', '▁occurs', ';', '▁the', '▁events', 'er', 'ver', '▁shall', '▁not', 'ify', '▁sub', 'sc', 'rib', 'ers', '▁of', '▁the', '▁event', '.', '\n']~['▁when', '▁an', '▁evolutionary', '▁event', '▁occurs', ';', '▁the', '▁events', 'erver', '▁shall', '▁not', 'ify', '▁subscribers', '▁of', '▁the', '▁event', '.', '\n']~['▁when', '▁an', '▁evolutionary', '▁event', '▁occurs', ';', '▁the', '▁events', 'erver', '▁shall', '▁notify', '▁subscribers', '▁of', '▁the', '▁event', '.', '\n']~evolutionari event occur eventserv shall notifi subscrib event
36~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ101.txt~RQ101.txt~"Non-requirement artifacts shall be managed in 3rd party tools such as Rational Rose or Clear case
"~req~['▁non', '-', 're', 'qu', 'ire', 'ment', '▁art', 'if', 'act', 's', '▁shall', '▁be', '▁managed', '▁in', '▁3', 'rd', '▁party', '▁to', 'ols', '▁such', '▁as', '▁r', 'ational', '▁rose', '▁or', '▁clear', '▁case', '\n']~['▁non', '-', 'requ', 'ire', 'ment', '▁artifacts', '▁shall', '▁be', '▁managed', '▁in', '▁3', 'rd', '▁party', '▁tools', '▁such', '▁as', '▁rational', '▁rose', '▁or', '▁clear', '▁case', '\n']~['▁non', '-', 'require', 'ment', '▁artifacts', '▁shall', '▁be', '▁managed', '▁in', '▁3', 'rd', '▁party', '▁tools', '▁such', '▁as', '▁rational', '▁rose', '▁or', '▁clear', '▁case', '\n']~non requir artifact shall manag parti tool ration rose clear case
37~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ110.txt~RQ110.txt~"Whenever the subscriber manager first comes on line; it shall implement the pull model to retrieve outstanding event messages from the eventserver.
"~req~['▁when', 'ever', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁first', '▁comes', '▁on', '▁line', ';', '▁it', '▁shall', '▁implement', '▁the', '▁pull', '▁model', '▁to', '▁retrie', 've', '▁outstanding', '▁event', '▁mess', 'ages', '▁from', '▁the', '▁events', 'er', 'ver', '.', '\n']~['▁whenever', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁first', '▁comes', '▁on', '▁line', ';', '▁it', '▁shall', '▁implement', '▁the', '▁pull', '▁model', '▁to', '▁retrieve', '▁outstanding', '▁event', '▁messages', '▁from', '▁the', '▁events', 'erver', '.', '\n']~['▁whenever', '▁the', '▁subscriber', '▁manager', '▁first', '▁comes', '▁on', '▁line', ';', '▁it', '▁shall', '▁implement', '▁the', '▁pull', '▁model', '▁to', '▁retrieve', '▁outstanding', '▁event', '▁messages', '▁from', '▁the', '▁events', 'erver', '.', '\n']~whenev subscrib manag first come line shall implement pull model retriev outstand event messag eventserv
38~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ103.txt~RQ103.txt~"A user shall register as a subscriber.
"~req~['▁a', '▁user', '▁shall', '▁register', '▁as', '▁a', '▁sub', 'sc', 'ri', 'ber', '.', '\n']~['▁a', '▁user', '▁shall', '▁register', '▁as', '▁a', '▁subsc', 'ri', 'ber', '.', '\n']~['▁a', '▁user', '▁shall', '▁register', '▁as', '▁a', '▁subscriber', '.', '\n']~user shall regist subscrib
39~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ112.txt~RQ112.txt~"A subscriber manager shall manage traces for one or more artifacts.
"~req~['▁a', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁shall', '▁man', 'age', '▁tr', 'aces', '▁for', '▁one', '▁or', '▁more', '▁art', 'if', 'act', 's', '.', '\n']~['▁a', '▁subsc', 'ri', 'ber', '▁manager', '▁shall', '▁manage', '▁traces', '▁for', '▁one', '▁or', '▁more', '▁artifacts', '.', '\n']~['▁a', '▁subscriber', '▁manager', '▁shall', '▁manage', '▁traces', '▁for', '▁one', '▁or', '▁more', '▁artifacts', '.', '\n']~subscrib manag shall manag trace one artifact
40~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/requirements/RQ122.txt~RQ122.txt~"Event types shall include decomposing one requirement into two or more requirements.
"~req~['▁event', '▁types', '▁shall', '▁include', '▁dec', 'om', 'pos', 'ing', '▁one', '▁require', 'ment', '▁into', '▁two', '▁or', '▁more', '▁requirements', '.', '\n']~['▁event', '▁types', '▁shall', '▁include', '▁decom', 'pos', 'ing', '▁one', '▁requirement', '▁into', '▁two', '▁or', '▁more', '▁requirements', '.', '\n']~['▁event', '▁types', '▁shall', '▁include', '▁decomposing', '▁one', '▁requirement', '▁into', '▁two', '▁or', '▁more', '▁requirements', '.', '\n']~event type shall includ decompos one requir two requir
41~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC151.txt~TC151.txt~"User constructs a speculative query (3.4.1) Preconditions: At least one performance model has been built. Requirements and constraints have been defined for this performance model. Steps: The user constructs a speculative query using a GUI tool. Postconditions: A speculative event message is received by the event server.
"~tc~['▁user', '▁construct', 's', '▁a', '▁spec', 'ul', 'ative', '▁qu', 'ery', '▁(', '3.', '4.', '1)', '▁prec', 'ond', 'itions', ':', '▁at', '▁least', '▁one', '▁performance', '▁model', '▁has', '▁been', '▁built', '.', '▁requirements', '▁and', '▁constr', 'aints', '▁have', '▁been', '▁defined', '▁for', '▁this', '▁performance', '▁model', '.', '▁step', 's', ':', '▁the', '▁user', '▁construct', 's', '▁a', '▁spec', 'ul', 'ative', '▁qu', 'ery', '▁using', '▁a', '▁gu', 'i', '▁to', 'ol', '.', '▁post', 'c', 'ond', 'itions', ':', '▁a', '▁spec', 'ul', 'ative', '▁event', '▁message', '▁is', '▁received', '▁by', '▁the', '▁event', '▁ser', 'ver', '.', '\n']~['▁user', '▁construct', 's', '▁a', '▁speculative', '▁query', '▁(3.', '4.', '1)', '▁prec', 'ond', 'itions', ':', '▁at', '▁least', '▁one', '▁performance', '▁model', '▁has', '▁been', '▁built', '.', '▁requirements', '▁and', '▁constraints', '▁have', '▁been', '▁defined', '▁for', '▁this', '▁performance', '▁model', '.', '▁steps', ':', '▁the', '▁user', '▁construct', 's', '▁a', '▁speculative', '▁query', '▁using', '▁a', '▁gu', 'i', '▁tool', '.', '▁post', 'cond', 'itions', ':', '▁a', '▁speculative', '▁event', '▁message', '▁is', '▁received', '▁by', '▁the', '▁event', '▁server', '.', '\n']~['▁user', '▁constructs', '▁a', '▁speculative', '▁query', '▁(3.', '4.', '1)', '▁preconditions', ':', '▁at', '▁least', '▁one', '▁performance', '▁model', '▁has', '▁been', '▁built', '.', '▁requirements', '▁and', '▁constraints', '▁have', '▁been', '▁defined', '▁for', '▁this', '▁performance', '▁model', '.', '▁steps', ':', '▁the', '▁user', '▁constructs', '▁a', '▁speculative', '▁query', '▁using', '▁a', '▁gui', '▁tool', '.', '▁post', 'conditions', ':', '▁a', '▁speculative', '▁event', '▁message', '▁is', '▁received', '▁by', '▁the', '▁event', '▁server', '.', '\n']~user construct specul queri precondit least one perform model built requir constraint defin perform model step user construct specul queri use gui tool postcondit specul event messag receiv event server
42~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC144.txt~TC144.txt~"Subscriber fails to register with subscriber manager (2.1.3)(2.2.2)(3.2.2?) Preconditions The subscriber is a valid subscriber Steps The subscriber attempts to exit from the registration process without registering itself under a subscriber manager. Postconditions The subscriber is removed from the system.
"~tc~['▁sub', 'sc', 'ri', 'ber', '▁fail', 's', '▁to', '▁register', '▁with', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁(', '2.', '1.', '3)', '(', '2.', '2.', '2)', '(', '3.', '2.', '2', '?', ')', '▁prec', 'ond', 'itions', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁is', '▁a', '▁val', 'id', '▁sub', 'sc', 'ri', 'ber', '▁step', 's', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁attempts', '▁to', '▁ex', 'it', '▁from', '▁the', '▁reg', 'istr', 'ation', '▁process', '▁without', '▁register', 'ing', '▁itself', '▁under', '▁a', '▁sub', 'sc', 'ri', 'ber', '▁manager', '.', '▁post', 'c', 'ond', 'itions', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁is', '▁removed', '▁from', '▁the', '▁system', '.', '\n']~['▁subsc', 'ri', 'ber', '▁fails', '▁to', '▁register', '▁with', '▁subsc', 'ri', 'ber', '▁manager', '▁(2.', '1.', '3)', '(', '2.', '2.', '2)', '(', '3.', '2.', '2', '?)', '▁prec', 'ond', 'itions', '▁the', '▁subsc', 'ri', 'ber', '▁is', '▁a', '▁valid', '▁subsc', 'ri', 'ber', '▁steps', '▁the', '▁subsc', 'ri', 'ber', '▁attempts', '▁to', '▁exit', '▁from', '▁the', '▁registration', '▁process', '▁without', '▁register', 'ing', '▁itself', '▁under', '▁a', '▁subsc', 'ri', 'ber', '▁manager', '.', '▁post', 'cond', 'itions', '▁the', '▁subsc', 'ri', 'ber', '▁is', '▁removed', '▁from', '▁the', '▁system', '.', '\n']~['▁subscriber', '▁fails', '▁to', '▁register', '▁with', '▁subscriber', '▁manager', '▁(2.', '1.', '3)', '(', '2.', '2.', '2)', '(', '3.', '2.2', '?)', '▁preconditions', '▁the', '▁subscriber', '▁is', '▁a', '▁valid', '▁subscriber', '▁steps', '▁the', '▁subscriber', '▁attempts', '▁to', '▁exit', '▁from', '▁the', '▁registration', '▁process', '▁without', '▁registering', '▁itself', '▁under', '▁a', '▁subscriber', '▁manager', '.', '▁post', 'conditions', '▁the', '▁subscriber', '▁is', '▁removed', '▁from', '▁the', '▁system', '.', '\n']~subscrib fail regist subscrib manag precondit subscrib valid subscrib step subscrib attempt exit registr process without regist subscrib manag postcondit subscrib remov system
43~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC148.txt~TC148.txt~"Subscriber Manager comes online and checks for missed events (3.1.3) Preconditions: The subscriber manager is off line. The event server has stored an event notification that was not previously delivered to the subscriber manager. Steps: The subscriber manager comes online. Post conditions: The subscriber manager has successfully downloaded the relevant event notifications from the event server.
"~tc~['▁sub', 'sc', 'ri', 'ber', '▁manager', '▁comes', '▁online', '▁and', '▁che', 'c', 'ks', '▁for', '▁miss', 'ed', '▁events', '▁(', '3.', '1.', '3)', '▁prec', 'ond', 'itions', ':', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁is', '▁off', '▁line', '.', '▁the', '▁event', '▁ser', 'ver', '▁has', '▁st', 'ored', '▁an', '▁event', '▁not', 'ification', '▁that', '▁was', '▁not', '▁previously', '▁delivered', '▁to', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '.', '▁step', 's', ':', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁comes', '▁online', '.', '▁post', '▁conditions', ':', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁has', '▁successfully', '▁down', 'lo', 'aded', '▁the', '▁rele', 'vant', '▁event', '▁not', 'ifications', '▁from', '▁the', '▁event', '▁ser', 'ver', '.', '\n']~['▁subsc', 'ri', 'ber', '▁manager', '▁comes', '▁online', '▁and', '▁checks', '▁for', '▁missed', '▁events', '▁(3.', '1.', '3)', '▁prec', 'ond', 'itions', ':', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁is', '▁off', '▁line', '.', '▁the', '▁event', '▁server', '▁has', '▁stored', '▁an', '▁event', '▁not', 'ification', '▁that', '▁was', '▁not', '▁previously', '▁delivered', '▁to', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '.', '▁steps', ':', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁comes', '▁online', '.', '▁post', '▁conditions', ':', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁has', '▁successfully', '▁downloaded', '▁the', '▁relevant', '▁event', '▁not', 'ifications', '▁from', '▁the', '▁event', '▁server', '.', '\n']~['▁subscriber', '▁manager', '▁comes', '▁online', '▁and', '▁checks', '▁for', '▁missed', '▁events', '▁(3.', '1.', '3)', '▁preconditions', ':', '▁the', '▁subscriber', '▁manager', '▁is', '▁off', '▁line', '.', '▁the', '▁event', '▁server', '▁has', '▁stored', '▁an', '▁event', '▁notification', '▁that', '▁was', '▁not', '▁previously', '▁delivered', '▁to', '▁the', '▁subscriber', '▁manager', '.', '▁steps', ':', '▁the', '▁subscriber', '▁manager', '▁comes', '▁online', '.', '▁post', '▁conditions', ':', '▁the', '▁subscriber', '▁manager', '▁has', '▁successfully', '▁downloaded', '▁the', '▁relevant', '▁event', '▁notifications', '▁from', '▁the', '▁event', '▁server', '.', '\n']~subscrib manag come onlin check miss event precondit subscrib manag line event server store event notif previous deliv subscrib manag step subscrib manag come onlin post condit subscrib manag success download relev event notif event server
44~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC142.txt~TC142.txt~"Non-registered subscriber attempts to establish a trace (2.1.1) Preconditions The proposed Subscriber is not registered Steps Subscriber attempts to establish a trace between a UML artifact and a requirement. Postconditions No trace is established between the UML artifact and the requirement.
"~tc~['▁non', '-', 'reg', 'ister', 'ed', '▁sub', 'sc', 'ri', 'ber', '▁attempts', '▁to', '▁establish', '▁a', '▁tr', 'ace', '▁(', '2.', '1.', '1)', '▁prec', 'ond', 'itions', '▁the', '▁proposed', '▁sub', 'sc', 'ri', 'ber', '▁is', '▁not', '▁registered', '▁step', 's', '▁sub', 'sc', 'ri', 'ber', '▁attempts', '▁to', '▁establish', '▁a', '▁tr', 'ace', '▁between', '▁a', '▁', 'um', 'l', '▁art', 'if', 'act', '▁and', '▁a', '▁require', 'ment', '.', '▁post', 'c', 'ond', 'itions', '▁no', '▁tr', 'ace', '▁is', '▁established', '▁between', '▁the', '▁', 'um', 'l', '▁art', 'if', 'act', '▁and', '▁the', '▁require', 'ment', '.', '\n']~['▁non', '-', 'registered', '▁subsc', 'ri', 'ber', '▁attempts', '▁to', '▁establish', '▁a', '▁trace', '▁(2.', '1.', '1)', '▁prec', 'ond', 'itions', '▁the', '▁proposed', '▁subsc', 'ri', 'ber', '▁is', '▁not', '▁registered', '▁steps', '▁subsc', 'ri', 'ber', '▁attempts', '▁to', '▁establish', '▁a', '▁trace', '▁between', '▁a', '▁um', 'l', '▁artif', 'act', '▁and', '▁a', '▁requirement', '.', '▁post', 'cond', 'itions', '▁no', '▁trace', '▁is', '▁established', '▁between', '▁the', '▁um', 'l', '▁artif', 'act', '▁and', '▁the', '▁requirement', '.', '\n']~['▁non', '-', 'registered', '▁subscriber', '▁attempts', '▁to', '▁establish', '▁a', '▁trace', '▁(2.', '1.', '1)', '▁preconditions', '▁the', '▁proposed', '▁subscriber', '▁is', '▁not', '▁registered', '▁steps', '▁subscriber', '▁attempts', '▁to', '▁establish', '▁a', '▁trace', '▁between', '▁a', '▁uml', '▁artifact', '▁and', '▁a', '▁requirement', '.', '▁post', 'conditions', '▁no', '▁trace', '▁is', '▁established', '▁between', '▁the', '▁uml', '▁artifact', '▁and', '▁the', '▁requirement', '.', '\n']~non regist subscrib attempt establish trace precondit propos subscrib regist step subscrib attempt establish trace uml artifact requir postcondit trace establish uml artifact requir
45~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC143.txt~TC143.txt~"Subscriber registers with subscriber manager (2.1.3)(2.2.2)(3.2.2?)(2.1.2?) Preconditions The subscriber is a valid subscriber At least one valid subscriber manager is in the system Steps The subscriber registers itself with the subscriber manager. Postconditions The subscriber is registered under the subscriber manager.
"~tc~['▁sub', 'sc', 'ri', 'ber', '▁reg', 'isters', '▁with', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁(', '2.', '1.', '3)', '(', '2.', '2.', '2)', '(', '3.', '2.', '2', '?', ')', '(', '2.', '1.', '2', '?', ')', '▁prec', 'ond', 'itions', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁is', '▁a', '▁val', 'id', '▁sub', 'sc', 'ri', 'ber', '▁at', '▁least', '▁one', '▁val', 'id', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁is', '▁in', '▁the', '▁system', '▁step', 's', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁reg', 'isters', '▁itself', '▁with', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '.', '▁post', 'c', 'ond', 'itions', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁is', '▁registered', '▁under', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '.', '\n']~['▁subsc', 'ri', 'ber', '▁registers', '▁with', '▁subsc', 'ri', 'ber', '▁manager', '▁(2.', '1.', '3)', '(', '2.', '2.', '2)', '(', '3.', '2.', '2', '?)', '(', '2.', '1.', '2', '?)', '▁prec', 'ond', 'itions', '▁the', '▁subsc', 'ri', 'ber', '▁is', '▁a', '▁valid', '▁subsc', 'ri', 'ber', '▁at', '▁least', '▁one', '▁valid', '▁subsc', 'ri', 'ber', '▁manager', '▁is', '▁in', '▁the', '▁system', '▁steps', '▁the', '▁subsc', 'ri', 'ber', '▁registers', '▁itself', '▁with', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '.', '▁post', 'cond', 'itions', '▁the', '▁subsc', 'ri', 'ber', '▁is', '▁registered', '▁under', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '.', '\n']~['▁subscriber', '▁registers', '▁with', '▁subscriber', '▁manager', '▁(2.', '1.', '3)', '(', '2.', '2.', '2)', '(', '3.', '2.2', '?)', '(', '2.', '1.2', '?)', '▁preconditions', '▁the', '▁subscriber', '▁is', '▁a', '▁valid', '▁subscriber', '▁at', '▁least', '▁one', '▁valid', '▁subscriber', '▁manager', '▁is', '▁in', '▁the', '▁system', '▁steps', '▁the', '▁subscriber', '▁registers', '▁itself', '▁with', '▁the', '▁subscriber', '▁manager', '.', '▁post', 'conditions', '▁the', '▁subscriber', '▁is', '▁registered', '▁under', '▁the', '▁subscriber', '▁manager', '.', '\n']~subscrib regist subscrib manag precondit subscrib valid subscrib least one valid subscrib manag system step subscrib regist subscrib manag postcondit subscrib regist subscrib manag
46~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC163.txt~TC163.txt~"Events are displayed in the order in which they are received.(6.1) Preconditions: At least three event messages received for a single artifact. Steps: The user activates the notification process tool. The user selects the artifact. Event messages are displayed in the order in which they were received. Postconditions: none
"~tc~['▁events', '▁are', '▁display', 'ed', '▁in', '▁the', '▁order', '▁in', '▁which', '▁they', '▁are', '▁received', '.', '(', '6.', '1)', '▁prec', 'ond', 'itions', ':', '▁at', '▁least', '▁three', '▁event', '▁mess', 'ages', '▁received', '▁for', '▁a', '▁single', '▁art', 'if', 'act', '.', '▁step', 's', ':', '▁the', '▁user', '▁activ', 'ates', '▁the', '▁not', 'ification', '▁process', '▁to', 'ol', '.', '▁the', '▁user', '▁select', 's', '▁the', '▁art', 'if', 'act', '.', '▁event', '▁mess', 'ages', '▁are', '▁display', 'ed', '▁in', '▁the', '▁order', '▁in', '▁which', '▁they', '▁were', '▁received', '.', '▁post', 'c', 'ond', 'itions', ':', '▁none', '\n']~['▁events', '▁are', '▁displayed', '▁in', '▁the', '▁order', '▁in', '▁which', '▁they', '▁are', '▁received', '.(', '6.', '1)', '▁prec', 'ond', 'itions', ':', '▁at', '▁least', '▁three', '▁event', '▁messages', '▁received', '▁for', '▁a', '▁single', '▁artif', 'act', '.', '▁steps', ':', '▁the', '▁user', '▁activ', 'ates', '▁the', '▁not', 'ification', '▁process', '▁tool', '.', '▁the', '▁user', '▁select', 's', '▁the', '▁artif', 'act', '.', '▁event', '▁messages', '▁are', '▁displayed', '▁in', '▁the', '▁order', '▁in', '▁which', '▁they', '▁were', '▁received', '.', '▁post', 'cond', 'itions', ':', '▁none', '\n']~['▁events', '▁are', '▁displayed', '▁in', '▁the', '▁order', '▁in', '▁which', '▁they', '▁are', '▁received', '.(', '6.', '1)', '▁preconditions', ':', '▁at', '▁least', '▁three', '▁event', '▁messages', '▁received', '▁for', '▁a', '▁single', '▁artifact', '.', '▁steps', ':', '▁the', '▁user', '▁activates', '▁the', '▁notification', '▁process', '▁tool', '.', '▁the', '▁user', '▁selects', '▁the', '▁artifact', '.', '▁event', '▁messages', '▁are', '▁displayed', '▁in', '▁the', '▁order', '▁in', '▁which', '▁they', '▁were', '▁received', '.', '▁post', 'conditions', ':', '▁none', '\n']~event display order receiv precondit least three event messag receiv singl artifact step user activ notif process tool user select artifact event messag display order receiv postcondit none
47~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC152.txt~TC152.txt~"Speculative event message is processed by subscriber manager (3.4.2)(3.4.3)(3.4.4)(3.4.5) Preconditions: A speculative query has been issued and sent to the relevant subscriber manager. Steps: The subscriber manager receives the speculative event message. The subscriber manager parses the event message to determine that it is a speculative event. The subscriber manager injects values into the relevant performance model  re-executes the model  collates the results  restores the model to its prior state  and returns the results. Postconditions A response is sent to the speculative event. The performance model is restored to its original state
"~tc~['▁spec', 'ul', 'ative', '▁event', '▁message', '▁is', '▁process', 'ed', '▁by', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁(', '3.', '4.', '2)', '(', '3.', '4.', '3)', '(', '3.', '4.', '4)', '(', '3.', '4.', '5)', '▁prec', 'ond', 'itions', ':', '▁a', '▁spec', 'ul', 'ative', '▁qu', 'ery', '▁has', '▁been', '▁issued', '▁and', '▁sent', '▁to', '▁the', '▁rele', 'vant', '▁sub', 'sc', 'ri', 'ber', '▁manager', '.', '▁step', 's', ':', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁rece', 'ives', '▁the', '▁spec', 'ul', 'ative', '▁event', '▁message', '.', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁par', 'ses', '▁the', '▁event', '▁message', '▁to', '▁determine', '▁that', '▁it', '▁is', '▁a', '▁spec', 'ul', 'ative', '▁event', '.', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁in', 'ject', 's', '▁values', '▁into', '▁the', '▁rele', 'vant', '▁performance', '▁model', '▁re', '-', 'ex', 'ecut', 'es', '▁the', '▁model', '▁coll', 'ates', '▁the', '▁results', '▁rest', 'ores', '▁the', '▁model', '▁to', '▁its', '▁prior', '▁state', '▁and', '▁returns', '▁the', '▁results', '.', '▁post', 'c', 'ond', 'itions', '▁a', '▁response', '▁is', '▁sent', '▁to', '▁the', '▁spec', 'ul', 'ative', '▁event', '.', '▁the', '▁performance', '▁model', '▁is', '▁restored', '▁to', '▁its', '▁original', '▁state', '\n']~['▁speculative', '▁event', '▁message', '▁is', '▁processed', '▁by', '▁subsc', 'ri', 'ber', '▁manager', '▁(3.', '4.', '2)', '(', '3.', '4.', '3)', '(', '3.', '4.', '4)', '(', '3.', '4.', '5)', '▁prec', 'ond', 'itions', ':', '▁a', '▁speculative', '▁query', '▁has', '▁been', '▁issued', '▁and', '▁sent', '▁to', '▁the', '▁relevant', '▁subsc', 'ri', 'ber', '▁manager', '.', '▁steps', ':', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁receives', '▁the', '▁speculative', '▁event', '▁message', '.', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁par', 'ses', '▁the', '▁event', '▁message', '▁to', '▁determine', '▁that', '▁it', '▁is', '▁a', '▁speculative', '▁event', '.', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁inject', 's', '▁values', '▁into', '▁the', '▁relevant', '▁performance', '▁model', '▁re', '-', 'ex', 'ecut', 'es', '▁the', '▁model', '▁coll', 'ates', '▁the', '▁results', '▁rest', 'ores', '▁the', '▁model', '▁to', '▁its', '▁prior', '▁state', '▁and', '▁returns', '▁the', '▁results', '.', '▁post', 'cond', 'itions', '▁a', '▁response', '▁is', '▁sent', '▁to', '▁the', '▁speculative', '▁event', '.', '▁the', '▁performance', '▁model', '▁is', '▁restored', '▁to', '▁its', '▁original', '▁state', '\n']~['▁speculative', '▁event', '▁message', '▁is', '▁processed', '▁by', '▁subscriber', '▁manager', '▁(3.', '4.', '2)', '(', '3.', '4.', '3)', '(', '3.', '4.', '4)', '(', '3.', '4.', '5)', '▁preconditions', ':', '▁a', '▁speculative', '▁query', '▁has', '▁been', '▁issued', '▁and', '▁sent', '▁to', '▁the', '▁relevant', '▁subscriber', '▁manager', '.', '▁steps', ':', '▁the', '▁subscriber', '▁manager', '▁receives', '▁the', '▁speculative', '▁event', '▁message', '.', '▁the', '▁subscriber', '▁manager', '▁par', 'ses', '▁the', '▁event', '▁message', '▁to', '▁determine', '▁that', '▁it', '▁is', '▁a', '▁speculative', '▁event', '.', '▁the', '▁subscriber', '▁manager', '▁injects', '▁values', '▁into', '▁the', '▁relevant', '▁performance', '▁model', '▁re', '-', 'execut', 'es', '▁the', '▁model', '▁coll', 'ates', '▁the', '▁results', '▁restores', '▁the', '▁model', '▁to', '▁its', '▁prior', '▁state', '▁and', '▁returns', '▁the', '▁results', '.', '▁post', 'conditions', '▁a', '▁response', '▁is', '▁sent', '▁to', '▁the', '▁speculative', '▁event', '.', '▁the', '▁performance', '▁model', '▁is', '▁restored', '▁to', '▁its', '▁original', '▁state', '\n']~specul event messag process subscrib manag precondit specul queri issu sent relev subscrib manag step subscrib manag receiv specul event messag subscrib manag pars event messag determin specul event subscrib manag inject valu relev perform model execut model collat result restor model prior state return result postcondit respons sent specul event perform model restor origin state
48~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC156.txt~TC156.txt~"Modify a requirement (4.1)(4.1.4) Preconditions: The trigger driver is running. At least one requirement is defined Steps The user specifies a modify event. The user selects an existing requirement and changes it. Post conditions: The requirement is changed. A modify event message is sent. Existing links from the original requirement are changed to tentative status.
"~tc~['▁mod', 'ify', '▁a', '▁require', 'ment', '▁(', '4.', '1)', '(', '4.', '1.', '4)', '▁prec', 'ond', 'itions', ':', '▁the', '▁tr', 'ig', 'ger', '▁driver', '▁is', '▁running', '.', '▁at', '▁least', '▁one', '▁require', 'ment', '▁is', '▁defined', '▁step', 's', '▁the', '▁user', '▁spec', 'if', 'ies', '▁a', '▁mod', 'ify', '▁event', '.', '▁the', '▁user', '▁select', 's', '▁an', '▁existing', '▁require', 'ment', '▁and', '▁changes', '▁it', '.', '▁post', '▁conditions', ':', '▁the', '▁require', 'ment', '▁is', '▁changed', '.', '▁a', '▁mod', 'ify', '▁event', '▁message', '▁is', '▁sent', '.', '▁existing', '▁links', '▁from', '▁the', '▁original', '▁require', 'ment', '▁are', '▁changed', '▁to', '▁t', 'ent', 'ative', '▁status', '.', '\n']~['▁modify', '▁a', '▁requirement', '▁(4.', '1)', '(', '4.', '1.', '4)', '▁prec', 'ond', 'itions', ':', '▁the', '▁trigger', '▁driver', '▁is', '▁running', '.', '▁at', '▁least', '▁one', '▁requirement', '▁is', '▁defined', '▁steps', '▁the', '▁user', '▁spec', 'ifies', '▁a', '▁modify', '▁event', '.', '▁the', '▁user', '▁select', 's', '▁an', '▁existing', '▁requirement', '▁and', '▁changes', '▁it', '.', '▁post', '▁conditions', ':', '▁the', '▁requirement', '▁is', '▁changed', '.', '▁a', '▁modify', '▁event', '▁message', '▁is', '▁sent', '.', '▁existing', '▁links', '▁from', '▁the', '▁original', '▁requirement', '▁are', '▁changed', '▁to', '▁tent', 'ative', '▁status', '.', '\n']~['▁modify', '▁a', '▁requirement', '▁(4.', '1)', '(', '4.', '1.', '4)', '▁preconditions', ':', '▁the', '▁trigger', '▁driver', '▁is', '▁running', '.', '▁at', '▁least', '▁one', '▁requirement', '▁is', '▁defined', '▁steps', '▁the', '▁user', '▁specifies', '▁a', '▁modify', '▁event', '.', '▁the', '▁user', '▁selects', '▁an', '▁existing', '▁requirement', '▁and', '▁changes', '▁it', '.', '▁post', '▁conditions', ':', '▁the', '▁requirement', '▁is', '▁changed', '.', '▁a', '▁modify', '▁event', '▁message', '▁is', '▁sent', '.', '▁existing', '▁links', '▁from', '▁the', '▁original', '▁requirement', '▁are', '▁changed', '▁to', '▁tentative', '▁status', '.', '\n']~modifi requir precondit trigger driver run least one requir defin step user specifi modifi event user select exist requir chang post condit requir chang modifi event messag sent exist link origin requir chang tentat status
49~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC162.txt~TC162.txt~"Event server constructs composite event message for a speculate event (5.6)(5.6.1)(5.6.2)(5.6.3)(5.6.4) Preconditions: The event server has received a speculative event message. The event server has identified a list of subscribers. Steps: For each identified subscriber the event server identifies all additional requirements that are linked to the same artifact. The event server polls DOORS to obtain additional quantitative information for each of these additional requirements. The event server constructs a composite event message that includes the requirement that has changed  plus quantitative constraints obtained from other related requirements. The customized event message is sent to the relevant subscriber. 
"~tc~['▁event', '▁ser', 'ver', '▁construct', 's', '▁compos', 'ite', '▁event', '▁message', '▁for', '▁a', '▁spec', 'ulate', '▁event', '▁(', '5.', '6)', '(', '5.', '6.', '1)', '(', '5.', '6.', '2)', '(', '5.', '6.', '3)', '(', '5.', '6.', '4)', '▁prec', 'ond', 'itions', ':', '▁the', '▁event', '▁ser', 'ver', '▁has', '▁received', '▁a', '▁spec', 'ul', 'ative', '▁event', '▁message', '.', '▁the', '▁event', '▁ser', 'ver', '▁has', '▁identified', '▁a', '▁list', '▁of', '▁sub', 'sc', 'rib', 'ers', '.', '▁step', 's', ':', '▁for', '▁each', '▁identified', '▁sub', 'sc', 'ri', 'ber', '▁the', '▁event', '▁ser', 'ver', '▁ident', 'if', 'ies', '▁all', '▁additional', '▁requirements', '▁that', '▁are', '▁linked', '▁to', '▁the', '▁same', '▁art', 'if', 'act', '.', '▁the', '▁event', '▁ser', 'ver', '▁pol', 'ls', '▁do', 'ors', '▁to', '▁obt', 'ain', '▁additional', '▁quant', 'it', 'ative', '▁information', '▁for', '▁each', '▁of', '▁these', '▁additional', '▁requirements', '.', '▁the', '▁event', '▁ser', 'ver', '▁construct', 's', '▁a', '▁compos', 'ite', '▁event', '▁message', '▁that', '▁includes', '▁the', '▁require', 'ment', '▁that', '▁has', '▁changed', '▁plus', '▁quant', 'it', 'ative', '▁constr', 'aints', '▁obtained', '▁from', '▁other', '▁related', '▁requirements', '.', '▁the', '▁custom', 'ized', '▁event', '▁message', '▁is', '▁sent', '▁to', '▁the', '▁rele', 'vant', '▁sub', 'sc', 'ri', 'ber', '.', '▁', '\n']~['▁event', '▁server', '▁construct', 's', '▁composite', '▁event', '▁message', '▁for', '▁a', '▁spec', 'ulate', '▁event', '▁(5.', '6)', '(', '5.', '6.', '1)', '(', '5.', '6.', '2)', '(', '5.', '6.', '3)', '(', '5.', '6.', '4)', '▁prec', 'ond', 'itions', ':', '▁the', '▁event', '▁server', '▁has', '▁received', '▁a', '▁speculative', '▁event', '▁message', '.', '▁the', '▁event', '▁server', '▁has', '▁identified', '▁a', '▁list', '▁of', '▁subscribers', '.', '▁steps', ':', '▁for', '▁each', '▁identified', '▁subsc', 'ri', 'ber', '▁the', '▁event', '▁server', '▁identifies', '▁all', '▁additional', '▁requirements', '▁that', '▁are', '▁linked', '▁to', '▁the', '▁same', '▁artif', 'act', '.', '▁the', '▁event', '▁server', '▁polls', '▁doors', '▁to', '▁obtain', '▁additional', '▁quantitative', '▁information', '▁for', '▁each', '▁of', '▁these', '▁additional', '▁requirements', '.', '▁the', '▁event', '▁server', '▁construct', 's', '▁a', '▁composite', '▁event', '▁message', '▁that', '▁includes', '▁the', '▁requirement', '▁that', '▁has', '▁changed', '▁plus', '▁quantitative', '▁constraints', '▁obtained', '▁from', '▁other', '▁related', '▁requirements', '.', '▁the', '▁custom', 'ized', '▁event', '▁message', '▁is', '▁sent', '▁to', '▁the', '▁relevant', '▁subsc', 'ri', 'ber', '.', '▁', '\n']~['▁event', '▁server', '▁constructs', '▁composite', '▁event', '▁message', '▁for', '▁a', '▁speculate', '▁event', '▁(5.', '6)', '(', '5.', '6.', '1)', '(', '5.', '6.', '2)', '(', '5.', '6.', '3)', '(', '5.', '6.', '4)', '▁preconditions', ':', '▁the', '▁event', '▁server', '▁has', '▁received', '▁a', '▁speculative', '▁event', '▁message', '.', '▁the', '▁event', '▁server', '▁has', '▁identified', '▁a', '▁list', '▁of', '▁subscribers', '.', '▁steps', ':', '▁for', '▁each', '▁identified', '▁subscriber', '▁the', '▁event', '▁server', '▁identifies', '▁all', '▁additional', '▁requirements', '▁that', '▁are', '▁linked', '▁to', '▁the', '▁same', '▁artifact', '.', '▁the', '▁event', '▁server', '▁polls', '▁doors', '▁to', '▁obtain', '▁additional', '▁quantitative', '▁information', '▁for', '▁each', '▁of', '▁these', '▁additional', '▁requirements', '.', '▁the', '▁event', '▁server', '▁constructs', '▁a', '▁composite', '▁event', '▁message', '▁that', '▁includes', '▁the', '▁requirement', '▁that', '▁has', '▁changed', '▁plus', '▁quantitative', '▁constraints', '▁obtained', '▁from', '▁other', '▁related', '▁requirements', '.', '▁the', '▁customized', '▁event', '▁message', '▁is', '▁sent', '▁to', '▁the', '▁relevant', '▁subscriber', '.', '▁', '\n']~event server construct composit event messag specul event precondit event server receiv specul event messag event server identifi list subscrib step identifi subscrib event server identifi addit requir link artifact event server poll door obtain addit quantit inform addit requir event server construct composit event messag includ requir chang plus quantit constraint obtain relat requir custom event messag sent relev subscrib
50~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC158.txt~TC158.txt~"Merge two or more requirements (4.1)(4.1.6) Preconditions: The trigger driver is running. At least two requirements are defined Steps The user specifies a merge event. The user specifies two or more requirements to merge. Post conditions: The requirements are merged. A merge event message is sent. Existing links from the original requirements are assigned to the newly merged requirement.
"~tc~['▁mer', 'ge', '▁two', '▁or', '▁more', '▁requirements', '▁(', '4.', '1)', '(', '4.', '1.', '6)', '▁prec', 'ond', 'itions', ':', '▁the', '▁tr', 'ig', 'ger', '▁driver', '▁is', '▁running', '.', '▁at', '▁least', '▁two', '▁requirements', '▁are', '▁defined', '▁step', 's', '▁the', '▁user', '▁spec', 'if', 'ies', '▁a', '▁mer', 'ge', '▁event', '.', '▁the', '▁user', '▁spec', 'if', 'ies', '▁two', '▁or', '▁more', '▁requirements', '▁to', '▁mer', 'ge', '.', '▁post', '▁conditions', ':', '▁the', '▁requirements', '▁are', '▁merged', '.', '▁a', '▁mer', 'ge', '▁event', '▁message', '▁is', '▁sent', '.', '▁existing', '▁links', '▁from', '▁the', '▁original', '▁requirements', '▁are', '▁assigned', '▁to', '▁the', '▁newly', '▁merged', '▁require', 'ment', '.', '\n']~['▁merge', '▁two', '▁or', '▁more', '▁requirements', '▁(4.', '1)', '(', '4.', '1.', '6)', '▁prec', 'ond', 'itions', ':', '▁the', '▁trigger', '▁driver', '▁is', '▁running', '.', '▁at', '▁least', '▁two', '▁requirements', '▁are', '▁defined', '▁steps', '▁the', '▁user', '▁spec', 'ifies', '▁a', '▁merge', '▁event', '.', '▁the', '▁user', '▁spec', 'ifies', '▁two', '▁or', '▁more', '▁requirements', '▁to', '▁merge', '.', '▁post', '▁conditions', ':', '▁the', '▁requirements', '▁are', '▁merged', '.', '▁a', '▁merge', '▁event', '▁message', '▁is', '▁sent', '.', '▁existing', '▁links', '▁from', '▁the', '▁original', '▁requirements', '▁are', '▁assigned', '▁to', '▁the', '▁newly', '▁merged', '▁requirement', '.', '\n']~['▁merge', '▁two', '▁or', '▁more', '▁requirements', '▁(4.', '1)', '(', '4.', '1.', '6)', '▁preconditions', ':', '▁the', '▁trigger', '▁driver', '▁is', '▁running', '.', '▁at', '▁least', '▁two', '▁requirements', '▁are', '▁defined', '▁steps', '▁the', '▁user', '▁specifies', '▁a', '▁merge', '▁event', '.', '▁the', '▁user', '▁specifies', '▁two', '▁or', '▁more', '▁requirements', '▁to', '▁merge', '.', '▁post', '▁conditions', ':', '▁the', '▁requirements', '▁are', '▁merged', '.', '▁a', '▁merge', '▁event', '▁message', '▁is', '▁sent', '.', '▁existing', '▁links', '▁from', '▁the', '▁original', '▁requirements', '▁are', '▁assigned', '▁to', '▁the', '▁newly', '▁merged', '▁requirement', '.', '\n']~merg two requir precondit trigger driver run least two requir defin step user specifi merg event user specifi two requir merg post condit requir merg merg event messag sent exist link origin requir assign newli merg requir
51~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC160.txt~TC160.txt~"Event server identifies subscribers (5.3) Preconditions: The event server has received an event message. Steps: The event server identifies the impacted requirements from the received event message. The event server searches for subscribers to those impacted requirements. Post conditions All relevant subscribers are identified.
"~tc~['▁event', '▁ser', 'ver', '▁ident', 'if', 'ies', '▁sub', 'sc', 'rib', 'ers', '▁(', '5.', '3)', '▁prec', 'ond', 'itions', ':', '▁the', '▁event', '▁ser', 'ver', '▁has', '▁received', '▁an', '▁event', '▁message', '.', '▁step', 's', ':', '▁the', '▁event', '▁ser', 'ver', '▁ident', 'if', 'ies', '▁the', '▁impact', 'ed', '▁requirements', '▁from', '▁the', '▁received', '▁event', '▁message', '.', '▁the', '▁event', '▁ser', 'ver', '▁se', 'ar', 'ches', '▁for', '▁sub', 'sc', 'rib', 'ers', '▁to', '▁those', '▁impact', 'ed', '▁requirements', '.', '▁post', '▁conditions', '▁all', '▁rele', 'vant', '▁sub', 'sc', 'rib', 'ers', '▁are', '▁identified', '.', '\n']~['▁event', '▁server', '▁identifies', '▁subscribers', '▁(5.', '3)', '▁prec', 'ond', 'itions', ':', '▁the', '▁event', '▁server', '▁has', '▁received', '▁an', '▁event', '▁message', '.', '▁steps', ':', '▁the', '▁event', '▁server', '▁identifies', '▁the', '▁impacted', '▁requirements', '▁from', '▁the', '▁received', '▁event', '▁message', '.', '▁the', '▁event', '▁server', '▁searches', '▁for', '▁subscribers', '▁to', '▁those', '▁impacted', '▁requirements', '.', '▁post', '▁conditions', '▁all', '▁relevant', '▁subscribers', '▁are', '▁identified', '.', '\n']~['▁event', '▁server', '▁identifies', '▁subscribers', '▁(5.', '3)', '▁preconditions', ':', '▁the', '▁event', '▁server', '▁has', '▁received', '▁an', '▁event', '▁message', '.', '▁steps', ':', '▁the', '▁event', '▁server', '▁identifies', '▁the', '▁impacted', '▁requirements', '▁from', '▁the', '▁received', '▁event', '▁message', '.', '▁the', '▁event', '▁server', '▁searches', '▁for', '▁subscribers', '▁to', '▁those', '▁impacted', '▁requirements', '.', '▁post', '▁conditions', '▁all', '▁relevant', '▁subscribers', '▁are', '▁identified', '.', '\n']~event server identifi subscrib precondit event server receiv event messag step event server identifi impact requir receiv event messag event server search subscrib impact requir post condit relev subscrib identifi
52~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC141.txt~TC141.txt~"Establish Trace  (2.1.1)(2.2.1) Preconditions Subscriber is registered Steps Subscriber establishes a trace between a UML artifact and a requirement. Postconditions A trace is established between the UML artifact and the requirement.
"~tc~['▁establish', '▁tr', 'ace', '▁(', '2.', '1.', '1)', '(', '2.', '2.', '1)', '▁prec', 'ond', 'itions', '▁sub', 'sc', 'ri', 'ber', '▁is', '▁registered', '▁step', 's', '▁sub', 'sc', 'ri', 'ber', '▁estab', 'l', 'ishes', '▁a', '▁tr', 'ace', '▁between', '▁a', '▁', 'um', 'l', '▁art', 'if', 'act', '▁and', '▁a', '▁require', 'ment', '.', '▁post', 'c', 'ond', 'itions', '▁a', '▁tr', 'ace', '▁is', '▁established', '▁between', '▁the', '▁', 'um', 'l', '▁art', 'if', 'act', '▁and', '▁the', '▁require', 'ment', '.', '\n']~['▁establish', '▁trace', '▁(2.', '1.', '1)', '(', '2.', '2.', '1)', '▁prec', 'ond', 'itions', '▁subsc', 'ri', 'ber', '▁is', '▁registered', '▁steps', '▁subsc', 'ri', 'ber', '▁establishes', '▁a', '▁trace', '▁between', '▁a', '▁um', 'l', '▁artif', 'act', '▁and', '▁a', '▁requirement', '.', '▁post', 'cond', 'itions', '▁a', '▁trace', '▁is', '▁established', '▁between', '▁the', '▁um', 'l', '▁artif', 'act', '▁and', '▁the', '▁requirement', '.', '\n']~['▁establish', '▁trace', '▁(2.', '1.', '1)', '(', '2.', '2.', '1)', '▁preconditions', '▁subscriber', '▁is', '▁registered', '▁steps', '▁subscriber', '▁establishes', '▁a', '▁trace', '▁between', '▁a', '▁uml', '▁artifact', '▁and', '▁a', '▁requirement', '.', '▁post', 'conditions', '▁a', '▁trace', '▁is', '▁established', '▁between', '▁the', '▁uml', '▁artifact', '▁and', '▁the', '▁requirement', '.', '\n']~establish trace precondit subscrib regist step subscrib establish trace uml artifact requir postcondit trace establish uml artifact requir
53~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC145.txt~TC145.txt~"Delete subscriptions (2.2.3) Preconditions At least one subscription has been established in the system Steps The user deletes the subscription Postconditions The subscription has been deleted.
"~tc~['▁de', 'lete', '▁sub', 'sc', 'ript', 'ions', '▁(', '2.', '2.', '3)', '▁prec', 'ond', 'itions', '▁at', '▁least', '▁one', '▁sub', 'sc', 'ription', '▁has', '▁been', '▁established', '▁in', '▁the', '▁system', '▁step', 's', '▁the', '▁user', '▁de', 'let', 'es', '▁the', '▁sub', 'sc', 'ription', '▁post', 'c', 'ond', 'itions', '▁the', '▁sub', 'sc', 'ription', '▁has', '▁been', '▁de', 'le', 'ted', '.', '\n']~['▁de', 'lete', '▁subsc', 'riptions', '▁(2.', '2.', '3)', '▁prec', 'ond', 'itions', '▁at', '▁least', '▁one', '▁subscription', '▁has', '▁been', '▁established', '▁in', '▁the', '▁system', '▁steps', '▁the', '▁user', '▁de', 'let', 'es', '▁the', '▁subscription', '▁post', 'cond', 'itions', '▁the', '▁subscription', '▁has', '▁been', '▁deleted', '.', '\n']~['▁delete', '▁subscriptions', '▁(2.', '2.', '3)', '▁preconditions', '▁at', '▁least', '▁one', '▁subscription', '▁has', '▁been', '▁established', '▁in', '▁the', '▁system', '▁steps', '▁the', '▁user', '▁deletes', '▁the', '▁subscription', '▁post', 'conditions', '▁the', '▁subscription', '▁has', '▁been', '▁deleted', '.', '\n']~delet subscript precondit least one subscript establish system step user delet subscript postcondit subscript delet
54~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC161.txt~TC161.txt~"Notify subscribers when an evolutionary event occurs  (5.5) Preconditions: The event server has received an evolutionary event message. The event server has identified a list of subscribers. Steps: The event server identifies the subscriber manager for each subscriber. The event server identifies the IP address and port for each relevant subscriber manager. The event server builds a notification event message and sends it to each relevant subscriber manager. Postconditions: The event message is received by each relevant subscriber manager or behalf of its managed subscribers.
"~tc~['▁not', 'ify', '▁sub', 'sc', 'rib', 'ers', '▁when', '▁an', '▁evolution', 'ary', '▁event', '▁occurs', '▁(', '5.', '5)', '▁prec', 'ond', 'itions', ':', '▁the', '▁event', '▁ser', 'ver', '▁has', '▁received', '▁an', '▁evolution', 'ary', '▁event', '▁message', '.', '▁the', '▁event', '▁ser', 'ver', '▁has', '▁identified', '▁a', '▁list', '▁of', '▁sub', 'sc', 'rib', 'ers', '.', '▁step', 's', ':', '▁the', '▁event', '▁ser', 'ver', '▁ident', 'if', 'ies', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁for', '▁each', '▁sub', 'sc', 'ri', 'ber', '.', '▁the', '▁event', '▁ser', 'ver', '▁ident', 'if', 'ies', '▁the', '▁ip', '▁address', '▁and', '▁port', '▁for', '▁each', '▁rele', 'vant', '▁sub', 'sc', 'ri', 'ber', '▁manager', '.', '▁the', '▁event', '▁ser', 'ver', '▁build', 's', '▁a', '▁not', 'ification', '▁event', '▁message', '▁and', '▁s', 'ends', '▁it', '▁to', '▁each', '▁rele', 'vant', '▁sub', 'sc', 'ri', 'ber', '▁manager', '.', '▁post', 'c', 'ond', 'itions', ':', '▁the', '▁event', '▁message', '▁is', '▁received', '▁by', '▁each', '▁rele', 'vant', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁or', '▁beh', 'al', 'f', '▁of', '▁its', '▁managed', '▁sub', 'sc', 'rib', 'ers', '.', '\n']~['▁not', 'ify', '▁subscribers', '▁when', '▁an', '▁evolutionary', '▁event', '▁occurs', '▁(5.', '5)', '▁prec', 'ond', 'itions', ':', '▁the', '▁event', '▁server', '▁has', '▁received', '▁an', '▁evolutionary', '▁event', '▁message', '.', '▁the', '▁event', '▁server', '▁has', '▁identified', '▁a', '▁list', '▁of', '▁subscribers', '.', '▁steps', ':', '▁the', '▁event', '▁server', '▁identifies', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁for', '▁each', '▁subsc', 'ri', 'ber', '.', '▁the', '▁event', '▁server', '▁identifies', '▁the', '▁ip', '▁address', '▁and', '▁port', '▁for', '▁each', '▁relevant', '▁subsc', 'ri', 'ber', '▁manager', '.', '▁the', '▁event', '▁server', '▁builds', '▁a', '▁not', 'ification', '▁event', '▁message', '▁and', '▁sends', '▁it', '▁to', '▁each', '▁relevant', '▁subsc', 'ri', 'ber', '▁manager', '.', '▁post', 'cond', 'itions', ':', '▁the', '▁event', '▁message', '▁is', '▁received', '▁by', '▁each', '▁relevant', '▁subsc', 'ri', 'ber', '▁manager', '▁or', '▁behalf', '▁of', '▁its', '▁managed', '▁subscribers', '.', '\n']~['▁notify', '▁subscribers', '▁when', '▁an', '▁evolutionary', '▁event', '▁occurs', '▁(5.', '5)', '▁preconditions', ':', '▁the', '▁event', '▁server', '▁has', '▁received', '▁an', '▁evolutionary', '▁event', '▁message', '.', '▁the', '▁event', '▁server', '▁has', '▁identified', '▁a', '▁list', '▁of', '▁subscribers', '.', '▁steps', ':', '▁the', '▁event', '▁server', '▁identifies', '▁the', '▁subscriber', '▁manager', '▁for', '▁each', '▁subscriber', '.', '▁the', '▁event', '▁server', '▁identifies', '▁the', '▁ip', '▁address', '▁and', '▁port', '▁for', '▁each', '▁relevant', '▁subscriber', '▁manager', '.', '▁the', '▁event', '▁server', '▁builds', '▁a', '▁notification', '▁event', '▁message', '▁and', '▁sends', '▁it', '▁to', '▁each', '▁relevant', '▁subscriber', '▁manager', '.', '▁post', 'conditions', ':', '▁the', '▁event', '▁message', '▁is', '▁received', '▁by', '▁each', '▁relevant', '▁subscriber', '▁manager', '▁or', '▁behalf', '▁of', '▁its', '▁managed', '▁subscribers', '.', '\n']~notifi subscrib evolutionari event occur precondit event server receiv evolutionari event messag event server identifi list subscrib step event server identifi subscrib manag subscrib event server identifi address port relev subscrib manag event server build notif event messag send relev subscrib manag postcondit event messag receiv relev subscrib manag behalf manag subscrib
55~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC157.txt~TC157.txt~"Delete a requirement (4.1)(4.1.5) Preconditions: The trigger driver is running. At least one requirement is defined Steps The user specifies a delete event. The user selects an existing requirement and deletes it. Post conditions: The status of the requirement is set to obsolete. A delete event message is sent. Existing links from the obsolete requirement are set to tentative status.
"~tc~['▁de', 'lete', '▁a', '▁require', 'ment', '▁(', '4.', '1)', '(', '4.', '1.', '5)', '▁prec', 'ond', 'itions', ':', '▁the', '▁tr', 'ig', 'ger', '▁driver', '▁is', '▁running', '.', '▁at', '▁least', '▁one', '▁require', 'ment', '▁is', '▁defined', '▁step', 's', '▁the', '▁user', '▁spec', 'if', 'ies', '▁a', '▁de', 'lete', '▁event', '.', '▁the', '▁user', '▁select', 's', '▁an', '▁existing', '▁require', 'ment', '▁and', '▁de', 'let', 'es', '▁it', '.', '▁post', '▁conditions', ':', '▁the', '▁status', '▁of', '▁the', '▁require', 'ment', '▁is', '▁set', '▁to', '▁ob', 'so', 'lete', '.', '▁a', '▁de', 'lete', '▁event', '▁message', '▁is', '▁sent', '.', '▁existing', '▁links', '▁from', '▁the', '▁ob', 'so', 'lete', '▁require', 'ment', '▁are', '▁set', '▁to', '▁t', 'ent', 'ative', '▁status', '.', '\n']~['▁de', 'lete', '▁a', '▁requirement', '▁(4.', '1)', '(', '4.', '1.', '5)', '▁prec', 'ond', 'itions', ':', '▁the', '▁trigger', '▁driver', '▁is', '▁running', '.', '▁at', '▁least', '▁one', '▁requirement', '▁is', '▁defined', '▁steps', '▁the', '▁user', '▁spec', 'ifies', '▁a', '▁de', 'lete', '▁event', '.', '▁the', '▁user', '▁select', 's', '▁an', '▁existing', '▁requirement', '▁and', '▁de', 'let', 'es', '▁it', '.', '▁post', '▁conditions', ':', '▁the', '▁status', '▁of', '▁the', '▁requirement', '▁is', '▁set', '▁to', '▁obsolete', '.', '▁a', '▁de', 'lete', '▁event', '▁message', '▁is', '▁sent', '.', '▁existing', '▁links', '▁from', '▁the', '▁obsolete', '▁requirement', '▁are', '▁set', '▁to', '▁tent', 'ative', '▁status', '.', '\n']~['▁delete', '▁a', '▁requirement', '▁(4.', '1)', '(', '4.', '1.', '5)', '▁preconditions', ':', '▁the', '▁trigger', '▁driver', '▁is', '▁running', '.', '▁at', '▁least', '▁one', '▁requirement', '▁is', '▁defined', '▁steps', '▁the', '▁user', '▁specifies', '▁a', '▁delete', '▁event', '.', '▁the', '▁user', '▁selects', '▁an', '▁existing', '▁requirement', '▁and', '▁deletes', '▁it', '.', '▁post', '▁conditions', ':', '▁the', '▁status', '▁of', '▁the', '▁requirement', '▁is', '▁set', '▁to', '▁obsolete', '.', '▁a', '▁delete', '▁event', '▁message', '▁is', '▁sent', '.', '▁existing', '▁links', '▁from', '▁the', '▁obsolete', '▁requirement', '▁are', '▁set', '▁to', '▁tentative', '▁status', '.', '\n']~delet requir precondit trigger driver run least one requir defin step user specifi delet event user select exist requir delet post condit status requir set obsolet delet event messag sent exist link obsolet requir set tentat status
56~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC150.txt~TC150.txt~"Subscriber manager receives speculative event notification (3.2.1)(3.2.3) Preconditions: The subscriber manager has registered subscribers Steps An event notification is sent to the subscriber manager for a registered subscriber. The relevant subscriber manager receives the event notification. Postconditions: The event notification message is processed according to predefined protocols.
"~tc~['▁sub', 'sc', 'ri', 'ber', '▁manager', '▁rece', 'ives', '▁spec', 'ul', 'ative', '▁event', '▁not', 'ification', '▁(', '3.', '2.', '1)', '(', '3.', '2.', '3)', '▁prec', 'ond', 'itions', ':', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁has', '▁registered', '▁sub', 'sc', 'rib', 'ers', '▁step', 's', '▁an', '▁event', '▁not', 'ification', '▁is', '▁sent', '▁to', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁for', '▁a', '▁registered', '▁sub', 'sc', 'ri', 'ber', '.', '▁the', '▁rele', 'vant', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁rece', 'ives', '▁the', '▁event', '▁not', 'ification', '.', '▁post', 'c', 'ond', 'itions', ':', '▁the', '▁event', '▁not', 'ification', '▁message', '▁is', '▁process', 'ed', '▁according', '▁to', '▁pre', 'def', 'ined', '▁prot', 'oc', 'ols', '.', '\n']~['▁subsc', 'ri', 'ber', '▁manager', '▁receives', '▁speculative', '▁event', '▁not', 'ification', '▁(3.', '2.', '1)', '(', '3.', '2.', '3)', '▁prec', 'ond', 'itions', ':', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁has', '▁registered', '▁subscribers', '▁steps', '▁an', '▁event', '▁not', 'ification', '▁is', '▁sent', '▁to', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁for', '▁a', '▁registered', '▁subsc', 'ri', 'ber', '.', '▁the', '▁relevant', '▁subsc', 'ri', 'ber', '▁manager', '▁receives', '▁the', '▁event', '▁not', 'ification', '.', '▁post', 'cond', 'itions', ':', '▁the', '▁event', '▁not', 'ification', '▁message', '▁is', '▁processed', '▁according', '▁to', '▁pre', 'defined', '▁protocols', '.', '\n']~['▁subscriber', '▁manager', '▁receives', '▁speculative', '▁event', '▁notification', '▁(3.', '2.', '1)', '(', '3.', '2.', '3)', '▁preconditions', ':', '▁the', '▁subscriber', '▁manager', '▁has', '▁registered', '▁subscribers', '▁steps', '▁an', '▁event', '▁notification', '▁is', '▁sent', '▁to', '▁the', '▁subscriber', '▁manager', '▁for', '▁a', '▁registered', '▁subscriber', '.', '▁the', '▁relevant', '▁subscriber', '▁manager', '▁receives', '▁the', '▁event', '▁notification', '.', '▁post', 'conditions', ':', '▁the', '▁event', '▁notification', '▁message', '▁is', '▁processed', '▁according', '▁to', '▁predefined', '▁protocols', '.', '\n']~subscrib manag receiv specul event notif precondit subscrib manag regist subscrib step event notif sent subscrib manag regist subscrib relev subscrib manag receiv event notif postcondit event notif messag process accord predefin protocol
57~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC155.txt~TC155.txt~"Refine a requirement (4.1)(4.1.3) Preconditions: The trigger driver is running. At least one requirement is defined. Steps The user specifies a refine event. The user selects an existing requirement and adds an additional requirement related to it. Post conditions: The requirement is refined by adding at least one related requirement. A refine event message is sent. Temporary links are established between the original requirement and its refinements.
"~tc~['▁ref', 'ine', '▁a', '▁require', 'ment', '▁(', '4.', '1)', '(', '4.', '1.', '3)', '▁prec', 'ond', 'itions', ':', '▁the', '▁tr', 'ig', 'ger', '▁driver', '▁is', '▁running', '.', '▁at', '▁least', '▁one', '▁require', 'ment', '▁is', '▁defined', '.', '▁step', 's', '▁the', '▁user', '▁spec', 'if', 'ies', '▁a', '▁ref', 'ine', '▁event', '.', '▁the', '▁user', '▁select', 's', '▁an', '▁existing', '▁require', 'ment', '▁and', '▁add', 's', '▁an', '▁additional', '▁require', 'ment', '▁related', '▁to', '▁it', '.', '▁post', '▁conditions', ':', '▁the', '▁require', 'ment', '▁is', '▁ref', 'ined', '▁by', '▁add', 'ing', '▁at', '▁least', '▁one', '▁related', '▁require', 'ment', '.', '▁a', '▁ref', 'ine', '▁event', '▁message', '▁is', '▁sent', '.', '▁tem', 'porary', '▁links', '▁are', '▁established', '▁between', '▁the', '▁original', '▁require', 'ment', '▁and', '▁its', '▁ref', 'in', 'ements', '.', '\n']~['▁ref', 'ine', '▁a', '▁requirement', '▁(4.', '1)', '(', '4.', '1.', '3)', '▁prec', 'ond', 'itions', ':', '▁the', '▁trigger', '▁driver', '▁is', '▁running', '.', '▁at', '▁least', '▁one', '▁requirement', '▁is', '▁defined', '.', '▁steps', '▁the', '▁user', '▁spec', 'ifies', '▁a', '▁ref', 'ine', '▁event', '.', '▁the', '▁user', '▁select', 's', '▁an', '▁existing', '▁requirement', '▁and', '▁adds', '▁an', '▁additional', '▁requirement', '▁related', '▁to', '▁it', '.', '▁post', '▁conditions', ':', '▁the', '▁requirement', '▁is', '▁refined', '▁by', '▁adding', '▁at', '▁least', '▁one', '▁related', '▁requirement', '.', '▁a', '▁ref', 'ine', '▁event', '▁message', '▁is', '▁sent', '.', '▁temporary', '▁links', '▁are', '▁established', '▁between', '▁the', '▁original', '▁requirement', '▁and', '▁its', '▁ref', 'in', 'ements', '.', '\n']~['▁refine', '▁a', '▁requirement', '▁(4.', '1)', '(', '4.', '1.', '3)', '▁preconditions', ':', '▁the', '▁trigger', '▁driver', '▁is', '▁running', '.', '▁at', '▁least', '▁one', '▁requirement', '▁is', '▁defined', '.', '▁steps', '▁the', '▁user', '▁specifies', '▁a', '▁refine', '▁event', '.', '▁the', '▁user', '▁selects', '▁an', '▁existing', '▁requirement', '▁and', '▁adds', '▁an', '▁additional', '▁requirement', '▁related', '▁to', '▁it', '.', '▁post', '▁conditions', ':', '▁the', '▁requirement', '▁is', '▁refined', '▁by', '▁adding', '▁at', '▁least', '▁one', '▁related', '▁requirement', '.', '▁a', '▁refine', '▁event', '▁message', '▁is', '▁sent', '.', '▁temporary', '▁links', '▁are', '▁established', '▁between', '▁the', '▁original', '▁requirement', '▁and', '▁its', '▁refinements', '.', '\n']~refin requir precondit trigger driver run least one requir defin step user specifi refin event user select exist requir add addit requir relat post condit requir refin least one relat requir refin event messag sent temporari link establish origin requir refin
58~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC159.txt~TC159.txt~"Event server receives message (5.1)(5.2)(5.4) Preconditions: The event server is running and waiting for incoming events at a well known port and IP address. The event trigger issues an event message. Steps The event server receives an event message. The event server parses the event message into its constituent parts. The event server categorizes each event according to whether it is speculative or evolutionary. The event server stores event details in its event log. Post conditions: The event is stored in the log. The event is categorized according to whether it is evolutionary or speculative.
"~tc~['▁event', '▁ser', 'ver', '▁rece', 'ives', '▁message', '▁(', '5.', '1)', '(', '5.', '2)', '(', '5.', '4)', '▁prec', 'ond', 'itions', ':', '▁the', '▁event', '▁ser', 'ver', '▁is', '▁running', '▁and', '▁wa', 'iting', '▁for', '▁inc', 'oming', '▁events', '▁at', '▁a', '▁well', '▁known', '▁port', '▁and', '▁ip', '▁address', '.', '▁the', '▁event', '▁tr', 'ig', 'ger', '▁issues', '▁an', '▁event', '▁message', '.', '▁step', 's', '▁the', '▁event', '▁ser', 'ver', '▁rece', 'ives', '▁an', '▁event', '▁message', '.', '▁the', '▁event', '▁ser', 'ver', '▁par', 'ses', '▁the', '▁event', '▁message', '▁into', '▁its', '▁constitu', 'ent', '▁parts', '.', '▁the', '▁event', '▁ser', 'ver', '▁categ', 'or', 'izes', '▁each', '▁event', '▁according', '▁to', '▁whether', '▁it', '▁is', '▁spec', 'ul', 'ative', '▁or', '▁evolution', 'ary', '.', '▁the', '▁event', '▁ser', 'ver', '▁stores', '▁event', '▁details', '▁in', '▁its', '▁event', '▁log', '.', '▁post', '▁conditions', ':', '▁the', '▁event', '▁is', '▁st', 'ored', '▁in', '▁the', '▁log', '.', '▁the', '▁event', '▁is', '▁categ', 'or', 'ized', '▁according', '▁to', '▁whether', '▁it', '▁is', '▁evolution', 'ary', '▁or', '▁spec', 'ul', 'ative', '.', '\n']~['▁event', '▁server', '▁receives', '▁message', '▁(5.', '1)', '(', '5.', '2)', '(', '5.', '4)', '▁prec', 'ond', 'itions', ':', '▁the', '▁event', '▁server', '▁is', '▁running', '▁and', '▁waiting', '▁for', '▁incoming', '▁events', '▁at', '▁a', '▁well', '▁known', '▁port', '▁and', '▁ip', '▁address', '.', '▁the', '▁event', '▁trigger', '▁issues', '▁an', '▁event', '▁message', '.', '▁steps', '▁the', '▁event', '▁server', '▁receives', '▁an', '▁event', '▁message', '.', '▁the', '▁event', '▁server', '▁par', 'ses', '▁the', '▁event', '▁message', '▁into', '▁its', '▁constituent', '▁parts', '.', '▁the', '▁event', '▁server', '▁categor', 'izes', '▁each', '▁event', '▁according', '▁to', '▁whether', '▁it', '▁is', '▁speculative', '▁or', '▁evolutionary', '.', '▁the', '▁event', '▁server', '▁stores', '▁event', '▁details', '▁in', '▁its', '▁event', '▁log', '.', '▁post', '▁conditions', ':', '▁the', '▁event', '▁is', '▁stored', '▁in', '▁the', '▁log', '.', '▁the', '▁event', '▁is', '▁categorized', '▁according', '▁to', '▁whether', '▁it', '▁is', '▁evolutionary', '▁or', '▁speculative', '.', '\n']~['▁event', '▁server', '▁receives', '▁message', '▁(5.', '1)', '(', '5.', '2)', '(', '5.', '4)', '▁preconditions', ':', '▁the', '▁event', '▁server', '▁is', '▁running', '▁and', '▁waiting', '▁for', '▁incoming', '▁events', '▁at', '▁a', '▁well', '▁known', '▁port', '▁and', '▁ip', '▁address', '.', '▁the', '▁event', '▁trigger', '▁issues', '▁an', '▁event', '▁message', '.', '▁steps', '▁the', '▁event', '▁server', '▁receives', '▁an', '▁event', '▁message', '.', '▁the', '▁event', '▁server', '▁par', 'ses', '▁the', '▁event', '▁message', '▁into', '▁its', '▁constituent', '▁parts', '.', '▁the', '▁event', '▁server', '▁categor', 'izes', '▁each', '▁event', '▁according', '▁to', '▁whether', '▁it', '▁is', '▁speculative', '▁or', '▁evolutionary', '.', '▁the', '▁event', '▁server', '▁stores', '▁event', '▁details', '▁in', '▁its', '▁event', '▁log', '.', '▁post', '▁conditions', ':', '▁the', '▁event', '▁is', '▁stored', '▁in', '▁the', '▁log', '.', '▁the', '▁event', '▁is', '▁categorized', '▁according', '▁to', '▁whether', '▁it', '▁is', '▁evolutionary', '▁or', '▁speculative', '.', '\n']~event server receiv messag precondit event server run wait incom event well known port address event trigger issu event messag step event server receiv event messag event server pars event messag constitu part event server categor event accord whether specul evolutionari event server store event detail event log post condit event store log event categor accord whether evolutionari specul
59~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC165.txt~TC165.txt~"User processes an event message (6.2)(6.3)(6.4) Preconditions: Event messages are displayed for a single artifact. Steps: The user examines the first event message. The user applies any information from the event message to update the artifact accordingly. The user selects which of the tentative links should be made permanent and which ones should be discarded. Postconditions: The links in the event server are changed according to the users directions. Any additional event messages that had previously been sent on the basis of a tentative link  and for which the tentative link has now been eliminated  are removed from the event processing list and display.
"~tc~['▁user', '▁processes', '▁an', '▁event', '▁message', '▁(', '6.', '2)', '(', '6.', '3)', '(', '6.', '4)', '▁prec', 'ond', 'itions', ':', '▁event', '▁mess', 'ages', '▁are', '▁display', 'ed', '▁for', '▁a', '▁single', '▁art', 'if', 'act', '.', '▁step', 's', ':', '▁the', '▁user', '▁exam', 'ines', '▁the', '▁first', '▁event', '▁message', '.', '▁the', '▁user', '▁appl', 'ies', '▁any', '▁information', '▁from', '▁the', '▁event', '▁message', '▁to', '▁upd', 'ate', '▁the', '▁art', 'if', 'act', '▁according', 'ly', '.', '▁the', '▁user', '▁select', 's', '▁which', '▁of', '▁the', '▁t', 'ent', 'ative', '▁links', '▁should', '▁be', '▁made', '▁permanent', '▁and', '▁which', '▁ones', '▁should', '▁be', '▁disc', 'ard', 'ed', '.', '▁post', 'c', 'ond', 'itions', ':', '▁the', '▁links', '▁in', '▁the', '▁event', '▁ser', 'ver', '▁are', '▁changed', '▁according', '▁to', '▁the', '▁users', '▁direct', 'ions', '.', '▁any', '▁additional', '▁event', '▁mess', 'ages', '▁that', '▁had', '▁previously', '▁been', '▁sent', '▁on', '▁the', '▁basis', '▁of', '▁a', '▁t', 'ent', 'ative', '▁link', '▁and', '▁for', '▁which', '▁the', '▁t', 'ent', 'ative', '▁link', '▁has', '▁now', '▁been', '▁eliminated', '▁are', '▁removed', '▁from', '▁the', '▁event', '▁process', 'ing', '▁list', '▁and', '▁display', '.', '\n']~['▁user', '▁processes', '▁an', '▁event', '▁message', '▁(', '6.', '2)', '(', '6.', '3)', '(', '6.', '4)', '▁prec', 'ond', 'itions', ':', '▁event', '▁messages', '▁are', '▁displayed', '▁for', '▁a', '▁single', '▁artif', 'act', '.', '▁steps', ':', '▁the', '▁user', '▁exam', 'ines', '▁the', '▁first', '▁event', '▁message', '.', '▁the', '▁user', '▁applies', '▁any', '▁information', '▁from', '▁the', '▁event', '▁message', '▁to', '▁update', '▁the', '▁artif', 'act', '▁accordingly', '.', '▁the', '▁user', '▁select', 's', '▁which', '▁of', '▁the', '▁tent', 'ative', '▁links', '▁should', '▁be', '▁made', '▁permanent', '▁and', '▁which', '▁ones', '▁should', '▁be', '▁discarded', '.', '▁post', 'cond', 'itions', ':', '▁the', '▁links', '▁in', '▁the', '▁event', '▁server', '▁are', '▁changed', '▁according', '▁to', '▁the', '▁users', '▁directions', '.', '▁any', '▁additional', '▁event', '▁messages', '▁that', '▁had', '▁previously', '▁been', '▁sent', '▁on', '▁the', '▁basis', '▁of', '▁a', '▁tent', 'ative', '▁link', '▁and', '▁for', '▁which', '▁the', '▁tent', 'ative', '▁link', '▁has', '▁now', '▁been', '▁eliminated', '▁are', '▁removed', '▁from', '▁the', '▁event', '▁processing', '▁list', '▁and', '▁display', '.', '\n']~['▁user', '▁processes', '▁an', '▁event', '▁message', '▁(6.', '2)', '(', '6.', '3)', '(', '6.', '4)', '▁preconditions', ':', '▁event', '▁messages', '▁are', '▁displayed', '▁for', '▁a', '▁single', '▁artifact', '.', '▁steps', ':', '▁the', '▁user', '▁examines', '▁the', '▁first', '▁event', '▁message', '.', '▁the', '▁user', '▁applies', '▁any', '▁information', '▁from', '▁the', '▁event', '▁message', '▁to', '▁update', '▁the', '▁artifact', '▁accordingly', '.', '▁the', '▁user', '▁selects', '▁which', '▁of', '▁the', '▁tentative', '▁links', '▁should', '▁be', '▁made', '▁permanent', '▁and', '▁which', '▁ones', '▁should', '▁be', '▁discarded', '.', '▁post', 'conditions', ':', '▁the', '▁links', '▁in', '▁the', '▁event', '▁server', '▁are', '▁changed', '▁according', '▁to', '▁the', '▁users', '▁directions', '.', '▁any', '▁additional', '▁event', '▁messages', '▁that', '▁had', '▁previously', '▁been', '▁sent', '▁on', '▁the', '▁basis', '▁of', '▁a', '▁tentative', '▁link', '▁and', '▁for', '▁which', '▁the', '▁tentative', '▁link', '▁has', '▁now', '▁been', '▁eliminated', '▁are', '▁removed', '▁from', '▁the', '▁event', '▁processing', '▁list', '▁and', '▁display', '.', '\n']~user process event messag precondit event messag display singl artifact step user examin first event messag user appli inform event messag updat artifact accord user select tentat link made perman one discard postcondit link event server chang accord user direct addit event messag previous sent basi tentat link tentat link elimin remov event process list display
60~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC153.txt~TC153.txt~"Add New Requirement (4.1.)(4.1.1) Preconditions: The trigger driver is running. Steps The user specifies a new event. The user adds a new requirement Post conditions: A new event message is sent.
"~tc~['▁add', '▁new', '▁require', 'ment', '▁(', '4.', '1.', ')', '(', '4.', '1.', '1)', '▁prec', 'ond', 'itions', ':', '▁the', '▁tr', 'ig', 'ger', '▁driver', '▁is', '▁running', '.', '▁step', 's', '▁the', '▁user', '▁spec', 'if', 'ies', '▁a', '▁new', '▁event', '.', '▁the', '▁user', '▁add', 's', '▁a', '▁new', '▁require', 'ment', '▁post', '▁conditions', ':', '▁a', '▁new', '▁event', '▁message', '▁is', '▁sent', '.', '\n']~['▁add', '▁new', '▁requirement', '▁(4.', '1.', ')(', '4.', '1.', '1)', '▁prec', 'ond', 'itions', ':', '▁the', '▁trigger', '▁driver', '▁is', '▁running', '.', '▁steps', '▁the', '▁user', '▁spec', 'ifies', '▁a', '▁new', '▁event', '.', '▁the', '▁user', '▁adds', '▁a', '▁new', '▁requirement', '▁post', '▁conditions', ':', '▁a', '▁new', '▁event', '▁message', '▁is', '▁sent', '.', '\n']~['▁add', '▁new', '▁requirement', '▁(4.', '1.', ')(', '4.', '1.', '1)', '▁preconditions', ':', '▁the', '▁trigger', '▁driver', '▁is', '▁running', '.', '▁steps', '▁the', '▁user', '▁specifies', '▁a', '▁new', '▁event', '.', '▁the', '▁user', '▁adds', '▁a', '▁new', '▁requirement', '▁post', '▁conditions', ':', '▁a', '▁new', '▁event', '▁message', '▁is', '▁sent', '.', '\n']~add new requir precondit trigger driver run step user specifi new event user add new requir post condit new event messag sent
61~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC164.txt~TC164.txt~"User attempts to process an event message in the incorrect order (6.1) Preconditions: At least three event messages have been received by a subscriber manager on behalf of a single subscriber. The notification processing tool is running. Steps: The user examines the event messages that have been received for a single subscriber. The user tries to process an event other than the first one received. The system prohibits the user from processing the events in the incorrect order. Post conditions No events are processed.
"~tc~['▁user', '▁attempts', '▁to', '▁process', '▁an', '▁event', '▁message', '▁in', '▁the', '▁inc', 'or', 'rect', '▁order', '▁(', '6.', '1)', '▁prec', 'ond', 'itions', ':', '▁at', '▁least', '▁three', '▁event', '▁mess', 'ages', '▁have', '▁been', '▁received', '▁by', '▁a', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁on', '▁beh', 'al', 'f', '▁of', '▁a', '▁single', '▁sub', 'sc', 'ri', 'ber', '.', '▁the', '▁not', 'ification', '▁process', 'ing', '▁to', 'ol', '▁is', '▁running', '.', '▁step', 's', ':', '▁the', '▁user', '▁exam', 'ines', '▁the', '▁event', '▁mess', 'ages', '▁that', '▁have', '▁been', '▁received', '▁for', '▁a', '▁single', '▁sub', 'sc', 'ri', 'ber', '.', '▁the', '▁user', '▁tries', '▁to', '▁process', '▁an', '▁event', '▁other', '▁than', '▁the', '▁first', '▁one', '▁received', '.', '▁the', '▁system', '▁prohib', 'its', '▁the', '▁user', '▁from', '▁process', 'ing', '▁the', '▁events', '▁in', '▁the', '▁inc', 'or', 'rect', '▁order', '.', '▁post', '▁conditions', '▁no', '▁events', '▁are', '▁process', 'ed', '.', '\n']~['▁user', '▁attempts', '▁to', '▁process', '▁an', '▁event', '▁message', '▁in', '▁the', '▁incorrect', '▁order', '▁(', '6.', '1)', '▁prec', 'ond', 'itions', ':', '▁at', '▁least', '▁three', '▁event', '▁messages', '▁have', '▁been', '▁received', '▁by', '▁a', '▁subsc', 'ri', 'ber', '▁manager', '▁on', '▁behalf', '▁of', '▁a', '▁single', '▁subsc', 'ri', 'ber', '.', '▁the', '▁not', 'ification', '▁processing', '▁tool', '▁is', '▁running', '.', '▁steps', ':', '▁the', '▁user', '▁exam', 'ines', '▁the', '▁event', '▁messages', '▁that', '▁have', '▁been', '▁received', '▁for', '▁a', '▁single', '▁subsc', 'ri', 'ber', '.', '▁the', '▁user', '▁tries', '▁to', '▁process', '▁an', '▁event', '▁other', '▁than', '▁the', '▁first', '▁one', '▁received', '.', '▁the', '▁system', '▁prohib', 'its', '▁the', '▁user', '▁from', '▁processing', '▁the', '▁events', '▁in', '▁the', '▁incorrect', '▁order', '.', '▁post', '▁conditions', '▁no', '▁events', '▁are', '▁processed', '.', '\n']~['▁user', '▁attempts', '▁to', '▁process', '▁an', '▁event', '▁message', '▁in', '▁the', '▁incorrect', '▁order', '▁(6.', '1)', '▁preconditions', ':', '▁at', '▁least', '▁three', '▁event', '▁messages', '▁have', '▁been', '▁received', '▁by', '▁a', '▁subscriber', '▁manager', '▁on', '▁behalf', '▁of', '▁a', '▁single', '▁subscriber', '.', '▁the', '▁notification', '▁processing', '▁tool', '▁is', '▁running', '.', '▁steps', ':', '▁the', '▁user', '▁examines', '▁the', '▁event', '▁messages', '▁that', '▁have', '▁been', '▁received', '▁for', '▁a', '▁single', '▁subscriber', '.', '▁the', '▁user', '▁tries', '▁to', '▁process', '▁an', '▁event', '▁other', '▁than', '▁the', '▁first', '▁one', '▁received', '.', '▁the', '▁system', '▁prohibits', '▁the', '▁user', '▁from', '▁processing', '▁the', '▁events', '▁in', '▁the', '▁incorrect', '▁order', '.', '▁post', '▁conditions', '▁no', '▁events', '▁are', '▁processed', '.', '\n']~user attempt process event messag incorrect order precondit least three event messag receiv subscrib manag behalf singl subscrib notif process tool run step user examin event messag receiv singl subscrib user tri process event first one receiv system prohibit user process event incorrect order post condit event process
62~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC146.txt~TC146.txt~"Subscriber Manager registers with event server (3.1.1) Preconditions A subscriber manager has been created. Steps The subscriber manager registers its IP address  port  and name with the event server Post conditions The subscriber manager is registered with the event server. 
"~tc~['▁sub', 'sc', 'ri', 'ber', '▁manager', '▁reg', 'isters', '▁with', '▁event', '▁ser', 'ver', '▁(', '3.', '1.', '1)', '▁prec', 'ond', 'itions', '▁a', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁has', '▁been', '▁created', '.', '▁step', 's', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁reg', 'isters', '▁its', '▁ip', '▁address', '▁port', '▁and', '▁name', '▁with', '▁the', '▁event', '▁ser', 'ver', '▁post', '▁conditions', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁is', '▁registered', '▁with', '▁the', '▁event', '▁ser', 'ver', '.', '▁', '\n']~['▁subsc', 'ri', 'ber', '▁manager', '▁registers', '▁with', '▁event', '▁server', '▁(3.', '1.', '1)', '▁prec', 'ond', 'itions', '▁a', '▁subsc', 'ri', 'ber', '▁manager', '▁has', '▁been', '▁created', '.', '▁steps', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁registers', '▁its', '▁ip', '▁address', '▁port', '▁and', '▁name', '▁with', '▁the', '▁event', '▁server', '▁post', '▁conditions', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁is', '▁registered', '▁with', '▁the', '▁event', '▁server', '.', '▁', '\n']~['▁subscriber', '▁manager', '▁registers', '▁with', '▁event', '▁server', '▁(3.', '1.', '1)', '▁preconditions', '▁a', '▁subscriber', '▁manager', '▁has', '▁been', '▁created', '.', '▁steps', '▁the', '▁subscriber', '▁manager', '▁registers', '▁its', '▁ip', '▁address', '▁port', '▁and', '▁name', '▁with', '▁the', '▁event', '▁server', '▁post', '▁conditions', '▁the', '▁subscriber', '▁manager', '▁is', '▁registered', '▁with', '▁the', '▁event', '▁server', '.', '▁', '\n']~subscrib manag regist event server precondit subscrib manag creat step subscrib manag regist address port name event server post condit subscrib manag regist event server
63~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC149.txt~TC149.txt~"Subscriber manager receives non-speculative event notification (3.2.1)(3.2.3)(3.3.1) Preconditions: The subscriber manager has registered subscribers Steps An event notification is sent to the subscriber manager for a registered subscriber. The relevant subscriber manager receives the event notification. Postconditions: The event notification message is stored in the local event log.
"~tc~['▁sub', 'sc', 'ri', 'ber', '▁manager', '▁rece', 'ives', '▁non', '-', 'spec', 'ul', 'ative', '▁event', '▁not', 'ification', '▁(', '3.', '2.', '1)', '(', '3.', '2.', '3)', '(', '3.', '3.', '1)', '▁prec', 'ond', 'itions', ':', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁has', '▁registered', '▁sub', 'sc', 'rib', 'ers', '▁step', 's', '▁an', '▁event', '▁not', 'ification', '▁is', '▁sent', '▁to', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁for', '▁a', '▁registered', '▁sub', 'sc', 'ri', 'ber', '.', '▁the', '▁rele', 'vant', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁rece', 'ives', '▁the', '▁event', '▁not', 'ification', '.', '▁post', 'c', 'ond', 'itions', ':', '▁the', '▁event', '▁not', 'ification', '▁message', '▁is', '▁st', 'ored', '▁in', '▁the', '▁local', '▁event', '▁log', '.', '\n']~['▁subsc', 'ri', 'ber', '▁manager', '▁receives', '▁non', '-', 'spec', 'ulative', '▁event', '▁not', 'ification', '▁(3.', '2.', '1)', '(', '3.', '2.', '3)', '(', '3.', '3.', '1)', '▁prec', 'ond', 'itions', ':', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁has', '▁registered', '▁subscribers', '▁steps', '▁an', '▁event', '▁not', 'ification', '▁is', '▁sent', '▁to', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁for', '▁a', '▁registered', '▁subsc', 'ri', 'ber', '.', '▁the', '▁relevant', '▁subsc', 'ri', 'ber', '▁manager', '▁receives', '▁the', '▁event', '▁not', 'ification', '.', '▁post', 'cond', 'itions', ':', '▁the', '▁event', '▁not', 'ification', '▁message', '▁is', '▁stored', '▁in', '▁the', '▁local', '▁event', '▁log', '.', '\n']~['▁subscriber', '▁manager', '▁receives', '▁non', '-', 'spec', 'ulative', '▁event', '▁notification', '▁(3.', '2.', '1)', '(', '3.', '2.', '3)', '(', '3.', '3.', '1)', '▁preconditions', ':', '▁the', '▁subscriber', '▁manager', '▁has', '▁registered', '▁subscribers', '▁steps', '▁an', '▁event', '▁notification', '▁is', '▁sent', '▁to', '▁the', '▁subscriber', '▁manager', '▁for', '▁a', '▁registered', '▁subscriber', '.', '▁the', '▁relevant', '▁subscriber', '▁manager', '▁receives', '▁the', '▁event', '▁notification', '.', '▁post', 'conditions', ':', '▁the', '▁event', '▁notification', '▁message', '▁is', '▁stored', '▁in', '▁the', '▁local', '▁event', '▁log', '.', '\n']~subscrib manag receiv non specul event notif precondit subscrib manag regist subscrib step event notif sent subscrib manag regist subscrib relev subscrib manag receiv event notif postcondit event notif messag store local event log
64~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC147.txt~TC147.txt~"An event is published in real time (3.1.2) Preconditions: At least one subscriber manager is online at its designated IP address and port. The subscriber manager has subscribed to at least one requirement. Steps The requirement changes. An event notification is sent to the relevant subscriber manager. Postconditions:
"~tc~['▁an', '▁event', '▁is', '▁published', '▁in', '▁real', '▁time', '▁(', '3.', '1.', '2)', '▁prec', 'ond', 'itions', ':', '▁at', '▁least', '▁one', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁is', '▁online', '▁at', '▁its', '▁designated', '▁ip', '▁address', '▁and', '▁port', '.', '▁the', '▁sub', 'sc', 'ri', 'ber', '▁manager', '▁has', '▁sub', 'sc', 'rib', 'ed', '▁to', '▁at', '▁least', '▁one', '▁require', 'ment', '.', '▁step', 's', '▁the', '▁require', 'ment', '▁changes', '.', '▁an', '▁event', '▁not', 'ification', '▁is', '▁sent', '▁to', '▁the', '▁rele', 'vant', '▁sub', 'sc', 'ri', 'ber', '▁manager', '.', '▁post', 'c', 'ond', 'itions', ':', '\n']~['▁an', '▁event', '▁is', '▁published', '▁in', '▁real', '▁time', '▁(3.', '1.', '2)', '▁prec', 'ond', 'itions', ':', '▁at', '▁least', '▁one', '▁subsc', 'ri', 'ber', '▁manager', '▁is', '▁online', '▁at', '▁its', '▁designated', '▁ip', '▁address', '▁and', '▁port', '.', '▁the', '▁subsc', 'ri', 'ber', '▁manager', '▁has', '▁subsc', 'ribed', '▁to', '▁at', '▁least', '▁one', '▁requirement', '.', '▁steps', '▁the', '▁requirement', '▁changes', '.', '▁an', '▁event', '▁not', 'ification', '▁is', '▁sent', '▁to', '▁the', '▁relevant', '▁subsc', 'ri', 'ber', '▁manager', '.', '▁post', 'cond', 'itions', ':', '\n']~['▁an', '▁event', '▁is', '▁published', '▁in', '▁real', '▁time', '▁(3.', '1.', '2)', '▁preconditions', ':', '▁at', '▁least', '▁one', '▁subscriber', '▁manager', '▁is', '▁online', '▁at', '▁its', '▁designated', '▁ip', '▁address', '▁and', '▁port', '.', '▁the', '▁subscriber', '▁manager', '▁has', '▁subscribed', '▁to', '▁at', '▁least', '▁one', '▁requirement', '.', '▁steps', '▁the', '▁requirement', '▁changes', '.', '▁an', '▁event', '▁notification', '▁is', '▁sent', '▁to', '▁the', '▁relevant', '▁subscriber', '▁manager', '.', '▁post', 'conditions', ':', '\n']~event publish real time precondit least one subscrib manag onlin design address port subscrib manag subscrib least one requir step requir chang event notif sent relev subscrib manag postcondit
65~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/test_cases/TC154.txt~TC154.txt~"Decompose a Requirement (4.1)(4.1.2) Preconditions: The trigger driver is running. At least one requirement is defined. Steps The user specifies a decompose event. The user selects an existing requirement and decomposes it into two or more requirements. Post conditions: The requirement is decomposed into two or more events. A decompose event message is sent. Temporary links are established between the original requirement and its decomposed parts.
"~tc~['▁dec', 'om', 'pose', '▁a', '▁require', 'ment', '▁(', '4.', '1)', '(', '4.', '1.', '2)', '▁prec', 'ond', 'itions', ':', '▁the', '▁tr', 'ig', 'ger', '▁driver', '▁is', '▁running', '.', '▁at', '▁least', '▁one', '▁require', 'ment', '▁is', '▁defined', '.', '▁step', 's', '▁the', '▁user', '▁spec', 'if', 'ies', '▁a', '▁dec', 'om', 'pose', '▁event', '.', '▁the', '▁user', '▁select', 's', '▁an', '▁existing', '▁require', 'ment', '▁and', '▁dec', 'om', 'poses', '▁it', '▁into', '▁two', '▁or', '▁more', '▁requirements', '.', '▁post', '▁conditions', ':', '▁the', '▁require', 'ment', '▁is', '▁dec', 'om', 'posed', '▁into', '▁two', '▁or', '▁more', '▁events', '.', '▁a', '▁dec', 'om', 'pose', '▁event', '▁message', '▁is', '▁sent', '.', '▁tem', 'porary', '▁links', '▁are', '▁established', '▁between', '▁the', '▁original', '▁require', 'ment', '▁and', '▁its', '▁dec', 'om', 'posed', '▁parts', '.', '\n']~['▁decom', 'pose', '▁a', '▁requirement', '▁(4.', '1)', '(', '4.', '1.', '2)', '▁prec', 'ond', 'itions', ':', '▁the', '▁trigger', '▁driver', '▁is', '▁running', '.', '▁at', '▁least', '▁one', '▁requirement', '▁is', '▁defined', '.', '▁steps', '▁the', '▁user', '▁spec', 'ifies', '▁a', '▁decom', 'pose', '▁event', '.', '▁the', '▁user', '▁select', 's', '▁an', '▁existing', '▁requirement', '▁and', '▁decom', 'poses', '▁it', '▁into', '▁two', '▁or', '▁more', '▁requirements', '.', '▁post', '▁conditions', ':', '▁the', '▁requirement', '▁is', '▁decom', 'posed', '▁into', '▁two', '▁or', '▁more', '▁events', '.', '▁a', '▁decom', 'pose', '▁event', '▁message', '▁is', '▁sent', '.', '▁temporary', '▁links', '▁are', '▁established', '▁between', '▁the', '▁original', '▁requirement', '▁and', '▁its', '▁decom', 'posed', '▁parts', '.', '\n']~['▁decompose', '▁a', '▁requirement', '▁(4.', '1)', '(', '4.', '1.', '2)', '▁preconditions', ':', '▁the', '▁trigger', '▁driver', '▁is', '▁running', '.', '▁at', '▁least', '▁one', '▁requirement', '▁is', '▁defined', '.', '▁steps', '▁the', '▁user', '▁specifies', '▁a', '▁decompose', '▁event', '.', '▁the', '▁user', '▁selects', '▁an', '▁existing', '▁requirement', '▁and', '▁decomposes', '▁it', '▁into', '▁two', '▁or', '▁more', '▁requirements', '.', '▁post', '▁conditions', ':', '▁the', '▁requirement', '▁is', '▁decomposed', '▁into', '▁two', '▁or', '▁more', '▁events', '.', '▁a', '▁decompose', '▁event', '▁message', '▁is', '▁sent', '.', '▁temporary', '▁links', '▁are', '▁established', '▁between', '▁the', '▁original', '▁requirement', '▁and', '▁its', '▁decomposed', '▁parts', '.', '\n']~decompos requir precondit trigger driver run least one requir defin step user specifi decompos event user select exist requir decompos two requir post condit requir decompos two event decompos event messag sent temporari link establish origin requir decompos part
66~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/76.java~76.java~"76	""Evaluatorprivate static final int EOL = 0;
private static final int VALUE = 1;
private static final int OPAREN= 2;
private static final int CPAREN= 3;
private static final int EXP = 4;
private static final int MULT= private static class Precedence
{

public int inputSymbol; // refers to the precedence level of operator
public int topOfStack; // stores the operator in the form of integer

public Precedence( int inSymbol, int // PrecTable matches order of Token enumeration
private static Precedence [ ] precTable = new Precedence[ ]
{

new Precedence( 0, -1 ),// EOL
new Precedence( 0,0 ),// VALUE
new Precedence( 100private static class Token
{

public Token( ) { this( EOL ); }

public Token( int t ) { this( t, 0 ); }

public Token( int t, double v ) {

 System. out. println("""" INSIDE Token.Token()"""");
 private static class EvalTokenizer {

public EvalTokenizer( StringTokenizer is ) {
 System. out. println(""""INSIDE EvalTokenizer"""");
 str = is;
} /**
 * Find the next token, skipping blanks, and return it.
 * For VALUE token, place the processed value in currentValue.
 * Print error message if input is unrecognized.
 */
public Token getToken /**
 * Construct an evaluator object.
 * @param s the string containing the expression.
 */
public Evaluator( String s ) {

opStack = new Stack( );
postfixStack = new Stack( );
str = new StringTokeni // The only publicly visible routine
/**
 * Public routine that performs the evaluation.
 * Examine thepostfix machine to see if a single result is
 * left and if so, return it; otherwise print error.
 * @return the result. private Stack opStack; // Operator stack for conversion
private Stack postfixStack;// Stack for postfix machine that stores the numbers could be values or result
private StringTokenizer str; // StringTokenizer stream, conte /**
 * Internal method that hides type-casting.
 * Changed the method to support double
 */
private double postFixTopAndPop( ) {
 System. out. println(""""INSIDE postFixTopAndPop method"""");
 System /**
 * Another internal method that hides type-casting.
 */
private int opStackTop( ) {
return ( (Integer) ( opStack. peek( ) ) ). intValue( );
} /**
 * After a token is read, use operator precedence parsing
 * algorithm to process it; missing opening parentheses
 * are detected here.
 */
private void processToken( Token lastToken ) {

System. out. printl /*
 * topAndPop the postfix machine stack; return the result.
 * If the stack is empty, print an error message.
 */
private double getTop( ) { // change to support double
 System. out. println(""""INSIDE GET TOP/**
 * Internal routine to compute x^ n.
 */
private static double pow( double x, double n ) {
 System. out. println(""""INSIDE pow"""");

if( x == 0 ) {
 if( n == 0 ){
System. out. /**
 * Process an operator by taking two items off the postfix
 * stack, applying the operator, and pushing the result.
 * Print error if missing closing parenthesis or division by 0.
 */
private void binaryOp( int topOp/**
 * Simple main to exercise Evaluator class.
 */
public static void main( String [ ] args ) {



String str;
BufferedReader in = new BufferedReader( new InputStreamReader( System. in ) );

try {
 ""
"~src~"['▁7', '6', '\t', '""', 'e', 'val', 'u', 'ator', 'pr', 'iv', 'ate', '▁st', 'atic', '▁final', '▁int', '▁e', 'ol', '▁=', '▁0', ';', '\n', 'pr', 'iv', 'ate', '▁st', 'atic', '▁final', '▁int', '▁value', '▁=', '▁1', ';', '\n', 'pr', 'iv', 'ate', '▁st', 'atic', '▁final', '▁int', '▁op', 'aren', '=', '▁2', ';', '\n', 'pr', 'iv', 'ate', '▁st', 'atic', '▁final', '▁int', '▁c', 'p', 'aren', '=', '▁3', ';', '\n', 'pr', 'iv', 'ate', '▁st', 'atic', '▁final', '▁int', '▁exp', '▁=', '▁4', ';', '\n', 'pr', 'iv', 'ate', '▁st', 'atic', '▁final', '▁int', '▁mult', '=', '▁private', '▁st', 'atic', '▁class', '▁preced', 'ence', '\n', '{', '\n\n', 'publ', 'ic', '▁int', '▁in', 'put', 'sy', 'm', 'bol', ';', '▁/', '/', '▁refers', '▁to', '▁the', '▁preced', 'ence', '▁level', '▁of', '▁oper', 'ator', '\n', 'publ', 'ic', '▁int', '▁top', 'of', 'st', 'ack', ';', '▁/', '/', '▁stores', '▁the', '▁oper', 'ator', '▁in', '▁the', '▁form', '▁of', '▁inte', 'ger', '\n\n', 'publ', 'ic', '▁preced', 'ence', '(', '▁int', '▁ins', 'ym', 'bol', ',', '▁int', '▁/', '/', '▁pre', 'ct', 'able', '▁matches', '▁order', '▁of', '▁to', 'ken', '▁en', 'um', 'eration', '\n', 'pr', 'iv', 'ate', '▁st', 'atic', '▁preced', 'ence', '▁[', '▁', ']', '▁pre', 'ct', 'able', '▁=', '▁new', '▁preced', 'ence', '[', '▁', ']', '\n', '{', '\n\n', 'new', '▁preced', 'ence', '(', '▁', '0,', '▁-', '1', '▁),', '//', '▁e', 'ol', '\n', 'new', '▁preced', 'ence', '(', '▁', '0,', '0', '▁),', '//', '▁value', '\n', 'new', '▁preced', 'ence', '(', '▁100', 'pr', 'iv', 'ate', '▁st', 'atic', '▁class', '▁to', 'ken', '\n', '{', '\n\n', 'publ', 'ic', '▁to', 'ken', '(', '▁)', '▁{', '▁this', '(', '▁e', 'ol', '▁', ');', '▁}', '\n\n', 'publ', 'ic', '▁to', 'ken', '(', '▁int', '▁t', '▁)', '▁{', '▁this', '(', '▁t', ',', '▁0', '▁', ');', '▁}', '\n\n', 'publ', 'ic', '▁to', 'ken', '(', '▁int', '▁t', ',', '▁double', '▁v', '▁)', '▁{', '\n\n', '▁system', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '▁inside', '▁to', 'ken', '.', 't', 'ok', 'en', '(', ')""', '"")', ';', '\n', '▁private', '▁st', 'atic', '▁class', '▁eval', 't', 'ok', 'en', 'iz', 'er', '▁{', '\n\n', 'publ', 'ic', '▁eval', 't', 'ok', 'en', 'iz', 'er', '(', '▁string', 't', 'ok', 'en', 'iz', 'er', '▁is', '▁)', '▁{', '\n', '▁system', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'ins', 'ide', '▁eval', 't', 'ok', 'en', 'iz', 'er', '""', '"")', ';', '\n', '▁str', '▁=', '▁is', ';', '\n', '}', '▁/', '*', '*', '\n', '▁*', '▁find', '▁the', '▁next', '▁to', 'ken', ',', '▁sk', 'ipp', 'ing', '▁bl', 'an', 'ks', ',', '▁and', '▁return', '▁it', '.', '\n', '▁*', '▁for', '▁value', '▁to', 'ken', ',', '▁place', '▁the', '▁process', 'ed', '▁value', '▁in', '▁current', 'value', '.', '\n', '▁*', '▁print', '▁er', 'ror', '▁message', '▁if', '▁in', 'put', '▁is', '▁un', 'rec', 'ogn', 'ized', '.', '\n', '▁*', '/', '\n', 'publ', 'ic', '▁to', 'ken', '▁g', 'ett', 'ok', 'en', '▁/', '*', '*', '\n', '▁*', '▁construct', '▁an', '▁eval', 'u', 'ator', '▁object', '.', '\n', '▁*', '▁', '@', 'par', 'am', '▁s', '▁the', '▁string', '▁containing', '▁the', '▁expression', '.', '\n', '▁*', '/', '\n', 'publ', 'ic', '▁eval', 'u', 'ator', '(', '▁string', '▁s', '▁)', '▁{', '\n\n', 'op', 'st', 'ack', '▁=', '▁new', '▁st', 'ack', '(', '▁', ');', '\n', 'p', 'ost', 'f', 'ix', 'st', 'ack', '▁=', '▁new', '▁st', 'ack', '(', '▁', ');', '\n', 'str', '▁=', '▁new', '▁string', 't', 'ok', 'en', 'i', '▁/', '/', '▁the', '▁only', '▁public', 'ly', '▁vis', 'ible', '▁ro', 'ut', 'ine', '\n', '/', '*', '*', '\n', '▁*', '▁public', '▁ro', 'ut', 'ine', '▁that', '▁perform', 's', '▁the', '▁eval', 'uation', '.', '\n', '▁*', '▁exam', 'ine', '▁the', 'p', 'ost', 'f', 'ix', '▁machine', '▁to', '▁see', '▁if', '▁a', '▁single', '▁result', '▁is', '\n', '▁*', '▁left', '▁and', '▁if', '▁so', ',', '▁return', '▁it', ';', '▁otherwise', '▁print', '▁er', 'ror', '.', '\n', '▁*', '▁', '@', 'ret', 'urn', '▁the', '▁result', '.', '▁private', '▁st', 'ack', '▁op', 'st', 'ack', ';', '▁/', '/', '▁oper', 'ator', '▁st', 'ack', '▁for', '▁convers', 'ion', '\n', 'pr', 'iv', 'ate', '▁st', 'ack', '▁post', 'f', 'ix', 'st', 'ack', ';', '//', '▁st', 'ack', '▁for', '▁post', 'f', 'ix', '▁machine', '▁that', '▁stores', '▁the', '▁numbers', '▁could', '▁be', '▁values', '▁or', '▁result', '\n', 'pr', 'iv', 'ate', '▁string', 't', 'ok', 'en', 'iz', 'er', '▁str', ';', '▁/', '/', '▁string', 't', 'ok', 'en', 'iz', 'er', '▁stream', ',', '▁cont', 'e', '▁/', '*', '*', '\n', '▁*', '▁internal', '▁method', '▁that', '▁h', 'ides', '▁type', '-', 'cast', 'ing', '.', '\n', '▁*', '▁changed', '▁the', '▁method', '▁to', '▁support', '▁double', '\n', '▁*', '/', '\n', 'pr', 'iv', 'ate', '▁double', '▁post', 'f', 'ix', 'top', 'and', 'pop', '(', '▁)', '▁{', '\n', '▁system', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'ins', 'ide', '▁post', 'f', 'ix', 'top', 'and', 'pop', '▁method', '""', '"")', ';', '\n', '▁system', '▁/', '*', '*', '\n', '▁*', '▁another', '▁internal', '▁method', '▁that', '▁h', 'ides', '▁type', '-', 'cast', 'ing', '.', '\n', '▁*', '/', '\n', 'pr', 'iv', 'ate', '▁int', '▁op', 'st', 'ack', 'top', '(', '▁)', '▁{', '\n', 'ret', 'urn', '▁(', '▁(', 'in', 'te', 'ger', ')', '▁(', '▁op', 'st', 'ack', '.', '▁pe', 'ek', '(', '▁)', '▁)', '▁', ').', '▁int', 'value', '(', '▁', ');', '\n', '}', '▁/', '*', '*', '\n', '▁*', '▁after', '▁a', '▁to', 'ken', '▁is', '▁read', ',', '▁use', '▁oper', 'ator', '▁preced', 'ence', '▁par', 'sing', '\n', '▁*', '▁alg', 'or', 'ith', 'm', '▁to', '▁process', '▁it', ';', '▁missing', '▁opening', '▁paren', 'the', 'ses', '\n', '▁*', '▁are', '▁det', 'ected', '▁here', '.', '\n', '▁*', '/', '\n', 'pr', 'iv', 'ate', '▁vo', 'id', '▁pro', 'ces', 'st', 'ok', 'en', '(', '▁to', 'ken', '▁last', 't', 'ok', 'en', '▁)', '▁{', '\n\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', '▁/', '*', '\n', '▁*', '▁top', 'and', 'pop', '▁the', '▁post', 'f', 'ix', '▁machine', '▁st', 'ack', ';', '▁return', '▁the', '▁result', '.', '\n', '▁*', '▁if', '▁the', '▁st', 'ack', '▁is', '▁em', 'pt', 'y', ',', '▁print', '▁an', '▁er', 'ror', '▁message', '.', '\n', '▁*', '/', '\n', 'pr', 'iv', 'ate', '▁double', '▁g', 'ett', 'op', '(', '▁)', '▁{', '▁/', '/', '▁change', '▁to', '▁support', '▁double', '\n', '▁system', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'ins', 'ide', '▁get', '▁top', '/', '*', '*', '\n', '▁*', '▁internal', '▁ro', 'ut', 'ine', '▁to', '▁comp', 'ute', '▁x', '^', '▁n', '.', '\n', '▁*', '/', '\n', 'pr', 'iv', 'ate', '▁st', 'atic', '▁double', '▁pow', '(', '▁double', '▁x', ',', '▁double', '▁n', '▁)', '▁{', '\n', '▁system', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'ins', 'ide', '▁pow', '""', '"")', ';', '\n\n', 'if', '(', '▁x', '▁=', '=', '▁0', '▁)', '▁{', '\n', '▁if', '(', '▁n', '▁=', '=', '▁0', '▁)', '{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁/', '*', '*', '\n', '▁*', '▁process', '▁an', '▁oper', 'ator', '▁by', '▁taking', '▁two', '▁items', '▁off', '▁the', '▁post', 'f', 'ix', '\n', '▁*', '▁st', 'ack', ',', '▁app', 'lying', '▁the', '▁oper', 'ator', ',', '▁and', '▁p', 'ush', 'ing', '▁the', '▁result', '.', '\n', '▁*', '▁print', '▁er', 'ror', '▁if', '▁missing', '▁clos', 'ing', '▁paren', 'the', 'sis', '▁or', '▁division', '▁by', '▁0.', '\n', '▁*', '/', '\n', 'pr', 'iv', 'ate', '▁vo', 'id', '▁b', 'inary', 'op', '(', '▁int', '▁top', 'op', '/', '*', '*', '\n', '▁*', '▁simple', '▁main', '▁to', '▁exerc', 'ise', '▁eval', 'u', 'ator', '▁class', '.', '\n', '▁*', '/', '\n', 'publ', 'ic', '▁st', 'atic', '▁vo', 'id', '▁main', '(', '▁string', '▁[', '▁', ']', '▁arg', 's', '▁)', '▁{', '\n\n\n\n', 'str', 'ing', '▁str', ';', '\n', 'b', 'uf', 'fer', 'ed', 'read', 'er', '▁in', '▁=', '▁new', '▁bu', 'ffer', 'ed', 'read', 'er', '(', '▁new', '▁in', 'put', 'stream', 'read', 'er', '(', '▁system', '.', '▁in', '▁)', '▁', ');', '\n\n', 't', 'ry', '▁{', '\n', '▁""', '\n']"~"['▁76', '\t', '""', 'eval', 'u', 'ator', 'private', '▁static', '▁final', '▁int', '▁e', 'ol', '▁=', '▁0', ';', '\n', 'private', '▁static', '▁final', '▁int', '▁value', '▁=', '▁1', ';', '\n', 'private', '▁static', '▁final', '▁int', '▁op', 'aren', '=', '▁2', ';', '\n', 'private', '▁static', '▁final', '▁int', '▁cp', 'aren', '=', '▁3', ';', '\n', 'private', '▁static', '▁final', '▁int', '▁exp', '▁=', '▁4', ';', '\n', 'private', '▁static', '▁final', '▁int', '▁mult', '=', '▁private', '▁static', '▁class', '▁preced', 'ence', '\n', '{', '\n\n', 'public', '▁int', '▁input', 'sym', 'bol', ';', '▁//', '▁refers', '▁to', '▁the', '▁preced', 'ence', '▁level', '▁of', '▁operator', '\n', 'public', '▁int', '▁top', 'of', 'st', 'ack', ';', '▁//', '▁stores', '▁the', '▁operator', '▁in', '▁the', '▁form', '▁of', '▁integer', '\n\n', 'public', '▁preced', 'ence', '(', '▁int', '▁ins', 'ym', 'bol', ',', '▁int', '▁//', '▁pre', 'ct', 'able', '▁matches', '▁order', '▁of', '▁token', '▁en', 'um', 'eration', '\n', 'private', '▁static', '▁preced', 'ence', '▁[', '▁]', '▁pre', 'ct', 'able', '▁=', '▁new', '▁preced', 'ence', '[', '▁]', '\n', '{', '\n\n', 'new', '▁preced', 'ence', '(', '▁', '0,', '▁-', '1', '▁),', '//', '▁e', 'ol', '\n', 'new', '▁preced', 'ence', '(', '▁', '0,', '0', '▁),', '//', '▁value', '\n', 'new', '▁preced', 'ence', '(', '▁100', 'private', '▁static', '▁class', '▁token', '\n', '{', '\n\n', 'public', '▁token', '(', '▁)', '▁{', '▁this', '(', '▁e', 'ol', '▁', ');', '▁}', '\n\n', 'public', '▁token', '(', '▁int', '▁t', '▁)', '▁{', '▁this', '(', '▁t', ',', '▁0', '▁', ');', '▁}', '\n\n', 'public', '▁token', '(', '▁int', '▁t', ',', '▁double', '▁v', '▁)', '▁{', '\n\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '▁inside', '▁token', '.', 'tok', 'en', '(', ')""', '"");', '\n', '▁private', '▁static', '▁class', '▁eval', 'tok', 'en', 'izer', '▁{', '\n\n', 'public', '▁eval', 'tok', 'en', 'izer', '(', '▁string', 'tok', 'en', 'izer', '▁is', '▁)', '▁{', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'ins', 'ide', '▁eval', 'tok', 'en', 'izer', '""', '"");', '\n', '▁str', '▁=', '▁is', ';', '\n', '}', '▁/', '*', '*', '\n', '▁*', '▁find', '▁the', '▁next', '▁token', ',', '▁sk', 'ipping', '▁blan', 'ks', ',', '▁and', '▁return', '▁it', '.', '\n', '▁*', '▁for', '▁value', '▁token', ',', '▁place', '▁the', '▁processed', '▁value', '▁in', '▁current', 'value', '.', '\n', '▁*', '▁print', '▁error', '▁message', '▁if', '▁input', '▁is', '▁un', 'recogn', 'ized', '.', '\n', '▁*', '/', '\n', 'public', '▁token', '▁gett', 'oken', '▁/', '*', '*', '\n', '▁*', '▁construct', '▁an', '▁eval', 'u', 'ator', '▁object', '.', '\n', '▁*', '▁', '@', 'param', '▁s', '▁the', '▁string', '▁containing', '▁the', '▁expression', '.', '\n', '▁*', '/', '\n', 'public', '▁eval', 'u', 'ator', '(', '▁string', '▁s', '▁)', '▁{', '\n\n', 'op', 'st', 'ack', '▁=', '▁new', '▁stack', '(', '▁', ');', '\n', 'post', 'fix', 'st', 'ack', '▁=', '▁new', '▁stack', '(', '▁', ');', '\n', 'str', '▁=', '▁new', '▁string', 'tok', 'eni', '▁//', '▁the', '▁only', '▁publicly', '▁visible', '▁routine', '\n', '/', '*', '*', '\n', '▁*', '▁public', '▁routine', '▁that', '▁performs', '▁the', '▁evaluation', '.', '\n', '▁*', '▁examine', '▁the', 'post', 'fix', '▁machine', '▁to', '▁see', '▁if', '▁a', '▁single', '▁result', '▁is', '\n', '▁*', '▁left', '▁and', '▁if', '▁so', ',', '▁return', '▁it', ';', '▁otherwise', '▁print', '▁error', '.', '\n', '▁*', '▁', '@', 'return', '▁the', '▁result', '.', '▁private', '▁stack', '▁op', 'st', 'ack', ';', '▁//', '▁operator', '▁stack', '▁for', '▁conversion', '\n', 'private', '▁stack', '▁post', 'fix', 'st', 'ack', ';', '//', '▁stack', '▁for', '▁post', 'fix', '▁machine', '▁that', '▁stores', '▁the', '▁numbers', '▁could', '▁be', '▁values', '▁or', '▁result', '\n', 'private', '▁string', 'tok', 'en', 'izer', '▁str', ';', '▁//', '▁string', 'tok', 'en', 'izer', '▁stream', ',', '▁cont', 'e', '▁/', '*', '*', '\n', '▁*', '▁internal', '▁method', '▁that', '▁hides', '▁type', '-', 'cast', 'ing', '.', '\n', '▁*', '▁changed', '▁the', '▁method', '▁to', '▁support', '▁double', '\n', '▁*', '/', '\n', 'private', '▁double', '▁post', 'fix', 'top', 'and', 'pop', '(', '▁)', '▁{', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'ins', 'ide', '▁post', 'fix', 'top', 'and', 'pop', '▁method', '""', '"");', '\n', '▁system', '▁/', '*', '*', '\n', '▁*', '▁another', '▁internal', '▁method', '▁that', '▁hides', '▁type', '-', 'cast', 'ing', '.', '\n', '▁*', '/', '\n', 'private', '▁int', '▁op', 'st', 'ack', 'top', '(', '▁)', '▁{', '\n', 'return', '▁(', '▁(', 'inte', 'ger', ')', '▁(', '▁op', 'st', 'ack', '.', '▁pe', 'ek', '(', '▁)', '▁)', '▁).', '▁int', 'value', '(', '▁', ');', '\n', '}', '▁/', '*', '*', '\n', '▁*', '▁after', '▁a', '▁token', '▁is', '▁read', ',', '▁use', '▁operator', '▁preced', 'ence', '▁par', 'sing', '\n', '▁*', '▁algorithm', '▁to', '▁process', '▁it', ';', '▁missing', '▁opening', '▁paren', 'the', 'ses', '\n', '▁*', '▁are', '▁detected', '▁here', '.', '\n', '▁*', '/', '\n', 'private', '▁void', '▁pro', 'ces', 'st', 'oken', '(', '▁token', '▁last', 'tok', 'en', '▁)', '▁{', '\n\n', 'system', '.', '▁out', '.', '▁print', 'l', '▁/', '*', '\n', '▁*', '▁top', 'and', 'pop', '▁the', '▁post', 'fix', '▁machine', '▁stack', ';', '▁return', '▁the', '▁result', '.', '\n', '▁*', '▁if', '▁the', '▁stack', '▁is', '▁empty', ',', '▁print', '▁an', '▁error', '▁message', '.', '\n', '▁*', '/', '\n', 'private', '▁double', '▁gett', 'op', '(', '▁)', '▁{', '▁//', '▁change', '▁to', '▁support', '▁double', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'ins', 'ide', '▁get', '▁top', '/', '*', '*', '\n', '▁*', '▁internal', '▁routine', '▁to', '▁compute', '▁x', '^', '▁n', '.', '\n', '▁*', '/', '\n', 'private', '▁static', '▁double', '▁pow', '(', '▁double', '▁x', ',', '▁double', '▁n', '▁)', '▁{', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'ins', 'ide', '▁pow', '""', '"");', '\n\n', 'if', '(', '▁x', '▁==', '▁0', '▁)', '▁{', '\n', '▁if', '(', '▁n', '▁==', '▁0', '▁)', '{', '\n', 'system', '.', '▁out', '.', '▁/', '*', '*', '\n', '▁*', '▁process', '▁an', '▁operator', '▁by', '▁taking', '▁two', '▁items', '▁off', '▁the', '▁post', 'fix', '\n', '▁*', '▁stack', ',', '▁applying', '▁the', '▁operator', ',', '▁and', '▁pushing', '▁the', '▁result', '.', '\n', '▁*', '▁print', '▁error', '▁if', '▁missing', '▁closing', '▁paren', 'the', 'sis', '▁or', '▁division', '▁by', '▁0.', '\n', '▁*', '/', '\n', 'private', '▁void', '▁binary', 'op', '(', '▁int', '▁top', 'op', '/', '*', '*', '\n', '▁*', '▁simple', '▁main', '▁to', '▁exercise', '▁eval', 'u', 'ator', '▁class', '.', '\n', '▁*', '/', '\n', 'public', '▁static', '▁void', '▁main', '(', '▁string', '▁[', '▁]', '▁arg', 's', '▁)', '▁{', '\n\n\n\n', 'string', '▁str', ';', '\n', 'b', 'uffer', 'ed', 'read', 'er', '▁in', '▁=', '▁new', '▁buffer', 'ed', 'read', 'er', '(', '▁new', '▁input', 'stream', 'read', 'er', '(', '▁system', '.', '▁in', '▁)', '▁', ');', '\n\n', 'try', '▁{', '\n', '▁""', '\n']"~"['▁76', '\t', '""', 'eval', 'u', 'ator', 'private', '▁static', '▁final', '▁int', '▁e', 'ol', '▁=', '▁0;', '\n', 'private', '▁static', '▁final', '▁int', '▁value', '▁=', '▁1;', '\n', 'private', '▁static', '▁final', '▁int', '▁op', 'aren', '=', '▁2;', '\n', 'private', '▁static', '▁final', '▁int', '▁cp', 'aren', '=', '▁3;', '\n', 'private', '▁static', '▁final', '▁int', '▁exp', '▁=', '▁4;', '\n', 'private', '▁static', '▁final', '▁int', '▁mult', '=', '▁private', '▁static', '▁class', '▁precedence', '\n', '{', '\n\n', 'public', '▁int', '▁input', 'symbol', ';', '▁//', '▁refers', '▁to', '▁the', '▁precedence', '▁level', '▁of', '▁operator', '\n', 'public', '▁int', '▁top', 'of', 'stack', ';', '▁//', '▁stores', '▁the', '▁operator', '▁in', '▁the', '▁form', '▁of', '▁integer', '\n\n', 'public', '▁precedence', '(', '▁int', '▁ins', 'ym', 'bol', ',', '▁int', '▁//', '▁pre', 'ct', 'able', '▁matches', '▁order', '▁of', '▁token', '▁enumeration', '\n', 'private', '▁static', '▁precedence', '▁[', '▁]', '▁pre', 'ct', 'able', '▁=', '▁new', '▁precedence', '[', '▁]', '\n', '{', '\n\n', 'new', '▁precedence', '(', '▁0,', '▁-1', '▁),', '//', '▁e', 'ol', '\n', 'new', '▁precedence', '(', '▁0,', '0', '▁),', '//', '▁value', '\n', 'new', '▁precedence', '(', '▁100', 'private', '▁static', '▁class', '▁token', '\n', '{', '\n\n', 'public', '▁token', '(', '▁)', '▁{', '▁this', '(', '▁e', 'ol', '▁);', '▁}', '\n\n', 'public', '▁token', '(', '▁int', '▁t', '▁)', '▁{', '▁this', '(', '▁t', ',', '▁0', '▁);', '▁}', '\n\n', 'public', '▁token', '(', '▁int', '▁t', ',', '▁double', '▁v', '▁)', '▁{', '\n\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '▁inside', '▁token', '.', 'token', '(', ')""', '"");', '\n', '▁private', '▁static', '▁class', '▁eval', 'token', 'izer', '▁{', '\n\n', 'public', '▁eval', 'token', 'izer', '(', '▁string', 'token', 'izer', '▁is', '▁)', '▁{', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'inside', '▁eval', 'token', 'izer', '"""");', '\n', '▁str', '▁=', '▁is', ';', '\n', '}', '▁/', '**', '\n', '▁*', '▁find', '▁the', '▁next', '▁token', ',', '▁skipping', '▁blanks', ',', '▁and', '▁return', '▁it', '.', '\n', '▁*', '▁for', '▁value', '▁token', ',', '▁place', '▁the', '▁processed', '▁value', '▁in', '▁current', 'value', '.', '\n', '▁*', '▁print', '▁error', '▁message', '▁if', '▁input', '▁is', '▁unrecognized', '.', '\n', '▁*/', '\n', 'public', '▁token', '▁gett', 'oken', '▁/', '**', '\n', '▁*', '▁construct', '▁an', '▁evalu', 'ator', '▁object', '.', '\n', '▁*', '▁', '@', 'param', '▁s', '▁the', '▁string', '▁containing', '▁the', '▁expression', '.', '\n', '▁*/', '\n', 'public', '▁evalu', 'ator', '(', '▁string', '▁s', '▁)', '▁{', '\n\n', 'op', 'stack', '▁=', '▁new', '▁stack', '(', '▁);', '\n', 'post', 'fix', 'stack', '▁=', '▁new', '▁stack', '(', '▁);', '\n', 'str', '▁=', '▁new', '▁string', 'tok', 'eni', '▁//', '▁the', '▁only', '▁publicly', '▁visible', '▁routine', '\n', '/', '**', '\n', '▁*', '▁public', '▁routine', '▁that', '▁performs', '▁the', '▁evaluation', '.', '\n', '▁*', '▁examine', '▁the', 'post', 'fix', '▁machine', '▁to', '▁see', '▁if', '▁a', '▁single', '▁result', '▁is', '\n', '▁*', '▁left', '▁and', '▁if', '▁so', ',', '▁return', '▁it', ';', '▁otherwise', '▁print', '▁error', '.', '\n', '▁*', '▁', '@', 'return', '▁the', '▁result', '.', '▁private', '▁stack', '▁op', 'stack', ';', '▁//', '▁operator', '▁stack', '▁for', '▁conversion', '\n', 'private', '▁stack', '▁post', 'fix', 'stack', ';', '//', '▁stack', '▁for', '▁post', 'fix', '▁machine', '▁that', '▁stores', '▁the', '▁numbers', '▁could', '▁be', '▁values', '▁or', '▁result', '\n', 'private', '▁string', 'token', 'izer', '▁str', ';', '▁//', '▁string', 'token', 'izer', '▁stream', ',', '▁conte', '▁/', '**', '\n', '▁*', '▁internal', '▁method', '▁that', '▁hides', '▁type', '-', 'casting', '.', '\n', '▁*', '▁changed', '▁the', '▁method', '▁to', '▁support', '▁double', '\n', '▁*/', '\n', 'private', '▁double', '▁post', 'fix', 'top', 'and', 'pop', '(', '▁)', '▁{', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'inside', '▁post', 'fix', 'top', 'and', 'pop', '▁method', '"""");', '\n', '▁system', '▁/', '**', '\n', '▁*', '▁another', '▁internal', '▁method', '▁that', '▁hides', '▁type', '-', 'casting', '.', '\n', '▁*/', '\n', 'private', '▁int', '▁op', 'stack', 'top', '(', '▁)', '▁{', '\n', 'return', '▁(', '▁(', 'integer', ')', '▁(', '▁op', 'stack', '.', '▁peek', '(', '▁)', '▁)', '▁).', '▁int', 'value', '(', '▁);', '\n', '}', '▁/', '**', '\n', '▁*', '▁after', '▁a', '▁token', '▁is', '▁read', ',', '▁use', '▁operator', '▁precedence', '▁parsing', '\n', '▁*', '▁algorithm', '▁to', '▁process', '▁it', ';', '▁missing', '▁opening', '▁parentheses', '\n', '▁*', '▁are', '▁detected', '▁here', '.', '\n', '▁*/', '\n', 'private', '▁void', '▁proces', 'st', 'oken', '(', '▁token', '▁last', 'token', '▁)', '▁{', '\n\n', 'system', '.', '▁out', '.', '▁print', 'l', '▁/*', '\n', '▁*', '▁top', 'and', 'pop', '▁the', '▁post', 'fix', '▁machine', '▁stack', ';', '▁return', '▁the', '▁result', '.', '\n', '▁*', '▁if', '▁the', '▁stack', '▁is', '▁empty', ',', '▁print', '▁an', '▁error', '▁message', '.', '\n', '▁*/', '\n', 'private', '▁double', '▁gett', 'op', '(', '▁)', '▁{', '▁//', '▁change', '▁to', '▁support', '▁double', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'inside', '▁get', '▁top', '/', '**', '\n', '▁*', '▁internal', '▁routine', '▁to', '▁compute', '▁x', '^', '▁n', '.', '\n', '▁*/', '\n', 'private', '▁static', '▁double', '▁pow', '(', '▁double', '▁x', ',', '▁double', '▁n', '▁)', '▁{', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'inside', '▁pow', '"""");', '\n\n', 'if', '(', '▁x', '▁==', '▁0', '▁)', '▁{', '\n', '▁if', '(', '▁n', '▁==', '▁0', '▁)', '{', '\n', 'system', '.', '▁out', '.', '▁/', '**', '\n', '▁*', '▁process', '▁an', '▁operator', '▁by', '▁taking', '▁two', '▁items', '▁off', '▁the', '▁post', 'fix', '\n', '▁*', '▁stack', ',', '▁applying', '▁the', '▁operator', ',', '▁and', '▁pushing', '▁the', '▁result', '.', '\n', '▁*', '▁print', '▁error', '▁if', '▁missing', '▁closing', '▁parenthe', 'sis', '▁or', '▁division', '▁by', '▁0.', '\n', '▁*/', '\n', 'private', '▁void', '▁binary', 'op', '(', '▁int', '▁top', 'op', '/', '**', '\n', '▁*', '▁simple', '▁main', '▁to', '▁exercise', '▁evalu', 'ator', '▁class', '.', '\n', '▁*/', '\n', 'public', '▁static', '▁void', '▁main', '(', '▁string', '▁[', '▁]', '▁args', '▁)', '▁{', '\n\n\n\n', 'string', '▁str', ';', '\n', 'buffer', 'ed', 'reader', '▁in', '▁=', '▁new', '▁buffered', 'reader', '(', '▁new', '▁input', 'stream', 'reader', '(', '▁system', '.', '▁in', '▁)', '▁);', '\n\n', 'try', '▁{', '\n', '▁""', '\n']"~"evaluatorpriv static final int eol privat static final int valu privat static final int oparen privat static final int cparen privat static final int exp privat static final int mult privat static class preced public int input symbol refer preced level oper public int top stack store oper form integ public preced int symbol int prec tabl match order token enumer privat static preced prec tabl new preced new preced eol new preced valu new preced privat static class token public token eol public token int public token int doubl system println insid token token privat static class eval token public eval token string token system println insid eval token str find next token skip blank return valu token place process valu current valu print error messag input unrecogn public token get token construct evalu object param string contain express public evalu string stack new stack postfix stack new stack str new string tokeni public visibl routin public routin perform evalu examin thepostfix machin see singl result left return otherwis print error return result privat stack stack oper stack convers privat stack postfix stack stack postfix machin store number could valu result privat string token str string token stream cont intern method hide type cast chang method support doubl privat doubl post fix top pop system println insid post fix top pop method system anoth intern method hide type cast privat int stack top return integ stack peek int valu token read use oper preced pars algorithm process miss open parenthes detect privat void process token token last token system printl top pop postfix machin stack return result stack empti print error messag privat doubl get top chang support doubl system println insid get top intern routin comput privat static doubl pow doubl doubl system println ("""" insid pow """"); system /** process oper take two item postfix stack appli oper push result print error miss close parenthesi divis privat void binari int top /** simpl main exercis evalu class public static void main string arg string str buffer reader new buffer reader new input stream reader system tri"
67~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/74.java~74.java~"74	""database QueryConnection conn=null;
 ResultSet rs=null;
 Statement stmt=null;
 String mSQL="""""""";

 Vector structVector = new Vector(); // for holding the dummy variable objects used in executeStructure()
 Variable v;// create this object and /**
 * Construct a connection object.
 * @param Returns an object of type Connection
 */
 public Connection getConnection()
 {
System. out. println("""" in get Connection"""");
Connection connect=null;
try
{
 Class. fo /**
* Returns GraphId as int
* @param graphName performance modelHandler calls this method with graphName
* as parameter, performance modelHandler parse the EventServer message and get the
* graphName
*/
 public int get /**
* Copy data from one set of columns to other in table Variable
* @param graphId is the id of graph for which you want to save the
* current state of variables
*/
 public void saveCurrentModel( int graphId)
 {

conn = this. getConnect/**
* Injects new value into Variable table, using Data stored in
* Vector of Variable object
* @param graphId is the id of graph
* @param Vector var is the Vector that stores the Object of type Variable
*/
 public void injectVa /**
* this method will pick up the structure id from SPE Structure
* If DependentStructureId is 0 then select StructureID
* and invoke the executeStructure method on Selected
* StructureId
* Who Invokes this method: performance model // this method is about executing the structure
 // based on StructureId find all the data related to given StructureId
 // and using the equation in string format call the method equationParser.
 //I am passing Vector that has all the data abou public void solveStructure( int StructureId, Vector vr)
 {
System. out. println(""""Inside solveStructure()&&&&&&&&&&&&&&&&&&&&&&&"""");

Connection conn1 = this. getConnection();
System. out. println("""" in solveStru public void solveStructureEquation()
 {
System. out. println(""""Inside solveStructureEquation()%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"""");

//Based on that result find out the equation and replace the name by its value
System public void getTrackVariableName()
 {
System. out. println(""""Inside getTrackVariableName()$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"""");
//This will get the variable name from SPE Graph and find the same name in variable
// and inse public void setCalculatedValues()
 {
System. out. println(""""Inside setCalculatedValues()>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"""");
// and at matching location put the calculated values
System. out. println("""" enter calcValue // this method creates the token for each variable name in the string
 // and store that variable into vector
 // it also creates the vector called varValues
 // varValues has values of each variable stored in varName
 //So equation has variable n public Vector getImpactReport()
 {
//This SPE Graph works on the assumption that each model tracks
// the effect of changes on one variable
Vector report = new Vector();
report. add( trackVariableName);
report. add(Stri""
"~src~"['▁7', '4', '\t', '""', 'd', 'at', 'ab', 'ase', '▁qu', 'ery', 'con', 'n', 'ection', '▁conn', '=', 'n', 'ull', ';', '\n', '▁results', 'et', '▁r', 's', '=', 'n', 'ull', ';', '\n', '▁statement', '▁st', 'm', 't', '=', 'n', 'ull', ';', '\n', '▁string', '▁ms', 'q', 'l', '=""', '""', '""', '""', ';', '\n\n', '▁v', 'ector', '▁struct', 'v', 'ector', '▁=', '▁new', '▁v', 'ector', '(', ');', '▁/', '/', '▁for', '▁holding', '▁the', '▁dum', 'my', '▁vari', 'able', '▁objects', '▁used', '▁in', '▁execut', 'est', 'ruct', 'ure', '(', ')', '\n', '▁vari', 'able', '▁v', ';', '//', '▁create', '▁this', '▁object', '▁and', '▁/', '*', '*', '\n', '▁*', '▁construct', '▁a', '▁connection', '▁object', '.', '\n', '▁*', '▁', '@', 'par', 'am', '▁returns', '▁an', '▁object', '▁of', '▁type', '▁connection', '\n', '▁*', '/', '\n', '▁public', '▁connection', '▁get', 'con', 'n', 'ection', '(', ')', '\n', '▁{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '▁in', '▁get', '▁connection', '""', '"")', ';', '\n', 'con', 'n', 'ection', '▁connect', '=', 'n', 'ull', ';', '\n', 't', 'ry', '\n', '{', '\n', '▁class', '.', '▁fo', '▁/', '*', '*', '\n', '*', '▁returns', '▁graph', 'id', '▁as', '▁int', '\n', '*', '▁', '@', 'par', 'am', '▁gr', 'ap', 'hn', 'ame', '▁performance', '▁model', 'hand', 'ler', '▁calls', '▁this', '▁method', '▁with', '▁gr', 'ap', 'hn', 'ame', '\n', '*', '▁as', '▁param', 'eter', ',', '▁performance', '▁model', 'hand', 'ler', '▁par', 'se', '▁the', '▁events', 'er', 'ver', '▁message', '▁and', '▁get', '▁the', '\n', '*', '▁gr', 'ap', 'hn', 'ame', '\n', '*', '/', '\n', '▁public', '▁int', '▁get', '▁/', '*', '*', '\n', '*', '▁copy', '▁data', '▁from', '▁one', '▁set', '▁of', '▁column', 's', '▁to', '▁other', '▁in', '▁table', '▁vari', 'able', '\n', '*', '▁', '@', 'par', 'am', '▁graph', 'id', '▁is', '▁the', '▁id', '▁of', '▁graph', '▁for', '▁which', '▁you', '▁want', '▁to', '▁save', '▁the', '\n', '*', '▁current', '▁state', '▁of', '▁vari', 'ables', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁sav', 'ec', 'ur', 'rent', 'mod', 'el', '(', '▁int', '▁graph', 'id', ')', '\n', '▁{', '\n\n', 'con', 'n', '▁=', '▁this', '.', '▁get', 'con', 'n', 'ect', '/', '*', '*', '\n', '*', '▁in', 'ject', 's', '▁new', '▁value', '▁into', '▁vari', 'able', '▁table', ',', '▁using', '▁data', '▁st', 'ored', '▁in', '\n', '*', '▁v', 'ector', '▁of', '▁vari', 'able', '▁object', '\n', '*', '▁', '@', 'par', 'am', '▁graph', 'id', '▁is', '▁the', '▁id', '▁of', '▁graph', '\n', '*', '▁', '@', 'par', 'am', '▁v', 'ector', '▁var', '▁is', '▁the', '▁v', 'ector', '▁that', '▁stores', '▁the', '▁object', '▁of', '▁type', '▁vari', 'able', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁in', 'ject', 'va', '▁/', '*', '*', '\n', '*', '▁this', '▁method', '▁will', '▁pick', '▁up', '▁the', '▁structure', '▁id', '▁from', '▁spe', '▁structure', '\n', '*', '▁if', '▁dep', 'endent', 'str', 'uct', 'ure', 'id', '▁is', '▁0', '▁then', '▁select', '▁structure', 'id', '\n', '*', '▁and', '▁inv', 'oke', '▁the', '▁execut', 'est', 'ruct', 'ure', '▁method', '▁on', '▁selected', '\n', '*', '▁structure', 'id', '\n', '*', '▁who', '▁inv', 'ok', 'es', '▁this', '▁method', ':', '▁performance', '▁model', '▁/', '/', '▁this', '▁method', '▁is', '▁about', '▁execut', 'ing', '▁the', '▁structure', '\n', '▁/', '/', '▁based', '▁on', '▁structure', 'id', '▁find', '▁all', '▁the', '▁data', '▁related', '▁to', '▁given', '▁structure', 'id', '\n', '▁/', '/', '▁and', '▁using', '▁the', '▁equ', 'ation', '▁in', '▁string', '▁format', '▁call', '▁the', '▁method', '▁equ', 'ation', 'p', 'ars', 'er', '.', '\n', '▁/', '/', 'i', '▁am', '▁passing', '▁v', 'ector', '▁that', '▁has', '▁all', '▁the', '▁data', '▁ab', 'ou', '▁public', '▁vo', 'id', '▁sol', 'v', 'est', 'ruct', 'ure', '(', '▁int', '▁structure', 'id', ',', '▁v', 'ector', '▁v', 'r', ')', '\n', '▁{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'ins', 'ide', '▁sol', 'v', 'est', 'ruct', 'ure', '(', ')', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '""', '"")', ';', '\n\n', 'con', 'n', 'ection', '▁conn', '1', '▁=', '▁this', '.', '▁get', 'con', 'n', 'ection', '(', ');', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '▁in', '▁sol', 'v', 'est', 'ru', '▁public', '▁vo', 'id', '▁sol', 'v', 'est', 'ruct', 'ure', 'equ', 'ation', '(', ')', '\n', '▁{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'ins', 'ide', '▁sol', 'v', 'est', 'ruct', 'ure', 'equ', 'ation', '(', ')', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '""', '"")', ';', '\n\n', '//', 'based', '▁on', '▁that', '▁result', '▁find', '▁out', '▁the', '▁equ', 'ation', '▁and', '▁replace', '▁the', '▁name', '▁by', '▁its', '▁value', '\n', 'sy', 'stem', '▁public', '▁vo', 'id', '▁g', 'ett', 'r', 'ack', 'v', 'ari', 'ab', 'l', 'en', 'ame', '(', ')', '\n', '▁{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'ins', 'ide', '▁g', 'ett', 'r', 'ack', 'v', 'ari', 'ab', 'l', 'en', 'ame', '(', ')', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '""', '"")', ';', '\n', '//', 'this', '▁will', '▁get', '▁the', '▁vari', 'able', '▁name', '▁from', '▁spe', '▁graph', '▁and', '▁find', '▁the', '▁same', '▁name', '▁in', '▁vari', 'able', '\n', '//', '▁and', '▁in', 'se', '▁public', '▁vo', 'id', '▁set', 'cal', 'c', 'ulated', 'val', 'ues', '(', ')', '\n', '▁{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'ins', 'ide', '▁set', 'cal', 'c', 'ulated', 'val', 'ues', '(', ')', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '""', '"")', ';', '\n', '//', '▁and', '▁at', '▁match', 'ing', '▁location', '▁put', '▁the', '▁calc', 'ulated', '▁values', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '▁enter', '▁calc', 'value', '▁/', '/', '▁this', '▁method', '▁cre', 'ates', '▁the', '▁to', 'ken', '▁for', '▁each', '▁vari', 'able', '▁name', '▁in', '▁the', '▁string', '\n', '▁/', '/', '▁and', '▁store', '▁that', '▁vari', 'able', '▁into', '▁v', 'ector', '\n', '▁/', '/', '▁it', '▁also', '▁cre', 'ates', '▁the', '▁v', 'ector', '▁called', '▁var', 'val', 'ues', '\n', '▁/', '/', '▁var', 'val', 'ues', '▁has', '▁values', '▁of', '▁each', '▁vari', 'able', '▁st', 'ored', '▁in', '▁var', 'name', '\n', '▁/', '/', 'so', '▁equ', 'ation', '▁has', '▁vari', 'able', '▁n', '▁public', '▁v', 'ector', '▁get', 'im', 'p', 'act', 're', 'port', '(', ')', '\n', '▁{', '\n', '//', 'this', '▁spe', '▁graph', '▁works', '▁on', '▁the', '▁ass', 'um', 'ption', '▁that', '▁each', '▁model', '▁tracks', '\n', '//', '▁the', '▁effect', '▁of', '▁changes', '▁on', '▁one', '▁vari', 'able', '\n', 'v', 'ector', '▁report', '▁=', '▁new', '▁v', 'ector', '(', ');', '\n', 're', 'port', '.', '▁add', '(', '▁track', 'v', 'ari', 'ab', 'l', 'en', 'ame', ');', '\n', 're', 'port', '.', '▁add', '(', 'st', 'ri', '""', '\n']"~"['▁74', '\t', '""', 'dat', 'abase', '▁query', 'conn', 'ection', '▁conn', '=', 'n', 'ull', ';', '\n', '▁results', 'et', '▁rs', '=', 'n', 'ull', ';', '\n', '▁statement', '▁st', 'mt', '=', 'n', 'ull', ';', '\n', '▁string', '▁ms', 'q', 'l', '=""', '""', '""', '"";', '\n\n', '▁vector', '▁struct', 'v', 'ector', '▁=', '▁new', '▁vector', '();', '▁//', '▁for', '▁holding', '▁the', '▁dum', 'my', '▁variable', '▁objects', '▁used', '▁in', '▁execut', 'est', 'ruct', 'ure', '()', '\n', '▁variable', '▁v', ';', '//', '▁create', '▁this', '▁object', '▁and', '▁/', '*', '*', '\n', '▁*', '▁construct', '▁a', '▁connection', '▁object', '.', '\n', '▁*', '▁', '@', 'param', '▁returns', '▁an', '▁object', '▁of', '▁type', '▁connection', '\n', '▁*', '/', '\n', '▁public', '▁connection', '▁get', 'conn', 'ection', '()', '\n', '▁{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '▁in', '▁get', '▁connection', '""', '"");', '\n', 'conn', 'ection', '▁connect', '=', 'n', 'ull', ';', '\n', 'try', '\n', '{', '\n', '▁class', '.', '▁fo', '▁/', '*', '*', '\n', '*', '▁returns', '▁graph', 'id', '▁as', '▁int', '\n', '*', '▁', '@', 'param', '▁grap', 'hn', 'ame', '▁performance', '▁model', 'hand', 'ler', '▁calls', '▁this', '▁method', '▁with', '▁grap', 'hn', 'ame', '\n', '*', '▁as', '▁parameter', ',', '▁performance', '▁model', 'hand', 'ler', '▁par', 'se', '▁the', '▁events', 'erver', '▁message', '▁and', '▁get', '▁the', '\n', '*', '▁grap', 'hn', 'ame', '\n', '*', '/', '\n', '▁public', '▁int', '▁get', '▁/', '*', '*', '\n', '*', '▁copy', '▁data', '▁from', '▁one', '▁set', '▁of', '▁columns', '▁to', '▁other', '▁in', '▁table', '▁variable', '\n', '*', '▁', '@', 'param', '▁graph', 'id', '▁is', '▁the', '▁id', '▁of', '▁graph', '▁for', '▁which', '▁you', '▁want', '▁to', '▁save', '▁the', '\n', '*', '▁current', '▁state', '▁of', '▁variables', '\n', '*', '/', '\n', '▁public', '▁void', '▁sav', 'ec', 'ur', 'rent', 'model', '(', '▁int', '▁graph', 'id', ')', '\n', '▁{', '\n\n', 'conn', '▁=', '▁this', '.', '▁get', 'connect', '/', '*', '*', '\n', '*', '▁inject', 's', '▁new', '▁value', '▁into', '▁variable', '▁table', ',', '▁using', '▁data', '▁stored', '▁in', '\n', '*', '▁vector', '▁of', '▁variable', '▁object', '\n', '*', '▁', '@', 'param', '▁graph', 'id', '▁is', '▁the', '▁id', '▁of', '▁graph', '\n', '*', '▁', '@', 'param', '▁vector', '▁var', '▁is', '▁the', '▁vector', '▁that', '▁stores', '▁the', '▁object', '▁of', '▁type', '▁variable', '\n', '*', '/', '\n', '▁public', '▁void', '▁inject', 'va', '▁/', '*', '*', '\n', '*', '▁this', '▁method', '▁will', '▁pick', '▁up', '▁the', '▁structure', '▁id', '▁from', '▁spe', '▁structure', '\n', '*', '▁if', '▁dependent', 'structure', 'id', '▁is', '▁0', '▁then', '▁select', '▁structure', 'id', '\n', '*', '▁and', '▁inv', 'oke', '▁the', '▁execut', 'est', 'ruct', 'ure', '▁method', '▁on', '▁selected', '\n', '*', '▁structure', 'id', '\n', '*', '▁who', '▁inv', 'okes', '▁this', '▁method', ':', '▁performance', '▁model', '▁//', '▁this', '▁method', '▁is', '▁about', '▁executing', '▁the', '▁structure', '\n', '▁//', '▁based', '▁on', '▁structure', 'id', '▁find', '▁all', '▁the', '▁data', '▁related', '▁to', '▁given', '▁structure', 'id', '\n', '▁//', '▁and', '▁using', '▁the', '▁equation', '▁in', '▁string', '▁format', '▁call', '▁the', '▁method', '▁equation', 'p', 'ars', 'er', '.', '\n', '▁//', 'i', '▁am', '▁passing', '▁vector', '▁that', '▁has', '▁all', '▁the', '▁data', '▁ab', 'ou', '▁public', '▁void', '▁sol', 'vest', 'ruct', 'ure', '(', '▁int', '▁structure', 'id', ',', '▁vector', '▁vr', ')', '\n', '▁{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'ins', 'ide', '▁sol', 'vest', 'ruct', 'ure', '()', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '""', '"");', '\n\n', 'conn', 'ection', '▁conn', '1', '▁=', '▁this', '.', '▁get', 'conn', 'ection', '();', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '▁in', '▁sol', 'vest', 'ru', '▁public', '▁void', '▁sol', 'vest', 'ruct', 'ure', 'equ', 'ation', '()', '\n', '▁{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'ins', 'ide', '▁sol', 'vest', 'ruct', 'ure', 'equ', 'ation', '()', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '""', '"");', '\n\n', '//', 'based', '▁on', '▁that', '▁result', '▁find', '▁out', '▁the', '▁equation', '▁and', '▁replace', '▁the', '▁name', '▁by', '▁its', '▁value', '\n', 'system', '▁public', '▁void', '▁gett', 'rack', 'vari', 'ab', 'len', 'ame', '()', '\n', '▁{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'ins', 'ide', '▁gett', 'rack', 'vari', 'ab', 'len', 'ame', '()', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '""', '"");', '\n', '//', 'this', '▁will', '▁get', '▁the', '▁variable', '▁name', '▁from', '▁spe', '▁graph', '▁and', '▁find', '▁the', '▁same', '▁name', '▁in', '▁variable', '\n', '//', '▁and', '▁in', 'se', '▁public', '▁void', '▁set', 'cal', 'c', 'ulated', 'val', 'ues', '()', '\n', '▁{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'ins', 'ide', '▁set', 'cal', 'c', 'ulated', 'val', 'ues', '()', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '>', '""', '"");', '\n', '//', '▁and', '▁at', '▁matching', '▁location', '▁put', '▁the', '▁calculated', '▁values', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '▁enter', '▁calc', 'value', '▁//', '▁this', '▁method', '▁creates', '▁the', '▁token', '▁for', '▁each', '▁variable', '▁name', '▁in', '▁the', '▁string', '\n', '▁//', '▁and', '▁store', '▁that', '▁variable', '▁into', '▁vector', '\n', '▁//', '▁it', '▁also', '▁creates', '▁the', '▁vector', '▁called', '▁var', 'val', 'ues', '\n', '▁//', '▁var', 'val', 'ues', '▁has', '▁values', '▁of', '▁each', '▁variable', '▁stored', '▁in', '▁var', 'name', '\n', '▁//', 'so', '▁equation', '▁has', '▁variable', '▁n', '▁public', '▁vector', '▁get', 'imp', 'act', 're', 'port', '()', '\n', '▁{', '\n', '//', 'this', '▁spe', '▁graph', '▁works', '▁on', '▁the', '▁assumption', '▁that', '▁each', '▁model', '▁tracks', '\n', '//', '▁the', '▁effect', '▁of', '▁changes', '▁on', '▁one', '▁variable', '\n', 'v', 'ector', '▁report', '▁=', '▁new', '▁vector', '();', '\n', 're', 'port', '.', '▁add', '(', '▁track', 'vari', 'ab', 'len', 'ame', ');', '\n', 're', 'port', '.', '▁add', '(', 'stri', '""', '\n']"~"['▁74', '\t', '""', 'database', '▁query', 'connection', '▁conn', '=', 'null', ';', '\n', '▁results', 'et', '▁rs', '=', 'null', ';', '\n', '▁statement', '▁st', 'mt', '=', 'null', ';', '\n', '▁string', '▁ms', 'ql', '=""', '""""', '"";', '\n\n', '▁vector', '▁struct', 'vector', '▁=', '▁new', '▁vector', '();', '▁//', '▁for', '▁holding', '▁the', '▁dummy', '▁variable', '▁objects', '▁used', '▁in', '▁execut', 'estruct', 'ure', '()', '\n', '▁variable', '▁v', ';', '//', '▁create', '▁this', '▁object', '▁and', '▁/', '**', '\n', '▁*', '▁construct', '▁a', '▁connection', '▁object', '.', '\n', '▁*', '▁', '@', 'param', '▁returns', '▁an', '▁object', '▁of', '▁type', '▁connection', '\n', '▁*/', '\n', '▁public', '▁connection', '▁get', 'connection', '()', '\n', '▁{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '▁in', '▁get', '▁connection', '"""");', '\n', 'connection', '▁connect', '=', 'null', ';', '\n', 'try', '\n', '{', '\n', '▁class', '.', '▁fo', '▁/', '**', '\n', '*', '▁returns', '▁graph', 'id', '▁as', '▁int', '\n', '*', '▁', '@', 'param', '▁grap', 'hn', 'ame', '▁performance', '▁model', 'handler', '▁calls', '▁this', '▁method', '▁with', '▁grap', 'hn', 'ame', '\n', '*', '▁as', '▁parameter', ',', '▁performance', '▁model', 'handler', '▁parse', '▁the', '▁events', 'erver', '▁message', '▁and', '▁get', '▁the', '\n', '*', '▁grap', 'hn', 'ame', '\n', '*', '/', '\n', '▁public', '▁int', '▁get', '▁/', '**', '\n', '*', '▁copy', '▁data', '▁from', '▁one', '▁set', '▁of', '▁columns', '▁to', '▁other', '▁in', '▁table', '▁variable', '\n', '*', '▁', '@', 'param', '▁graph', 'id', '▁is', '▁the', '▁id', '▁of', '▁graph', '▁for', '▁which', '▁you', '▁want', '▁to', '▁save', '▁the', '\n', '*', '▁current', '▁state', '▁of', '▁variables', '\n', '*', '/', '\n', '▁public', '▁void', '▁sav', 'ec', 'urrent', 'model', '(', '▁int', '▁graph', 'id', ')', '\n', '▁{', '\n\n', 'conn', '▁=', '▁this', '.', '▁get', 'connect', '/', '**', '\n', '*', '▁injects', '▁new', '▁value', '▁into', '▁variable', '▁table', ',', '▁using', '▁data', '▁stored', '▁in', '\n', '*', '▁vector', '▁of', '▁variable', '▁object', '\n', '*', '▁', '@', 'param', '▁graph', 'id', '▁is', '▁the', '▁id', '▁of', '▁graph', '\n', '*', '▁', '@', 'param', '▁vector', '▁var', '▁is', '▁the', '▁vector', '▁that', '▁stores', '▁the', '▁object', '▁of', '▁type', '▁variable', '\n', '*', '/', '\n', '▁public', '▁void', '▁inject', 'va', '▁/', '**', '\n', '*', '▁this', '▁method', '▁will', '▁pick', '▁up', '▁the', '▁structure', '▁id', '▁from', '▁spe', '▁structure', '\n', '*', '▁if', '▁dependent', 'structure', 'id', '▁is', '▁0', '▁then', '▁select', '▁structure', 'id', '\n', '*', '▁and', '▁invoke', '▁the', '▁execut', 'estruct', 'ure', '▁method', '▁on', '▁selected', '\n', '*', '▁structure', 'id', '\n', '*', '▁who', '▁invokes', '▁this', '▁method', ':', '▁performance', '▁model', '▁//', '▁this', '▁method', '▁is', '▁about', '▁executing', '▁the', '▁structure', '\n', '▁//', '▁based', '▁on', '▁structure', 'id', '▁find', '▁all', '▁the', '▁data', '▁related', '▁to', '▁given', '▁structure', 'id', '\n', '▁//', '▁and', '▁using', '▁the', '▁equation', '▁in', '▁string', '▁format', '▁call', '▁the', '▁method', '▁equation', 'parser', '.', '\n', '▁//', 'i', '▁am', '▁passing', '▁vector', '▁that', '▁has', '▁all', '▁the', '▁data', '▁abou', '▁public', '▁void', '▁sol', 'vest', 'ructure', '(', '▁int', '▁structure', 'id', ',', '▁vector', '▁vr', ')', '\n', '▁{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'inside', '▁sol', 'vest', 'ructure', '()', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '&', '"""");', '\n\n', 'connection', '▁conn', '1', '▁=', '▁this', '.', '▁get', 'connection', '();', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '▁in', '▁sol', 'vest', 'ru', '▁public', '▁void', '▁sol', 'vest', 'ructure', 'equ', 'ation', '()', '\n', '▁{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'inside', '▁sol', 'vest', 'ructure', 'equ', 'ation', '()', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '"""");', '\n\n', '//', 'based', '▁on', '▁that', '▁result', '▁find', '▁out', '▁the', '▁equation', '▁and', '▁replace', '▁the', '▁name', '▁by', '▁its', '▁value', '\n', 'system', '▁public', '▁void', '▁gett', 'rack', 'vari', 'ab', 'len', 'ame', '()', '\n', '▁{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'inside', '▁gett', 'rack', 'vari', 'ab', 'len', 'ame', '()', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '$', '"""");', '\n', '//', 'this', '▁will', '▁get', '▁the', '▁variable', '▁name', '▁from', '▁spe', '▁graph', '▁and', '▁find', '▁the', '▁same', '▁name', '▁in', '▁variable', '\n', '//', '▁and', '▁in', 'se', '▁public', '▁void', '▁set', 'calc', 'ulated', 'values', '()', '\n', '▁{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'inside', '▁set', 'calc', 'ulated', 'values', '()', '>>', '>>', '>>', '>>', '>>', '>>', '>>', '>>', '>>', '>>', '>>', '>>', '>>', '>>', '>>', '>', '>""', '"");', '\n', '//', '▁and', '▁at', '▁matching', '▁location', '▁put', '▁the', '▁calculated', '▁values', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '▁enter', '▁calc', 'value', '▁//', '▁this', '▁method', '▁creates', '▁the', '▁token', '▁for', '▁each', '▁variable', '▁name', '▁in', '▁the', '▁string', '\n', '▁//', '▁and', '▁store', '▁that', '▁variable', '▁into', '▁vector', '\n', '▁//', '▁it', '▁also', '▁creates', '▁the', '▁vector', '▁called', '▁var', 'values', '\n', '▁//', '▁var', 'values', '▁has', '▁values', '▁of', '▁each', '▁variable', '▁stored', '▁in', '▁var', 'name', '\n', '▁//', 'so', '▁equation', '▁has', '▁variable', '▁n', '▁public', '▁vector', '▁get', 'impact', 'report', '()', '\n', '▁{', '\n', '//', 'this', '▁spe', '▁graph', '▁works', '▁on', '▁the', '▁assumption', '▁that', '▁each', '▁model', '▁tracks', '\n', '//', '▁the', '▁effect', '▁of', '▁changes', '▁on', '▁one', '▁variable', '\n', 'vector', '▁report', '▁=', '▁new', '▁vector', '();', '\n', 'report', '.', '▁add', '(', '▁track', 'vari', 'ab', 'len', 'ame', ');', '\n', 'report', '.', '▁add', '(', 'stri', '""', '\n']"~"databas queri connect conn null result set null statement stmt null string sql vector struct vector new vector hold dummi variabl object use execut structur variabl creat object construct connect object param return object type connect public connect get connect system println get connect connect connect null tri class return graph int param graph name perform model handler call method graph name paramet perform model handler pars event server messag get graph name public int get copi data one set column tabl variabl param graph graph want save current state variabl public void save current model int graph conn get connect inject new valu variabl tabl use data store vector variabl object param graph graph param vector var vector store object type variabl public void inject method pick structur spe structur depend structur select structur invok execut structur method select structur invok method perform model method execut structur base structur find data relat given structur use equat string format call method equat parser pass vector data abou public void solv structur int structur vector system println insid solv structur connect conn get connect system println solv stru public void solv structur equat system println insid solv structur equat base result find equat replac name valu system public void get track variabl name system println insid get track variabl name get variabl name spe graph find name variabl ins public void set calcul valu system println ("""" insid set calcul valu match locat put calcul valu system println ("""" enter calc valu method creat token variabl name string store variabl vector also creat vector call var valu var valu valu variabl store var name equat variabl public vector get impact report spe graph work assumpt model track effect chang one variabl vector report new vector (); report add track variabl name report add stri"
68~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/81.java~81.java~"81	""subscribermanager Socket aSocket;
 int ID;
 String EventLog;

 Connection conn;
 ResultSet rs;
 Statement stmt; // constructor, this object will be created in the main method of these class
 SubscriberListener() { } // constructor, this object will be created in the main method of these class
 SubscriberListener(Socket socket, int ID, String ELog)
 {

 this. aSocket = socket;
this.ID = ID;
this.EventLog = ELog;

try
{
public void sendImpactReportToEventServer(String text)
 {

//String impactReport = text;
System. out. println(""""WOW IN SEND REPORT"""");
System. out. println(""""The IR = """"+ text);
String serverIP = """"140. // run method will be execute from the main method when u say Thread. start() in main
 public void run()
 {

System. out. println(""""Inside Run method"""");

String str="""""""";
try
{
 // set up for reading the byte data in to characte // start of class from here
 public static void main(String[] args)
 {
// default port number
int port = 1705;
// the message coming from eventserver
String LogName = """"EventLog"""";
//LogName is the database name used to log t""
"~src~"['▁8', '1', '\t', '""', 'sub', 'sc', 'ri', 'ber', 'man', 'ager', '▁s', 'ock', 'et', '▁as', 'ock', 'et', ';', '\n', '▁int', '▁id', ';', '\n', '▁string', '▁event', 'l', 'og', ';', '\n\n', '▁connection', '▁conn', ';', '\n', '▁results', 'et', '▁r', 's', ';', '\n', '▁statement', '▁st', 'm', 't', ';', '▁/', '/', '▁construct', 'or', ',', '▁this', '▁object', '▁will', '▁be', '▁created', '▁in', '▁the', '▁main', '▁method', '▁of', '▁these', '▁class', '\n', '▁sub', 'sc', 'ri', 'ber', 'list', 'en', 'er', '(', ')', '▁{', '▁}', '▁/', '/', '▁construct', 'or', ',', '▁this', '▁object', '▁will', '▁be', '▁created', '▁in', '▁the', '▁main', '▁method', '▁of', '▁these', '▁class', '\n', '▁sub', 'sc', 'ri', 'ber', 'list', 'en', 'er', '(', 's', 'ock', 'et', '▁s', 'ock', 'et', ',', '▁int', '▁id', ',', '▁string', '▁el', 'og', ')', '\n', '▁{', '\n\n', '▁this', '.', '▁as', 'ock', 'et', '▁=', '▁s', 'ock', 'et', ';', '\n', 'this', '.', 'id', '▁=', '▁id', ';', '\n', 'this', '.', 'ev', 'ent', 'l', 'og', '▁=', '▁el', 'og', ';', '\n\n', 't', 'ry', '\n', '{', '\n', 'publ', 'ic', '▁vo', 'id', '▁s', 'end', 'im', 'p', 'act', 're', 'port', 'to', 'ev', 'ents', 'er', 'ver', '(', 'str', 'ing', '▁text', ')', '\n', '▁{', '\n\n', '//', 'str', 'ing', '▁impact', 're', 'port', '▁=', '▁text', ';', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'w', 'ow', '▁in', '▁s', 'end', '▁report', '""', '"")', ';', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'the', '▁ir', '▁=', '▁""', '""', '+', '▁text', ');', '\n', 'str', 'ing', '▁ser', 'ver', 'ip', '▁=', '▁""', '""', '14', '0.', '▁/', '/', '▁run', '▁method', '▁will', '▁be', '▁ex', 'ec', 'ute', '▁from', '▁the', '▁main', '▁method', '▁when', '▁u', '▁say', '▁th', 'read', '.', '▁start', '(', ')', '▁in', '▁main', '\n', '▁public', '▁vo', 'id', '▁run', '(', ')', '\n', '▁{', '\n\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'ins', 'ide', '▁run', '▁method', '""', '"")', ';', '\n\n', 'str', 'ing', '▁str', '=""', '""', '""', '""', ';', '\n', 't', 'ry', '\n', '{', '\n', '▁/', '/', '▁set', '▁up', '▁for', '▁reading', '▁the', '▁by', 'te', '▁data', '▁in', '▁to', '▁char', 'act', 'e', '▁/', '/', '▁start', '▁of', '▁class', '▁from', '▁here', '\n', '▁public', '▁st', 'atic', '▁vo', 'id', '▁main', '(', 'str', 'ing', '[', ']', '▁arg', 's', ')', '\n', '▁{', '\n', '//', '▁def', 'ault', '▁port', '▁number', '\n', 'int', '▁port', '▁=', '▁17', '05', ';', '\n', '//', '▁the', '▁message', '▁coming', '▁from', '▁events', 'er', 'ver', '\n', 'str', 'ing', '▁l', 'ogn', 'ame', '▁=', '▁""', '""', 'ev', 'ent', 'l', 'og', '""', '""', ';', '\n', '//', 'l', 'ogn', 'ame', '▁is', '▁the', '▁database', '▁name', '▁used', '▁to', '▁log', '▁t', '""', '\n']"~"['▁81', '\t', '""', 'sub', 'sc', 'ri', 'ber', 'manager', '▁sock', 'et', '▁as', 'ock', 'et', ';', '\n', '▁int', '▁id', ';', '\n', '▁string', '▁event', 'log', ';', '\n\n', '▁connection', '▁conn', ';', '\n', '▁results', 'et', '▁rs', ';', '\n', '▁statement', '▁st', 'mt', ';', '▁//', '▁construct', 'or', ',', '▁this', '▁object', '▁will', '▁be', '▁created', '▁in', '▁the', '▁main', '▁method', '▁of', '▁these', '▁class', '\n', '▁subsc', 'ri', 'ber', 'list', 'ener', '()', '▁{', '▁}', '▁//', '▁construct', 'or', ',', '▁this', '▁object', '▁will', '▁be', '▁created', '▁in', '▁the', '▁main', '▁method', '▁of', '▁these', '▁class', '\n', '▁subsc', 'ri', 'ber', 'list', 'ener', '(', 's', 'ock', 'et', '▁sock', 'et', ',', '▁int', '▁id', ',', '▁string', '▁el', 'og', ')', '\n', '▁{', '\n\n', '▁this', '.', '▁as', 'ock', 'et', '▁=', '▁sock', 'et', ';', '\n', 'this', '.', 'id', '▁=', '▁id', ';', '\n', 'this', '.', 'event', 'log', '▁=', '▁el', 'og', ';', '\n\n', 'try', '\n', '{', '\n', 'public', '▁void', '▁send', 'imp', 'act', 're', 'port', 'to', 'ev', 'ents', 'erver', '(', 'string', '▁text', ')', '\n', '▁{', '\n\n', '//', 'string', '▁impact', 're', 'port', '▁=', '▁text', ';', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'w', 'ow', '▁in', '▁send', '▁report', '""', '"");', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'the', '▁ir', '▁=', '▁""""', '+', '▁text', ');', '\n', 'string', '▁server', 'ip', '▁=', '▁""""', '14', '0.', '▁//', '▁run', '▁method', '▁will', '▁be', '▁execute', '▁from', '▁the', '▁main', '▁method', '▁when', '▁u', '▁say', '▁thread', '.', '▁start', '()', '▁in', '▁main', '\n', '▁public', '▁void', '▁run', '()', '\n', '▁{', '\n\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'ins', 'ide', '▁run', '▁method', '""', '"");', '\n\n', 'string', '▁str', '=""', '""', '""', '"";', '\n', 'try', '\n', '{', '\n', '▁//', '▁set', '▁up', '▁for', '▁reading', '▁the', '▁byte', '▁data', '▁in', '▁to', '▁char', 'act', 'e', '▁//', '▁start', '▁of', '▁class', '▁from', '▁here', '\n', '▁public', '▁static', '▁void', '▁main', '(', 'string', '[]', '▁arg', 's', ')', '\n', '▁{', '\n', '//', '▁default', '▁port', '▁number', '\n', 'int', '▁port', '▁=', '▁17', '05', ';', '\n', '//', '▁the', '▁message', '▁coming', '▁from', '▁events', 'erver', '\n', 'string', '▁l', 'ogn', 'ame', '▁=', '▁""""', 'event', 'log', '""', '"";', '\n', '//', 'l', 'ogn', 'ame', '▁is', '▁the', '▁database', '▁name', '▁used', '▁to', '▁log', '▁t', '""', '\n']"~"['▁81', '\t', '""', 'subsc', 'riber', 'manager', '▁socket', '▁as', 'ocket', ';', '\n', '▁int', '▁id', ';', '\n', '▁string', '▁event', 'log', ';', '\n\n', '▁connection', '▁conn', ';', '\n', '▁results', 'et', '▁rs', ';', '\n', '▁statement', '▁st', 'mt', ';', '▁//', '▁constructor', ',', '▁this', '▁object', '▁will', '▁be', '▁created', '▁in', '▁the', '▁main', '▁method', '▁of', '▁these', '▁class', '\n', '▁subscriber', 'listener', '()', '▁{', '▁}', '▁//', '▁constructor', ',', '▁this', '▁object', '▁will', '▁be', '▁created', '▁in', '▁the', '▁main', '▁method', '▁of', '▁these', '▁class', '\n', '▁subscriber', 'listener', '(', 's', 'ocket', '▁socket', ',', '▁int', '▁id', ',', '▁string', '▁el', 'og', ')', '\n', '▁{', '\n\n', '▁this', '.', '▁as', 'ocket', '▁=', '▁socket', ';', '\n', 'this', '.', 'id', '▁=', '▁id', ';', '\n', 'this', '.', 'event', 'log', '▁=', '▁el', 'og', ';', '\n\n', 'try', '\n', '{', '\n', 'public', '▁void', '▁send', 'impact', 'report', 'to', 'events', 'erver', '(', 'string', '▁text', ')', '\n', '▁{', '\n\n', '//', 'string', '▁impact', 'report', '▁=', '▁text', ';', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'wow', '▁in', '▁send', '▁report', '"""");', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'the', '▁ir', '▁=', '▁""""', '+', '▁text', ');', '\n', 'string', '▁server', 'ip', '▁=', '▁""""', '14', '0.', '▁//', '▁run', '▁method', '▁will', '▁be', '▁execute', '▁from', '▁the', '▁main', '▁method', '▁when', '▁u', '▁say', '▁thread', '.', '▁start', '()', '▁in', '▁main', '\n', '▁public', '▁void', '▁run', '()', '\n', '▁{', '\n\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'inside', '▁run', '▁method', '"""");', '\n\n', 'string', '▁str', '=""', '""""', '"";', '\n', 'try', '\n', '{', '\n', '▁//', '▁set', '▁up', '▁for', '▁reading', '▁the', '▁byte', '▁data', '▁in', '▁to', '▁char', 'act', 'e', '▁//', '▁start', '▁of', '▁class', '▁from', '▁here', '\n', '▁public', '▁static', '▁void', '▁main', '(', 'string', '[]', '▁args', ')', '\n', '▁{', '\n', '//', '▁default', '▁port', '▁number', '\n', 'int', '▁port', '▁=', '▁1705', ';', '\n', '//', '▁the', '▁message', '▁coming', '▁from', '▁events', 'erver', '\n', 'string', '▁l', 'ogn', 'ame', '▁=', '▁""""', 'event', 'log', '""', '"";', '\n', '//', 'l', 'ogn', 'ame', '▁is', '▁the', '▁database', '▁name', '▁used', '▁to', '▁log', '▁t', '""', '\n']"~subscribermanag socket socket int string event log connect conn result set statement stmt constructor object creat main method class subscrib listen constructor object creat main method class subscrib listen socket socket int string elog socket socket event log elog tri public void send impact report event server string text string impact report text system println wow send report system println text string server run method execut main method say thread start main public void run system println insid run method string str tri set read byte data charact start class public static void main string arg default port number int port messag come eventserv string log name event log log name databas name use log
69~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/58.java~58.java~"58	""Subscribed Model private String SubscriberName;
private String SubscriberReqno;
private String SubscriberModule;
private String SubscriberKeyword1;
private String SubscriberKeyword2;public SubscribedModel(String sn, String sr, String sm, String sk1, String sk2)
{
SubscriberName = sn;
SubscriberReqno = sr;
SubscriberModule = sm;
SubscriberKeyword1 = sk1;
SubscriberKeyword2 = s public String GetSubscriberName() { return SubscriberName;} public String GetSubscriberReqno() { return SubscriberReqno;} public String GetSubscriberModule() { return SubscriberModule;} public String GetSubscriberKeyword1() { return SubscriberKeyword1;} public String GetSubscriberKeyword2() { return SubscriberKeyword2;}""
"~src~"['▁5', '8', '\t', '""', 'sub', 'sc', 'rib', 'ed', '▁model', '▁private', '▁string', '▁sub', 'sc', 'ri', 'ber', 'name', ';', '\n', 'pr', 'iv', 'ate', '▁string', '▁sub', 'sc', 'ri', 'ber', 're', 'q', 'no', ';', '\n', 'pr', 'iv', 'ate', '▁string', '▁sub', 'sc', 'ri', 'ber', 'mod', 'ule', ';', '\n', 'pr', 'iv', 'ate', '▁string', '▁sub', 'sc', 'ri', 'ber', 'key', 'w', 'ord', '1', ';', '\n', 'pr', 'iv', 'ate', '▁string', '▁sub', 'sc', 'ri', 'ber', 'key', 'w', 'ord', '2', ';', 'publ', 'ic', '▁sub', 'sc', 'rib', 'ed', 'mod', 'el', '(', 'str', 'ing', '▁sn', ',', '▁string', '▁sr', ',', '▁string', '▁sm', ',', '▁string', '▁sk', '1,', '▁string', '▁sk', '2)', '\n', '{', '\n', 'sub', 'sc', 'ri', 'ber', 'name', '▁=', '▁sn', ';', '\n', 'sub', 'sc', 'ri', 'ber', 're', 'q', 'no', '▁=', '▁sr', ';', '\n', 'sub', 'sc', 'ri', 'ber', 'mod', 'ule', '▁=', '▁sm', ';', '\n', 'sub', 'sc', 'ri', 'ber', 'key', 'w', 'ord', '1', '▁=', '▁sk', '1', ';', '\n', 'sub', 'sc', 'ri', 'ber', 'key', 'w', 'ord', '2', '▁=', '▁s', '▁public', '▁string', '▁gets', 'ub', 'sc', 'ri', 'ber', 'name', '(', ')', '▁{', '▁return', '▁sub', 'sc', 'ri', 'ber', 'name', ';', '}', '▁public', '▁string', '▁gets', 'ub', 'sc', 'ri', 'ber', 're', 'q', 'no', '(', ')', '▁{', '▁return', '▁sub', 'sc', 'ri', 'ber', 're', 'q', 'no', ';', '}', '▁public', '▁string', '▁gets', 'ub', 'sc', 'ri', 'ber', 'mod', 'ule', '(', ')', '▁{', '▁return', '▁sub', 'sc', 'ri', 'ber', 'mod', 'ule', ';', '}', '▁public', '▁string', '▁gets', 'ub', 'sc', 'ri', 'ber', 'key', 'w', 'ord', '1', '(', ')', '▁{', '▁return', '▁sub', 'sc', 'ri', 'ber', 'key', 'w', 'ord', '1', ';', '}', '▁public', '▁string', '▁gets', 'ub', 'sc', 'ri', 'ber', 'key', 'w', 'ord', '2', '(', ')', '▁{', '▁return', '▁sub', 'sc', 'ri', 'ber', 'key', 'w', 'ord', '2', ';', '}', '""', '\n']"~"['▁58', '\t', '""', 'sub', 'sc', 'ribed', '▁model', '▁private', '▁string', '▁subsc', 'ri', 'ber', 'name', ';', '\n', 'private', '▁string', '▁subsc', 'ri', 'ber', 're', 'q', 'no', ';', '\n', 'private', '▁string', '▁subsc', 'ri', 'ber', 'mod', 'ule', ';', '\n', 'private', '▁string', '▁subsc', 'ri', 'ber', 'key', 'word', '1', ';', '\n', 'private', '▁string', '▁subsc', 'ri', 'ber', 'key', 'word', '2', ';', 'public', '▁subsc', 'ribed', 'model', '(', 'string', '▁sn', ',', '▁string', '▁sr', ',', '▁string', '▁sm', ',', '▁string', '▁sk', '1,', '▁string', '▁sk', '2)', '\n', '{', '\n', 'sub', 'sc', 'ri', 'ber', 'name', '▁=', '▁sn', ';', '\n', 'sub', 'sc', 'ri', 'ber', 're', 'q', 'no', '▁=', '▁sr', ';', '\n', 'sub', 'sc', 'ri', 'ber', 'mod', 'ule', '▁=', '▁sm', ';', '\n', 'sub', 'sc', 'ri', 'ber', 'key', 'word', '1', '▁=', '▁sk', '1', ';', '\n', 'sub', 'sc', 'ri', 'ber', 'key', 'word', '2', '▁=', '▁s', '▁public', '▁string', '▁gets', 'ub', 'sc', 'ri', 'ber', 'name', '()', '▁{', '▁return', '▁subsc', 'ri', 'ber', 'name', ';', '}', '▁public', '▁string', '▁gets', 'ub', 'sc', 'ri', 'ber', 're', 'q', 'no', '()', '▁{', '▁return', '▁subsc', 'ri', 'ber', 're', 'q', 'no', ';', '}', '▁public', '▁string', '▁gets', 'ub', 'sc', 'ri', 'ber', 'mod', 'ule', '()', '▁{', '▁return', '▁subsc', 'ri', 'ber', 'mod', 'ule', ';', '}', '▁public', '▁string', '▁gets', 'ub', 'sc', 'ri', 'ber', 'key', 'word', '1', '()', '▁{', '▁return', '▁subsc', 'ri', 'ber', 'key', 'word', '1', ';', '}', '▁public', '▁string', '▁gets', 'ub', 'sc', 'ri', 'ber', 'key', 'word', '2', '()', '▁{', '▁return', '▁subsc', 'ri', 'ber', 'key', 'word', '2', ';', '}', '""', '\n']"~"['▁58', '\t', '""', 'subsc', 'ribed', '▁model', '▁private', '▁string', '▁subscriber', 'name', ';', '\n', 'private', '▁string', '▁subscriber', 'req', 'no', ';', '\n', 'private', '▁string', '▁subscriber', 'module', ';', '\n', 'private', '▁string', '▁subscriber', 'key', 'word', '1;', '\n', 'private', '▁string', '▁subscriber', 'key', 'word', '2;', 'public', '▁subscribed', 'model', '(', 'string', '▁sn', ',', '▁string', '▁sr', ',', '▁string', '▁sm', ',', '▁string', '▁sk', '1,', '▁string', '▁sk', '2)', '\n', '{', '\n', 'subsc', 'riber', 'name', '▁=', '▁sn', ';', '\n', 'subsc', 'riber', 'req', 'no', '▁=', '▁sr', ';', '\n', 'subsc', 'riber', 'module', '▁=', '▁sm', ';', '\n', 'subsc', 'riber', 'key', 'word', '1', '▁=', '▁sk', '1;', '\n', 'subsc', 'riber', 'key', 'word', '2', '▁=', '▁s', '▁public', '▁string', '▁gets', 'ub', 'sc', 'riber', 'name', '()', '▁{', '▁return', '▁subscriber', 'name', ';', '}', '▁public', '▁string', '▁gets', 'ub', 'sc', 'riber', 'req', 'no', '()', '▁{', '▁return', '▁subscriber', 'req', 'no', ';', '}', '▁public', '▁string', '▁gets', 'ub', 'sc', 'riber', 'module', '()', '▁{', '▁return', '▁subscriber', 'module', ';', '}', '▁public', '▁string', '▁gets', 'ub', 'sc', 'riber', 'key', 'word', '1', '()', '▁{', '▁return', '▁subscriber', 'key', 'word', '1;', '}', '▁public', '▁string', '▁gets', 'ub', 'sc', 'riber', 'key', 'word', '2', '()', '▁{', '▁return', '▁subscriber', 'key', 'word', '2;', '}', '""', '\n']"~subscrib model privat string subscrib name privat string subscrib reqno privat string subscrib modul privat string subscrib keyword privat string subscrib keyword public subscrib model string string string string string subscrib name subscrib reqno subscrib modul subscrib keyword subscrib keyword public string get subscrib name return subscrib name public string get subscrib reqno return subscrib reqno public string get subscrib modul return subscrib modul public string get subscrib keyword return subscrib keyword public string get subscrib keyword return subscrib keyword
70~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/93.java~93.java~"93	""Obsolete Modelpublic ObsoleteModel(EBT em)
{
super( em);
 } // Construct Visual model for Merge Event
public void BuildEvent()
{
 ClearVectors();
AddEventRect(60,80,1);
AddLine(60,60,225,135);
AddLine(60,135,225,60);
CurrentEve public StringBuffer GenerateEvent()
 {
StringBuffer thisEvent = new StringBuffer();
thisEvent. append(""""Obsolete|0|"""");
thisEvent. append( new Date(). toString()+""""|"""");
ebs = (EBShape)EventShapes. e""
"~src~"['▁9', '3', '\t', '""', 'ob', 'so', 'lete', '▁model', 'publ', 'ic', '▁ob', 'so', 'let', 'em', 'od', 'el', '(', 'e', 'b', 't', '▁em', ')', '\n', '{', '\n', 'sup', 'er', '(', '▁em', ');', '\n', '▁}', '▁/', '/', '▁construct', '▁visual', '▁model', '▁for', '▁mer', 'ge', '▁event', '\n', 'publ', 'ic', '▁vo', 'id', '▁build', 'ev', 'ent', '(', ')', '\n', '{', '\n', '▁clear', 'v', 'ect', 'ors', '(', ');', '\n', 'ad', 'de', 'vent', 'rect', '(', '6', '0,', '8', '0,', '1)', ';', '\n', 'ad', 'd', 'line', '(', '6', '0,', '6', '0,', '22', '5,', '13', '5)', ';', '\n', 'ad', 'd', 'line', '(', '6', '0,', '13', '5,', '22', '5,', '6', '0)', ';', '\n', 'cur', 'ren', 'te', 've', '▁public', '▁string', 'b', 'uf', 'fer', '▁gener', 'ate', 'ev', 'ent', '(', ')', '\n', '▁{', '\n', 'str', 'ing', 'b', 'uf', 'fer', '▁this', 'ev', 'ent', '▁=', '▁new', '▁string', 'b', 'uf', 'fer', '(', ');', '\n', 'th', 'ise', 'vent', '.', '▁app', 'end', '(', '""', '""', 'ob', 'so', 'lete', '|', '0', '|', '""', '"")', ';', '\n', 'th', 'ise', 'vent', '.', '▁app', 'end', '(', '▁new', '▁date', '(', ').', '▁to', 'str', 'ing', '(', ')', '+', '""', '""|', '""', '"")', ';', '\n', 'e', 'bs', '▁=', '▁(', 'e', 'b', 'sh', 'ape', ')', 'ev', 'ents', 'h', 'apes', '.', '▁e', '""', '\n']"~"['▁93', '\t', '""', 'ob', 'solete', '▁model', 'public', '▁ob', 'so', 'let', 'em', 'od', 'el', '(', 'eb', 't', '▁em', ')', '\n', '{', '\n', 'super', '(', '▁em', ');', '\n', '▁}', '▁//', '▁construct', '▁visual', '▁model', '▁for', '▁merge', '▁event', '\n', 'public', '▁void', '▁build', 'event', '()', '\n', '{', '\n', '▁clear', 'v', 'ectors', '();', '\n', 'ad', 'de', 'vent', 'rect', '(', '6', '0,', '8', '0,', '1)', ';', '\n', 'add', 'line', '(', '6', '0,', '6', '0,', '22', '5,', '13', '5)', ';', '\n', 'add', 'line', '(', '6', '0,', '13', '5,', '22', '5,', '6', '0)', ';', '\n', 'cur', 'ren', 'te', 've', '▁public', '▁string', 'b', 'uffer', '▁generate', 'event', '()', '\n', '▁{', '\n', 'string', 'b', 'uffer', '▁this', 'event', '▁=', '▁new', '▁string', 'b', 'uffer', '();', '\n', 'th', 'ise', 'vent', '.', '▁append', '(""', '""', 'ob', 'solete', '|', '0', '|', '""', '"");', '\n', 'th', 'ise', 'vent', '.', '▁append', '(', '▁new', '▁date', '().', '▁to', 'string', '()', '+', '""', '""|', '""', '"");', '\n', 'e', 'bs', '▁=', '▁(', 'eb', 'shape', ')', 'ev', 'ents', 'h', 'apes', '.', '▁e', '""', '\n']"~"['▁93', '\t', '""', 'obsolete', '▁model', 'public', '▁obso', 'let', 'em', 'odel', '(', 'eb', 't', '▁em', ')', '\n', '{', '\n', 'super', '(', '▁em', ');', '\n', '▁}', '▁//', '▁construct', '▁visual', '▁model', '▁for', '▁merge', '▁event', '\n', 'public', '▁void', '▁build', 'event', '()', '\n', '{', '\n', '▁clear', 'v', 'ectors', '();', '\n', 'ad', 'de', 'vent', 'rect', '(6', '0,', '80,', '1);', '\n', 'add', 'line', '(6', '0,', '60,', '22', '5,', '13', '5);', '\n', 'add', 'line', '(6', '0,', '13', '5,', '22', '5,', '6', '0);', '\n', 'cur', 'rente', 've', '▁public', '▁string', 'buffer', '▁generate', 'event', '()', '\n', '▁{', '\n', 'string', 'buffer', '▁this', 'event', '▁=', '▁new', '▁string', 'buffer', '();', '\n', 'th', 'ise', 'vent', '.', '▁append', '(""', '""', 'obsolete', '|0', '|', '"""");', '\n', 'th', 'ise', 'vent', '.', '▁append', '(', '▁new', '▁date', '().', '▁to', 'string', '()', '+""', '""|', '"""");', '\n', 'e', 'bs', '▁=', '▁(', 'eb', 'shape', ')', 'events', 'h', 'apes', '.', '▁e', '""', '\n']"~obsolet modelpubl obsolet model ebt super construct visual model merg event public void build event clear vector add event rect add line add line current eve public string buffer generat event string buffer event new string buffer event append obsolet event append new date string ebshap event shape
71~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/51.java~51.java~"51	""Driver Inner Panel private JLabel projectNameLabel = null;
 private JLabel modulePathLabel = null;
 private JLabel requirementIdLabel = null;
 private JLabel desLabel = null;
 private JLabel changeLabel = null;
 private JLabel fromLabel = null;String projectName,
String modulePath,
String requirementID,
String description,
String changeAttribute,
String fromValue,
String toValue) {

panel = new JPanel();

panel. setBackground(Color.LIGHTpublic JPanel createPanel() {

return panel;
 }""
"~src~"['▁5', '1', '\t', '""', 'dr', 'iver', '▁inner', '▁pan', 'el', '▁private', '▁j', 'l', 'ab', 'el', '▁project', 'nam', 'el', 'ab', 'el', '▁=', '▁n', 'ull', ';', '\n', '▁private', '▁j', 'l', 'ab', 'el', '▁mod', 'ule', 'p', 'ath', 'l', 'ab', 'el', '▁=', '▁n', 'ull', ';', '\n', '▁private', '▁j', 'l', 'ab', 'el', '▁require', 'ment', 'id', 'l', 'ab', 'el', '▁=', '▁n', 'ull', ';', '\n', '▁private', '▁j', 'l', 'ab', 'el', '▁des', 'l', 'ab', 'el', '▁=', '▁n', 'ull', ';', '\n', '▁private', '▁j', 'l', 'ab', 'el', '▁chang', 'el', 'ab', 'el', '▁=', '▁n', 'ull', ';', '\n', '▁private', '▁j', 'l', 'ab', 'el', '▁from', 'l', 'ab', 'el', '▁=', '▁n', 'ull', ';', 'str', 'ing', '▁project', 'name', ',', '\n', 'str', 'ing', '▁mod', 'ule', 'p', 'ath', ',', '\n', 'str', 'ing', '▁require', 'ment', 'id', ',', '\n', 'str', 'ing', '▁description', ',', '\n', 'str', 'ing', '▁change', 'att', 'rib', 'ute', ',', '\n', 'str', 'ing', '▁from', 'value', ',', '\n', 'str', 'ing', '▁to', 'value', ')', '▁{', '\n\n', 'pan', 'el', '▁=', '▁new', '▁j', 'pan', 'el', '(', ');', '\n\n', 'pan', 'el', '.', '▁set', 'background', '(', 'color', '.', 'light', 'publ', 'ic', '▁j', 'pan', 'el', '▁create', 'pan', 'el', '(', ')', '▁{', '\n\n', 'ret', 'urn', '▁pan', 'el', ';', '\n', '▁}', '""', '\n']"~"['▁51', '\t', '""', 'dr', 'iver', '▁inner', '▁panel', '▁private', '▁j', 'l', 'abel', '▁project', 'nam', 'el', 'abel', '▁=', '▁null', ';', '\n', '▁private', '▁j', 'l', 'abel', '▁module', 'path', 'l', 'abel', '▁=', '▁null', ';', '\n', '▁private', '▁j', 'l', 'abel', '▁requirement', 'id', 'l', 'abel', '▁=', '▁null', ';', '\n', '▁private', '▁j', 'l', 'abel', '▁des', 'l', 'abel', '▁=', '▁null', ';', '\n', '▁private', '▁j', 'l', 'abel', '▁chang', 'el', 'abel', '▁=', '▁null', ';', '\n', '▁private', '▁j', 'l', 'abel', '▁from', 'l', 'abel', '▁=', '▁null', ';', 'string', '▁project', 'name', ',', '\n', 'string', '▁module', 'path', ',', '\n', 'string', '▁requirement', 'id', ',', '\n', 'string', '▁description', ',', '\n', 'string', '▁change', 'att', 'ribute', ',', '\n', 'string', '▁from', 'value', ',', '\n', 'string', '▁to', 'value', ')', '▁{', '\n\n', 'pan', 'el', '▁=', '▁new', '▁j', 'pan', 'el', '();', '\n\n', 'pan', 'el', '.', '▁set', 'background', '(', 'color', '.', 'light', 'public', '▁j', 'pan', 'el', '▁create', 'pan', 'el', '()', '▁{', '\n\n', 'return', '▁panel', ';', '\n', '▁}', '""', '\n']"~"['▁51', '\t', '""', 'driver', '▁inner', '▁panel', '▁private', '▁j', 'label', '▁project', 'nam', 'el', 'abel', '▁=', '▁null', ';', '\n', '▁private', '▁j', 'label', '▁module', 'path', 'label', '▁=', '▁null', ';', '\n', '▁private', '▁j', 'label', '▁requirement', 'id', 'label', '▁=', '▁null', ';', '\n', '▁private', '▁j', 'label', '▁des', 'label', '▁=', '▁null', ';', '\n', '▁private', '▁j', 'label', '▁chang', 'el', 'abel', '▁=', '▁null', ';', '\n', '▁private', '▁j', 'label', '▁from', 'label', '▁=', '▁null', ';', 'string', '▁project', 'name', ',', '\n', 'string', '▁module', 'path', ',', '\n', 'string', '▁requirement', 'id', ',', '\n', 'string', '▁description', ',', '\n', 'string', '▁change', 'attribute', ',', '\n', 'string', '▁from', 'value', ',', '\n', 'string', '▁to', 'value', ')', '▁{', '\n\n', 'panel', '▁=', '▁new', '▁j', 'panel', '();', '\n\n', 'panel', '.', '▁set', 'background', '(', 'color', '.', 'light', 'public', '▁j', 'panel', '▁create', 'panel', '()', '▁{', '\n\n', 'return', '▁panel', ';', '\n', '▁}', '""', '\n']"~driver inner panel privat jlabel project name label null privat jlabel modul path label null privat jlabel requir label null privat jlabel des label null privat jlabel chang label null privat jlabel label null string project name string modul path string requir string descript string chang attribut string valu string valu panel new jpanel panel set background color lightpubl jpanel creat panel return panel
72~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/46.java~46.java~"private JPanel center  Panel = null  ;

 private JLabel des  Label = null  ;
 private JLabel change  Label = null  ;
 private JLabel from  Label = null  ;
 private JLabel to  Label = null  ;
 private JText  Area des  Text = null  ;
 private JText  Field c Speculate Gui public Speculate  Gui  ()
 {

  super  (""  Speculate GUI  "");

  container = get  Content  Pane  ();

  set  Size  (  800  , 600  );

  this  . event  Server  IP =
   JOption  Pane
    . show  Input  Dialog  (""  Please Enter the IP Address of eventserver  Submit Listener public void action  Performed  (  Action  Event e  ) {

   if ( e  . get  Source  () == submit  Button  ) {

    send  Query  TO Server  ();

   }

   if ( e  . get  Source  () == fetch  Button  ) {


    System  . out  . println  (""  Fetch Button Pressed void send  Query  TO Server  ()
 {

  String ip = this  . event  Server  IP  ;
  int Port  No = 1701  ;

  Socket socket  ;
  try {

   socket = new Socket  ( ip  , Port  No  );

   Output  Stream os = socket  . get  Output  Stream  ();
   Output  Stream  public void pull  Value  From  DOORS  ()
 {

  String server  IP = new String  ( doors server  IP  ); //""  140  .  192  .  37  .  150  "";

  String  [] attribute = { ""  Value  "", ""  Attribute  "" };

  String project  Name = this  . proj  Name  Text  . get public static void main  (  String  [] args  )
 {
  new Speculate  Gui  ();
 }"~src~"['▁private', '▁j', 'pan', 'el', '▁center', '▁pan', 'el', '▁=', '▁n', 'ull', '▁;', '\n\n', '▁private', '▁j', 'l', 'ab', 'el', '▁des', '▁label', '▁=', '▁n', 'ull', '▁;', '\n', '▁private', '▁j', 'l', 'ab', 'el', '▁change', '▁label', '▁=', '▁n', 'ull', '▁;', '\n', '▁private', '▁j', 'l', 'ab', 'el', '▁from', '▁label', '▁=', '▁n', 'ull', '▁;', '\n', '▁private', '▁j', 'l', 'ab', 'el', '▁to', '▁label', '▁=', '▁n', 'ull', '▁;', '\n', '▁private', '▁j', 'text', '▁area', '▁des', '▁text', '▁=', '▁n', 'ull', '▁;', '\n', '▁private', '▁j', 'text', '▁field', '▁c', '▁spec', 'ulate', '▁gu', 'i', '▁public', '▁spec', 'ulate', '▁gu', 'i', '▁()', '\n', '▁{', '\n\n', '▁super', '▁(""', '▁spec', 'ulate', '▁gu', 'i', '▁""', ');', '\n\n', '▁contain', 'er', '▁=', '▁get', '▁content', '▁p', 'ane', '▁()', ';', '\n\n', '▁set', '▁size', '▁(', '▁8', '00', '▁,', '▁6', '00', '▁', ');', '\n\n', '▁this', '▁.', '▁event', '▁ser', 'ver', '▁ip', '▁=', '\n', '▁j', 'op', 't', 'ion', '▁p', 'ane', '\n', '▁.', '▁show', '▁in', 'put', '▁dial', 'og', '▁(""', '▁ple', 'ase', '▁enter', '▁the', '▁ip', '▁address', '▁of', '▁events', 'er', 'ver', '▁sub', 'mit', '▁list', 'en', 'er', '▁public', '▁vo', 'id', '▁action', '▁performed', '▁(', '▁action', '▁event', '▁e', '▁)', '▁{', '\n\n', '▁if', '▁(', '▁e', '▁.', '▁get', '▁source', '▁()', '▁=', '=', '▁sub', 'mit', '▁but', 'ton', '▁)', '▁{', '\n\n', '▁s', 'end', '▁qu', 'ery', '▁to', '▁ser', 'ver', '▁()', ';', '\n\n', '▁}', '\n\n', '▁if', '▁(', '▁e', '▁.', '▁get', '▁source', '▁()', '▁=', '=', '▁f', 'et', 'ch', '▁but', 'ton', '▁)', '▁{', '\n\n\n', '▁system', '▁.', '▁out', '▁.', '▁print', 'l', 'n', '▁(""', '▁f', 'et', 'ch', '▁but', 'ton', '▁press', 'ed', '▁vo', 'id', '▁s', 'end', '▁qu', 'ery', '▁to', '▁ser', 'ver', '▁()', '\n', '▁{', '\n\n', '▁string', '▁ip', '▁=', '▁this', '▁.', '▁event', '▁ser', 'ver', '▁ip', '▁;', '\n', '▁int', '▁port', '▁no', '▁=', '▁17', '01', '▁;', '\n\n', '▁s', 'ock', 'et', '▁s', 'ock', 'et', '▁;', '\n', '▁try', '▁{', '\n\n', '▁s', 'ock', 'et', '▁=', '▁new', '▁s', 'ock', 'et', '▁(', '▁ip', '▁,', '▁port', '▁no', '▁', ');', '\n\n', '▁out', 'put', '▁stream', '▁os', '▁=', '▁s', 'ock', 'et', '▁.', '▁get', '▁out', 'put', '▁stream', '▁()', ';', '\n', '▁out', 'put', '▁stream', '▁public', '▁vo', 'id', '▁pull', '▁value', '▁from', '▁do', 'ors', '▁()', '\n', '▁{', '\n\n', '▁string', '▁ser', 'ver', '▁ip', '▁=', '▁new', '▁string', '▁(', '▁do', 'ors', '▁ser', 'ver', '▁ip', '▁', ');', '▁/', '/', '""', '▁14', '0', '▁.', '▁192', '▁.', '▁37', '▁.', '▁150', '▁""', ';', '\n\n', '▁string', '▁[', ']', '▁att', 'rib', 'ute', '▁=', '▁{', '▁""', '▁value', '▁""', ',', '▁""', '▁att', 'rib', 'ute', '▁""', '▁}', ';', '\n\n', '▁string', '▁project', '▁name', '▁=', '▁this', '▁.', '▁pro', 'j', '▁name', '▁text', '▁.', '▁get', '▁public', '▁st', 'atic', '▁vo', 'id', '▁main', '▁(', '▁string', '▁[', ']', '▁arg', 's', '▁)', '\n', '▁{', '\n', '▁new', '▁spec', 'ulate', '▁gu', 'i', '▁()', ';', '\n', '▁}']"~"['▁private', '▁j', 'pan', 'el', '▁center', '▁panel', '▁=', '▁null', '▁;', '\n\n', '▁private', '▁j', 'l', 'abel', '▁des', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'l', 'abel', '▁change', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'l', 'abel', '▁from', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'l', 'abel', '▁to', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'text', '▁area', '▁des', '▁text', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'text', '▁field', '▁c', '▁spec', 'ulate', '▁gu', 'i', '▁public', '▁spec', 'ulate', '▁gu', 'i', '▁()', '\n', '▁{', '\n\n', '▁super', '▁(""', '▁spec', 'ulate', '▁gu', 'i', '▁""', ');', '\n\n', '▁container', '▁=', '▁get', '▁content', '▁p', 'ane', '▁()', ';', '\n\n', '▁set', '▁size', '▁(', '▁800', '▁,', '▁600', '▁', ');', '\n\n', '▁this', '▁.', '▁event', '▁server', '▁ip', '▁=', '\n', '▁j', 'opt', 'ion', '▁p', 'ane', '\n', '▁.', '▁show', '▁input', '▁dial', 'og', '▁(""', '▁please', '▁enter', '▁the', '▁ip', '▁address', '▁of', '▁events', 'erver', '▁submit', '▁listener', '▁public', '▁void', '▁action', '▁performed', '▁(', '▁action', '▁event', '▁e', '▁)', '▁{', '\n\n', '▁if', '▁(', '▁e', '▁.', '▁get', '▁source', '▁()', '▁==', '▁submit', '▁button', '▁)', '▁{', '\n\n', '▁send', '▁query', '▁to', '▁server', '▁()', ';', '\n\n', '▁}', '\n\n', '▁if', '▁(', '▁e', '▁.', '▁get', '▁source', '▁()', '▁==', '▁fet', 'ch', '▁button', '▁)', '▁{', '\n\n\n', '▁system', '▁.', '▁out', '▁.', '▁print', 'ln', '▁(""', '▁fet', 'ch', '▁button', '▁pressed', '▁void', '▁send', '▁query', '▁to', '▁server', '▁()', '\n', '▁{', '\n\n', '▁string', '▁ip', '▁=', '▁this', '▁.', '▁event', '▁server', '▁ip', '▁;', '\n', '▁int', '▁port', '▁no', '▁=', '▁17', '01', '▁;', '\n\n', '▁sock', 'et', '▁sock', 'et', '▁;', '\n', '▁try', '▁{', '\n\n', '▁sock', 'et', '▁=', '▁new', '▁sock', 'et', '▁(', '▁ip', '▁,', '▁port', '▁no', '▁', ');', '\n\n', '▁output', '▁stream', '▁os', '▁=', '▁sock', 'et', '▁.', '▁get', '▁output', '▁stream', '▁()', ';', '\n', '▁output', '▁stream', '▁public', '▁void', '▁pull', '▁value', '▁from', '▁doors', '▁()', '\n', '▁{', '\n\n', '▁string', '▁server', '▁ip', '▁=', '▁new', '▁string', '▁(', '▁doors', '▁server', '▁ip', '▁', ');', '▁//', '""', '▁140', '▁.', '▁192', '▁.', '▁37', '▁.', '▁150', '▁""', ';', '\n\n', '▁string', '▁[', ']', '▁attribute', '▁=', '▁{', '▁""', '▁value', '▁""', ',', '▁""', '▁attribute', '▁""', '▁}', ';', '\n\n', '▁string', '▁project', '▁name', '▁=', '▁this', '▁.', '▁pro', 'j', '▁name', '▁text', '▁.', '▁get', '▁public', '▁static', '▁void', '▁main', '▁(', '▁string', '▁[', ']', '▁arg', 's', '▁)', '\n', '▁{', '\n', '▁new', '▁spec', 'ulate', '▁gu', 'i', '▁()', ';', '\n', '▁}']"~"['▁private', '▁j', 'panel', '▁center', '▁panel', '▁=', '▁null', '▁;', '\n\n', '▁private', '▁j', 'label', '▁des', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'label', '▁change', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'label', '▁from', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'label', '▁to', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'text', '▁area', '▁des', '▁text', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'text', '▁field', '▁c', '▁speculate', '▁gui', '▁public', '▁speculate', '▁gui', '▁()', '\n', '▁{', '\n\n', '▁super', '▁(""', '▁speculate', '▁gui', '▁""', ');', '\n\n', '▁container', '▁=', '▁get', '▁content', '▁pane', '▁();', '\n\n', '▁set', '▁size', '▁(', '▁800', '▁,', '▁600', '▁);', '\n\n', '▁this', '▁.', '▁event', '▁server', '▁ip', '▁=', '\n', '▁j', 'option', '▁pane', '\n', '▁.', '▁show', '▁input', '▁dialog', '▁(""', '▁please', '▁enter', '▁the', '▁ip', '▁address', '▁of', '▁events', 'erver', '▁submit', '▁listener', '▁public', '▁void', '▁action', '▁performed', '▁(', '▁action', '▁event', '▁e', '▁)', '▁{', '\n\n', '▁if', '▁(', '▁e', '▁.', '▁get', '▁source', '▁()', '▁==', '▁submit', '▁button', '▁)', '▁{', '\n\n', '▁send', '▁query', '▁to', '▁server', '▁();', '\n\n', '▁}', '\n\n', '▁if', '▁(', '▁e', '▁.', '▁get', '▁source', '▁()', '▁==', '▁fetch', '▁button', '▁)', '▁{', '\n\n\n', '▁system', '▁.', '▁out', '▁.', '▁print', 'ln', '▁(""', '▁fetch', '▁button', '▁pressed', '▁void', '▁send', '▁query', '▁to', '▁server', '▁()', '\n', '▁{', '\n\n', '▁string', '▁ip', '▁=', '▁this', '▁.', '▁event', '▁server', '▁ip', '▁;', '\n', '▁int', '▁port', '▁no', '▁=', '▁1701', '▁;', '\n\n', '▁socket', '▁socket', '▁;', '\n', '▁try', '▁{', '\n\n', '▁socket', '▁=', '▁new', '▁socket', '▁(', '▁ip', '▁,', '▁port', '▁no', '▁);', '\n\n', '▁output', '▁stream', '▁os', '▁=', '▁socket', '▁.', '▁get', '▁output', '▁stream', '▁();', '\n', '▁output', '▁stream', '▁public', '▁void', '▁pull', '▁value', '▁from', '▁doors', '▁()', '\n', '▁{', '\n\n', '▁string', '▁server', '▁ip', '▁=', '▁new', '▁string', '▁(', '▁doors', '▁server', '▁ip', '▁);', '▁//', '""', '▁140', '▁.', '▁192', '▁.', '▁37', '▁.', '▁150', '▁""', ';', '\n\n', '▁string', '▁[]', '▁attribute', '▁=', '▁{', '▁""', '▁value', '▁"",', '▁""', '▁attribute', '▁""', '▁};', '\n\n', '▁string', '▁project', '▁name', '▁=', '▁this', '▁.', '▁proj', '▁name', '▁text', '▁.', '▁get', '▁public', '▁static', '▁void', '▁main', '▁(', '▁string', '▁[]', '▁args', '▁)', '\n', '▁{', '\n', '▁new', '▁speculate', '▁gui', '▁();', '\n', '▁}']"~privat jpanel center panel null privat jlabel des label null privat jlabel chang label null privat jlabel label null privat jlabel label null privat jtext area des text null privat jtext field specul gui public specul gui super specul gui contain get content pane set size event server joption pane show input dialog pleas enter address eventserv submit listen public void action perform action event get sourc submit button send queri server get sourc fetch button system println fetch button press void send queri server string event server int port socket socket tri socket new socket port output stream socket get output stream output stream public void pull valu door string server new string door server string attribut valu attribut string project name proj name text get public static void main string arg new specul gui
73~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/68.java~68.java~"68	""Events Processor // event list
 private JList eventList;
 private DefaultListModel listModel;
 private ArrayList events;

 // popup menu
 private JPopupMenu popup;

 // Subscriber name
 String m_SubscriberName;

 // list of requirements to be d public EventsProcessor(Notification_Processing parent, boolean modal, String SubsName)
 {

 setTitle(""""EventsProcessor"""");

addWindowListener( new WindowAdapter()
{
 public void windowClosing(WindowEve void exitApplication() {
m_ parent.UpdateDisplayList();
 this. setVisible( false);
 this. dispose();
} // action for """" double click on Event List""""
 private void doubleClickEventList (MouseEvent evt)
 {

int index = eventList. getSelectedIndex();
if ( index != -1)
{
 try
 {
Notification // action for """"Open First Record"""" in popup menu
 private void popupOpenActionPerformed (ActionEvent evt)
 {
if (! listModel. isEmpty())
{
 int index =0;
 try
 {
Notification_Event nEvt1 = (Notificati / action for """"View Current Record"""" in popup menu
 private void popupViewActionPerformed (ActionEvent evt)
 {
int index = eventList. getSelectedIndex();
if ( index != -1)
{
 try
 {
N void DeleteEvent(String SubscriberName, String EventID)
 {

try
{

 int i, j=-1;
 for ( i=0; i< events. size(); i++)
 {
Notification_Event nEvt = (Notification_Event) events. get( i);
i void DeleteRelatedEvents()
 {

while ( m_Deleterequirement List. size()!=0)
{

 Requirement requirement= (Requirement)( m_Deleterequirement List. get(0));

 m_Deleterequirement List. remove(0);
void AddSubscription(String SubscriberName, Requirement requirement )
 {

String SubscriberDependency = """"Requirements"""";

String Message = """"ADD_SUBSCRIPTION""""+""""|"""";
Message += m_UserName + """"|"""";
Message += Subscribervoid DeleteSubscription(String SubscriberName, Requirement requirement )
 {
String Message = """"REMOVE_SUBSCRIPTION""""+""""|"""";
Message += SubscriberName + """"|"""";
Message += requirement . m_RequirementID + """","""";
Message += req void UpdateDisplayList()
 {

listModel. removeAllElements();

for ( int j=0; j< events. size(); j++)
{

 Notification_Event nEvt = (Notification_Event) events. get( j);

 String displayStri // Passes a CHECK_SUBSCRIPTION message to the eventserver and waits for a response
private boolean Check_Subscription(String ip,
 int PortNo,
 String SubscriberName,
 String Requirement // Takes an event string returned from the eventserver and
// extracts True or False response
private boolean Analyze_CheckSubscription(String str)
{
StringTokenizer tokens = new StringTokenizer( str,""""|"""");
String Messag""
"~src~"['▁6', '8', '\t', '""', 'ev', 'ents', '▁process', 'or', '▁/', '/', '▁event', '▁list', '\n', '▁private', '▁j', 'list', '▁event', 'list', ';', '\n', '▁private', '▁def', 'ault', 'list', 'mod', 'el', '▁list', 'mod', 'el', ';', '\n', '▁private', '▁arr', 'ay', 'list', '▁events', ';', '\n\n', '▁/', '/', '▁pop', 'up', '▁men', 'u', '\n', '▁private', '▁j', 'pop', 'up', 'men', 'u', '▁pop', 'up', ';', '\n\n', '▁/', '/', '▁sub', 'sc', 'ri', 'ber', '▁name', '\n', '▁string', '▁m', '_', 'sub', 'sc', 'ri', 'ber', 'name', ';', '\n\n', '▁/', '/', '▁list', '▁of', '▁requirements', '▁to', '▁be', '▁d', '▁public', '▁events', 'pro', 'cess', 'or', '(', 'not', 'ification', '_', 'pro', 'cess', 'ing', '▁paren', 't', ',', '▁bo', 'ole', 'an', '▁mod', 'al', ',', '▁string', '▁subs', 'name', ')', '\n', '▁{', '\n\n', '▁sett', 'it', 'le', '(', '""', '""', 'ev', 'ents', 'pro', 'cess', 'or', '""', '"")', ';', '\n\n', 'ad', 'd', 'w', 'ind', 'ow', 'list', 'en', 'er', '(', '▁new', '▁window', 'ad', 'ap', 'ter', '(', ')', '\n', '{', '\n', '▁public', '▁vo', 'id', '▁window', 'cl', 'os', 'ing', '(', 'w', 'ind', 'ow', 'e', 've', '▁vo', 'id', '▁ex', 'it', 'ap', 'pl', 'ication', '(', ')', '▁{', '\n', 'm', '_', '▁paren', 't', '.', 'up', 'd', 'ated', 'is', 'play', 'list', '(', ');', '\n', '▁this', '.', '▁set', 'vis', 'ible', '(', '▁fal', 'se', ');', '\n', '▁this', '.', '▁dis', 'pose', '(', ');', '\n', '}', '▁/', '/', '▁action', '▁for', '▁""', '""', '▁double', '▁cl', 'ick', '▁on', '▁event', '▁list', '""', '""', '\n', '▁private', '▁vo', 'id', '▁double', 'cl', 'ick', 'ev', 'ent', 'list', '▁(', 'm', 'ous', 'ee', 'vent', '▁ev', 't', ')', '\n', '▁{', '\n\n', 'int', '▁index', '▁=', '▁event', 'list', '.', '▁get', 'se', 'lect', 'ed', 'ind', 'ex', '(', ');', '\n', 'if', '▁(', '▁index', '▁!', '=', '▁-', '1)', '\n', '{', '\n', '▁try', '\n', '▁{', '\n', 'not', 'ification', '▁/', '/', '▁action', '▁for', '▁""', '""', 'op', 'en', '▁first', '▁record', '""', '""', '▁in', '▁pop', 'up', '▁men', 'u', '\n', '▁private', '▁vo', 'id', '▁pop', 'up', 'op', 'en', 'action', 'per', 'form', 'ed', '▁(', 'action', 'ev', 'ent', '▁ev', 't', ')', '\n', '▁{', '\n', 'if', '▁(', '!', '▁list', 'mod', 'el', '.', '▁is', 'empt', 'y', '(', ')', ')', '\n', '{', '\n', '▁int', '▁index', '▁=', '0', ';', '\n', '▁try', '\n', '▁{', '\n', 'not', 'ification', '_', 'ev', 'ent', '▁nev', 't', '1', '▁=', '▁(', 'not', 'ific', 'ati', '▁/', '▁action', '▁for', '▁""', '""', 'view', '▁current', '▁record', '""', '""', '▁in', '▁pop', 'up', '▁men', 'u', '\n', '▁private', '▁vo', 'id', '▁pop', 'up', 'view', 'action', 'per', 'form', 'ed', '▁(', 'action', 'ev', 'ent', '▁ev', 't', ')', '\n', '▁{', '\n', 'int', '▁index', '▁=', '▁event', 'list', '.', '▁get', 'se', 'lect', 'ed', 'ind', 'ex', '(', ');', '\n', 'if', '▁(', '▁index', '▁!', '=', '▁-', '1)', '\n', '{', '\n', '▁try', '\n', '▁{', '\n', 'n', '▁vo', 'id', '▁de', 'lete', 'ev', 'ent', '(', 'str', 'ing', '▁sub', 'sc', 'ri', 'ber', 'name', ',', '▁string', '▁event', 'id', ')', '\n', '▁{', '\n\n', 't', 'ry', '\n', '{', '\n\n', '▁int', '▁i', ',', '▁j', '=', '-1', ';', '\n', '▁for', '▁(', '▁i', '=', '0', ';', '▁i', '<', '▁events', '.', '▁size', '(', ');', '▁i', '+', '+', ')', '\n', '▁{', '\n', 'not', 'ification', '_', 'ev', 'ent', '▁nev', 't', '▁=', '▁(', 'not', 'ification', '_', 'ev', 'ent', ')', '▁events', '.', '▁get', '(', '▁i', ');', '\n', 'i', '▁vo', 'id', '▁de', 'le', 'ter', 'el', 'ated', 'ev', 'ents', '(', ')', '\n', '▁{', '\n\n', 'while', '▁(', '▁m', '_', 'de', 'le', 'ter', 'equ', 'ire', 'ment', '▁list', '.', '▁size', '(', ')', '!', '=', '0)', '\n', '{', '\n\n', '▁require', 'ment', '▁require', 'ment', '=', '▁(', 're', 'qu', 'ire', 'ment', ')', '(', '▁m', '_', 'de', 'le', 'ter', 'equ', 'ire', 'ment', '▁list', '.', '▁get', '(', '0)', ');', '\n\n', '▁m', '_', 'de', 'le', 'ter', 'equ', 'ire', 'ment', '▁list', '.', '▁rem', 'ove', '(', '0)', ';', '\n', 'v', 'oid', '▁add', 'sub', 'sc', 'ription', '(', 'str', 'ing', '▁sub', 'sc', 'ri', 'ber', 'name', ',', '▁require', 'ment', '▁require', 'ment', '▁)', '\n', '▁{', '\n\n', 'str', 'ing', '▁sub', 'sc', 'ri', 'ber', 'd', 'epend', 'ency', '▁=', '▁""', '""', 're', 'qu', 'ire', 'ments', '""', '""', ';', '\n\n', 'str', 'ing', '▁message', '▁=', '▁""', '""', 'ad', 'd', '_', 'sub', 'sc', 'ription', '""', '""', '+', '""', '""|', '""', '""', ';', '\n', 'm', 'ess', 'age', '▁+', '=', '▁m', '_', 'us', 'ern', 'ame', '▁+', '▁""', '""|', '""', '""', ';', '\n', 'm', 'ess', 'age', '▁+', '=', '▁sub', 'sc', 'ri', 'ber', 'v', 'oid', '▁de', 'let', 'es', 'ub', 'sc', 'ription', '(', 'str', 'ing', '▁sub', 'sc', 'ri', 'ber', 'name', ',', '▁require', 'ment', '▁require', 'ment', '▁)', '\n', '▁{', '\n', 'str', 'ing', '▁message', '▁=', '▁""', '""', 'rem', 'ove', '_', 'sub', 'sc', 'ription', '""', '""', '+', '""', '""|', '""', '""', ';', '\n', 'm', 'ess', 'age', '▁+', '=', '▁sub', 'sc', 'ri', 'ber', 'name', '▁+', '▁""', '""|', '""', '""', ';', '\n', 'm', 'ess', 'age', '▁+', '=', '▁require', 'ment', '▁.', '▁m', '_', 're', 'qu', 'ire', 'ment', 'id', '▁+', '▁""', '"",', '""', '""', ';', '\n', 'm', 'ess', 'age', '▁+', '=', '▁re', 'q', '▁vo', 'id', '▁upd', 'ated', 'is', 'play', 'list', '(', ')', '\n', '▁{', '\n\n', 'list', 'mod', 'el', '.', '▁rem', 'ove', 'alle', 'le', 'ments', '(', ');', '\n\n', 'for', '▁(', '▁int', '▁j', '=', '0', ';', '▁j', '<', '▁events', '.', '▁size', '(', ');', '▁j', '+', '+', ')', '\n', '{', '\n\n', '▁not', 'ification', '_', 'ev', 'ent', '▁nev', 't', '▁=', '▁(', 'not', 'ification', '_', 'ev', 'ent', ')', '▁events', '.', '▁get', '(', '▁j', ');', '\n\n', '▁string', '▁display', 'st', 'ri', '▁/', '/', '▁passes', '▁a', '▁check', '_', 'sub', 'sc', 'ription', '▁message', '▁to', '▁the', '▁events', 'er', 'ver', '▁and', '▁wa', 'its', '▁for', '▁a', '▁response', '\n', 'pr', 'iv', 'ate', '▁bo', 'ole', 'an', '▁check', '_', 'sub', 'sc', 'ription', '(', 'str', 'ing', '▁ip', ',', '\n', '▁int', '▁port', 'no', ',', '\n', '▁string', '▁sub', 'sc', 'ri', 'ber', 'name', ',', '\n', '▁string', '▁require', 'ment', '▁/', '/', '▁takes', '▁an', '▁event', '▁string', '▁returned', '▁from', '▁the', '▁events', 'er', 'ver', '▁and', '\n', '//', '▁ext', 'ract', 's', '▁true', '▁or', '▁fal', 'se', '▁response', '\n', 'pr', 'iv', 'ate', '▁bo', 'ole', 'an', '▁analy', 'ze', '_', 'che', 'c', 'ks', 'ub', 'sc', 'ription', '(', 'str', 'ing', '▁str', ')', '\n', '{', '\n', 'str', 'ing', 't', 'ok', 'en', 'iz', 'er', '▁to', 'k', 'ens', '▁=', '▁new', '▁string', 't', 'ok', 'en', 'iz', 'er', '(', '▁str', ',""', '""|', '""', '"")', ';', '\n', 'str', 'ing', '▁mess', 'ag', '""', '\n']"~"['▁68', '\t', '""', 'ev', 'ents', '▁processor', '▁//', '▁event', '▁list', '\n', '▁private', '▁j', 'list', '▁event', 'list', ';', '\n', '▁private', '▁default', 'list', 'model', '▁list', 'model', ';', '\n', '▁private', '▁array', 'list', '▁events', ';', '\n\n', '▁//', '▁pop', 'up', '▁menu', '\n', '▁private', '▁j', 'pop', 'up', 'men', 'u', '▁pop', 'up', ';', '\n\n', '▁//', '▁subsc', 'ri', 'ber', '▁name', '\n', '▁string', '▁m', '_', 'sub', 'sc', 'ri', 'ber', 'name', ';', '\n\n', '▁//', '▁list', '▁of', '▁requirements', '▁to', '▁be', '▁d', '▁public', '▁events', 'process', 'or', '(', 'not', 'ification', '_', 'process', 'ing', '▁parent', ',', '▁bo', 'olean', '▁mod', 'al', ',', '▁string', '▁subs', 'name', ')', '\n', '▁{', '\n\n', '▁sett', 'it', 'le', '(""', '""', 'ev', 'ents', 'process', 'or', '""', '"");', '\n\n', 'add', 'wind', 'ow', 'list', 'ener', '(', '▁new', '▁window', 'ad', 'ap', 'ter', '()', '\n', '{', '\n', '▁public', '▁void', '▁window', 'cl', 'osing', '(', 'wind', 'owe', 've', '▁void', '▁exit', 'appl', 'ication', '()', '▁{', '\n', 'm', '_', '▁parent', '.', 'up', 'dated', 'is', 'play', 'list', '();', '\n', '▁this', '.', '▁set', 'vis', 'ible', '(', '▁false', ');', '\n', '▁this', '.', '▁dis', 'pose', '();', '\n', '}', '▁//', '▁action', '▁for', '▁""""', '▁double', '▁click', '▁on', '▁event', '▁list', '""', '""', '\n', '▁private', '▁void', '▁double', 'cl', 'ick', 'event', 'list', '▁(', 'm', 'ous', 'ee', 'vent', '▁ev', 't', ')', '\n', '▁{', '\n\n', 'int', '▁index', '▁=', '▁event', 'list', '.', '▁get', 'se', 'lected', 'index', '();', '\n', 'if', '▁(', '▁index', '▁!=', '▁-', '1)', '\n', '{', '\n', '▁try', '\n', '▁{', '\n', 'not', 'ification', '▁//', '▁action', '▁for', '▁""""', 'open', '▁first', '▁record', '""', '""', '▁in', '▁pop', 'up', '▁menu', '\n', '▁private', '▁void', '▁pop', 'up', 'open', 'action', 'per', 'formed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'if', '▁(', '!', '▁list', 'model', '.', '▁is', 'empt', 'y', '())', '\n', '{', '\n', '▁int', '▁index', '▁=', '0', ';', '\n', '▁try', '\n', '▁{', '\n', 'not', 'ification', '_', 'event', '▁nev', 't', '1', '▁=', '▁(', 'not', 'ific', 'ati', '▁/', '▁action', '▁for', '▁""""', 'view', '▁current', '▁record', '""', '""', '▁in', '▁pop', 'up', '▁menu', '\n', '▁private', '▁void', '▁pop', 'up', 'view', 'action', 'per', 'formed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'int', '▁index', '▁=', '▁event', 'list', '.', '▁get', 'se', 'lected', 'index', '();', '\n', 'if', '▁(', '▁index', '▁!=', '▁-', '1)', '\n', '{', '\n', '▁try', '\n', '▁{', '\n', 'n', '▁void', '▁de', 'lete', 'event', '(', 'string', '▁subsc', 'ri', 'ber', 'name', ',', '▁string', '▁event', 'id', ')', '\n', '▁{', '\n\n', 'try', '\n', '{', '\n\n', '▁int', '▁i', ',', '▁j', '=', '-1', ';', '\n', '▁for', '▁(', '▁i', '=0', ';', '▁i', '<', '▁events', '.', '▁size', '();', '▁i', '++', ')', '\n', '▁{', '\n', 'not', 'ification', '_', 'event', '▁nev', 't', '▁=', '▁(', 'not', 'ification', '_', 'event', ')', '▁events', '.', '▁get', '(', '▁i', ');', '\n', 'i', '▁void', '▁de', 'le', 'ter', 'el', 'ated', 'ev', 'ents', '()', '\n', '▁{', '\n\n', 'while', '▁(', '▁m', '_', 'de', 'le', 'ter', 'equ', 'ire', 'ment', '▁list', '.', '▁size', '()', '!', '=', '0)', '\n', '{', '\n\n', '▁requirement', '▁requirement', '=', '▁(', 'requ', 'ire', 'ment', ')(', '▁m', '_', 'de', 'le', 'ter', 'equ', 'ire', 'ment', '▁list', '.', '▁get', '(', '0)', ');', '\n\n', '▁m', '_', 'de', 'le', 'ter', 'equ', 'ire', 'ment', '▁list', '.', '▁remove', '(', '0)', ';', '\n', 'v', 'oid', '▁add', 'sub', 'sc', 'ription', '(', 'string', '▁subsc', 'ri', 'ber', 'name', ',', '▁requirement', '▁requirement', '▁)', '\n', '▁{', '\n\n', 'string', '▁subsc', 'ri', 'ber', 'd', 'epend', 'ency', '▁=', '▁""""', 'requ', 'ire', 'ments', '""', '"";', '\n\n', 'string', '▁message', '▁=', '▁""""', 'add', '_', 'sub', 'sc', 'ription', '""', '""', '+', '""', '""|', '""', '"";', '\n', 'mess', 'age', '▁+', '=', '▁m', '_', 'us', 'ern', 'ame', '▁+', '▁""', '""|', '""', '"";', '\n', 'mess', 'age', '▁+', '=', '▁subsc', 'ri', 'ber', 'v', 'oid', '▁de', 'let', 'es', 'ub', 'sc', 'ription', '(', 'string', '▁subsc', 'ri', 'ber', 'name', ',', '▁requirement', '▁requirement', '▁)', '\n', '▁{', '\n', 'string', '▁message', '▁=', '▁""""', 'rem', 'ove', '_', 'sub', 'sc', 'ription', '""', '""', '+', '""', '""|', '""', '"";', '\n', 'mess', 'age', '▁+', '=', '▁subsc', 'ri', 'ber', 'name', '▁+', '▁""', '""|', '""', '"";', '\n', 'mess', 'age', '▁+', '=', '▁requirement', '▁.', '▁m', '_', 'requ', 'ire', 'ment', 'id', '▁+', '▁""', '"",', '""', '"";', '\n', 'mess', 'age', '▁+', '=', '▁re', 'q', '▁void', '▁updated', 'is', 'play', 'list', '()', '\n', '▁{', '\n\n', 'list', 'model', '.', '▁remove', 'alle', 'lements', '();', '\n\n', 'for', '▁(', '▁int', '▁j', '=0', ';', '▁j', '<', '▁events', '.', '▁size', '();', '▁j', '++', ')', '\n', '{', '\n\n', '▁not', 'ification', '_', 'event', '▁nev', 't', '▁=', '▁(', 'not', 'ification', '_', 'event', ')', '▁events', '.', '▁get', '(', '▁j', ');', '\n\n', '▁string', '▁display', 'stri', '▁//', '▁passes', '▁a', '▁check', '_', 'sub', 'sc', 'ription', '▁message', '▁to', '▁the', '▁events', 'erver', '▁and', '▁wa', 'its', '▁for', '▁a', '▁response', '\n', 'private', '▁bo', 'olean', '▁check', '_', 'sub', 'sc', 'ription', '(', 'string', '▁ip', ',', '\n', '▁int', '▁port', 'no', ',', '\n', '▁string', '▁subsc', 'ri', 'ber', 'name', ',', '\n', '▁string', '▁requirement', '▁//', '▁takes', '▁an', '▁event', '▁string', '▁returned', '▁from', '▁the', '▁events', 'erver', '▁and', '\n', '//', '▁extract', 's', '▁true', '▁or', '▁false', '▁response', '\n', 'private', '▁bo', 'olean', '▁analy', 'ze', '_', 'che', 'cks', 'ub', 'sc', 'ription', '(', 'string', '▁str', ')', '\n', '{', '\n', 'string', 'tok', 'en', 'izer', '▁tok', 'ens', '▁=', '▁new', '▁string', 'tok', 'en', 'izer', '(', '▁str', ',""', '""|', '""', '"");', '\n', 'string', '▁mess', 'ag', '""', '\n']"~"['▁68', '\t', '""', 'events', '▁processor', '▁//', '▁event', '▁list', '\n', '▁private', '▁j', 'list', '▁event', 'list', ';', '\n', '▁private', '▁default', 'list', 'model', '▁list', 'model', ';', '\n', '▁private', '▁arraylist', '▁events', ';', '\n\n', '▁//', '▁pop', 'up', '▁menu', '\n', '▁private', '▁j', 'pop', 'up', 'men', 'u', '▁pop', 'up', ';', '\n\n', '▁//', '▁subscriber', '▁name', '\n', '▁string', '▁m', '_', 'subsc', 'riber', 'name', ';', '\n\n', '▁//', '▁list', '▁of', '▁requirements', '▁to', '▁be', '▁d', '▁public', '▁events', 'processor', '(', 'not', 'ification', '_', 'processing', '▁parent', ',', '▁boolean', '▁modal', ',', '▁string', '▁subs', 'name', ')', '\n', '▁{', '\n\n', '▁sett', 'itle', '(""', '""', 'events', 'processor', '"""");', '\n\n', 'add', 'window', 'listener', '(', '▁new', '▁window', 'adap', 'ter', '()', '\n', '{', '\n', '▁public', '▁void', '▁window', 'closing', '(', 'wind', 'owe', 've', '▁void', '▁exit', 'application', '()', '▁{', '\n', 'm', '_', '▁parent', '.', 'updated', 'is', 'play', 'list', '();', '\n', '▁this', '.', '▁set', 'visible', '(', '▁false', ');', '\n', '▁this', '.', '▁dispose', '();', '\n', '}', '▁//', '▁action', '▁for', '▁""""', '▁double', '▁click', '▁on', '▁event', '▁list', '""""', '\n', '▁private', '▁void', '▁double', 'click', 'event', 'list', '▁(', 'mous', 'ee', 'vent', '▁ev', 't', ')', '\n', '▁{', '\n\n', 'int', '▁index', '▁=', '▁event', 'list', '.', '▁get', 'selected', 'index', '();', '\n', 'if', '▁(', '▁index', '▁!=', '▁-', '1)', '\n', '{', '\n', '▁try', '\n', '▁{', '\n', 'not', 'ification', '▁//', '▁action', '▁for', '▁""""', 'open', '▁first', '▁record', '""""', '▁in', '▁pop', 'up', '▁menu', '\n', '▁private', '▁void', '▁pop', 'up', 'open', 'action', 'performed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'if', '▁(!', '▁list', 'model', '.', '▁is', 'empty', '())', '\n', '{', '\n', '▁int', '▁index', '▁=', '0', ';', '\n', '▁try', '\n', '▁{', '\n', 'not', 'ification', '_', 'event', '▁nev', 't', '1', '▁=', '▁(', 'not', 'ific', 'ati', '▁/', '▁action', '▁for', '▁""""', 'view', '▁current', '▁record', '""""', '▁in', '▁pop', 'up', '▁menu', '\n', '▁private', '▁void', '▁pop', 'up', 'view', 'action', 'performed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'int', '▁index', '▁=', '▁event', 'list', '.', '▁get', 'selected', 'index', '();', '\n', 'if', '▁(', '▁index', '▁!=', '▁-', '1)', '\n', '{', '\n', '▁try', '\n', '▁{', '\n', 'n', '▁void', '▁delete', 'event', '(', 'string', '▁subscriber', 'name', ',', '▁string', '▁event', 'id', ')', '\n', '▁{', '\n\n', 'try', '\n', '{', '\n\n', '▁int', '▁i', ',', '▁j', '=', '-1;', '\n', '▁for', '▁(', '▁i', '=0;', '▁i', '<', '▁events', '.', '▁size', '();', '▁i', '++)', '\n', '▁{', '\n', 'not', 'ification', '_', 'event', '▁nev', 't', '▁=', '▁(', 'not', 'ification', '_', 'event', ')', '▁events', '.', '▁get', '(', '▁i', ');', '\n', 'i', '▁void', '▁deleter', 'el', 'ated', 'events', '()', '\n', '▁{', '\n\n', 'while', '▁(', '▁m', '_', 'de', 'le', 'ter', 'equ', 'ire', 'ment', '▁list', '.', '▁size', '()', '!', '=', '0)', '\n', '{', '\n\n', '▁requirement', '▁requirement', '=', '▁(', 'require', 'ment', ')(', '▁m', '_', 'de', 'le', 'ter', 'equ', 'ire', 'ment', '▁list', '.', '▁get', '(0)', ');', '\n\n', '▁m', '_', 'de', 'le', 'ter', 'equ', 'ire', 'ment', '▁list', '.', '▁remove', '(', '0);', '\n', 'void', '▁add', 'subscription', '(', 'string', '▁subscriber', 'name', ',', '▁requirement', '▁requirement', '▁)', '\n', '▁{', '\n\n', 'string', '▁subscriber', 'dependency', '▁=', '▁""""', 'require', 'ments', '""', '"";', '\n\n', 'string', '▁message', '▁=', '▁""""', 'add', '_', 'subscription', '""""', '+""', '""|', '""', '"";', '\n', 'message', '▁+=', '▁m', '_', 'us', 'ername', '▁+', '▁""', '""|', '""', '"";', '\n', 'message', '▁+=', '▁subscriber', 'void', '▁deletes', 'ub', 'sc', 'ription', '(', 'string', '▁subscriber', 'name', ',', '▁requirement', '▁requirement', '▁)', '\n', '▁{', '\n', 'string', '▁message', '▁=', '▁""""', 'remove', '_', 'subscription', '""""', '+""', '""|', '""', '"";', '\n', 'message', '▁+=', '▁subscriber', 'name', '▁+', '▁""', '""|', '""', '"";', '\n', 'message', '▁+=', '▁requirement', '▁.', '▁m', '_', 'require', 'ment', 'id', '▁+', '▁"""",', '""', '"";', '\n', 'message', '▁+=', '▁req', '▁void', '▁updated', 'is', 'play', 'list', '()', '\n', '▁{', '\n\n', 'list', 'model', '.', '▁remove', 'alle', 'lements', '();', '\n\n', 'for', '▁(', '▁int', '▁j', '=0;', '▁j', '<', '▁events', '.', '▁size', '();', '▁j', '++)', '\n', '{', '\n\n', '▁notification', '_', 'event', '▁nev', 't', '▁=', '▁(', 'not', 'ification', '_', 'event', ')', '▁events', '.', '▁get', '(', '▁j', ');', '\n\n', '▁string', '▁display', 'stri', '▁//', '▁passes', '▁a', '▁check', '_', 'subscription', '▁message', '▁to', '▁the', '▁events', 'erver', '▁and', '▁waits', '▁for', '▁a', '▁response', '\n', 'private', '▁boolean', '▁check', '_', 'subscription', '(', 'string', '▁ip', ',', '\n', '▁int', '▁port', 'no', ',', '\n', '▁string', '▁subscriber', 'name', ',', '\n', '▁string', '▁requirement', '▁//', '▁takes', '▁an', '▁event', '▁string', '▁returned', '▁from', '▁the', '▁events', 'erver', '▁and', '\n', '//', '▁extracts', '▁true', '▁or', '▁false', '▁response', '\n', 'private', '▁boolean', '▁analyze', '_', 'checks', 'ub', 'sc', 'ription', '(', 'string', '▁str', ')', '\n', '{', '\n', 'string', 'token', 'izer', '▁tokens', '▁=', '▁new', '▁string', 'token', 'izer', '(', '▁str', ',""', '""|', '"""");', '\n', 'string', '▁mess', 'ag', '""', '\n']"~"event processor event list privat jlist event list privat default list model list model privat array list event popup menu privat jpopup menu popup subscrib name string subscrib name list requir public event processor notif process parent boolean modal string sub name set titl event processor add window listen new window adapt public void window close window eve void exit applic parent updat display list set visibl fals dispos action doubl click event list privat void doubl click event list mous event evt int index event list get select index index tri notif action open first record popup menu privat void popup open action perform action event evt list model empti int index tri notif event evt notificati action view current record popup menu privat void popup view action perform action event evt int index event list get select index index tri void delet event string subscrib name string event tri int event size notif event evt notif event event get void delet relat event deleterequir list size requir requir requir deleterequir list get deleterequir list remov void add subscript string subscrib name requir requir string subscrib depend requir string messag add subscript messag user name messag subscribervoid delet subscript string subscrib name requir requir string messag remov subscript messag subscrib name messag requir requir messag req void updat display list list model remov element (); int event size (); ++) notification_ev evt notification_ev event get string display stri pass check_subscript messag eventserv wait respons privat boolean check_subscript string int port string subscrib name string requir take event string return eventserv extract true fals respons privat boolean analyze_check subscript string str string token token new string token str ,""""|""""); string messag"
74~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/94.java~94.java~"94	""Refine Modelpublic RefineModel(EBT em)
{
super( em);
 } // Construct Visual model for Merge Event
public void BuildEvent()
{
 ClearVectors();
AddEventRect(60,80,1);
CurrentEvent = 3;
} public StringBuffer GenerateEvent()
{
StringBuffer thisEvent = new StringBuffer();
thisEvent. append(""""Refine|0|"""");
thisEvent. append( new Date(). toString()+""""|"""");
ebs = (EBShape)EventShapes. el""
"~src~"['▁9', '4', '\t', '""', 'ref', 'ine', '▁model', 'publ', 'ic', '▁ref', 'in', 'em', 'od', 'el', '(', 'e', 'b', 't', '▁em', ')', '\n', '{', '\n', 'sup', 'er', '(', '▁em', ');', '\n', '▁}', '▁/', '/', '▁construct', '▁visual', '▁model', '▁for', '▁mer', 'ge', '▁event', '\n', 'publ', 'ic', '▁vo', 'id', '▁build', 'ev', 'ent', '(', ')', '\n', '{', '\n', '▁clear', 'v', 'ect', 'ors', '(', ');', '\n', 'ad', 'de', 'vent', 'rect', '(', '6', '0,', '8', '0,', '1)', ';', '\n', 'cur', 'ren', 'te', 'vent', '▁=', '▁3', ';', '\n', '}', '▁public', '▁string', 'b', 'uf', 'fer', '▁gener', 'ate', 'ev', 'ent', '(', ')', '\n', '{', '\n', 'str', 'ing', 'b', 'uf', 'fer', '▁this', 'ev', 'ent', '▁=', '▁new', '▁string', 'b', 'uf', 'fer', '(', ');', '\n', 'th', 'ise', 'vent', '.', '▁app', 'end', '(', '""', '""', 'ref', 'ine', '|', '0', '|', '""', '"")', ';', '\n', 'th', 'ise', 'vent', '.', '▁app', 'end', '(', '▁new', '▁date', '(', ').', '▁to', 'str', 'ing', '(', ')', '+', '""', '""|', '""', '"")', ';', '\n', 'e', 'bs', '▁=', '▁(', 'e', 'b', 'sh', 'ape', ')', 'ev', 'ents', 'h', 'apes', '.', '▁el', '""', '\n']"~"['▁94', '\t', '""', 'ref', 'ine', '▁model', 'public', '▁ref', 'in', 'em', 'od', 'el', '(', 'eb', 't', '▁em', ')', '\n', '{', '\n', 'super', '(', '▁em', ');', '\n', '▁}', '▁//', '▁construct', '▁visual', '▁model', '▁for', '▁merge', '▁event', '\n', 'public', '▁void', '▁build', 'event', '()', '\n', '{', '\n', '▁clear', 'v', 'ectors', '();', '\n', 'ad', 'de', 'vent', 'rect', '(', '6', '0,', '8', '0,', '1)', ';', '\n', 'cur', 'ren', 'te', 'vent', '▁=', '▁3', ';', '\n', '}', '▁public', '▁string', 'b', 'uffer', '▁generate', 'event', '()', '\n', '{', '\n', 'string', 'b', 'uffer', '▁this', 'event', '▁=', '▁new', '▁string', 'b', 'uffer', '();', '\n', 'th', 'ise', 'vent', '.', '▁append', '(""', '""', 'ref', 'ine', '|', '0', '|', '""', '"");', '\n', 'th', 'ise', 'vent', '.', '▁append', '(', '▁new', '▁date', '().', '▁to', 'string', '()', '+', '""', '""|', '""', '"");', '\n', 'e', 'bs', '▁=', '▁(', 'eb', 'shape', ')', 'ev', 'ents', 'h', 'apes', '.', '▁el', '""', '\n']"~"['▁94', '\t', '""', 'ref', 'ine', '▁model', 'public', '▁refin', 'em', 'odel', '(', 'eb', 't', '▁em', ')', '\n', '{', '\n', 'super', '(', '▁em', ');', '\n', '▁}', '▁//', '▁construct', '▁visual', '▁model', '▁for', '▁merge', '▁event', '\n', 'public', '▁void', '▁build', 'event', '()', '\n', '{', '\n', '▁clear', 'v', 'ectors', '();', '\n', 'ad', 'de', 'vent', 'rect', '(6', '0,', '80,', '1);', '\n', 'cur', 'rente', 'vent', '▁=', '▁3;', '\n', '}', '▁public', '▁string', 'buffer', '▁generate', 'event', '()', '\n', '{', '\n', 'string', 'buffer', '▁this', 'event', '▁=', '▁new', '▁string', 'buffer', '();', '\n', 'th', 'ise', 'vent', '.', '▁append', '(""', '""', 'ref', 'ine', '|0', '|', '"""");', '\n', 'th', 'ise', 'vent', '.', '▁append', '(', '▁new', '▁date', '().', '▁to', 'string', '()', '+""', '""|', '"""");', '\n', 'e', 'bs', '▁=', '▁(', 'eb', 'shape', ')', 'events', 'h', 'apes', '.', '▁el', '""', '\n']"~refin modelpubl refin model ebt super construct visual model merg event public void build event clear vector add event rect current event public string buffer generat event string buffer event new string buffer event append refin event append new date string ebshap event shape
75~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/53.java~53.java~"53	""Performance Modelprivate String name = null;
 private Vector driverVector = null;
 private Vector constraintVector = null;

 private long queryID = 0;

 public static int count = 0; public PerformanceModel(String name, long queryID)
 {
this. name = name;
this. queryID = queryID;

this. driverVector = new Vector();
this. constraintVector = new Vector();
 } public Vector getConstraints()
 {
return constraintVector;
 } public Vector getDrivers()
 {
return driverVector;
 } public String getName()
 {
return name;
 } public void setName(String name)
 {
this. name = name;
 } public void addDriver(DriverDescription driver)
 {

if ( driverVector. contains( driver))
{
}
else
 this. driverVector. add( driver);

 } public void removeDriver(DriverDescription driver)
 {
this. driverVector. remove( driver);
 } public boolean containsDriver(DriverDescription driver)
 {
return this. driverVector. contains( driver);
 } public void addConstraint(ConstraintsDescription constraint)
 {
this. constraintVector. add( constraint);
 } public boolean containsConstraint(ConstraintsDescription constraint)
 {
return this. constraintVector. contains( constraint);
 } public void removeConstraint(ConstraintsDescription constraint)
 {
this. constraintVector. remove( constraint);
 } public DriverDescription getDriver(DriverDescription driver)
 {
DriverDescription dd = null;

for ( int i = 0; i < this. driverVector. size(); i++)
{
 dd = (DriverDescription) this. driverVector. get( i) public ConstraintsDescription getConstraint(ConstraintsDescription constraint)
 {
ConstraintsDescription cd = null;

for ( int i = 0; i < this. constraintVector. size(); i++)
{
 cd = (ConstraintsDescription) thispublic long getQueryID()
 {
return this. queryID;
 } public void setQueryID( long id)
 {
this. queryID = id;
 } public String toString()
 {
return """"performance modelName = """"
 + this. name
 + """"\ n""""
 + """"Query ID = """"
 + this. queryID
 + """"\ n""""
 + """"Drivers = """"
 + this. driverVector
 + """"\ n""""
 + """"Constraints = """"
 + this.""
"~src~"['▁5', '3', '\t', '""', 'per', 'for', 'man', 'ce', '▁model', 'pr', 'iv', 'ate', '▁string', '▁name', '▁=', '▁n', 'ull', ';', '\n', '▁private', '▁v', 'ector', '▁driver', 'v', 'ector', '▁=', '▁n', 'ull', ';', '\n', '▁private', '▁v', 'ector', '▁constr', 'aint', 'v', 'ector', '▁=', '▁n', 'ull', ';', '\n\n', '▁private', '▁long', '▁qu', 'ery', 'id', '▁=', '▁0', ';', '\n\n', '▁public', '▁st', 'atic', '▁int', '▁count', '▁=', '▁0', ';', '▁public', '▁performan', 'c', 'em', 'od', 'el', '(', 'str', 'ing', '▁name', ',', '▁long', '▁qu', 'ery', 'id', ')', '\n', '▁{', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', 'this', '.', '▁qu', 'ery', 'id', '▁=', '▁qu', 'ery', 'id', ';', '\n\n', 'this', '.', '▁driver', 'v', 'ector', '▁=', '▁new', '▁v', 'ector', '(', ');', '\n', 'this', '.', '▁constr', 'aint', 'v', 'ector', '▁=', '▁new', '▁v', 'ector', '(', ');', '\n', '▁}', '▁public', '▁v', 'ector', '▁get', 'con', 'str', 'aints', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁constr', 'aint', 'v', 'ector', ';', '\n', '▁}', '▁public', '▁v', 'ector', '▁get', 'dr', 'ivers', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁driver', 'v', 'ector', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'name', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁name', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', 'name', '(', 'str', 'ing', '▁name', ')', '\n', '▁{', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁add', 'dr', 'iver', '(', 'dr', 'iver', 'des', 'c', 'ription', '▁driver', ')', '\n', '▁{', '\n\n', 'if', '▁(', '▁driver', 'v', 'ector', '.', '▁contains', '(', '▁driver', ')', ')', '\n', '{', '\n', '}', '\n', 'el', 'se', '\n', '▁this', '.', '▁driver', 'v', 'ector', '.', '▁add', '(', '▁driver', ');', '\n\n', '▁}', '▁public', '▁vo', 'id', '▁removed', 'r', 'iver', '(', 'dr', 'iver', 'des', 'c', 'ription', '▁driver', ')', '\n', '▁{', '\n', 'this', '.', '▁driver', 'v', 'ector', '.', '▁rem', 'ove', '(', '▁driver', ');', '\n', '▁}', '▁public', '▁bo', 'ole', 'an', '▁contains', 'dr', 'iver', '(', 'dr', 'iver', 'des', 'c', 'ription', '▁driver', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁this', '.', '▁driver', 'v', 'ector', '.', '▁contains', '(', '▁driver', ');', '\n', '▁}', '▁public', '▁vo', 'id', '▁add', 'con', 'str', 'aint', '(', 'con', 'str', 'aints', 'des', 'c', 'ription', '▁constr', 'aint', ')', '\n', '▁{', '\n', 'this', '.', '▁constr', 'aint', 'v', 'ector', '.', '▁add', '(', '▁constr', 'aint', ');', '\n', '▁}', '▁public', '▁bo', 'ole', 'an', '▁contains', 'con', 'str', 'aint', '(', 'con', 'str', 'aints', 'des', 'c', 'ription', '▁constr', 'aint', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁this', '.', '▁constr', 'aint', 'v', 'ector', '.', '▁contains', '(', '▁constr', 'aint', ');', '\n', '▁}', '▁public', '▁vo', 'id', '▁remov', 'ec', 'onstr', 'aint', '(', 'con', 'str', 'aints', 'des', 'c', 'ription', '▁constr', 'aint', ')', '\n', '▁{', '\n', 'this', '.', '▁constr', 'aint', 'v', 'ector', '.', '▁rem', 'ove', '(', '▁constr', 'aint', ');', '\n', '▁}', '▁public', '▁driver', 'des', 'c', 'ription', '▁get', 'dr', 'iver', '(', 'dr', 'iver', 'des', 'c', 'ription', '▁driver', ')', '\n', '▁{', '\n', 'dr', 'iver', 'des', 'c', 'ription', '▁d', 'd', '▁=', '▁n', 'ull', ';', '\n\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', ';', '▁i', '▁', '<', '▁this', '.', '▁driver', 'v', 'ector', '.', '▁size', '(', ');', '▁i', '+', '+', ')', '\n', '{', '\n', '▁d', 'd', '▁=', '▁(', 'dr', 'iver', 'des', 'c', 'ription', ')', '▁this', '.', '▁driver', 'v', 'ector', '.', '▁get', '(', '▁i', ')', '▁public', '▁constr', 'aints', 'des', 'c', 'ription', '▁get', 'con', 'str', 'aint', '(', 'con', 'str', 'aints', 'des', 'c', 'ription', '▁constr', 'aint', ')', '\n', '▁{', '\n', 'con', 'str', 'aints', 'des', 'c', 'ription', '▁cd', '▁=', '▁n', 'ull', ';', '\n\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', ';', '▁i', '▁', '<', '▁this', '.', '▁constr', 'aint', 'v', 'ector', '.', '▁size', '(', ');', '▁i', '+', '+', ')', '\n', '{', '\n', '▁cd', '▁=', '▁(', 'con', 'str', 'aints', 'des', 'c', 'ription', ')', '▁this', 'publ', 'ic', '▁long', '▁get', 'qu', 'ery', 'id', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁this', '.', '▁qu', 'ery', 'id', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', 'qu', 'ery', 'id', '(', '▁long', '▁id', ')', '\n', '▁{', '\n', 'this', '.', '▁qu', 'ery', 'id', '▁=', '▁id', ';', '\n', '▁}', '▁public', '▁string', '▁to', 'str', 'ing', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁""', '""', 'per', 'for', 'man', 'ce', '▁model', 'name', '▁=', '▁""', '""', '\n', '▁+', '▁this', '.', '▁name', '\n', '▁+', '▁""', '""', '\\', '▁n', '""', '""', '\n', '▁+', '▁""', '""', 'qu', 'ery', '▁id', '▁=', '▁""', '""', '\n', '▁+', '▁this', '.', '▁qu', 'ery', 'id', '\n', '▁+', '▁""', '""', '\\', '▁n', '""', '""', '\n', '▁+', '▁""', '""', 'dr', 'ivers', '▁=', '▁""', '""', '\n', '▁+', '▁this', '.', '▁driver', 'v', 'ector', '\n', '▁+', '▁""', '""', '\\', '▁n', '""', '""', '\n', '▁+', '▁""', '""', 'con', 'str', 'aints', '▁=', '▁""', '""', '\n', '▁+', '▁this', '.""', '\n']"~"['▁53', '\t', '""', 'performance', '▁model', 'private', '▁string', '▁name', '▁=', '▁null', ';', '\n', '▁private', '▁vector', '▁driver', 'v', 'ector', '▁=', '▁null', ';', '\n', '▁private', '▁vector', '▁constr', 'aint', 'v', 'ector', '▁=', '▁null', ';', '\n\n', '▁private', '▁long', '▁query', 'id', '▁=', '▁0', ';', '\n\n', '▁public', '▁static', '▁int', '▁count', '▁=', '▁0', ';', '▁public', '▁performan', 'c', 'em', 'od', 'el', '(', 'string', '▁name', ',', '▁long', '▁query', 'id', ')', '\n', '▁{', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', 'this', '.', '▁query', 'id', '▁=', '▁query', 'id', ';', '\n\n', 'this', '.', '▁driver', 'v', 'ector', '▁=', '▁new', '▁vector', '();', '\n', 'this', '.', '▁constr', 'aint', 'v', 'ector', '▁=', '▁new', '▁vector', '();', '\n', '▁}', '▁public', '▁vector', '▁get', 'con', 'str', 'aints', '()', '\n', '▁{', '\n', 'return', '▁constr', 'aint', 'v', 'ector', ';', '\n', '▁}', '▁public', '▁vector', '▁get', 'dr', 'ivers', '()', '\n', '▁{', '\n', 'return', '▁driver', 'v', 'ector', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'name', '()', '\n', '▁{', '\n', 'return', '▁name', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'name', '(', 'string', '▁name', ')', '\n', '▁{', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', '▁}', '▁public', '▁void', '▁add', 'dr', 'iver', '(', 'dr', 'iver', 'desc', 'ription', '▁driver', ')', '\n', '▁{', '\n\n', 'if', '▁(', '▁driver', 'v', 'ector', '.', '▁contains', '(', '▁driver', '))', '\n', '{', '\n', '}', '\n', 'el', 'se', '\n', '▁this', '.', '▁driver', 'v', 'ector', '.', '▁add', '(', '▁driver', ');', '\n\n', '▁}', '▁public', '▁void', '▁removed', 'river', '(', 'dr', 'iver', 'desc', 'ription', '▁driver', ')', '\n', '▁{', '\n', 'this', '.', '▁driver', 'v', 'ector', '.', '▁remove', '(', '▁driver', ');', '\n', '▁}', '▁public', '▁bo', 'olean', '▁contains', 'dr', 'iver', '(', 'dr', 'iver', 'desc', 'ription', '▁driver', ')', '\n', '▁{', '\n', 'return', '▁this', '.', '▁driver', 'v', 'ector', '.', '▁contains', '(', '▁driver', ');', '\n', '▁}', '▁public', '▁void', '▁add', 'con', 'str', 'aint', '(', 'con', 'str', 'aints', 'desc', 'ription', '▁constr', 'aint', ')', '\n', '▁{', '\n', 'this', '.', '▁constr', 'aint', 'v', 'ector', '.', '▁add', '(', '▁constr', 'aint', ');', '\n', '▁}', '▁public', '▁bo', 'olean', '▁contains', 'con', 'str', 'aint', '(', 'con', 'str', 'aints', 'desc', 'ription', '▁constr', 'aint', ')', '\n', '▁{', '\n', 'return', '▁this', '.', '▁constr', 'aint', 'v', 'ector', '.', '▁contains', '(', '▁constr', 'aint', ');', '\n', '▁}', '▁public', '▁void', '▁remov', 'ec', 'onstr', 'aint', '(', 'con', 'str', 'aints', 'desc', 'ription', '▁constr', 'aint', ')', '\n', '▁{', '\n', 'this', '.', '▁constr', 'aint', 'v', 'ector', '.', '▁remove', '(', '▁constr', 'aint', ');', '\n', '▁}', '▁public', '▁driver', 'desc', 'ription', '▁get', 'dr', 'iver', '(', 'dr', 'iver', 'desc', 'ription', '▁driver', ')', '\n', '▁{', '\n', 'dr', 'iver', 'desc', 'ription', '▁dd', '▁=', '▁null', ';', '\n\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', ';', '▁i', '▁<', '▁this', '.', '▁driver', 'v', 'ector', '.', '▁size', '();', '▁i', '++', ')', '\n', '{', '\n', '▁dd', '▁=', '▁(', 'dr', 'iver', 'desc', 'ription', ')', '▁this', '.', '▁driver', 'v', 'ector', '.', '▁get', '(', '▁i', ')', '▁public', '▁constraints', 'desc', 'ription', '▁get', 'con', 'str', 'aint', '(', 'con', 'str', 'aints', 'desc', 'ription', '▁constr', 'aint', ')', '\n', '▁{', '\n', 'con', 'str', 'aints', 'desc', 'ription', '▁cd', '▁=', '▁null', ';', '\n\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', ';', '▁i', '▁<', '▁this', '.', '▁constr', 'aint', 'v', 'ector', '.', '▁size', '();', '▁i', '++', ')', '\n', '{', '\n', '▁cd', '▁=', '▁(', 'con', 'str', 'aints', 'desc', 'ription', ')', '▁this', 'public', '▁long', '▁get', 'qu', 'ery', 'id', '()', '\n', '▁{', '\n', 'return', '▁this', '.', '▁query', 'id', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'qu', 'ery', 'id', '(', '▁long', '▁id', ')', '\n', '▁{', '\n', 'this', '.', '▁query', 'id', '▁=', '▁id', ';', '\n', '▁}', '▁public', '▁string', '▁to', 'string', '()', '\n', '▁{', '\n', 'return', '▁""""', 'performance', '▁model', 'name', '▁=', '▁""""', '\n', '▁+', '▁this', '.', '▁name', '\n', '▁+', '▁""""', '\\', '▁n', '""', '""', '\n', '▁+', '▁""""', 'qu', 'ery', '▁id', '▁=', '▁""""', '\n', '▁+', '▁this', '.', '▁query', 'id', '\n', '▁+', '▁""""', '\\', '▁n', '""', '""', '\n', '▁+', '▁""""', 'dr', 'ivers', '▁=', '▁""""', '\n', '▁+', '▁this', '.', '▁driver', 'v', 'ector', '\n', '▁+', '▁""""', '\\', '▁n', '""', '""', '\n', '▁+', '▁""""', 'con', 'str', 'aints', '▁=', '▁""""', '\n', '▁+', '▁this', '.""', '\n']"~"['▁53', '\t', '""', 'performance', '▁model', 'private', '▁string', '▁name', '▁=', '▁null', ';', '\n', '▁private', '▁vector', '▁driver', 'vector', '▁=', '▁null', ';', '\n', '▁private', '▁vector', '▁constraint', 'vector', '▁=', '▁null', ';', '\n\n', '▁private', '▁long', '▁query', 'id', '▁=', '▁0;', '\n\n', '▁public', '▁static', '▁int', '▁count', '▁=', '▁0;', '▁public', '▁performan', 'cem', 'odel', '(', 'string', '▁name', ',', '▁long', '▁query', 'id', ')', '\n', '▁{', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', 'this', '.', '▁query', 'id', '▁=', '▁query', 'id', ';', '\n\n', 'this', '.', '▁driver', 'vector', '▁=', '▁new', '▁vector', '();', '\n', 'this', '.', '▁constraint', 'vector', '▁=', '▁new', '▁vector', '();', '\n', '▁}', '▁public', '▁vector', '▁get', 'con', 'str', 'aints', '()', '\n', '▁{', '\n', 'return', '▁constraint', 'vector', ';', '\n', '▁}', '▁public', '▁vector', '▁get', 'drivers', '()', '\n', '▁{', '\n', 'return', '▁driver', 'vector', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'name', '()', '\n', '▁{', '\n', 'return', '▁name', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'name', '(', 'string', '▁name', ')', '\n', '▁{', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', '▁}', '▁public', '▁void', '▁add', 'driver', '(', 'driver', 'description', '▁driver', ')', '\n', '▁{', '\n\n', 'if', '▁(', '▁driver', 'vector', '.', '▁contains', '(', '▁driver', '))', '\n', '{', '\n', '}', '\n', 'else', '\n', '▁this', '.', '▁driver', 'vector', '.', '▁add', '(', '▁driver', ');', '\n\n', '▁}', '▁public', '▁void', '▁removed', 'river', '(', 'driver', 'description', '▁driver', ')', '\n', '▁{', '\n', 'this', '.', '▁driver', 'vector', '.', '▁remove', '(', '▁driver', ');', '\n', '▁}', '▁public', '▁boolean', '▁contains', 'driver', '(', 'driver', 'description', '▁driver', ')', '\n', '▁{', '\n', 'return', '▁this', '.', '▁driver', 'vector', '.', '▁contains', '(', '▁driver', ');', '\n', '▁}', '▁public', '▁void', '▁add', 'con', 'str', 'aint', '(', 'con', 'str', 'aints', 'description', '▁constraint', ')', '\n', '▁{', '\n', 'this', '.', '▁constraint', 'vector', '.', '▁add', '(', '▁constraint', ');', '\n', '▁}', '▁public', '▁boolean', '▁contains', 'con', 'str', 'aint', '(', 'con', 'str', 'aints', 'description', '▁constraint', ')', '\n', '▁{', '\n', 'return', '▁this', '.', '▁constraint', 'vector', '.', '▁contains', '(', '▁constraint', ');', '\n', '▁}', '▁public', '▁void', '▁remov', 'ec', 'onstr', 'aint', '(', 'con', 'str', 'aints', 'description', '▁constraint', ')', '\n', '▁{', '\n', 'this', '.', '▁constraint', 'vector', '.', '▁remove', '(', '▁constraint', ');', '\n', '▁}', '▁public', '▁driver', 'description', '▁get', 'driver', '(', 'driver', 'description', '▁driver', ')', '\n', '▁{', '\n', 'driver', 'description', '▁dd', '▁=', '▁null', ';', '\n\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0;', '▁i', '▁<', '▁this', '.', '▁driver', 'vector', '.', '▁size', '();', '▁i', '++)', '\n', '{', '\n', '▁dd', '▁=', '▁(', 'driver', 'description', ')', '▁this', '.', '▁driver', 'vector', '.', '▁get', '(', '▁i', ')', '▁public', '▁constraints', 'description', '▁get', 'con', 'str', 'aint', '(', 'con', 'str', 'aints', 'description', '▁constraint', ')', '\n', '▁{', '\n', 'con', 'str', 'aints', 'description', '▁cd', '▁=', '▁null', ';', '\n\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0;', '▁i', '▁<', '▁this', '.', '▁constraint', 'vector', '.', '▁size', '();', '▁i', '++)', '\n', '{', '\n', '▁cd', '▁=', '▁(', 'con', 'str', 'aints', 'description', ')', '▁this', 'public', '▁long', '▁get', 'query', 'id', '()', '\n', '▁{', '\n', 'return', '▁this', '.', '▁query', 'id', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'query', 'id', '(', '▁long', '▁id', ')', '\n', '▁{', '\n', 'this', '.', '▁query', 'id', '▁=', '▁id', ';', '\n', '▁}', '▁public', '▁string', '▁to', 'string', '()', '\n', '▁{', '\n', 'return', '▁""""', 'performance', '▁model', 'name', '▁=', '▁""""', '\n', '▁+', '▁this', '.', '▁name', '\n', '▁+', '▁""""', '\\', '▁n', '""""', '\n', '▁+', '▁""""', 'query', '▁id', '▁=', '▁""""', '\n', '▁+', '▁this', '.', '▁query', 'id', '\n', '▁+', '▁""""', '\\', '▁n', '""""', '\n', '▁+', '▁""""', 'drivers', '▁=', '▁""""', '\n', '▁+', '▁this', '.', '▁driver', 'vector', '\n', '▁+', '▁""""', '\\', '▁n', '""""', '\n', '▁+', '▁""""', 'con', 'str', 'aints', '▁=', '▁""""', '\n', '▁+', '▁this', '.""', '\n']"~perform modelpriv string name null privat vector driver vector null privat vector constraint vector null privat long queri public static int count public perform model string name long queri name name queri queri driver vector new vector constraint vector new vector public vector get constraint return constraint vector public vector get driver return driver vector public string get name return name public void set name string name name name public void add driver driver descript driver driver vector contain driver els driver vector add driver public void remov driver driver descript driver driver vector remov driver public boolean contain driver driver descript driver return driver vector contain driver public void add constraint constraint descript constraint constraint vector add constraint public boolean contain constraint constraint descript constraint return constraint vector contain constraint public void remov constraint constraint descript constraint constraint vector remov constraint public driver descript get driver driver descript driver driver descript null int driver vector size driver descript driver vector get public constraint descript get constraint constraint descript constraint constraint descript null int constraint vector size constraint descript thispubl long get queri return queri public void set queri long queri public string string return perform model name name queri queri driver driver vector constraint
76~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/89.java~89.java~"89	""Event Line protected int top, left, right, bottom; public EventLine ( int t, int l, int r, int b)
{
top = t;
left = l;
right = r;
bottom = b;
} public int GetT() { return top;} public int GetL() { return left;}public int GetR() { return right;} public int GetB() { return bottom;}""
"~src~"['▁8', '9', '\t', '""', 'ev', 'ent', '▁line', '▁protected', '▁int', '▁top', ',', '▁left', ',', '▁right', ',', '▁bottom', ';', '▁public', '▁event', 'line', '▁(', '▁int', '▁t', ',', '▁int', '▁l', ',', '▁int', '▁r', ',', '▁int', '▁b', ')', '\n', '{', '\n', 'top', '▁=', '▁t', ';', '\n', 'left', '▁=', '▁l', ';', '\n', 'right', '▁=', '▁r', ';', '\n', 'b', 'ott', 'om', '▁=', '▁b', ';', '\n', '}', '▁public', '▁int', '▁g', 'ett', '(', ')', '▁{', '▁return', '▁top', ';', '}', '▁public', '▁int', '▁get', 'l', '(', ')', '▁{', '▁return', '▁left', ';', '}', 'publ', 'ic', '▁int', '▁get', 'r', '(', ')', '▁{', '▁return', '▁right', ';', '}', '▁public', '▁int', '▁get', 'b', '(', ')', '▁{', '▁return', '▁bottom', ';', '}', '""', '\n']"~"['▁89', '\t', '""', 'event', '▁line', '▁protected', '▁int', '▁top', ',', '▁left', ',', '▁right', ',', '▁bottom', ';', '▁public', '▁event', 'line', '▁(', '▁int', '▁t', ',', '▁int', '▁l', ',', '▁int', '▁r', ',', '▁int', '▁b', ')', '\n', '{', '\n', 'top', '▁=', '▁t', ';', '\n', 'left', '▁=', '▁l', ';', '\n', 'right', '▁=', '▁r', ';', '\n', 'bottom', '▁=', '▁b', ';', '\n', '}', '▁public', '▁int', '▁gett', '()', '▁{', '▁return', '▁top', ';', '}', '▁public', '▁int', '▁get', 'l', '()', '▁{', '▁return', '▁left', ';', '}', 'public', '▁int', '▁get', 'r', '()', '▁{', '▁return', '▁right', ';', '}', '▁public', '▁int', '▁get', 'b', '()', '▁{', '▁return', '▁bottom', ';', '}', '""', '\n']"~"['▁89', '\t', '""', 'event', '▁line', '▁protected', '▁int', '▁top', ',', '▁left', ',', '▁right', ',', '▁bottom', ';', '▁public', '▁event', 'line', '▁(', '▁int', '▁t', ',', '▁int', '▁l', ',', '▁int', '▁r', ',', '▁int', '▁b', ')', '\n', '{', '\n', 'top', '▁=', '▁t', ';', '\n', 'left', '▁=', '▁l', ';', '\n', 'right', '▁=', '▁r', ';', '\n', 'bottom', '▁=', '▁b', ';', '\n', '}', '▁public', '▁int', '▁gett', '()', '▁{', '▁return', '▁top', ';', '}', '▁public', '▁int', '▁get', 'l', '()', '▁{', '▁return', '▁left', ';', '}', 'public', '▁int', '▁get', 'r', '()', '▁{', '▁return', '▁right', ';', '}', '▁public', '▁int', '▁get', 'b', '()', '▁{', '▁return', '▁bottom', ';', '}', '""', '\n']"~event line protect int top left right bottom public event line int int int int top left right bottom public int get return top public int get return left public int get return right public int get return bottom
77~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/73.java~73.java~"73	""Constraints String id;
 String name;
 double value;
 String logic; Constraints(String id, String name, double value, String logic){
this. id = id;
this. name = name;
this. value = value;
this. logic = logic;
 } public String toString(){
 String temp;
 temp = """"ID = """" + id + """", Name = """" + name +"""", value = """" + value + """", Logic = """" + logic;
 return temp;
 } /**
* Returns the id.
* @return int
*/
 public String getId() {
return id;
 } /**
* Returns the logic.
* @return String
*/
 public String getLogic() {
return logic;
 } /**
* Returns the name.
* @return String
*/
 public String getName() {
return name;
 } /**
* Returns the value.
* @return double
*/
 public double getValue() {
return value;
 } /**
* Sets the id.
* @param id The id to set
*/
 public void setId(String id) {
this. id = id;
 } **
* Sets the logic.
* @param logic The logic to set
*/
 public void setLogic(String logic) {
this. logic = logic;
 } /**
* Sets the name.
* @param name The name to set
*/
 public void setName(String name) {
this. name = name;
 } /**
* Sets the value.
* @param value The value to set
*/
 public void setValue( double value) {
this. value = value;
 }""
"~src~"['▁7', '3', '\t', '""', 'con', 'str', 'aints', '▁string', '▁id', ';', '\n', '▁string', '▁name', ';', '\n', '▁double', '▁value', ';', '\n', '▁string', '▁log', 'ic', ';', '▁constr', 'aints', '(', 'str', 'ing', '▁id', ',', '▁string', '▁name', ',', '▁double', '▁value', ',', '▁string', '▁log', 'ic', ')', '{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', 'this', '.', '▁value', '▁=', '▁value', ';', '\n', 'this', '.', '▁log', 'ic', '▁=', '▁log', 'ic', ';', '\n', '▁}', '▁public', '▁string', '▁to', 'str', 'ing', '(', ')', '{', '\n', '▁string', '▁tem', 'p', ';', '\n', '▁tem', 'p', '▁=', '▁""', '""', 'id', '▁=', '▁""', '""', '▁+', '▁id', '▁+', '▁""', '"",', '▁name', '▁=', '▁""', '""', '▁+', '▁name', '▁+', '""', '"",', '▁value', '▁=', '▁""', '""', '▁+', '▁value', '▁+', '▁""', '"",', '▁log', 'ic', '▁=', '▁""', '""', '▁+', '▁log', 'ic', ';', '\n', '▁return', '▁tem', 'p', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'ret', 'urn', '▁int', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'id', '(', ')', '▁{', '\n', 'ret', 'urn', '▁id', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁log', 'ic', '.', '\n', '*', '▁', '@', 'ret', 'urn', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'l', 'og', 'ic', '(', ')', '▁{', '\n', 'ret', 'urn', '▁log', 'ic', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'ret', 'urn', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'name', '(', ')', '▁{', '\n', 'ret', 'urn', '▁name', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'ret', 'urn', '▁double', '\n', '*', '/', '\n', '▁public', '▁double', '▁get', 'value', '(', ')', '▁{', '\n', 'ret', 'urn', '▁value', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'par', 'am', '▁id', '▁the', '▁id', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁set', 'id', '(', 'str', 'ing', '▁id', ')', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', '▁}', '▁*', '*', '\n', '*', '▁sets', '▁the', '▁log', 'ic', '.', '\n', '*', '▁', '@', 'par', 'am', '▁log', 'ic', '▁the', '▁log', 'ic', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁set', 'l', 'og', 'ic', '(', 'str', 'ing', '▁log', 'ic', ')', '▁{', '\n', 'this', '.', '▁log', 'ic', '▁=', '▁log', 'ic', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'par', 'am', '▁name', '▁the', '▁name', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁set', 'name', '(', 'str', 'ing', '▁name', ')', '▁{', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'par', 'am', '▁value', '▁the', '▁value', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁set', 'value', '(', '▁double', '▁value', ')', '▁{', '\n', 'this', '.', '▁value', '▁=', '▁value', ';', '\n', '▁}', '""', '\n']"~"['▁73', '\t', '""', 'con', 'str', 'aints', '▁string', '▁id', ';', '\n', '▁string', '▁name', ';', '\n', '▁double', '▁value', ';', '\n', '▁string', '▁logic', ';', '▁constraints', '(', 'string', '▁id', ',', '▁string', '▁name', ',', '▁double', '▁value', ',', '▁string', '▁logic', ')', '{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', 'this', '.', '▁value', '▁=', '▁value', ';', '\n', 'this', '.', '▁logic', '▁=', '▁logic', ';', '\n', '▁}', '▁public', '▁string', '▁to', 'string', '()', '{', '\n', '▁string', '▁temp', ';', '\n', '▁temp', '▁=', '▁""""', 'id', '▁=', '▁""""', '▁+', '▁id', '▁+', '▁""', '"",', '▁name', '▁=', '▁""""', '▁+', '▁name', '▁+', '""', '"",', '▁value', '▁=', '▁""""', '▁+', '▁value', '▁+', '▁""', '"",', '▁logic', '▁=', '▁""""', '▁+', '▁logic', ';', '\n', '▁return', '▁temp', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'return', '▁int', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'id', '()', '▁{', '\n', 'return', '▁id', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁logic', '.', '\n', '*', '▁', '@', 'return', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'log', 'ic', '()', '▁{', '\n', 'return', '▁logic', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'return', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'name', '()', '▁{', '\n', 'return', '▁name', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'return', '▁double', '\n', '*', '/', '\n', '▁public', '▁double', '▁get', 'value', '()', '▁{', '\n', 'return', '▁value', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'param', '▁id', '▁the', '▁id', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'id', '(', 'string', '▁id', ')', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', '▁}', '▁**', '\n', '*', '▁sets', '▁the', '▁logic', '.', '\n', '*', '▁', '@', 'param', '▁logic', '▁the', '▁logic', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'log', 'ic', '(', 'string', '▁logic', ')', '▁{', '\n', 'this', '.', '▁logic', '▁=', '▁logic', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'param', '▁name', '▁the', '▁name', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'name', '(', 'string', '▁name', ')', '▁{', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'param', '▁value', '▁the', '▁value', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'value', '(', '▁double', '▁value', ')', '▁{', '\n', 'this', '.', '▁value', '▁=', '▁value', ';', '\n', '▁}', '""', '\n']"~"['▁73', '\t', '""', 'con', 'str', 'aints', '▁string', '▁id', ';', '\n', '▁string', '▁name', ';', '\n', '▁double', '▁value', ';', '\n', '▁string', '▁logic', ';', '▁constraints', '(', 'string', '▁id', ',', '▁string', '▁name', ',', '▁double', '▁value', ',', '▁string', '▁logic', ')', '{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', 'this', '.', '▁value', '▁=', '▁value', ';', '\n', 'this', '.', '▁logic', '▁=', '▁logic', ';', '\n', '▁}', '▁public', '▁string', '▁to', 'string', '()', '{', '\n', '▁string', '▁temp', ';', '\n', '▁temp', '▁=', '▁""""', 'id', '▁=', '▁""""', '▁+', '▁id', '▁+', '▁"""",', '▁name', '▁=', '▁""""', '▁+', '▁name', '▁+', '""', '"",', '▁value', '▁=', '▁""""', '▁+', '▁value', '▁+', '▁"""",', '▁logic', '▁=', '▁""""', '▁+', '▁logic', ';', '\n', '▁return', '▁temp', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁returns', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'return', '▁int', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'id', '()', '▁{', '\n', 'return', '▁id', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁returns', '▁the', '▁logic', '.', '\n', '*', '▁', '@', 'return', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'logic', '()', '▁{', '\n', 'return', '▁logic', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁returns', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'return', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'name', '()', '▁{', '\n', 'return', '▁name', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁returns', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'return', '▁double', '\n', '*', '/', '\n', '▁public', '▁double', '▁get', 'value', '()', '▁{', '\n', 'return', '▁value', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁sets', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'param', '▁id', '▁the', '▁id', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'id', '(', 'string', '▁id', ')', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', '▁}', '▁**', '\n', '*', '▁sets', '▁the', '▁logic', '.', '\n', '*', '▁', '@', 'param', '▁logic', '▁the', '▁logic', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'logic', '(', 'string', '▁logic', ')', '▁{', '\n', 'this', '.', '▁logic', '▁=', '▁logic', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁sets', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'param', '▁name', '▁the', '▁name', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'name', '(', 'string', '▁name', ')', '▁{', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁sets', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'param', '▁value', '▁the', '▁value', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'value', '(', '▁double', '▁value', ')', '▁{', '\n', 'this', '.', '▁value', '▁=', '▁value', ';', '\n', '▁}', '""', '\n']"~constraint string string name doubl valu string logic constraint string string name doubl valu string logic name name valu valu logic logic public string string string temp temp name name valu valu logic logic return temp return return int public string get return return logic return string public string get logic return logic return name return string public string get name return name return valu return doubl public doubl get valu return valu set param set public void set string set logic param logic logic set public void set logic string logic logic logic set name param name name set public void set name string name name name set valu param valu valu set public void set valu doubl valu valu valu
78~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/63.java~63.java~"63	""Doors Thread static private int count = 0;
 private int taskNumber;
 protected Done done;
 ServerSocket theServer;

 private Connection conn;
 private Statement stmt;
 private ResultSet rs; DOORsThread(ServerSocket ss)
 {
 theServer = ss;
 count++;
 taskNumber = count;
 } public void run()
 {

 while( true)
 {
 try
 {

Socket client = theServer. accept();
BufferedReader input = new BufferedReader( new InputStreamReader( client. getInputStream()));
PrintWriter output = new P""
"~src~"['▁6', '3', '\t', '""', 'do', 'ors', '▁th', 'read', '▁st', 'atic', '▁private', '▁int', '▁count', '▁=', '▁0', ';', '\n', '▁private', '▁int', '▁tas', 'kn', 'umber', ';', '\n', '▁protected', '▁done', '▁done', ';', '\n', '▁serv', 'ers', 'ock', 'et', '▁the', 'ser', 'ver', ';', '\n\n', '▁private', '▁connection', '▁conn', ';', '\n', '▁private', '▁statement', '▁st', 'm', 't', ';', '\n', '▁private', '▁results', 'et', '▁r', 's', ';', '▁door', 'st', 'h', 'read', '(', 's', 'erv', 'ers', 'ock', 'et', '▁ss', ')', '\n', '▁{', '\n', '▁the', 'ser', 'ver', '▁=', '▁ss', ';', '\n', '▁count', '+', '+', ';', '\n', '▁tas', 'kn', 'umber', '▁=', '▁count', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁run', '(', ')', '\n', '▁{', '\n\n', '▁while', '(', '▁true', ')', '\n', '▁{', '\n', '▁try', '\n', '▁{', '\n\n', 's', 'ock', 'et', '▁cl', 'ient', '▁=', '▁the', 'ser', 'ver', '.', '▁accept', '(', ');', '\n', 'b', 'uf', 'fer', 'ed', 'read', 'er', '▁in', 'put', '▁=', '▁new', '▁bu', 'ffer', 'ed', 'read', 'er', '(', '▁new', '▁in', 'put', 'stream', 'read', 'er', '(', '▁cl', 'ient', '.', '▁get', 'in', 'put', 'stream', '(', ')', ')', ');', '\n', 'pr', 'int', 'writer', '▁out', 'put', '▁=', '▁new', '▁p', '""', '\n']"~"['▁63', '\t', '""', 'doors', '▁thread', '▁static', '▁private', '▁int', '▁count', '▁=', '▁0', ';', '\n', '▁private', '▁int', '▁tas', 'kn', 'umber', ';', '\n', '▁protected', '▁done', '▁done', ';', '\n', '▁servers', 'ock', 'et', '▁the', 'ser', 'ver', ';', '\n\n', '▁private', '▁connection', '▁conn', ';', '\n', '▁private', '▁statement', '▁st', 'mt', ';', '\n', '▁private', '▁results', 'et', '▁rs', ';', '▁door', 'st', 'h', 'read', '(', 'serv', 'ers', 'ock', 'et', '▁ss', ')', '\n', '▁{', '\n', '▁the', 'ser', 'ver', '▁=', '▁ss', ';', '\n', '▁count', '++', ';', '\n', '▁tas', 'kn', 'umber', '▁=', '▁count', ';', '\n', '▁}', '▁public', '▁void', '▁run', '()', '\n', '▁{', '\n\n', '▁while', '(', '▁true', ')', '\n', '▁{', '\n', '▁try', '\n', '▁{', '\n\n', 's', 'ock', 'et', '▁client', '▁=', '▁the', 'ser', 'ver', '.', '▁accept', '();', '\n', 'b', 'uffer', 'ed', 'read', 'er', '▁input', '▁=', '▁new', '▁buffer', 'ed', 'read', 'er', '(', '▁new', '▁input', 'stream', 'read', 'er', '(', '▁client', '.', '▁get', 'in', 'put', 'stream', '())', ');', '\n', 'print', 'writer', '▁output', '▁=', '▁new', '▁p', '""', '\n']"~"['▁63', '\t', '""', 'doors', '▁thread', '▁static', '▁private', '▁int', '▁count', '▁=', '▁0;', '\n', '▁private', '▁int', '▁tas', 'kn', 'umber', ';', '\n', '▁protected', '▁done', '▁done', ';', '\n', '▁servers', 'ocket', '▁the', 'server', ';', '\n\n', '▁private', '▁connection', '▁conn', ';', '\n', '▁private', '▁statement', '▁st', 'mt', ';', '\n', '▁private', '▁results', 'et', '▁rs', ';', '▁door', 'sth', 'read', '(', 'serv', 'ers', 'ocket', '▁ss', ')', '\n', '▁{', '\n', '▁the', 'server', '▁=', '▁ss', ';', '\n', '▁count', '++;', '\n', '▁tas', 'kn', 'umber', '▁=', '▁count', ';', '\n', '▁}', '▁public', '▁void', '▁run', '()', '\n', '▁{', '\n\n', '▁while', '(', '▁true', ')', '\n', '▁{', '\n', '▁try', '\n', '▁{', '\n\n', 's', 'ocket', '▁client', '▁=', '▁the', 'server', '.', '▁accept', '();', '\n', 'buffer', 'ed', 'reader', '▁input', '▁=', '▁new', '▁buffered', 'reader', '(', '▁new', '▁input', 'stream', 'reader', '(', '▁client', '.', '▁get', 'input', 'stream', '())', ');', '\n', 'print', 'writer', '▁output', '▁=', '▁new', '▁p', '""', '\n']"~door thread static privat int count privat int task number protect done done server socket server privat connect conn privat statement stmt privat result set door thread server socket server count task number count public void run true tri socket client server accept buffer reader input new buffer reader new input stream reader client get input stream print writer output new
79~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/57.java~57.java~"57	""Event Notifier // Variables to process the requirement
 private String requirement No;//Requirement No.
 private String ProjName; //Project name
 private String ModPath;//Modular path
 private String requirement Text;/ public EventNotifier(String rno, String proj, String mod, String rtext,String eID, String em, String eventType)
 {
requirement No = rno;//Requirement number
ProjName = proj;// project name
ModPath = mo // finds the subscribers for this requirement
 public void IdentifySubscribers()
 {
String mSQL;
// Create an SQL statement that will limit the selection as much as possible
// If a subscription is to a specific requirement - check for requi //Reads the result from IdentifySubscribers method selection
 // and adds each result into ActualSubscribers Vector.
 void ProcessResultSet()
 {

String sName, sReqno, sModule, sKey1, sKey2;
try
{
 System. o // Send messages to all subscribers listed in ActualSubscriber Vector
// Possible that a sort routine can be added later so that all notification to
// the same subscribermanager can be batched.This is not implemented yet.

 public void Dispatch public String getErrorMessage()
 {
 return errMsg;

 } public boolean Contains(String ContextString, String SearchString)
 {
int cLen = ContextString. length();
int sLen = SearchString. length();
if (SearchString. length() == 0)
 return false;

for ( int i = 0""
"~src~"['▁5', '7', '\t', '""', 'ev', 'ent', '▁not', 'if', 'ier', '▁/', '/', '▁vari', 'ables', '▁to', '▁process', '▁the', '▁require', 'ment', '\n', '▁private', '▁string', '▁require', 'ment', '▁no', ';', '//', 're', 'qu', 'ire', 'ment', '▁no', '.', '\n', '▁private', '▁string', '▁pro', 'j', 'name', ';', '▁/', '/', 'pro', 'ject', '▁name', '\n', '▁private', '▁string', '▁mod', 'p', 'ath', ';', '//', 'mod', 'ular', '▁path', '\n', '▁private', '▁string', '▁require', 'ment', '▁text', ';', '/', '▁public', '▁event', 'not', 'if', 'ier', '(', 'str', 'ing', '▁r', 'no', ',', '▁string', '▁pro', 'j', ',', '▁string', '▁mod', ',', '▁string', '▁r', 'text', ',', 'str', 'ing', '▁e', 'id', ',', '▁string', '▁em', ',', '▁string', '▁event', 'type', ')', '\n', '▁{', '\n', 're', 'qu', 'ire', 'ment', '▁no', '▁=', '▁r', 'no', ';', '//', 're', 'qu', 'ire', 'ment', '▁number', '\n', 'pro', 'j', 'name', '▁=', '▁pro', 'j', ';', '//', '▁project', '▁name', '\n', 'mod', 'p', 'ath', '▁=', '▁mo', '▁/', '/', '▁finds', '▁the', '▁sub', 'sc', 'rib', 'ers', '▁for', '▁this', '▁require', 'ment', '\n', '▁public', '▁vo', 'id', '▁ident', 'if', 'ys', 'ub', 'sc', 'rib', 'ers', '(', ')', '\n', '▁{', '\n', 'str', 'ing', '▁ms', 'q', 'l', ';', '\n', '//', '▁create', '▁an', '▁s', 'q', 'l', '▁statement', '▁that', '▁will', '▁limit', '▁the', '▁selection', '▁as', '▁much', '▁as', '▁possible', '\n', '//', '▁if', '▁a', '▁sub', 'sc', 'ription', '▁is', '▁to', '▁a', '▁specific', '▁require', 'ment', '▁-', '▁check', '▁for', '▁requ', 'i', '▁/', '/', 'read', 's', '▁the', '▁result', '▁from', '▁ident', 'if', 'ys', 'ub', 'sc', 'rib', 'ers', '▁method', '▁selection', '\n', '▁/', '/', '▁and', '▁add', 's', '▁each', '▁result', '▁into', '▁actual', 'sub', 'sc', 'rib', 'ers', '▁v', 'ector', '.', '\n', '▁vo', 'id', '▁process', 'res', 'ult', 'set', '(', ')', '\n', '▁{', '\n\n', 'str', 'ing', '▁sn', 'ame', ',', '▁s', 're', 'q', 'no', ',', '▁sm', 'od', 'ule', ',', '▁sk', 'ey', '1,', '▁sk', 'ey', '2', ';', '\n', 't', 'ry', '\n', '{', '\n', '▁system', '.', '▁o', '▁/', '/', '▁s', 'end', '▁mess', 'ages', '▁to', '▁all', '▁sub', 'sc', 'rib', 'ers', '▁listed', '▁in', '▁actual', 'sub', 'sc', 'ri', 'ber', '▁v', 'ector', '\n', '//', '▁possible', '▁that', '▁a', '▁sort', '▁ro', 'ut', 'ine', '▁can', '▁be', '▁added', '▁later', '▁so', '▁that', '▁all', '▁not', 'ification', '▁to', '\n', '//', '▁the', '▁same', '▁sub', 'sc', 'ri', 'ber', 'man', 'ager', '▁can', '▁be', '▁bat', 'ched', '.', 'this', '▁is', '▁not', '▁implement', 'ed', '▁yet', '.', '\n\n', '▁public', '▁vo', 'id', '▁disp', 'atch', '▁public', '▁string', '▁g', 'eter', 'ror', 'm', 'ess', 'age', '(', ')', '\n', '▁{', '\n', '▁return', '▁er', 'r', 'ms', 'g', ';', '\n\n', '▁}', '▁public', '▁bo', 'ole', 'an', '▁contains', '(', 'str', 'ing', '▁context', 'str', 'ing', ',', '▁string', '▁search', 'str', 'ing', ')', '\n', '▁{', '\n', 'int', '▁cl', 'en', '▁=', '▁context', 'str', 'ing', '.', '▁length', '(', ');', '\n', 'int', '▁sl', 'en', '▁=', '▁search', 'str', 'ing', '.', '▁length', '(', ');', '\n', 'if', '▁(', 's', 'ear', 'ch', 'str', 'ing', '.', '▁length', '(', ')', '▁=', '=', '▁', '0)', '\n', '▁return', '▁fal', 'se', ';', '\n\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', '""', '\n']"~"['▁57', '\t', '""', 'event', '▁not', 'ifier', '▁//', '▁variables', '▁to', '▁process', '▁the', '▁requirement', '\n', '▁private', '▁string', '▁requirement', '▁no', ';', '//', 'requ', 'ire', 'ment', '▁no', '.', '\n', '▁private', '▁string', '▁pro', 'j', 'name', ';', '▁//', 'project', '▁name', '\n', '▁private', '▁string', '▁mod', 'path', ';', '//', 'mod', 'ular', '▁path', '\n', '▁private', '▁string', '▁requirement', '▁text', ';', '/', '▁public', '▁event', 'not', 'ifier', '(', 'string', '▁r', 'no', ',', '▁string', '▁pro', 'j', ',', '▁string', '▁mod', ',', '▁string', '▁r', 'text', ',', 'string', '▁eid', ',', '▁string', '▁em', ',', '▁string', '▁event', 'type', ')', '\n', '▁{', '\n', 'requ', 'ire', 'ment', '▁no', '▁=', '▁r', 'no', ';', '//', 'requ', 'ire', 'ment', '▁number', '\n', 'pro', 'j', 'name', '▁=', '▁pro', 'j', ';', '//', '▁project', '▁name', '\n', 'mod', 'path', '▁=', '▁mo', '▁//', '▁finds', '▁the', '▁subscribers', '▁for', '▁this', '▁requirement', '\n', '▁public', '▁void', '▁ident', 'if', 'ys', 'ub', 'sc', 'rib', 'ers', '()', '\n', '▁{', '\n', 'string', '▁ms', 'q', 'l', ';', '\n', '//', '▁create', '▁an', '▁sq', 'l', '▁statement', '▁that', '▁will', '▁limit', '▁the', '▁selection', '▁as', '▁much', '▁as', '▁possible', '\n', '//', '▁if', '▁a', '▁subscription', '▁is', '▁to', '▁a', '▁specific', '▁requirement', '▁-', '▁check', '▁for', '▁requ', 'i', '▁//', 'read', 's', '▁the', '▁result', '▁from', '▁ident', 'if', 'ys', 'ub', 'sc', 'rib', 'ers', '▁method', '▁selection', '\n', '▁//', '▁and', '▁adds', '▁each', '▁result', '▁into', '▁actual', 'sub', 'sc', 'rib', 'ers', '▁vector', '.', '\n', '▁void', '▁process', 'result', 'set', '()', '\n', '▁{', '\n\n', 'string', '▁sn', 'ame', ',', '▁sre', 'q', 'no', ',', '▁sm', 'od', 'ule', ',', '▁sk', 'ey', '1,', '▁sk', 'ey', '2', ';', '\n', 'try', '\n', '{', '\n', '▁system', '.', '▁o', '▁//', '▁send', '▁messages', '▁to', '▁all', '▁subscribers', '▁listed', '▁in', '▁actual', 'sub', 'sc', 'ri', 'ber', '▁vector', '\n', '//', '▁possible', '▁that', '▁a', '▁sort', '▁routine', '▁can', '▁be', '▁added', '▁later', '▁so', '▁that', '▁all', '▁not', 'ification', '▁to', '\n', '//', '▁the', '▁same', '▁subsc', 'ri', 'ber', 'manager', '▁can', '▁be', '▁bat', 'ched', '.', 'this', '▁is', '▁not', '▁implemented', '▁yet', '.', '\n\n', '▁public', '▁void', '▁dispatch', '▁public', '▁string', '▁g', 'eter', 'ror', 'mess', 'age', '()', '\n', '▁{', '\n', '▁return', '▁err', 'ms', 'g', ';', '\n\n', '▁}', '▁public', '▁bo', 'olean', '▁contains', '(', 'string', '▁context', 'string', ',', '▁string', '▁search', 'string', ')', '\n', '▁{', '\n', 'int', '▁cl', 'en', '▁=', '▁context', 'string', '.', '▁length', '();', '\n', 'int', '▁sl', 'en', '▁=', '▁search', 'string', '.', '▁length', '();', '\n', 'if', '▁(', 'search', 'string', '.', '▁length', '()', '▁==', '▁', '0)', '\n', '▁return', '▁false', ';', '\n\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', '""', '\n']"~"['▁57', '\t', '""', 'event', '▁not', 'ifier', '▁//', '▁variables', '▁to', '▁process', '▁the', '▁requirement', '\n', '▁private', '▁string', '▁requirement', '▁no', ';', '//', 'require', 'ment', '▁no', '.', '\n', '▁private', '▁string', '▁proj', 'name', ';', '▁//', 'project', '▁name', '\n', '▁private', '▁string', '▁mod', 'path', ';', '//', 'mod', 'ular', '▁path', '\n', '▁private', '▁string', '▁requirement', '▁text', ';', '/', '▁public', '▁event', 'not', 'ifier', '(', 'string', '▁r', 'no', ',', '▁string', '▁proj', ',', '▁string', '▁mod', ',', '▁string', '▁r', 'text', ',', 'string', '▁eid', ',', '▁string', '▁em', ',', '▁string', '▁event', 'type', ')', '\n', '▁{', '\n', 'require', 'ment', '▁no', '▁=', '▁r', 'no', ';', '//', 'require', 'ment', '▁number', '\n', 'pro', 'j', 'name', '▁=', '▁proj', ';', '//', '▁project', '▁name', '\n', 'mod', 'path', '▁=', '▁mo', '▁//', '▁finds', '▁the', '▁subscribers', '▁for', '▁this', '▁requirement', '\n', '▁public', '▁void', '▁ident', 'if', 'ys', 'ub', 'sc', 'rib', 'ers', '()', '\n', '▁{', '\n', 'string', '▁ms', 'ql', ';', '\n', '//', '▁create', '▁an', '▁sql', '▁statement', '▁that', '▁will', '▁limit', '▁the', '▁selection', '▁as', '▁much', '▁as', '▁possible', '\n', '//', '▁if', '▁a', '▁subscription', '▁is', '▁to', '▁a', '▁specific', '▁requirement', '▁-', '▁check', '▁for', '▁requ', 'i', '▁//', 'reads', '▁the', '▁result', '▁from', '▁ident', 'if', 'ys', 'ub', 'sc', 'rib', 'ers', '▁method', '▁selection', '\n', '▁//', '▁and', '▁adds', '▁each', '▁result', '▁into', '▁actual', 'subsc', 'rib', 'ers', '▁vector', '.', '\n', '▁void', '▁process', 'result', 'set', '()', '\n', '▁{', '\n\n', 'string', '▁sn', 'ame', ',', '▁sre', 'q', 'no', ',', '▁sm', 'od', 'ule', ',', '▁sk', 'ey', '1,', '▁sk', 'ey', '2;', '\n', 'try', '\n', '{', '\n', '▁system', '.', '▁o', '▁//', '▁send', '▁messages', '▁to', '▁all', '▁subscribers', '▁listed', '▁in', '▁actual', 'subsc', 'riber', '▁vector', '\n', '//', '▁possible', '▁that', '▁a', '▁sort', '▁routine', '▁can', '▁be', '▁added', '▁later', '▁so', '▁that', '▁all', '▁notification', '▁to', '\n', '//', '▁the', '▁same', '▁subscriber', 'manager', '▁can', '▁be', '▁bat', 'ched', '.', 'this', '▁is', '▁not', '▁implemented', '▁yet', '.', '\n\n', '▁public', '▁void', '▁dispatch', '▁public', '▁string', '▁g', 'eter', 'ror', 'message', '()', '\n', '▁{', '\n', '▁return', '▁err', 'msg', ';', '\n\n', '▁}', '▁public', '▁boolean', '▁contains', '(', 'string', '▁context', 'string', ',', '▁string', '▁search', 'string', ')', '\n', '▁{', '\n', 'int', '▁cl', 'en', '▁=', '▁context', 'string', '.', '▁length', '();', '\n', 'int', '▁sl', 'en', '▁=', '▁search', 'string', '.', '▁length', '();', '\n', 'if', '▁(', 'search', 'string', '.', '▁length', '()', '▁==', '▁0)', '\n', '▁return', '▁false', ';', '\n\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', '""', '\n']"~event notifi variabl process requir privat string requir requir privat string proj name project name privat string mod path modular path privat string requir text public event notifi string rno string proj string mod string rtext string string string event type requir rno requir number proj name proj project name mod path find subscrib requir public void identifi subscrib string sql creat sql statement limit select much possibl subscript specif requir check requi read result identifi subscrib method select add result actual subscrib vector void process result set string name reqno modul key key tri system send messag subscrib list actual subscrib vector possibl sort routin later notif subscribermanag batch implement yet public void dispatch public string get error messag return err msg public boolean contain string context string string search string int len context string length int len search string length search string length return fals int
80~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/54.java~54.java~"54	""eventserver public static void main(String args[])
 {

ThreadPool pool = new ThreadPool(1);

 int port = defaultPort;
 try
 {
 ServerSocket ss = new ServerSocket( port);
 for( int i=0; i<4; i++)
 {
p public final static int defaultPort = 1701;
 ServerSocket theServer;""
"~src~"['▁5', '4', '\t', '""', 'ev', 'ents', 'er', 'ver', '▁public', '▁st', 'atic', '▁vo', 'id', '▁main', '(', 'str', 'ing', '▁arg', 's', '[', ']', ')', '\n', '▁{', '\n\n', 'th', 'read', 'pool', '▁pool', '▁=', '▁new', '▁th', 'read', 'pool', '(', '1)', ';', '\n\n', '▁int', '▁port', '▁=', '▁def', 'ault', 'port', ';', '\n', '▁try', '\n', '▁{', '\n', '▁serv', 'ers', 'ock', 'et', '▁ss', '▁=', '▁new', '▁serv', 'ers', 'ock', 'et', '(', '▁port', ');', '\n', '▁for', '(', '▁int', '▁i', '=', '0', ';', '▁i', '<', '4', ';', '▁i', '+', '+', ')', '\n', '▁{', '\n', 'p', '▁public', '▁final', '▁st', 'atic', '▁int', '▁def', 'ault', 'port', '▁=', '▁17', '01', ';', '\n', '▁serv', 'ers', 'ock', 'et', '▁the', 'ser', 'ver', ';""', '\n']"~"['▁54', '\t', '""', 'ev', 'ents', 'erver', '▁public', '▁static', '▁void', '▁main', '(', 'string', '▁arg', 's', '[', '])', '\n', '▁{', '\n\n', 'th', 'read', 'pool', '▁pool', '▁=', '▁new', '▁thread', 'pool', '(1)', ';', '\n\n', '▁int', '▁port', '▁=', '▁default', 'port', ';', '\n', '▁try', '\n', '▁{', '\n', '▁servers', 'ock', 'et', '▁ss', '▁=', '▁new', '▁servers', 'ock', 'et', '(', '▁port', ');', '\n', '▁for', '(', '▁int', '▁i', '=0', ';', '▁i', '<', '4', ';', '▁i', '++', ')', '\n', '▁{', '\n', 'p', '▁public', '▁final', '▁static', '▁int', '▁default', 'port', '▁=', '▁17', '01', ';', '\n', '▁servers', 'ock', 'et', '▁the', 'ser', 'ver', ';""', '\n']"~"['▁54', '\t', '""', 'events', 'erver', '▁public', '▁static', '▁void', '▁main', '(', 'string', '▁args', '[', '])', '\n', '▁{', '\n\n', 'thread', 'pool', '▁pool', '▁=', '▁new', '▁thread', 'pool', '(1)', ';', '\n\n', '▁int', '▁port', '▁=', '▁default', 'port', ';', '\n', '▁try', '\n', '▁{', '\n', '▁servers', 'ocket', '▁ss', '▁=', '▁new', '▁servers', 'ocket', '(', '▁port', ');', '\n', '▁for', '(', '▁int', '▁i', '=0;', '▁i', '<', '4;', '▁i', '++)', '\n', '▁{', '\n', 'p', '▁public', '▁final', '▁static', '▁int', '▁default', 'port', '▁=', '▁1701', ';', '\n', '▁servers', 'ocket', '▁the', 'server', ';""', '\n']"~eventserv public static void main string arg thread pool pool new thread pool int port default port tri server socket new server socket port int public final static int default port server socket server
81~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/70.java~70.java~"70	""Notification Processing // member variables for menu
 private JMenuBar menuBar;

 // subscriber list
 private JList SubscriberList;
 private DefaultListModel listModel;

 // popup menu

 private JPopupMenu popup;

 // database and eventserver information
 S public Notification_Processing()
 {

setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

addWindowListener( new WindowAdapter()
{
 public void windowClosing(WindowEvent evt)
 {
try
public static void main(String args[])
 {
try
{
 Notification_Processing mainFrame = new Notification_Processing();
 mainFrame. setSize(600, 400);
 mainFrame. setLocation(100, 100);
 mainFrame. void exitApplication()
{
try
{
int reply = JOptionPane. showConfirmDialog( this,
""""Do you really want to exit?"""",
""""No // action for """"Open log database""""
 private void openMenuItemActionPerformed (ActionEvent evt)
 {
new ConfigDialog( this, true). show();

 if( m_DSN. equals("""""""") || m_EventServerIP. equals("""""""") || m_// action for """"Close log database""""
 private void saveMenuItemActionPerformed (ActionEvent evt)
 {
try
{
 m_ conn. close();
 m_DSN="""""""";
 m_EventServerIP="""""""";
 m_EventServerPort="""""""";

 // action for """" exit""""
 private void exitMenuItemActionPerformed (ActionEvent evt)
 {
exitApplication();
 } // action for """"Open Events"""" in popup menu
 private void popupOpenActionPerformed (ActionEvent evt)
 {
openEventsMenuItemActionPerformed( evt);
 } // action for """"Open Events""""
 private void openEventsMenuItemActionPerformed (ActionEvent evt)
 {
if (! listModel. isEmpty())
{
 int index = SubscriberList. getSelectedIndex();
 if ( index != -1)
 // action for """" double click on Subscriber List""""
 private void doubleClickSubscriberList (MouseEvent evt)
 {
if (! listModel. isEmpty())
{
 int index = SubscriberList. getSelectedIndex();
 if ( index != -1 // action for """"About""""
 private void aboutMenuItemActionPerformed (ActionEvent evt)
 {
new AboutDialog ( this, true). show();
 } void UpdateDisplayList()
 {
listModel. removeAllElements();

 String mSQL = """"SELECT distinct SubscriberName FROM EventDetails"""";

try
{
 rs = stmt. executeQuery( mSQL);
 while ( rs. next())
 {
 ""
"~src~"['▁70', '\t', '""', 'not', 'ification', '▁process', 'ing', '▁/', '/', '▁member', '▁vari', 'ables', '▁for', '▁men', 'u', '\n', '▁private', '▁j', 'men', 'ub', 'ar', '▁men', 'ub', 'ar', ';', '\n\n', '▁/', '/', '▁sub', 'sc', 'ri', 'ber', '▁list', '\n', '▁private', '▁j', 'list', '▁sub', 'sc', 'ri', 'ber', 'list', ';', '\n', '▁private', '▁def', 'ault', 'list', 'mod', 'el', '▁list', 'mod', 'el', ';', '\n\n', '▁/', '/', '▁pop', 'up', '▁men', 'u', '\n\n', '▁private', '▁j', 'pop', 'up', 'men', 'u', '▁pop', 'up', ';', '\n\n', '▁/', '/', '▁database', '▁and', '▁events', 'er', 'ver', '▁information', '\n', '▁s', '▁public', '▁not', 'ification', '_', 'pro', 'cess', 'ing', '(', ')', '\n', '▁{', '\n\n', 'set', 'de', 'fa', 'ult', 'cl', 'ose', 'operation', '(', 'j', 'fr', 'ame', '.', 'do', '_', 'n', 'othing', '_', 'on', '_', 'cl', 'ose', ');', '\n\n', 'ad', 'd', 'w', 'ind', 'ow', 'list', 'en', 'er', '(', '▁new', '▁window', 'ad', 'ap', 'ter', '(', ')', '\n', '{', '\n', '▁public', '▁vo', 'id', '▁window', 'cl', 'os', 'ing', '(', 'w', 'ind', 'ow', 'ev', 'ent', '▁ev', 't', ')', '\n', '▁{', '\n', 't', 'ry', '\n', 'publ', 'ic', '▁st', 'atic', '▁vo', 'id', '▁main', '(', 'str', 'ing', '▁arg', 's', '[', ']', ')', '\n', '▁{', '\n', 't', 'ry', '\n', '{', '\n', '▁not', 'ification', '_', 'pro', 'cess', 'ing', '▁main', 'fr', 'ame', '▁=', '▁new', '▁not', 'ification', '_', 'pro', 'cess', 'ing', '(', ');', '\n', '▁main', 'fr', 'ame', '.', '▁sets', 'ize', '(', '6', '00', ',', '▁400', ');', '\n', '▁main', 'fr', 'ame', '.', '▁set', 'l', 'oc', 'ation', '(', '100', ',', '▁100', ');', '\n', '▁main', 'fr', 'ame', '.', '▁vo', 'id', '▁ex', 'it', 'ap', 'pl', 'ication', '(', ')', '\n', '{', '\n', 't', 'ry', '\n', '{', '\n', 'int', '▁rep', 'ly', '▁=', '▁j', 'op', 't', 'ion', 'p', 'ane', '.', '▁show', 'con', 'fir', 'm', 'd', 'ial', 'og', '(', '▁this', ',', '\n', '""', '""', 'do', '▁you', '▁really', '▁want', '▁to', '▁ex', 'it', '?""', '"",', '\n', '""', '""', 'no', '▁/', '/', '▁action', '▁for', '▁""', '""', 'op', 'en', '▁log', '▁database', '""', '""', '\n', '▁private', '▁vo', 'id', '▁open', 'men', 'uit', 'em', 'action', 'per', 'form', 'ed', '▁(', 'action', 'ev', 'ent', '▁ev', 't', ')', '\n', '▁{', '\n', 'new', '▁conf', 'ig', 'd', 'ial', 'og', '(', '▁this', ',', '▁true', ').', '▁show', '(', ');', '\n\n', '▁if', '(', '▁m', '_', 'ds', 'n', '.', '▁equ', 'als', '(', '""', '""', '""', '"")', '▁||', '▁m', '_', 'ev', 'ents', 'er', 'ver', 'ip', '.', '▁equ', 'als', '(', '""', '""', '""', '"")', '▁||', '▁m', '_', '//', '▁action', '▁for', '▁""', '""', 'cl', 'ose', '▁log', '▁database', '""', '""', '\n', '▁private', '▁vo', 'id', '▁sav', 'emen', 'uit', 'em', 'action', 'per', 'form', 'ed', '▁(', 'action', 'ev', 'ent', '▁ev', 't', ')', '\n', '▁{', '\n', 't', 'ry', '\n', '{', '\n', '▁m', '_', '▁conn', '.', '▁close', '(', ');', '\n', '▁m', '_', 'ds', 'n', '=""', '""', '""', '""', ';', '\n', '▁m', '_', 'ev', 'ents', 'er', 'ver', 'ip', '=""', '""', '""', '""', ';', '\n', '▁m', '_', 'ev', 'ents', 'er', 'ver', 'port', '=""', '""', '""', '""', ';', '\n\n', '▁/', '/', '▁action', '▁for', '▁""', '""', '▁ex', 'it', '""', '""', '\n', '▁private', '▁vo', 'id', '▁ex', 'it', 'men', 'uit', 'em', 'action', 'per', 'form', 'ed', '▁(', 'action', 'ev', 'ent', '▁ev', 't', ')', '\n', '▁{', '\n', 'ex', 'it', 'ap', 'pl', 'ication', '(', ');', '\n', '▁}', '▁/', '/', '▁action', '▁for', '▁""', '""', 'op', 'en', '▁events', '""', '""', '▁in', '▁pop', 'up', '▁men', 'u', '\n', '▁private', '▁vo', 'id', '▁pop', 'up', 'op', 'en', 'action', 'per', 'form', 'ed', '▁(', 'action', 'ev', 'ent', '▁ev', 't', ')', '\n', '▁{', '\n', 'op', 'ene', 'v', 'ents', 'men', 'uit', 'em', 'action', 'per', 'form', 'ed', '(', '▁ev', 't', ');', '\n', '▁}', '▁/', '/', '▁action', '▁for', '▁""', '""', 'op', 'en', '▁events', '""', '""', '\n', '▁private', '▁vo', 'id', '▁open', 'ev', 'ents', 'men', 'uit', 'em', 'action', 'per', 'form', 'ed', '▁(', 'action', 'ev', 'ent', '▁ev', 't', ')', '\n', '▁{', '\n', 'if', '▁(', '!', '▁list', 'mod', 'el', '.', '▁is', 'empt', 'y', '(', ')', ')', '\n', '{', '\n', '▁int', '▁index', '▁=', '▁sub', 'sc', 'ri', 'ber', 'list', '.', '▁get', 'se', 'lect', 'ed', 'ind', 'ex', '(', ');', '\n', '▁if', '▁(', '▁index', '▁!', '=', '▁-', '1)', '\n', '▁/', '/', '▁action', '▁for', '▁""', '""', '▁double', '▁cl', 'ick', '▁on', '▁sub', 'sc', 'ri', 'ber', '▁list', '""', '""', '\n', '▁private', '▁vo', 'id', '▁double', 'cl', 'icks', 'ub', 'sc', 'ri', 'ber', 'list', '▁(', 'm', 'ous', 'ee', 'vent', '▁ev', 't', ')', '\n', '▁{', '\n', 'if', '▁(', '!', '▁list', 'mod', 'el', '.', '▁is', 'empt', 'y', '(', ')', ')', '\n', '{', '\n', '▁int', '▁index', '▁=', '▁sub', 'sc', 'ri', 'ber', 'list', '.', '▁get', 'se', 'lect', 'ed', 'ind', 'ex', '(', ');', '\n', '▁if', '▁(', '▁index', '▁!', '=', '▁-', '1', '▁/', '/', '▁action', '▁for', '▁""', '""', 'ab', 'out', '""', '""', '\n', '▁private', '▁vo', 'id', '▁about', 'men', 'uit', 'em', 'action', 'per', 'form', 'ed', '▁(', 'action', 'ev', 'ent', '▁ev', 't', ')', '\n', '▁{', '\n', 'new', '▁about', 'd', 'ial', 'og', '▁(', '▁this', ',', '▁true', ').', '▁show', '(', ');', '\n', '▁}', '▁vo', 'id', '▁upd', 'ated', 'is', 'play', 'list', '(', ')', '\n', '▁{', '\n', 'list', 'mod', 'el', '.', '▁rem', 'ove', 'alle', 'le', 'ments', '(', ');', '\n\n', '▁string', '▁ms', 'q', 'l', '▁=', '▁""', '""', 'se', 'lect', '▁distinct', '▁sub', 'sc', 'ri', 'ber', 'name', '▁from', '▁event', 'd', 'et', 'ails', '""', '""', ';', '\n\n', 't', 'ry', '\n', '{', '\n', '▁r', 's', '▁=', '▁st', 'm', 't', '.', '▁ex', 'ec', 'ute', 'qu', 'ery', '(', '▁ms', 'q', 'l', ');', '\n', '▁while', '▁(', '▁r', 's', '.', '▁next', '(', ')', ')', '\n', '▁{', '\n', '▁""', '\n']"~"['▁70', '\t', '""', 'not', 'ification', '▁processing', '▁//', '▁member', '▁variables', '▁for', '▁menu', '\n', '▁private', '▁j', 'men', 'ub', 'ar', '▁men', 'ub', 'ar', ';', '\n\n', '▁//', '▁subsc', 'ri', 'ber', '▁list', '\n', '▁private', '▁j', 'list', '▁subsc', 'ri', 'ber', 'list', ';', '\n', '▁private', '▁default', 'list', 'model', '▁list', 'model', ';', '\n\n', '▁//', '▁pop', 'up', '▁menu', '\n\n', '▁private', '▁j', 'pop', 'up', 'men', 'u', '▁pop', 'up', ';', '\n\n', '▁//', '▁database', '▁and', '▁events', 'erver', '▁information', '\n', '▁s', '▁public', '▁not', 'ification', '_', 'process', 'ing', '()', '\n', '▁{', '\n\n', 'set', 'de', 'fault', 'cl', 'ose', 'operation', '(', 'j', 'frame', '.', 'do', '_', 'nothing', '_', 'on', '_', 'cl', 'ose', ');', '\n\n', 'add', 'wind', 'ow', 'list', 'ener', '(', '▁new', '▁window', 'ad', 'ap', 'ter', '()', '\n', '{', '\n', '▁public', '▁void', '▁window', 'cl', 'osing', '(', 'wind', 'ow', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'try', '\n', 'public', '▁static', '▁void', '▁main', '(', 'string', '▁arg', 's', '[', '])', '\n', '▁{', '\n', 'try', '\n', '{', '\n', '▁not', 'ification', '_', 'process', 'ing', '▁main', 'frame', '▁=', '▁new', '▁not', 'ification', '_', 'process', 'ing', '();', '\n', '▁main', 'frame', '.', '▁sets', 'ize', '(', '6', '00,', '▁400', ');', '\n', '▁main', 'frame', '.', '▁set', 'l', 'ocation', '(', '100', ',', '▁100', ');', '\n', '▁main', 'frame', '.', '▁void', '▁exit', 'appl', 'ication', '()', '\n', '{', '\n', 'try', '\n', '{', '\n', 'int', '▁reply', '▁=', '▁j', 'opt', 'ion', 'p', 'ane', '.', '▁show', 'con', 'fir', 'md', 'ial', 'og', '(', '▁this', ',', '\n', '""', '""', 'do', '▁you', '▁really', '▁want', '▁to', '▁exit', '?""', '"",', '\n', '""', '""', 'no', '▁//', '▁action', '▁for', '▁""""', 'open', '▁log', '▁database', '""', '""', '\n', '▁private', '▁void', '▁open', 'men', 'uit', 'em', 'action', 'per', 'formed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'new', '▁config', 'd', 'ial', 'og', '(', '▁this', ',', '▁true', ').', '▁show', '();', '\n\n', '▁if', '(', '▁m', '_', 'ds', 'n', '.', '▁equals', '(""', '""', '""', '"")', '▁||', '▁m', '_', 'ev', 'ents', 'erver', 'ip', '.', '▁equals', '(""', '""', '""', '"")', '▁||', '▁m', '_', '//', '▁action', '▁for', '▁""""', 'cl', 'ose', '▁log', '▁database', '""', '""', '\n', '▁private', '▁void', '▁sav', 'emen', 'uit', 'em', 'action', 'per', 'formed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'try', '\n', '{', '\n', '▁m', '_', '▁conn', '.', '▁close', '();', '\n', '▁m', '_', 'ds', 'n', '=""', '""', '""', '"";', '\n', '▁m', '_', 'ev', 'ents', 'erver', 'ip', '=""', '""', '""', '"";', '\n', '▁m', '_', 'ev', 'ents', 'erver', 'port', '=""', '""', '""', '"";', '\n\n', '▁//', '▁action', '▁for', '▁""""', '▁exit', '""', '""', '\n', '▁private', '▁void', '▁exit', 'men', 'uit', 'em', 'action', 'per', 'formed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'ex', 'it', 'appl', 'ication', '();', '\n', '▁}', '▁//', '▁action', '▁for', '▁""""', 'open', '▁events', '""', '""', '▁in', '▁pop', 'up', '▁menu', '\n', '▁private', '▁void', '▁pop', 'up', 'open', 'action', 'per', 'formed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'op', 'ene', 'v', 'ents', 'men', 'uit', 'em', 'action', 'per', 'formed', '(', '▁ev', 't', ');', '\n', '▁}', '▁//', '▁action', '▁for', '▁""""', 'open', '▁events', '""', '""', '\n', '▁private', '▁void', '▁open', 'ev', 'ents', 'men', 'uit', 'em', 'action', 'per', 'formed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'if', '▁(', '!', '▁list', 'model', '.', '▁is', 'empt', 'y', '())', '\n', '{', '\n', '▁int', '▁index', '▁=', '▁subsc', 'ri', 'ber', 'list', '.', '▁get', 'se', 'lected', 'index', '();', '\n', '▁if', '▁(', '▁index', '▁!=', '▁-', '1)', '\n', '▁//', '▁action', '▁for', '▁""""', '▁double', '▁click', '▁on', '▁subsc', 'ri', 'ber', '▁list', '""', '""', '\n', '▁private', '▁void', '▁double', 'cl', 'icks', 'ub', 'sc', 'ri', 'ber', 'list', '▁(', 'm', 'ous', 'ee', 'vent', '▁ev', 't', ')', '\n', '▁{', '\n', 'if', '▁(', '!', '▁list', 'model', '.', '▁is', 'empt', 'y', '())', '\n', '{', '\n', '▁int', '▁index', '▁=', '▁subsc', 'ri', 'ber', 'list', '.', '▁get', 'se', 'lected', 'index', '();', '\n', '▁if', '▁(', '▁index', '▁!=', '▁-', '1', '▁//', '▁action', '▁for', '▁""""', 'about', '""', '""', '\n', '▁private', '▁void', '▁about', 'men', 'uit', 'em', 'action', 'per', 'formed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'new', '▁about', 'd', 'ial', 'og', '▁(', '▁this', ',', '▁true', ').', '▁show', '();', '\n', '▁}', '▁void', '▁updated', 'is', 'play', 'list', '()', '\n', '▁{', '\n', 'list', 'model', '.', '▁remove', 'alle', 'lements', '();', '\n\n', '▁string', '▁ms', 'q', 'l', '▁=', '▁""""', 'select', '▁distinct', '▁subsc', 'ri', 'ber', 'name', '▁from', '▁event', 'det', 'ails', '""', '"";', '\n\n', 'try', '\n', '{', '\n', '▁rs', '▁=', '▁st', 'mt', '.', '▁execute', 'qu', 'ery', '(', '▁ms', 'q', 'l', ');', '\n', '▁while', '▁(', '▁rs', '.', '▁next', '())', '\n', '▁{', '\n', '▁""', '\n']"~"['▁70', '\t', '""', 'not', 'ification', '▁processing', '▁//', '▁member', '▁variables', '▁for', '▁menu', '\n', '▁private', '▁j', 'men', 'ub', 'ar', '▁men', 'ub', 'ar', ';', '\n\n', '▁//', '▁subscriber', '▁list', '\n', '▁private', '▁j', 'list', '▁subscriber', 'list', ';', '\n', '▁private', '▁default', 'list', 'model', '▁list', 'model', ';', '\n\n', '▁//', '▁pop', 'up', '▁menu', '\n\n', '▁private', '▁j', 'pop', 'up', 'men', 'u', '▁pop', 'up', ';', '\n\n', '▁//', '▁database', '▁and', '▁events', 'erver', '▁information', '\n', '▁s', '▁public', '▁notification', '_', 'processing', '()', '\n', '▁{', '\n\n', 'set', 'default', 'close', 'operation', '(', 'j', 'frame', '.', 'do', '_', 'nothing', '_', 'on', '_', 'close', ');', '\n\n', 'add', 'window', 'listener', '(', '▁new', '▁window', 'adap', 'ter', '()', '\n', '{', '\n', '▁public', '▁void', '▁window', 'closing', '(', 'window', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'try', '\n', 'public', '▁static', '▁void', '▁main', '(', 'string', '▁args', '[', '])', '\n', '▁{', '\n', 'try', '\n', '{', '\n', '▁notification', '_', 'processing', '▁mainframe', '▁=', '▁new', '▁notification', '_', 'processing', '();', '\n', '▁mainframe', '.', '▁sets', 'ize', '(', '600,', '▁400', ');', '\n', '▁mainframe', '.', '▁set', 'location', '(', '100,', '▁100', ');', '\n', '▁mainframe', '.', '▁void', '▁exit', 'application', '()', '\n', '{', '\n', 'try', '\n', '{', '\n', 'int', '▁reply', '▁=', '▁j', 'option', 'pane', '.', '▁show', 'con', 'fir', 'md', 'ial', 'og', '(', '▁this', ',', '\n', '""""', 'do', '▁you', '▁really', '▁want', '▁to', '▁exit', '?""', '"",', '\n', '""""', 'no', '▁//', '▁action', '▁for', '▁""""', 'open', '▁log', '▁database', '""""', '\n', '▁private', '▁void', '▁open', 'men', 'uit', 'em', 'action', 'performed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'new', '▁config', 'dial', 'og', '(', '▁this', ',', '▁true', ').', '▁show', '();', '\n\n', '▁if', '(', '▁m', '_', 'ds', 'n', '.', '▁equals', '(""', '""""', '"")', '▁||', '▁m', '_', 'events', 'erver', 'ip', '.', '▁equals', '(""', '""""', '"")', '▁||', '▁m', '_', '//', '▁action', '▁for', '▁""""', 'close', '▁log', '▁database', '""""', '\n', '▁private', '▁void', '▁sav', 'emen', 'uit', 'em', 'action', 'performed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'try', '\n', '{', '\n', '▁m', '_', '▁conn', '.', '▁close', '();', '\n', '▁m', '_', 'ds', 'n', '=""', '""""', '"";', '\n', '▁m', '_', 'events', 'erver', 'ip', '=""', '""""', '"";', '\n', '▁m', '_', 'events', 'erver', 'port', '=""', '""""', '"";', '\n\n', '▁//', '▁action', '▁for', '▁""""', '▁exit', '""""', '\n', '▁private', '▁void', '▁exit', 'men', 'uit', 'em', 'action', 'performed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'exit', 'application', '();', '\n', '▁}', '▁//', '▁action', '▁for', '▁""""', 'open', '▁events', '""""', '▁in', '▁pop', 'up', '▁menu', '\n', '▁private', '▁void', '▁pop', 'up', 'open', 'action', 'performed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'op', 'enev', 'ents', 'men', 'uit', 'em', 'action', 'performed', '(', '▁ev', 't', ');', '\n', '▁}', '▁//', '▁action', '▁for', '▁""""', 'open', '▁events', '""""', '\n', '▁private', '▁void', '▁open', 'events', 'men', 'uit', 'em', 'action', 'performed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'if', '▁(!', '▁list', 'model', '.', '▁is', 'empty', '())', '\n', '{', '\n', '▁int', '▁index', '▁=', '▁subscriber', 'list', '.', '▁get', 'selected', 'index', '();', '\n', '▁if', '▁(', '▁index', '▁!=', '▁-', '1)', '\n', '▁//', '▁action', '▁for', '▁""""', '▁double', '▁click', '▁on', '▁subscriber', '▁list', '""""', '\n', '▁private', '▁void', '▁double', 'cl', 'icks', 'ub', 'sc', 'riber', 'list', '▁(', 'mous', 'ee', 'vent', '▁ev', 't', ')', '\n', '▁{', '\n', 'if', '▁(!', '▁list', 'model', '.', '▁is', 'empty', '())', '\n', '{', '\n', '▁int', '▁index', '▁=', '▁subscriber', 'list', '.', '▁get', 'selected', 'index', '();', '\n', '▁if', '▁(', '▁index', '▁!=', '▁-1', '▁//', '▁action', '▁for', '▁""""', 'about', '""""', '\n', '▁private', '▁void', '▁about', 'men', 'uit', 'em', 'action', 'performed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '▁{', '\n', 'new', '▁about', 'dial', 'og', '▁(', '▁this', ',', '▁true', ').', '▁show', '();', '\n', '▁}', '▁void', '▁updated', 'is', 'play', 'list', '()', '\n', '▁{', '\n', 'list', 'model', '.', '▁remove', 'alle', 'lements', '();', '\n\n', '▁string', '▁ms', 'ql', '▁=', '▁""""', 'select', '▁distinct', '▁subscriber', 'name', '▁from', '▁event', 'details', '""', '"";', '\n\n', 'try', '\n', '{', '\n', '▁rs', '▁=', '▁st', 'mt', '.', '▁execute', 'query', '(', '▁ms', 'ql', ');', '\n', '▁while', '▁(', '▁rs', '.', '▁next', '())', '\n', '▁{', '\n', '▁""', '\n']"~"notif process member variabl menu privat jmenu bar menu bar subscrib list privat jlist subscrib list privat default list model list model popup menu privat jpopup menu popup databas eventserv inform public notif process set default close oper jframe noth close add window listen new window adapt public void window close window event evt tri public static void main string arg tri notif process main frame new notif process main frame set size main frame set locat main frame void exit applic tri int repli joption pane show confirm dialog realli want exit action open log databas privat void open menu item action perform action event evt new config dialog true show dsn equal event server equal action close log databas privat void save menu item action perform action event evt tri conn close dsn event server event server port action exit privat void exit menu item action perform action event evt exit applic action open event popup menu privat void popup open action perform action event evt open event menu item action perform evt action open event privat void open event menu item action perform action event evt list model empti int index subscrib list get select index index action doubl click subscrib list privat void doubl click subscrib list mous event evt list model empti int index subscrib list get select index index action privat void menu item action perform action event evt new dialog true show void updat display list list model remov element (); string sql select distinct subscrib name event detail """"; tri stmt execut queri sql next ())"
82~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/48.java~48.java~"48	""Constraint Inner Panel  private String server  IP = """" local host  """";
 private JLabel performance  Model  Label = null  ;
 private JLabel project  Name  Label = null  ;
 private JLabel module  Path  Label = null  ;
 private JLabel requirement  Id  Label = null  ;
 private JLabel public Constraint  Inner  Panel  (
  String performance  Model  Name  ,
  String project  Name  ,
  String module  Path  ,
  String requirement  Id  ,
  String description  ,
  String logic  ,
  String units  ,
  String value  ,
  String impacted  Value    private void set goal  Label  Values  (
  String attribute  ,
  String logic  ,
  String value  ,
  String units  )
 {
  goal  Label  . set  Text  (
   """"  Goal : """" + attribute + """"  """" + logic + """"  """" + value + """" """" + units  );

 }  public Vector get  Values  From  Data  Base  ()
 {

  Vector v = new Vector  ();

  Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered  R  private void set impacted  Label  Value  (
  String attribute  ,
  String value  ,
  String impacted  Value  ,
  String units  ,
  String logic  )
 {

  if ( impacted  Value !  = null  )
  {

   double value  1 = Double  . parse  Double  ( value  );
   d  public JPanel get  Panel  ()
 {
  return panel  ;
 }""
"~src~"['▁48', '\t', '""', 'con', 'str', 'aint', '▁inner', '▁pan', 'el', '▁private', '▁string', '▁ser', 'ver', '▁ip', '▁=', '▁""', '""', '▁local', '▁host', '▁""', '""', ';', '\n', '▁private', '▁j', 'l', 'ab', 'el', '▁performance', '▁model', '▁label', '▁=', '▁n', 'ull', '▁;', '\n', '▁private', '▁j', 'l', 'ab', 'el', '▁project', '▁name', '▁label', '▁=', '▁n', 'ull', '▁;', '\n', '▁private', '▁j', 'l', 'ab', 'el', '▁mod', 'ule', '▁path', '▁label', '▁=', '▁n', 'ull', '▁;', '\n', '▁private', '▁j', 'l', 'ab', 'el', '▁require', 'ment', '▁id', '▁label', '▁=', '▁n', 'ull', '▁;', '\n', '▁private', '▁j', 'l', 'ab', 'el', '▁public', '▁constr', 'aint', '▁inner', '▁pan', 'el', '▁(', '\n', '▁string', '▁performance', '▁model', '▁name', '▁,', '\n', '▁string', '▁project', '▁name', '▁,', '\n', '▁string', '▁mod', 'ule', '▁path', '▁,', '\n', '▁string', '▁require', 'ment', '▁id', '▁,', '\n', '▁string', '▁description', '▁,', '\n', '▁string', '▁log', 'ic', '▁,', '\n', '▁string', '▁units', '▁,', '\n', '▁string', '▁value', '▁,', '\n', '▁string', '▁impact', 'ed', '▁value', '▁private', '▁vo', 'id', '▁set', '▁goal', '▁label', '▁values', '▁(', '\n', '▁string', '▁att', 'rib', 'ute', '▁,', '\n', '▁string', '▁log', 'ic', '▁,', '\n', '▁string', '▁value', '▁,', '\n', '▁string', '▁units', '▁)', '\n', '▁{', '\n', '▁goal', '▁label', '▁.', '▁set', '▁text', '▁(', '\n', '▁""', '""', '▁goal', '▁:', '▁""', '""', '▁+', '▁att', 'rib', 'ute', '▁+', '▁""', '""', '▁""', '""', '▁+', '▁log', 'ic', '▁+', '▁""', '""', '▁""', '""', '▁+', '▁value', '▁+', '▁""', '""', '▁""', '""', '▁+', '▁units', '▁', ');', '\n\n', '▁}', '▁public', '▁v', 'ector', '▁get', '▁values', '▁from', '▁data', '▁base', '▁()', '\n', '▁{', '\n\n', '▁v', 'ector', '▁v', '▁=', '▁new', '▁v', 'ector', '▁()', ';', '\n\n', '▁s', 'ock', 'et', '▁ser', 'ver', '▁;', '\n', '▁string', '▁line', '▁=', '▁new', '▁string', '▁()', ';', '\n\n\n', '▁try', '\n', '▁{', '\n', '▁ser', 'ver', '▁=', '▁new', '▁s', 'ock', 'et', '▁(', '▁ser', 'ver', '▁ip', '▁,', '▁17', '01', '▁', ');', '\n\n', '▁if', '▁(', '▁ser', 'ver', '▁.', '▁is', '▁connected', '▁()', '▁)', '\n', '▁{', '\n', '▁bu', 'ffer', 'ed', '▁r', '▁private', '▁vo', 'id', '▁set', '▁impact', 'ed', '▁label', '▁value', '▁(', '\n', '▁string', '▁att', 'rib', 'ute', '▁,', '\n', '▁string', '▁value', '▁,', '\n', '▁string', '▁impact', 'ed', '▁value', '▁,', '\n', '▁string', '▁units', '▁,', '\n', '▁string', '▁log', 'ic', '▁)', '\n', '▁{', '\n\n', '▁if', '▁(', '▁impact', 'ed', '▁value', '▁!', '▁=', '▁n', 'ull', '▁)', '\n', '▁{', '\n\n', '▁double', '▁value', '▁1', '▁=', '▁double', '▁.', '▁par', 'se', '▁double', '▁(', '▁value', '▁', ');', '\n', '▁d', '▁public', '▁j', 'pan', 'el', '▁get', '▁pan', 'el', '▁()', '\n', '▁{', '\n', '▁return', '▁pan', 'el', '▁;', '\n', '▁}', '""', '\n']"~"['▁48', '\t', '""', 'con', 'str', 'aint', '▁inner', '▁panel', '▁private', '▁string', '▁server', '▁ip', '▁=', '▁""""', '▁local', '▁host', '▁""', '"";', '\n', '▁private', '▁j', 'l', 'abel', '▁performance', '▁model', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'l', 'abel', '▁project', '▁name', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'l', 'abel', '▁module', '▁path', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'l', 'abel', '▁requirement', '▁id', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'l', 'abel', '▁public', '▁constr', 'aint', '▁inner', '▁panel', '▁(', '\n', '▁string', '▁performance', '▁model', '▁name', '▁,', '\n', '▁string', '▁project', '▁name', '▁,', '\n', '▁string', '▁module', '▁path', '▁,', '\n', '▁string', '▁requirement', '▁id', '▁,', '\n', '▁string', '▁description', '▁,', '\n', '▁string', '▁logic', '▁,', '\n', '▁string', '▁units', '▁,', '\n', '▁string', '▁value', '▁,', '\n', '▁string', '▁impacted', '▁value', '▁private', '▁void', '▁set', '▁goal', '▁label', '▁values', '▁(', '\n', '▁string', '▁attribute', '▁,', '\n', '▁string', '▁logic', '▁,', '\n', '▁string', '▁value', '▁,', '\n', '▁string', '▁units', '▁)', '\n', '▁{', '\n', '▁goal', '▁label', '▁.', '▁set', '▁text', '▁(', '\n', '▁""""', '▁goal', '▁:', '▁""""', '▁+', '▁attribute', '▁+', '▁""""', '▁""""', '▁+', '▁logic', '▁+', '▁""""', '▁""""', '▁+', '▁value', '▁+', '▁""""', '▁""""', '▁+', '▁units', '▁', ');', '\n\n', '▁}', '▁public', '▁vector', '▁get', '▁values', '▁from', '▁data', '▁base', '▁()', '\n', '▁{', '\n\n', '▁vector', '▁v', '▁=', '▁new', '▁vector', '▁()', ';', '\n\n', '▁sock', 'et', '▁server', '▁;', '\n', '▁string', '▁line', '▁=', '▁new', '▁string', '▁()', ';', '\n\n\n', '▁try', '\n', '▁{', '\n', '▁server', '▁=', '▁new', '▁sock', 'et', '▁(', '▁server', '▁ip', '▁,', '▁17', '01', '▁', ');', '\n\n', '▁if', '▁(', '▁server', '▁.', '▁is', '▁connected', '▁()', '▁)', '\n', '▁{', '\n', '▁buffer', 'ed', '▁r', '▁private', '▁void', '▁set', '▁impacted', '▁label', '▁value', '▁(', '\n', '▁string', '▁attribute', '▁,', '\n', '▁string', '▁value', '▁,', '\n', '▁string', '▁impacted', '▁value', '▁,', '\n', '▁string', '▁units', '▁,', '\n', '▁string', '▁logic', '▁)', '\n', '▁{', '\n\n', '▁if', '▁(', '▁impacted', '▁value', '▁!', '▁=', '▁null', '▁)', '\n', '▁{', '\n\n', '▁double', '▁value', '▁1', '▁=', '▁double', '▁.', '▁par', 'se', '▁double', '▁(', '▁value', '▁', ');', '\n', '▁d', '▁public', '▁j', 'pan', 'el', '▁get', '▁panel', '▁()', '\n', '▁{', '\n', '▁return', '▁panel', '▁;', '\n', '▁}', '""', '\n']"~"['▁48', '\t', '""', 'con', 'str', 'aint', '▁inner', '▁panel', '▁private', '▁string', '▁server', '▁ip', '▁=', '▁""""', '▁local', '▁host', '▁""', '"";', '\n', '▁private', '▁j', 'label', '▁performance', '▁model', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'label', '▁project', '▁name', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'label', '▁module', '▁path', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'label', '▁requirement', '▁id', '▁label', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'label', '▁public', '▁constraint', '▁inner', '▁panel', '▁(', '\n', '▁string', '▁performance', '▁model', '▁name', '▁,', '\n', '▁string', '▁project', '▁name', '▁,', '\n', '▁string', '▁module', '▁path', '▁,', '\n', '▁string', '▁requirement', '▁id', '▁,', '\n', '▁string', '▁description', '▁,', '\n', '▁string', '▁logic', '▁,', '\n', '▁string', '▁units', '▁,', '\n', '▁string', '▁value', '▁,', '\n', '▁string', '▁impacted', '▁value', '▁private', '▁void', '▁set', '▁goal', '▁label', '▁values', '▁(', '\n', '▁string', '▁attribute', '▁,', '\n', '▁string', '▁logic', '▁,', '\n', '▁string', '▁value', '▁,', '\n', '▁string', '▁units', '▁)', '\n', '▁{', '\n', '▁goal', '▁label', '▁.', '▁set', '▁text', '▁(', '\n', '▁""""', '▁goal', '▁:', '▁""""', '▁+', '▁attribute', '▁+', '▁""""', '▁""""', '▁+', '▁logic', '▁+', '▁""""', '▁""""', '▁+', '▁value', '▁+', '▁""""', '▁""""', '▁+', '▁units', '▁);', '\n\n', '▁}', '▁public', '▁vector', '▁get', '▁values', '▁from', '▁data', '▁base', '▁()', '\n', '▁{', '\n\n', '▁vector', '▁v', '▁=', '▁new', '▁vector', '▁();', '\n\n', '▁socket', '▁server', '▁;', '\n', '▁string', '▁line', '▁=', '▁new', '▁string', '▁();', '\n\n\n', '▁try', '\n', '▁{', '\n', '▁server', '▁=', '▁new', '▁socket', '▁(', '▁server', '▁ip', '▁,', '▁1701', '▁);', '\n\n', '▁if', '▁(', '▁server', '▁.', '▁is', '▁connected', '▁()', '▁)', '\n', '▁{', '\n', '▁buffered', '▁r', '▁private', '▁void', '▁set', '▁impacted', '▁label', '▁value', '▁(', '\n', '▁string', '▁attribute', '▁,', '\n', '▁string', '▁value', '▁,', '\n', '▁string', '▁impacted', '▁value', '▁,', '\n', '▁string', '▁units', '▁,', '\n', '▁string', '▁logic', '▁)', '\n', '▁{', '\n\n', '▁if', '▁(', '▁impacted', '▁value', '▁!', '▁=', '▁null', '▁)', '\n', '▁{', '\n\n', '▁double', '▁value', '▁1', '▁=', '▁double', '▁.', '▁parse', '▁double', '▁(', '▁value', '▁);', '\n', '▁d', '▁public', '▁j', 'panel', '▁get', '▁panel', '▁()', '\n', '▁{', '\n', '▁return', '▁panel', '▁;', '\n', '▁}', '""', '\n']"~constraint inner panel privat string server local host privat jlabel perform model label null privat jlabel project name label null privat jlabel modul path label null privat jlabel requir label null privat jlabel public constraint inner panel string perform model name string project name string modul path string requir string descript string logic string unit string valu string impact valu privat void set goal label valu string attribut string logic string valu string unit goal label set text goal attribut logic valu unit public vector get valu data base vector new vector socket server string line new string tri server new socket server server connect buffer privat void set impact label valu string attribut string valu string impact valu string unit string logic impact valu null doubl valu doubl pars doubl valu public jpanel get panel return panel
83~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/71.java~71.java~"71	""Requirementpublic String m_RequirementID ="""""""";
public String m_Project ="""""""";
public String m_ModulePath="""""""";
public String m_Content = """""""";
public String m_RegFlag = """"N""""; public Requirement()
{

} public Object clone() throws CloneNotSupportedException
 {

Requirement requirement= (Requirement) super. clone();
return requirement ;
 } public void ReadValues(String RequirementID, String Project, String ModulePath, String Content, String RegFlag)
 {
this. m_RequirementID = RequirementID;
this. m_Project = Project;
this. m_ModulePath public void ParseRequirement(String TextLine)
 {

 StringTokenizer LineSt;
LineSt = new StringTokenizer(TextLine, """","""");
m_RequirementID=LineSt. nextToken();
m_Project=LineSt. ""
"~src~"['▁7', '1', '\t', '""', 're', 'qu', 'ire', 'ment', 'publ', 'ic', '▁string', '▁m', '_', 're', 'qu', 'ire', 'ment', 'id', '▁', '=""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'pro', 'ject', '▁', '=""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'mod', 'ule', 'p', 'ath', '=""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'cont', 'ent', '▁=', '▁""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'reg', 'fl', 'ag', '▁=', '▁""', '""', 'n', '""', '""', ';', '▁public', '▁require', 'ment', '(', ')', '\n', '{', '\n\n', '}', '▁public', '▁object', '▁cl', 'one', '(', ')', '▁thro', 'ws', '▁cl', 'on', 'en', 'ots', 'up', 'port', 'ed', 'ex', 'ception', '\n', '▁{', '\n\n', 're', 'qu', 'ire', 'ment', '▁require', 'ment', '=', '▁(', 're', 'qu', 'ire', 'ment', ')', '▁super', '.', '▁cl', 'one', '(', ');', '\n', 'ret', 'urn', '▁require', 'ment', '▁;', '\n', '▁}', '▁public', '▁vo', 'id', '▁read', 'val', 'ues', '(', 'str', 'ing', '▁require', 'ment', 'id', ',', '▁string', '▁project', ',', '▁string', '▁mod', 'ule', 'p', 'ath', ',', '▁string', '▁content', ',', '▁string', '▁reg', 'fl', 'ag', ')', '\n', '▁{', '\n', 'this', '.', '▁m', '_', 're', 'qu', 'ire', 'ment', 'id', '▁=', '▁require', 'ment', 'id', ';', '\n', 'this', '.', '▁m', '_', 'pro', 'ject', '▁=', '▁project', ';', '\n', 'this', '.', '▁m', '_', 'mod', 'ule', 'p', 'ath', '▁public', '▁vo', 'id', '▁par', 's', 'ere', 'qu', 'ire', 'ment', '(', 'str', 'ing', '▁text', 'line', ')', '\n', '▁{', '\n\n', '▁string', 't', 'ok', 'en', 'iz', 'er', '▁lin', 'est', ';', '\n', 'lin', 'est', '▁=', '▁new', '▁string', 't', 'ok', 'en', 'iz', 'er', '(', 'text', 'line', ',', '▁""', '"",', '""', '"")', ';', '\n', 'm', '_', 're', 'qu', 'ire', 'ment', 'id', '=', 'lin', 'est', '.', '▁next', 't', 'ok', 'en', '(', ');', '\n', 'm', '_', 'pro', 'ject', '=', 'lin', 'est', '.', '▁""', '\n']"~"['▁71', '\t', '""', 'requ', 'ire', 'ment', 'public', '▁string', '▁m', '_', 'requ', 'ire', 'ment', 'id', '▁', '=""', '""', '""', '"";', '\n', 'public', '▁string', '▁m', '_', 'project', '▁', '=""', '""', '""', '"";', '\n', 'public', '▁string', '▁m', '_', 'mod', 'ule', 'path', '=""', '""', '""', '"";', '\n', 'public', '▁string', '▁m', '_', 'content', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'reg', 'flag', '▁=', '▁""""', 'n', '""', '"";', '▁public', '▁requirement', '()', '\n', '{', '\n\n', '}', '▁public', '▁object', '▁clone', '()', '▁throws', '▁clon', 'en', 'ots', 'up', 'ported', 'exception', '\n', '▁{', '\n\n', 'requ', 'ire', 'ment', '▁requirement', '=', '▁(', 'requ', 'ire', 'ment', ')', '▁super', '.', '▁clone', '();', '\n', 'return', '▁requirement', '▁;', '\n', '▁}', '▁public', '▁void', '▁read', 'val', 'ues', '(', 'string', '▁requirement', 'id', ',', '▁string', '▁project', ',', '▁string', '▁module', 'path', ',', '▁string', '▁content', ',', '▁string', '▁reg', 'flag', ')', '\n', '▁{', '\n', 'this', '.', '▁m', '_', 'requ', 'ire', 'ment', 'id', '▁=', '▁requirement', 'id', ';', '\n', 'this', '.', '▁m', '_', 'project', '▁=', '▁project', ';', '\n', 'this', '.', '▁m', '_', 'mod', 'ule', 'path', '▁public', '▁void', '▁par', 's', 'ere', 'qu', 'ire', 'ment', '(', 'string', '▁text', 'line', ')', '\n', '▁{', '\n\n', '▁string', 'tok', 'en', 'izer', '▁lin', 'est', ';', '\n', 'lin', 'est', '▁=', '▁new', '▁string', 'tok', 'en', 'izer', '(', 'text', 'line', ',', '▁""', '"",', '""', '"");', '\n', 'm', '_', 'requ', 'ire', 'ment', 'id', '=', 'lin', 'est', '.', '▁next', 'tok', 'en', '();', '\n', 'm', '_', 'project', '=', 'lin', 'est', '.', '▁""', '\n']"~"['▁71', '\t', '""', 'require', 'ment', 'public', '▁string', '▁m', '_', 'require', 'ment', 'id', '▁', '=""', '""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'project', '▁', '=""', '""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'module', 'path', '=""', '""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'content', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'reg', 'flag', '▁=', '▁""""', 'n', '""', '"";', '▁public', '▁requirement', '()', '\n', '{', '\n\n', '}', '▁public', '▁object', '▁clone', '()', '▁throws', '▁clon', 'en', 'ots', 'up', 'ported', 'exception', '\n', '▁{', '\n\n', 'require', 'ment', '▁requirement', '=', '▁(', 'require', 'ment', ')', '▁super', '.', '▁clone', '();', '\n', 'return', '▁requirement', '▁;', '\n', '▁}', '▁public', '▁void', '▁read', 'values', '(', 'string', '▁requirement', 'id', ',', '▁string', '▁project', ',', '▁string', '▁module', 'path', ',', '▁string', '▁content', ',', '▁string', '▁reg', 'flag', ')', '\n', '▁{', '\n', 'this', '.', '▁m', '_', 'require', 'ment', 'id', '▁=', '▁requirement', 'id', ';', '\n', 'this', '.', '▁m', '_', 'project', '▁=', '▁project', ';', '\n', 'this', '.', '▁m', '_', 'module', 'path', '▁public', '▁void', '▁pars', 'ere', 'quire', 'ment', '(', 'string', '▁text', 'line', ')', '\n', '▁{', '\n\n', '▁string', 'token', 'izer', '▁lin', 'est', ';', '\n', 'lin', 'est', '▁=', '▁new', '▁string', 'token', 'izer', '(', 'text', 'line', ',', '▁"""",', '"""");', '\n', 'm', '_', 'require', 'ment', 'id', '=', 'lin', 'est', '.', '▁next', 'token', '();', '\n', 'm', '_', 'project', '=', 'lin', 'est', '.', '▁""', '\n']"~requirementpubl string requir public string project public string modul path public string content public string reg flag public requir public object clone throw clone support except requir requir requir super clone return requir public void read valu string requir string project string modul path string content string reg flag requir requir project project modul path public void pars requir string text line string token line line new string token text line requir line next token project line
84~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/82.java~82.java~"82	""Tokenizer /**
 * Constructor.
 * @param inStream the stream containing a program.
 */
public Tokenizer( Reader inStream )
{
errors = 0;
ch = '\0';
currentLine = 1;
in = new PushbackReader /**
 * Gets current line number.
 * @return current line number.
 */
public int getLineNumber( )
{
return currentLine;
} /**
 * Gets error count.
 * @return error count.
 */
public int getErrorCount( )
{
return errors;
} /**
 * Get the next opening or closing symbol.
 * Return false if end of file.
 * Skip past comments and character and string constants
 */
public char getNextOpenClose( )
{
while( nextChar( ) )
{
 /**
 * Return true if ch can be part of a Java identifier
 */
private static final boolean isIdChar( char ch )
{
return Character. isJavaIdentifierPart( ch );
}/**
 * Return an identifier read from input stream
 * First character is already read into ch
 */
private String getRemainingString( )
{
String result = """""""" + ch;

for( ; nextChar( ); result += ch )
 /**
 * Return next identifier, skipping comments
 * string constants, and character constants.
 * Place identifier in currentIdNode. word and return false
 * only if end of stream is reached.
 */
public String getNe /**
 * nextChar sets ch based on the next character in the input stream.
 * putBackChar puts the character back onto the stream.
 * It should only be used once after a nextChar.
 * Both routines adjust currentLine if necess private void putBackChar( )
{
if( ch == '\ n' )
currentLine--;
try
{ in. unread( ( int) ch ); }
catch( IO Exception e ) { }
} /**
 * Precondition: We are about to process a comment; have already seen
 * comment-start token
 * Post condition: Stream will be set immediately after
 * comment-ending token
 */
private/**
 * Precondition: We are about to process a quote; have already seen
 * beginning quote.
 * Post condition: Stream will be set immediately after
 * matching quote
 */
private void skip /**
 * After the opening slash is seen deal with next character.
 * If it is a comment starter, process it; otherwise put back
 * the next character if it is not a new line.
 */
private void processSlash( )
{
ifpublic static final int SLASH_SLASH = 0;
public static final int SLASH_STAR= 1;

private PushbackReader in;// The input stream
private char ch;// Current character
private int currentLine;//""
"~src~"['▁8', '2', '\t', '""', 't', 'ok', 'en', 'iz', 'er', '▁/', '*', '*', '\n', '▁*', '▁construct', 'or', '.', '\n', '▁*', '▁', '@', 'par', 'am', '▁inst', 'ream', '▁the', '▁stream', '▁containing', '▁a', '▁program', '.', '\n', '▁*', '/', '\n', 'publ', 'ic', '▁to', 'ken', 'iz', 'er', '(', '▁read', 'er', '▁inst', 'ream', '▁)', '\n', '{', '\n', 'er', 'r', 'ors', '▁=', '▁0', ';', '\n', 'ch', '▁=', ""▁'"", '\\', '0', ""'"", ';', '\n', 'cur', 'rent', 'line', '▁=', '▁1', ';', '\n', 'in', '▁=', '▁new', '▁p', 'ush', 'back', 'read', 'er', '▁/', '*', '*', '\n', '▁*', '▁gets', '▁current', '▁line', '▁number', '.', '\n', '▁*', '▁', '@', 'ret', 'urn', '▁current', '▁line', '▁number', '.', '\n', '▁*', '/', '\n', 'publ', 'ic', '▁int', '▁get', 'lin', 'en', 'umber', '(', '▁)', '\n', '{', '\n', 'ret', 'urn', '▁current', 'line', ';', '\n', '}', '▁/', '*', '*', '\n', '▁*', '▁gets', '▁er', 'ror', '▁count', '.', '\n', '▁*', '▁', '@', 'ret', 'urn', '▁er', 'ror', '▁count', '.', '\n', '▁*', '/', '\n', 'publ', 'ic', '▁int', '▁g', 'eter', 'ror', 'count', '(', '▁)', '\n', '{', '\n', 'ret', 'urn', '▁er', 'r', 'ors', ';', '\n', '}', '▁/', '*', '*', '\n', '▁*', '▁get', '▁the', '▁next', '▁opening', '▁or', '▁clos', 'ing', '▁symbol', '.', '\n', '▁*', '▁return', '▁fal', 'se', '▁if', '▁end', '▁of', '▁file', '.', '\n', '▁*', '▁sk', 'ip', '▁past', '▁com', 'ments', '▁and', '▁character', '▁and', '▁string', '▁const', 'ants', '\n', '▁*', '/', '\n', 'publ', 'ic', '▁char', '▁get', 'ne', 'xt', 'op', 'en', 'cl', 'ose', '(', '▁)', '\n', '{', '\n', 'while', '(', '▁next', 'char', '(', '▁)', '▁)', '\n', '{', '\n', '▁/', '*', '*', '\n', '▁*', '▁return', '▁true', '▁if', '▁ch', '▁can', '▁be', '▁part', '▁of', '▁a', '▁j', 'ava', '▁ident', 'if', 'ier', '\n', '▁*', '/', '\n', 'pr', 'iv', 'ate', '▁st', 'atic', '▁final', '▁bo', 'ole', 'an', '▁is', 'id', 'char', '(', '▁char', '▁ch', '▁)', '\n', '{', '\n', 'ret', 'urn', '▁character', '.', '▁is', 'j', 'ava', 'ident', 'if', 'ier', 'part', '(', '▁ch', '▁', ');', '\n', '}', '/', '*', '*', '\n', '▁*', '▁return', '▁an', '▁ident', 'if', 'ier', '▁read', '▁from', '▁in', 'put', '▁stream', '\n', '▁*', '▁first', '▁character', '▁is', '▁already', '▁read', '▁into', '▁ch', '\n', '▁*', '/', '\n', 'pr', 'iv', 'ate', '▁string', '▁get', 'rem', 'aining', 'str', 'ing', '(', '▁)', '\n', '{', '\n', 'str', 'ing', '▁result', '▁=', '▁""', '""', '""', '""', '▁+', '▁ch', ';', '\n\n', 'for', '(', '▁;', '▁next', 'char', '(', '▁', ');', '▁result', '▁+', '=', '▁ch', '▁)', '\n', '▁/', '*', '*', '\n', '▁*', '▁return', '▁next', '▁ident', 'if', 'ier', ',', '▁sk', 'ipp', 'ing', '▁com', 'ments', '\n', '▁*', '▁string', '▁const', 'ants', ',', '▁and', '▁character', '▁const', 'ants', '.', '\n', '▁*', '▁place', '▁ident', 'if', 'ier', '▁in', '▁current', 'id', 'n', 'ode', '.', '▁word', '▁and', '▁return', '▁fal', 'se', '\n', '▁*', '▁only', '▁if', '▁end', '▁of', '▁stream', '▁is', '▁reached', '.', '\n', '▁*', '/', '\n', 'publ', 'ic', '▁string', '▁get', 'ne', '▁/', '*', '*', '\n', '▁*', '▁next', 'char', '▁sets', '▁ch', '▁based', '▁on', '▁the', '▁next', '▁character', '▁in', '▁the', '▁in', 'put', '▁stream', '.', '\n', '▁*', '▁put', 'back', 'char', '▁put', 's', '▁the', '▁character', '▁back', '▁onto', '▁the', '▁stream', '.', '\n', '▁*', '▁it', '▁should', '▁only', '▁be', '▁used', '▁once', '▁after', '▁a', '▁next', 'char', '.', '\n', '▁*', '▁both', '▁ro', 'ut', 'ines', '▁adj', 'ust', '▁current', 'line', '▁if', '▁necess', '▁private', '▁vo', 'id', '▁put', 'back', 'char', '(', '▁)', '\n', '{', '\n', 'if', '(', '▁ch', '▁=', '=', ""▁'"", '\\', '▁n', ""'"", '▁)', '\n', 'cur', 'rent', 'line', '-', '-', ';', '\n', 't', 'ry', '\n', '{', '▁in', '.', '▁un', 'read', '(', '▁(', '▁int', ')', '▁ch', '▁', ');', '▁}', '\n', 'c', 'atch', '(', '▁i', 'o', '▁except', 'ion', '▁e', '▁)', '▁{', '▁}', '\n', '}', '▁/', '*', '*', '\n', '▁*', '▁prec', 'ond', 'ition', ':', '▁we', '▁are', '▁about', '▁to', '▁process', '▁a', '▁comment', ';', '▁have', '▁already', '▁seen', '\n', '▁*', '▁comment', '-', 'st', 'art', '▁to', 'ken', '\n', '▁*', '▁post', '▁condition', ':', '▁stream', '▁will', '▁be', '▁set', '▁immediately', '▁after', '\n', '▁*', '▁comment', '-', 'ending', '▁to', 'ken', '\n', '▁*', '/', '\n', 'pr', 'iv', 'ate', '/', '*', '*', '\n', '▁*', '▁prec', 'ond', 'ition', ':', '▁we', '▁are', '▁about', '▁to', '▁process', '▁a', '▁qu', 'ote', ';', '▁have', '▁already', '▁seen', '\n', '▁*', '▁beginning', '▁qu', 'ote', '.', '\n', '▁*', '▁post', '▁condition', ':', '▁stream', '▁will', '▁be', '▁set', '▁immediately', '▁after', '\n', '▁*', '▁match', 'ing', '▁qu', 'ote', '\n', '▁*', '/', '\n', 'pr', 'iv', 'ate', '▁vo', 'id', '▁sk', 'ip', '▁/', '*', '*', '\n', '▁*', '▁after', '▁the', '▁opening', '▁sl', 'ash', '▁is', '▁seen', '▁deal', '▁with', '▁next', '▁character', '.', '\n', '▁*', '▁if', '▁it', '▁is', '▁a', '▁comment', '▁star', 'ter', ',', '▁process', '▁it', ';', '▁otherwise', '▁put', '▁back', '\n', '▁*', '▁the', '▁next', '▁character', '▁if', '▁it', '▁is', '▁not', '▁a', '▁new', '▁line', '.', '\n', '▁*', '/', '\n', 'pr', 'iv', 'ate', '▁vo', 'id', '▁process', 'sl', 'ash', '(', '▁)', '\n', '{', '\n', 'if', 'publ', 'ic', '▁st', 'atic', '▁final', '▁int', '▁sl', 'ash', '_', 'sl', 'ash', '▁=', '▁0', ';', '\n', 'publ', 'ic', '▁st', 'atic', '▁final', '▁int', '▁sl', 'ash', '_', 'star', '=', '▁1', ';', '\n\n', 'pr', 'iv', 'ate', '▁p', 'ush', 'back', 'read', 'er', '▁in', ';', '//', '▁the', '▁in', 'put', '▁stream', '\n', 'pr', 'iv', 'ate', '▁char', '▁ch', ';', '//', '▁current', '▁character', '\n', 'pr', 'iv', 'ate', '▁int', '▁current', 'line', ';', '//', '""', '\n']"~"['▁82', '\t', '""', 'tok', 'en', 'izer', '▁/', '*', '*', '\n', '▁*', '▁construct', 'or', '.', '\n', '▁*', '▁', '@', 'param', '▁inst', 'ream', '▁the', '▁stream', '▁containing', '▁a', '▁program', '.', '\n', '▁*', '/', '\n', 'public', '▁token', 'izer', '(', '▁reader', '▁inst', 'ream', '▁)', '\n', '{', '\n', 'er', 'rors', '▁=', '▁0', ';', '\n', 'ch', '▁=', ""▁'"", '\\', '0', ""';"", '\n', 'current', 'line', '▁=', '▁1', ';', '\n', 'in', '▁=', '▁new', '▁push', 'back', 'read', 'er', '▁/', '*', '*', '\n', '▁*', '▁gets', '▁current', '▁line', '▁number', '.', '\n', '▁*', '▁', '@', 'return', '▁current', '▁line', '▁number', '.', '\n', '▁*', '/', '\n', 'public', '▁int', '▁get', 'lin', 'en', 'umber', '(', '▁)', '\n', '{', '\n', 'return', '▁current', 'line', ';', '\n', '}', '▁/', '*', '*', '\n', '▁*', '▁gets', '▁error', '▁count', '.', '\n', '▁*', '▁', '@', 'return', '▁error', '▁count', '.', '\n', '▁*', '/', '\n', 'public', '▁int', '▁g', 'eter', 'ror', 'count', '(', '▁)', '\n', '{', '\n', 'return', '▁errors', ';', '\n', '}', '▁/', '*', '*', '\n', '▁*', '▁get', '▁the', '▁next', '▁opening', '▁or', '▁closing', '▁symbol', '.', '\n', '▁*', '▁return', '▁false', '▁if', '▁end', '▁of', '▁file', '.', '\n', '▁*', '▁skip', '▁past', '▁comments', '▁and', '▁character', '▁and', '▁string', '▁const', 'ants', '\n', '▁*', '/', '\n', 'public', '▁char', '▁get', 'next', 'open', 'cl', 'ose', '(', '▁)', '\n', '{', '\n', 'while', '(', '▁next', 'char', '(', '▁)', '▁)', '\n', '{', '\n', '▁/', '*', '*', '\n', '▁*', '▁return', '▁true', '▁if', '▁ch', '▁can', '▁be', '▁part', '▁of', '▁a', '▁java', '▁ident', 'ifier', '\n', '▁*', '/', '\n', 'private', '▁static', '▁final', '▁bo', 'olean', '▁isid', 'char', '(', '▁char', '▁ch', '▁)', '\n', '{', '\n', 'return', '▁character', '.', '▁is', 'j', 'ava', 'ident', 'ifier', 'part', '(', '▁ch', '▁', ');', '\n', '}', '/', '*', '*', '\n', '▁*', '▁return', '▁an', '▁ident', 'ifier', '▁read', '▁from', '▁input', '▁stream', '\n', '▁*', '▁first', '▁character', '▁is', '▁already', '▁read', '▁into', '▁ch', '\n', '▁*', '/', '\n', 'private', '▁string', '▁get', 'rem', 'aining', 'string', '(', '▁)', '\n', '{', '\n', 'string', '▁result', '▁=', '▁""""""', '""', '▁+', '▁ch', ';', '\n\n', 'for', '(', '▁;', '▁next', 'char', '(', '▁', ');', '▁result', '▁+', '=', '▁ch', '▁)', '\n', '▁/', '*', '*', '\n', '▁*', '▁return', '▁next', '▁ident', 'ifier', ',', '▁sk', 'ipping', '▁comments', '\n', '▁*', '▁string', '▁const', 'ants', ',', '▁and', '▁character', '▁const', 'ants', '.', '\n', '▁*', '▁place', '▁ident', 'ifier', '▁in', '▁current', 'id', 'n', 'ode', '.', '▁word', '▁and', '▁return', '▁false', '\n', '▁*', '▁only', '▁if', '▁end', '▁of', '▁stream', '▁is', '▁reached', '.', '\n', '▁*', '/', '\n', 'public', '▁string', '▁get', 'ne', '▁/', '*', '*', '\n', '▁*', '▁next', 'char', '▁sets', '▁ch', '▁based', '▁on', '▁the', '▁next', '▁character', '▁in', '▁the', '▁input', '▁stream', '.', '\n', '▁*', '▁put', 'back', 'char', '▁puts', '▁the', '▁character', '▁back', '▁onto', '▁the', '▁stream', '.', '\n', '▁*', '▁it', '▁should', '▁only', '▁be', '▁used', '▁once', '▁after', '▁a', '▁next', 'char', '.', '\n', '▁*', '▁both', '▁rout', 'ines', '▁adjust', '▁current', 'line', '▁if', '▁necess', '▁private', '▁void', '▁put', 'back', 'char', '(', '▁)', '\n', '{', '\n', 'if', '(', '▁ch', '▁==', ""▁'"", '\\', '▁n', ""'"", '▁)', '\n', 'current', 'line', '--', ';', '\n', 'try', '\n', '{', '▁in', '.', '▁un', 'read', '(', '▁(', '▁int', ')', '▁ch', '▁', ');', '▁}', '\n', 'c', 'atch', '(', '▁io', '▁exception', '▁e', '▁)', '▁{', '▁}', '\n', '}', '▁/', '*', '*', '\n', '▁*', '▁prec', 'ond', 'ition', ':', '▁we', '▁are', '▁about', '▁to', '▁process', '▁a', '▁comment', ';', '▁have', '▁already', '▁seen', '\n', '▁*', '▁comment', '-', 'start', '▁token', '\n', '▁*', '▁post', '▁condition', ':', '▁stream', '▁will', '▁be', '▁set', '▁immediately', '▁after', '\n', '▁*', '▁comment', '-', 'ending', '▁token', '\n', '▁*', '/', '\n', 'private', '/', '*', '*', '\n', '▁*', '▁prec', 'ond', 'ition', ':', '▁we', '▁are', '▁about', '▁to', '▁process', '▁a', '▁quote', ';', '▁have', '▁already', '▁seen', '\n', '▁*', '▁beginning', '▁quote', '.', '\n', '▁*', '▁post', '▁condition', ':', '▁stream', '▁will', '▁be', '▁set', '▁immediately', '▁after', '\n', '▁*', '▁matching', '▁quote', '\n', '▁*', '/', '\n', 'private', '▁void', '▁skip', '▁/', '*', '*', '\n', '▁*', '▁after', '▁the', '▁opening', '▁sl', 'ash', '▁is', '▁seen', '▁deal', '▁with', '▁next', '▁character', '.', '\n', '▁*', '▁if', '▁it', '▁is', '▁a', '▁comment', '▁starter', ',', '▁process', '▁it', ';', '▁otherwise', '▁put', '▁back', '\n', '▁*', '▁the', '▁next', '▁character', '▁if', '▁it', '▁is', '▁not', '▁a', '▁new', '▁line', '.', '\n', '▁*', '/', '\n', 'private', '▁void', '▁process', 'sl', 'ash', '(', '▁)', '\n', '{', '\n', 'if', 'public', '▁static', '▁final', '▁int', '▁sl', 'ash', '_', 'sl', 'ash', '▁=', '▁0', ';', '\n', 'public', '▁static', '▁final', '▁int', '▁sl', 'ash', '_', 'star', '=', '▁1', ';', '\n\n', 'private', '▁push', 'back', 'read', 'er', '▁in', ';', '//', '▁the', '▁input', '▁stream', '\n', 'private', '▁char', '▁ch', ';', '//', '▁current', '▁character', '\n', 'private', '▁int', '▁current', 'line', ';', '//', '""', '\n']"~"['▁82', '\t', '""', 'token', 'izer', '▁/', '**', '\n', '▁*', '▁constructor', '.', '\n', '▁*', '▁', '@', 'param', '▁inst', 'ream', '▁the', '▁stream', '▁containing', '▁a', '▁program', '.', '\n', '▁*/', '\n', 'public', '▁token', 'izer', '(', '▁reader', '▁inst', 'ream', '▁)', '\n', '{', '\n', 'errors', '▁=', '▁0;', '\n', 'ch', '▁=', ""▁'"", '\\', '0', ""';"", '\n', 'current', 'line', '▁=', '▁1;', '\n', 'in', '▁=', '▁new', '▁push', 'back', 'reader', '▁/', '**', '\n', '▁*', '▁gets', '▁current', '▁line', '▁number', '.', '\n', '▁*', '▁', '@', 'return', '▁current', '▁line', '▁number', '.', '\n', '▁*/', '\n', 'public', '▁int', '▁get', 'lin', 'en', 'umber', '(', '▁)', '\n', '{', '\n', 'return', '▁current', 'line', ';', '\n', '}', '▁/', '**', '\n', '▁*', '▁gets', '▁error', '▁count', '.', '\n', '▁*', '▁', '@', 'return', '▁error', '▁count', '.', '\n', '▁*/', '\n', 'public', '▁int', '▁g', 'eter', 'ror', 'count', '(', '▁)', '\n', '{', '\n', 'return', '▁errors', ';', '\n', '}', '▁/', '**', '\n', '▁*', '▁get', '▁the', '▁next', '▁opening', '▁or', '▁closing', '▁symbol', '.', '\n', '▁*', '▁return', '▁false', '▁if', '▁end', '▁of', '▁file', '.', '\n', '▁*', '▁skip', '▁past', '▁comments', '▁and', '▁character', '▁and', '▁string', '▁constants', '\n', '▁*/', '\n', 'public', '▁char', '▁get', 'next', 'open', 'close', '(', '▁)', '\n', '{', '\n', 'while', '(', '▁next', 'char', '(', '▁)', '▁)', '\n', '{', '\n', '▁/', '**', '\n', '▁*', '▁return', '▁true', '▁if', '▁ch', '▁can', '▁be', '▁part', '▁of', '▁a', '▁java', '▁identifier', '\n', '▁*/', '\n', 'private', '▁static', '▁final', '▁boolean', '▁isid', 'char', '(', '▁char', '▁ch', '▁)', '\n', '{', '\n', 'return', '▁character', '.', '▁is', 'java', 'identifier', 'part', '(', '▁ch', '▁);', '\n', '}', '/', '**', '\n', '▁*', '▁return', '▁an', '▁identifier', '▁read', '▁from', '▁input', '▁stream', '\n', '▁*', '▁first', '▁character', '▁is', '▁already', '▁read', '▁into', '▁ch', '\n', '▁*/', '\n', 'private', '▁string', '▁get', 'remaining', 'string', '(', '▁)', '\n', '{', '\n', 'string', '▁result', '▁=', '▁""""""', '""', '▁+', '▁ch', ';', '\n\n', 'for', '(', '▁;', '▁next', 'char', '(', '▁);', '▁result', '▁+=', '▁ch', '▁)', '\n', '▁/', '**', '\n', '▁*', '▁return', '▁next', '▁identifier', ',', '▁skipping', '▁comments', '\n', '▁*', '▁string', '▁constants', ',', '▁and', '▁character', '▁constants', '.', '\n', '▁*', '▁place', '▁identifier', '▁in', '▁current', 'id', 'node', '.', '▁word', '▁and', '▁return', '▁false', '\n', '▁*', '▁only', '▁if', '▁end', '▁of', '▁stream', '▁is', '▁reached', '.', '\n', '▁*/', '\n', 'public', '▁string', '▁get', 'ne', '▁/', '**', '\n', '▁*', '▁next', 'char', '▁sets', '▁ch', '▁based', '▁on', '▁the', '▁next', '▁character', '▁in', '▁the', '▁input', '▁stream', '.', '\n', '▁*', '▁put', 'back', 'char', '▁puts', '▁the', '▁character', '▁back', '▁onto', '▁the', '▁stream', '.', '\n', '▁*', '▁it', '▁should', '▁only', '▁be', '▁used', '▁once', '▁after', '▁a', '▁next', 'char', '.', '\n', '▁*', '▁both', '▁routines', '▁adjust', '▁current', 'line', '▁if', '▁necess', '▁private', '▁void', '▁put', 'back', 'char', '(', '▁)', '\n', '{', '\n', 'if', '(', '▁ch', '▁==', ""▁'"", '\\', '▁n', ""'"", '▁)', '\n', 'current', 'line', '--', ';', '\n', 'try', '\n', '{', '▁in', '.', '▁un', 'read', '(', '▁(', '▁int', ')', '▁ch', '▁);', '▁}', '\n', 'catch', '(', '▁io', '▁exception', '▁e', '▁)', '▁{', '▁}', '\n', '}', '▁/', '**', '\n', '▁*', '▁precondition', ':', '▁we', '▁are', '▁about', '▁to', '▁process', '▁a', '▁comment', ';', '▁have', '▁already', '▁seen', '\n', '▁*', '▁comment', '-', 'start', '▁token', '\n', '▁*', '▁post', '▁condition', ':', '▁stream', '▁will', '▁be', '▁set', '▁immediately', '▁after', '\n', '▁*', '▁comment', '-', 'ending', '▁token', '\n', '▁*/', '\n', 'private', '/', '**', '\n', '▁*', '▁precondition', ':', '▁we', '▁are', '▁about', '▁to', '▁process', '▁a', '▁quote', ';', '▁have', '▁already', '▁seen', '\n', '▁*', '▁beginning', '▁quote', '.', '\n', '▁*', '▁post', '▁condition', ':', '▁stream', '▁will', '▁be', '▁set', '▁immediately', '▁after', '\n', '▁*', '▁matching', '▁quote', '\n', '▁*/', '\n', 'private', '▁void', '▁skip', '▁/', '**', '\n', '▁*', '▁after', '▁the', '▁opening', '▁slash', '▁is', '▁seen', '▁deal', '▁with', '▁next', '▁character', '.', '\n', '▁*', '▁if', '▁it', '▁is', '▁a', '▁comment', '▁starter', ',', '▁process', '▁it', ';', '▁otherwise', '▁put', '▁back', '\n', '▁*', '▁the', '▁next', '▁character', '▁if', '▁it', '▁is', '▁not', '▁a', '▁new', '▁line', '.', '\n', '▁*/', '\n', 'private', '▁void', '▁process', 'slash', '(', '▁)', '\n', '{', '\n', 'if', 'public', '▁static', '▁final', '▁int', '▁slash', '_', 'slash', '▁=', '▁0;', '\n', 'public', '▁static', '▁final', '▁int', '▁slash', '_', 'star', '=', '▁1;', '\n\n', 'private', '▁push', 'back', 'reader', '▁in', ';', '//', '▁the', '▁input', '▁stream', '\n', 'private', '▁char', '▁ch', ';', '//', '▁current', '▁character', '\n', 'private', '▁int', '▁current', 'line', ';', '//', '""', '\n']"~token constructor param stream stream contain program public token reader stream error current line new pushback reader get current line number return current line number public int get line number return current line get error count return error count public int get error count return error get next open close symbol return fals end file skip past comment charact string constant public char get next open close next char return true part java identifi privat static final boolean char char return charact java identifi part return identifi read input stream first charact alreadi read privat string get remain string string result next char result return next identifi skip comment string constant charact constant place identifi current node word return fals end stream reach public string get next char set base next charact input stream put back char put charact back onto stream use next char routin adjust current line necess privat void put back char current line tri unread int catch except precondit process comment alreadi seen comment start token post condit stream set immedi comment end token privat precondit process quot alreadi seen begin quot post condit stream set immedi match quot privat void skip open slash seen deal next charact comment starter process otherwis put back next charact new line privat void process slash ifpubl static final int slash slash public static final int slash star privat pushback reader input stream privat char current charact privat int current line
85~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/67.java~67.java~"67	""Event Detail Dialog private GridBagLayout grid bag;
private GridBagConstraints c;

// objects in top panel
private JPanel topPanel;
private JLabel modelLabel;
private JLabel typeLabel;
private JTextField modelField;
p public EventDetailDialog(EventsProcessor parent, boolean modal,Notification_Event nEvt, boolean mode)
{

super ( parent, modal);
 setTitle(""""Event Details"""");
 getContentPane (). setLayout (private void closeDialog(WindowEvent evt)
{
setVisible ( false);
dispose ();
} // event listener for """"Ok/Update"""" button
private void okButtonActionPerformed (ActionEvent evt)
{

 if ( displayMode == true)
 {

// m_ parent.DeleteEvent( m_Evt. m_SubscriberName, m_ // event listener for """"Cancel"""" button
private void cancelButtonActionPerformed (ActionEvent evt)
{
setVisible ( false);
dispose ();
} private void LeftListClicked(MouseEvent e){

 if (!LeftList. isSelectionEmpty()) {

 int index = LeftList. getSelectedIndex();
 Requirement requirement= (Requirement) m_Evt. m_LeftSideprivate void RightListClicked(MouseEvent e){

 if (!RightList. isSelectionEmpty()) {

 int index = RightList. getSelectedIndex();
 Requirement requirement= (Requirement) m_Evt. m_RightS""
"~src~"['▁6', '7', '\t', '""', 'ev', 'ent', '▁det', 'ail', '▁dial', 'og', '▁private', '▁gr', 'id', 'b', 'ag', 'l', 'ay', 'out', '▁gr', 'id', '▁bag', ';', '\n', 'pr', 'iv', 'ate', '▁gr', 'id', 'b', 'ag', 'con', 'str', 'aints', '▁c', ';', '\n\n', '//', '▁objects', '▁in', '▁top', '▁pan', 'el', '\n', 'pr', 'iv', 'ate', '▁j', 'pan', 'el', '▁top', 'pan', 'el', ';', '\n', 'pr', 'iv', 'ate', '▁j', 'l', 'ab', 'el', '▁mod', 'ell', 'ab', 'el', ';', '\n', 'pr', 'iv', 'ate', '▁j', 'l', 'ab', 'el', '▁typ', 'el', 'ab', 'el', ';', '\n', 'pr', 'iv', 'ate', '▁j', 'text', 'field', '▁mod', 'elf', 'ield', ';', '\n', 'p', '▁public', '▁event', 'd', 'et', 'ail', 'd', 'ial', 'og', '(', 'ev', 'ents', 'pro', 'cess', 'or', '▁paren', 't', ',', '▁bo', 'ole', 'an', '▁mod', 'al', ',', 'not', 'ification', '_', 'ev', 'ent', '▁nev', 't', ',', '▁bo', 'ole', 'an', '▁mode', ')', '\n', '{', '\n\n', 'sup', 'er', '▁(', '▁paren', 't', ',', '▁mod', 'al', ');', '\n', '▁sett', 'it', 'le', '(', '""', '""', 'ev', 'ent', '▁details', '""', '"")', ';', '\n', '▁get', 'cont', 'ent', 'p', 'ane', '▁(', ').', '▁set', 'l', 'ay', 'out', '▁(', 'pr', 'iv', 'ate', '▁vo', 'id', '▁closed', 'ial', 'og', '(', 'w', 'ind', 'ow', 'ev', 'ent', '▁ev', 't', ')', '\n', '{', '\n', 'set', 'vis', 'ible', '▁(', '▁fal', 'se', ');', '\n', 'dis', 'pose', '▁()', ';', '\n', '}', '▁/', '/', '▁event', '▁list', 'en', 'er', '▁for', '▁""', '""', 'ok', '/', 'up', 'd', 'ate', '""', '""', '▁but', 'ton', '\n', 'pr', 'iv', 'ate', '▁vo', 'id', '▁ok', 'but', 'ton', 'action', 'per', 'form', 'ed', '▁(', 'action', 'ev', 'ent', '▁ev', 't', ')', '\n', '{', '\n\n', '▁if', '▁(', '▁display', 'm', 'ode', '▁=', '=', '▁true', ')', '\n', '▁{', '\n\n', '//', '▁m', '_', '▁paren', 't', '.', 'de', 'lete', 'ev', 'ent', '(', '▁m', '_', 'ev', 't', '.', '▁m', '_', 'sub', 'sc', 'ri', 'ber', 'name', ',', '▁m', '_', '▁/', '/', '▁event', '▁list', 'en', 'er', '▁for', '▁""', '""', 'c', 'anc', 'el', '""', '""', '▁but', 'ton', '\n', 'pr', 'iv', 'ate', '▁vo', 'id', '▁can', 'cel', 'but', 'ton', 'action', 'per', 'form', 'ed', '▁(', 'action', 'ev', 'ent', '▁ev', 't', ')', '\n', '{', '\n', 'set', 'vis', 'ible', '▁(', '▁fal', 'se', ');', '\n', 'dis', 'pose', '▁()', ';', '\n', '}', '▁private', '▁vo', 'id', '▁left', 'list', 'cl', 'ick', 'ed', '(', 'm', 'ous', 'ee', 'vent', '▁e', ')', '{', '\n\n', '▁if', '▁(', '!', 'left', 'list', '.', '▁is', 'se', 'lect', 'ion', 'empt', 'y', '(', ')', ')', '▁{', '\n\n', '▁int', '▁index', '▁=', '▁left', 'list', '.', '▁get', 'se', 'lect', 'ed', 'ind', 'ex', '(', ');', '\n', '▁require', 'ment', '▁require', 'ment', '=', '▁(', 're', 'qu', 'ire', 'ment', ')', '▁m', '_', 'ev', 't', '.', '▁m', '_', 'le', 'f', 'ts', 'ide', 'pr', 'iv', 'ate', '▁vo', 'id', '▁right', 'list', 'cl', 'ick', 'ed', '(', 'm', 'ous', 'ee', 'vent', '▁e', ')', '{', '\n\n', '▁if', '▁(', '!', 'right', 'list', '.', '▁is', 'se', 'lect', 'ion', 'empt', 'y', '(', ')', ')', '▁{', '\n\n', '▁int', '▁index', '▁=', '▁right', 'list', '.', '▁get', 'se', 'lect', 'ed', 'ind', 'ex', '(', ');', '\n', '▁require', 'ment', '▁require', 'ment', '=', '▁(', 're', 'qu', 'ire', 'ment', ')', '▁m', '_', 'ev', 't', '.', '▁m', '_', 'right', 's', '""', '\n']"~"['▁67', '\t', '""', 'event', '▁detail', '▁dial', 'og', '▁private', '▁grid', 'bag', 'lay', 'out', '▁grid', '▁bag', ';', '\n', 'private', '▁grid', 'bag', 'con', 'str', 'aints', '▁c', ';', '\n\n', '//', '▁objects', '▁in', '▁top', '▁panel', '\n', 'private', '▁j', 'pan', 'el', '▁top', 'pan', 'el', ';', '\n', 'private', '▁j', 'l', 'abel', '▁mod', 'ell', 'abel', ';', '\n', 'private', '▁j', 'l', 'abel', '▁typ', 'el', 'abel', ';', '\n', 'private', '▁j', 'text', 'field', '▁mod', 'elf', 'ield', ';', '\n', 'p', '▁public', '▁event', 'det', 'ail', 'd', 'ial', 'og', '(', 'ev', 'ents', 'process', 'or', '▁parent', ',', '▁bo', 'olean', '▁mod', 'al', ',', 'not', 'ification', '_', 'event', '▁nev', 't', ',', '▁bo', 'olean', '▁mode', ')', '\n', '{', '\n\n', 'super', '▁(', '▁parent', ',', '▁mod', 'al', ');', '\n', '▁sett', 'it', 'le', '(""', '""', 'event', '▁details', '""', '"");', '\n', '▁get', 'content', 'p', 'ane', '▁().', '▁set', 'lay', 'out', '▁(', 'private', '▁void', '▁closed', 'ial', 'og', '(', 'wind', 'ow', 'event', '▁ev', 't', ')', '\n', '{', '\n', 'set', 'vis', 'ible', '▁(', '▁false', ');', '\n', 'dis', 'pose', '▁()', ';', '\n', '}', '▁//', '▁event', '▁listener', '▁for', '▁""""', 'ok', '/', 'up', 'date', '""', '""', '▁button', '\n', 'private', '▁void', '▁ok', 'but', 'ton', 'action', 'per', 'formed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '{', '\n\n', '▁if', '▁(', '▁display', 'mode', '▁==', '▁true', ')', '\n', '▁{', '\n\n', '//', '▁m', '_', '▁parent', '.', 'de', 'lete', 'event', '(', '▁m', '_', 'ev', 't', '.', '▁m', '_', 'sub', 'sc', 'ri', 'ber', 'name', ',', '▁m', '_', '▁//', '▁event', '▁listener', '▁for', '▁""""', 'canc', 'el', '""', '""', '▁button', '\n', 'private', '▁void', '▁cancel', 'but', 'ton', 'action', 'per', 'formed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '{', '\n', 'set', 'vis', 'ible', '▁(', '▁false', ');', '\n', 'dis', 'pose', '▁()', ';', '\n', '}', '▁private', '▁void', '▁left', 'list', 'cl', 'ick', 'ed', '(', 'm', 'ous', 'ee', 'vent', '▁e', ')', '{', '\n\n', '▁if', '▁(', '!', 'left', 'list', '.', '▁is', 'se', 'lection', 'empt', 'y', '())', '▁{', '\n\n', '▁int', '▁index', '▁=', '▁left', 'list', '.', '▁get', 'se', 'lected', 'index', '();', '\n', '▁requirement', '▁requirement', '=', '▁(', 'requ', 'ire', 'ment', ')', '▁m', '_', 'ev', 't', '.', '▁m', '_', 'le', 'fts', 'ide', 'private', '▁void', '▁right', 'list', 'cl', 'ick', 'ed', '(', 'm', 'ous', 'ee', 'vent', '▁e', ')', '{', '\n\n', '▁if', '▁(', '!', 'right', 'list', '.', '▁is', 'se', 'lection', 'empt', 'y', '())', '▁{', '\n\n', '▁int', '▁index', '▁=', '▁right', 'list', '.', '▁get', 'se', 'lected', 'index', '();', '\n', '▁requirement', '▁requirement', '=', '▁(', 'requ', 'ire', 'ment', ')', '▁m', '_', 'ev', 't', '.', '▁m', '_', 'right', 's', '""', '\n']"~"['▁67', '\t', '""', 'event', '▁detail', '▁dialog', '▁private', '▁grid', 'bag', 'layout', '▁grid', '▁bag', ';', '\n', 'private', '▁grid', 'bag', 'con', 'str', 'aints', '▁c', ';', '\n\n', '//', '▁objects', '▁in', '▁top', '▁panel', '\n', 'private', '▁j', 'panel', '▁top', 'panel', ';', '\n', 'private', '▁j', 'label', '▁mod', 'ell', 'abel', ';', '\n', 'private', '▁j', 'label', '▁typ', 'el', 'abel', ';', '\n', 'private', '▁j', 'text', 'field', '▁mod', 'elf', 'ield', ';', '\n', 'p', '▁public', '▁event', 'detail', 'dial', 'og', '(', 'events', 'processor', '▁parent', ',', '▁boolean', '▁modal', ',', 'not', 'ification', '_', 'event', '▁nev', 't', ',', '▁boolean', '▁mode', ')', '\n', '{', '\n\n', 'super', '▁(', '▁parent', ',', '▁modal', ');', '\n', '▁sett', 'itle', '(""', '""', 'event', '▁details', '"""");', '\n', '▁get', 'content', 'pane', '▁().', '▁set', 'layout', '▁(', 'private', '▁void', '▁closed', 'ial', 'og', '(', 'window', 'event', '▁ev', 't', ')', '\n', '{', '\n', 'set', 'visible', '▁(', '▁false', ');', '\n', 'dis', 'pose', '▁();', '\n', '}', '▁//', '▁event', '▁listener', '▁for', '▁""""', 'ok', '/', 'update', '""""', '▁button', '\n', 'private', '▁void', '▁ok', 'button', 'action', 'performed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '{', '\n\n', '▁if', '▁(', '▁display', 'mode', '▁==', '▁true', ')', '\n', '▁{', '\n\n', '//', '▁m', '_', '▁parent', '.', 'delete', 'event', '(', '▁m', '_', 'ev', 't', '.', '▁m', '_', 'subsc', 'riber', 'name', ',', '▁m', '_', '▁//', '▁event', '▁listener', '▁for', '▁""""', 'canc', 'el', '""""', '▁button', '\n', 'private', '▁void', '▁cancel', 'button', 'action', 'performed', '▁(', 'action', 'event', '▁ev', 't', ')', '\n', '{', '\n', 'set', 'visible', '▁(', '▁false', ');', '\n', 'dis', 'pose', '▁();', '\n', '}', '▁private', '▁void', '▁left', 'list', 'click', 'ed', '(', 'mous', 'ee', 'vent', '▁e', ')', '{', '\n\n', '▁if', '▁(!', 'left', 'list', '.', '▁is', 'selection', 'empty', '())', '▁{', '\n\n', '▁int', '▁index', '▁=', '▁left', 'list', '.', '▁get', 'selected', 'index', '();', '\n', '▁requirement', '▁requirement', '=', '▁(', 'require', 'ment', ')', '▁m', '_', 'ev', 't', '.', '▁m', '_', 'le', 'fts', 'ide', 'private', '▁void', '▁right', 'list', 'click', 'ed', '(', 'mous', 'ee', 'vent', '▁e', ')', '{', '\n\n', '▁if', '▁(!', 'right', 'list', '.', '▁is', 'selection', 'empty', '())', '▁{', '\n\n', '▁int', '▁index', '▁=', '▁right', 'list', '.', '▁get', 'selected', 'index', '();', '\n', '▁requirement', '▁requirement', '=', '▁(', 'require', 'ment', ')', '▁m', '_', 'ev', 't', '.', '▁m', '_', 'rights', '""', '\n']"~event detail dialog privat grid bag layout grid bag privat grid bag constraint object top panel privat jpanel top panel privat jlabel model label privat jlabel type label privat jtext field model field public event detail dialog event processor parent boolean modal notif event evt boolean mode super parent modal set titl event detail get content pane set layout privat void close dialog window event evt set visibl fals dispos event listen updat button privat void button action perform action event evt display mode true parent delet event evt subscrib name event listen cancel button privat void cancel button action perform action event evt set visibl fals dispos privat void left list click mous event left list select empti int index left list get select index requir requir requir evt left sidepriv void right list click mous event right list select empti int index right list get select index requir requir requir evt right
86~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/90.java~90.java~"90	""Merge Model public MergeModel(EBT em)
 {
super( em);
 MinimumNoRects = 3;
 } // Construct Visual model for Merge Event
public void BuildEvent()
{
 ClearVectors();
AddEventRect(90,220,1);
 AddEventRect(20,20,1);
AddEventRect(20,70,1);
AddEvent public StringBuffer GenerateEvent()
{
StringBuffer thisEvent = new StringBuffer();
StringBuffer temp = new StringBuffer();
int MergeCount = -1;
thisEvent. append(""""Merge|"""");

for ( int i = 0; i < EventSha""
"~src~"['▁90', '\t', '""', 'mer', 'ge', '▁model', '▁public', '▁mer', 'g', 'em', 'od', 'el', '(', 'e', 'b', 't', '▁em', ')', '\n', '▁{', '\n', 'sup', 'er', '(', '▁em', ');', '\n', '▁minim', 'umn', 'or', 'ects', '▁=', '▁3', ';', '\n', '▁}', '▁/', '/', '▁construct', '▁visual', '▁model', '▁for', '▁mer', 'ge', '▁event', '\n', 'publ', 'ic', '▁vo', 'id', '▁build', 'ev', 'ent', '(', ')', '\n', '{', '\n', '▁clear', 'v', 'ect', 'ors', '(', ');', '\n', 'ad', 'de', 'vent', 'rect', '(', '9', '0,', '2', '20', ',', '1)', ';', '\n', '▁add', 'ev', 'ent', 'rect', '(', '20', ',', '20', ',', '1)', ';', '\n', 'ad', 'de', 'vent', 'rect', '(', '20', ',', '7', '0,', '1)', ';', '\n', 'ad', 'de', 'vent', '▁public', '▁string', 'b', 'uf', 'fer', '▁gener', 'ate', 'ev', 'ent', '(', ')', '\n', '{', '\n', 'str', 'ing', 'b', 'uf', 'fer', '▁this', 'ev', 'ent', '▁=', '▁new', '▁string', 'b', 'uf', 'fer', '(', ');', '\n', 'str', 'ing', 'b', 'uf', 'fer', '▁tem', 'p', '▁=', '▁new', '▁string', 'b', 'uf', 'fer', '(', ');', '\n', 'int', '▁mer', 'g', 'ec', 'ount', '▁=', '▁-', '1', ';', '\n', 'th', 'ise', 'vent', '.', '▁app', 'end', '(', '""', '""', 'mer', 'ge', '|', '""', '"")', ';', '\n\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', ';', '▁i', '▁', '<', '▁events', 'ha', '""', '\n']"~"['▁90', '\t', '""', 'mer', 'ge', '▁model', '▁public', '▁mer', 'gem', 'od', 'el', '(', 'eb', 't', '▁em', ')', '\n', '▁{', '\n', 'super', '(', '▁em', ');', '\n', '▁minim', 'umn', 'or', 'ects', '▁=', '▁3', ';', '\n', '▁}', '▁//', '▁construct', '▁visual', '▁model', '▁for', '▁merge', '▁event', '\n', 'public', '▁void', '▁build', 'event', '()', '\n', '{', '\n', '▁clear', 'v', 'ectors', '();', '\n', 'ad', 'de', 'vent', 'rect', '(', '9', '0,', '2', '20,', '1)', ';', '\n', '▁add', 'event', 'rect', '(', '20,', '20,', '1)', ';', '\n', 'ad', 'de', 'vent', 'rect', '(', '20,', '7', '0,', '1)', ';', '\n', 'ad', 'de', 'vent', '▁public', '▁string', 'b', 'uffer', '▁generate', 'event', '()', '\n', '{', '\n', 'string', 'b', 'uffer', '▁this', 'event', '▁=', '▁new', '▁string', 'b', 'uffer', '();', '\n', 'string', 'b', 'uffer', '▁temp', '▁=', '▁new', '▁string', 'b', 'uffer', '();', '\n', 'int', '▁mer', 'g', 'ec', 'ount', '▁=', '▁-', '1', ';', '\n', 'th', 'ise', 'vent', '.', '▁append', '(""', '""', 'mer', 'ge', '|', '""', '"");', '\n\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', ';', '▁i', '▁<', '▁events', 'ha', '""', '\n']"~"['▁90', '\t', '""', 'merge', '▁model', '▁public', '▁mer', 'gem', 'odel', '(', 'eb', 't', '▁em', ')', '\n', '▁{', '\n', 'super', '(', '▁em', ');', '\n', '▁minim', 'umn', 'or', 'ects', '▁=', '▁3;', '\n', '▁}', '▁//', '▁construct', '▁visual', '▁model', '▁for', '▁merge', '▁event', '\n', 'public', '▁void', '▁build', 'event', '()', '\n', '{', '\n', '▁clear', 'v', 'ectors', '();', '\n', 'ad', 'de', 'vent', 'rect', '(', '9', '0,', '2', '20,', '1);', '\n', '▁add', 'event', 'rect', '(', '20,', '20,', '1);', '\n', 'ad', 'de', 'vent', 'rect', '(', '20,', '7', '0,', '1);', '\n', 'ad', 'de', 'vent', '▁public', '▁string', 'buffer', '▁generate', 'event', '()', '\n', '{', '\n', 'string', 'buffer', '▁this', 'event', '▁=', '▁new', '▁string', 'buffer', '();', '\n', 'string', 'buffer', '▁temp', '▁=', '▁new', '▁string', 'buffer', '();', '\n', 'int', '▁mer', 'gec', 'ount', '▁=', '▁-', '1;', '\n', 'th', 'ise', 'vent', '.', '▁append', '(""', '""', 'merge', '|', '"""");', '\n\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0;', '▁i', '▁<', '▁events', 'ha', '""', '\n']"~merg model public merg model ebt super minimum rect construct visual model merg event public void build event clear vector add event rect add event rect add event rect add event public string buffer generat event string buffer event new string buffer string buffer temp new string buffer int merg count event append merg int event sha
87~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/72.java~72.java~"72	""Balance /**
 * Symbol represents what will be placed on the stack.
 */
private static class Symbol
{
public chartoken;
public int theLine;

public Symbol( char tok, int line )
{
token = /**
 * Constructor.
 * @param inStream the stream containing a program.
 */
public Balance( Reader inStream )
{
errors = 0;
tok = new Tokenizer( inStream );
}/**
 * Print an error message for unbalanced symbols.
 * @return number of errors detected.
 */
public int checkBalance( )
{
char ch;
Symbol match = null;
Stack pendingTokens = new Stack( );

 private Tokenizer tok;
private int errors; /**
 * Print an error message if clSym does not match opSym.
 * Update errors.
 */
private void checkMatch( Symbol opSym, Symbol clSym )
{
if( opSym. token == '(' && clSym. token != ')' ||
 /**
 * main routine for balanced symbol checker.
 * Slightly different from text.
 * If no command line parameters, standard input is used.
 * Otherwise, files in command line are used.
 */
public static void main( St""
"~src~"['▁7', '2', '\t', '""', 'bal', 'ance', '▁/', '*', '*', '\n', '▁*', '▁symbol', '▁represents', '▁what', '▁will', '▁be', '▁placed', '▁on', '▁the', '▁st', 'ack', '.', '\n', '▁*', '/', '\n', 'pr', 'iv', 'ate', '▁st', 'atic', '▁class', '▁symbol', '\n', '{', '\n', 'publ', 'ic', '▁chart', 'ok', 'en', ';', '\n', 'publ', 'ic', '▁int', '▁the', 'line', ';', '\n\n', 'publ', 'ic', '▁symbol', '(', '▁char', '▁to', 'k', ',', '▁int', '▁line', '▁)', '\n', '{', '\n', 't', 'ok', 'en', '▁=', '▁/', '*', '*', '\n', '▁*', '▁construct', 'or', '.', '\n', '▁*', '▁', '@', 'par', 'am', '▁inst', 'ream', '▁the', '▁stream', '▁containing', '▁a', '▁program', '.', '\n', '▁*', '/', '\n', 'publ', 'ic', '▁bal', 'ance', '(', '▁read', 'er', '▁inst', 'ream', '▁)', '\n', '{', '\n', 'er', 'r', 'ors', '▁=', '▁0', ';', '\n', 't', 'ok', '▁=', '▁new', '▁to', 'ken', 'iz', 'er', '(', '▁inst', 'ream', '▁', ');', '\n', '}', '/', '*', '*', '\n', '▁*', '▁print', '▁an', '▁er', 'ror', '▁message', '▁for', '▁un', 'bal', 'anced', '▁sym', 'b', 'ols', '.', '\n', '▁*', '▁', '@', 'ret', 'urn', '▁number', '▁of', '▁er', 'r', 'ors', '▁det', 'ected', '.', '\n', '▁*', '/', '\n', 'publ', 'ic', '▁int', '▁check', 'bal', 'ance', '(', '▁)', '\n', '{', '\n', 'char', '▁ch', ';', '\n', 'sy', 'm', 'bol', '▁match', '▁=', '▁n', 'ull', ';', '\n', 'st', 'ack', '▁p', 'ending', 't', 'ok', 'ens', '▁=', '▁new', '▁st', 'ack', '(', '▁', ');', '\n\n', '▁private', '▁to', 'ken', 'iz', 'er', '▁to', 'k', ';', '\n', 'pr', 'iv', 'ate', '▁int', '▁er', 'r', 'ors', ';', '▁/', '*', '*', '\n', '▁*', '▁print', '▁an', '▁er', 'ror', '▁message', '▁if', '▁cl', 'sy', 'm', '▁does', '▁not', '▁match', '▁op', 'sy', 'm', '.', '\n', '▁*', '▁upd', 'ate', '▁er', 'r', 'ors', '.', '\n', '▁*', '/', '\n', 'pr', 'iv', 'ate', '▁vo', 'id', '▁check', 'm', 'atch', '(', '▁symbol', '▁op', 'sy', 'm', ',', '▁symbol', '▁cl', 'sy', 'm', '▁)', '\n', '{', '\n', 'if', '(', '▁op', 'sy', 'm', '.', '▁to', 'ken', '▁=', '=', ""▁'"", '(', ""'"", '▁&', '&', '▁cl', 'sy', 'm', '.', '▁to', 'ken', '▁!', '=', ""▁'"", ')', ""'"", '▁||', '\n', '▁/', '*', '*', '\n', '▁*', '▁main', '▁ro', 'ut', 'ine', '▁for', '▁bal', 'anced', '▁symbol', '▁check', 'er', '.', '\n', '▁*', '▁slightly', '▁different', '▁from', '▁text', '.', '\n', '▁*', '▁if', '▁no', '▁command', '▁line', '▁param', 'et', 'ers', ',', '▁standard', '▁in', 'put', '▁is', '▁used', '.', '\n', '▁*', '▁otherwise', ',', '▁fil', 'es', '▁in', '▁command', '▁line', '▁are', '▁used', '.', '\n', '▁*', '/', '\n', 'publ', 'ic', '▁st', 'atic', '▁vo', 'id', '▁main', '(', '▁st', '""', '\n']"~"['▁72', '\t', '""', 'balance', '▁/', '*', '*', '\n', '▁*', '▁symbol', '▁represents', '▁what', '▁will', '▁be', '▁placed', '▁on', '▁the', '▁stack', '.', '\n', '▁*', '/', '\n', 'private', '▁static', '▁class', '▁symbol', '\n', '{', '\n', 'public', '▁chart', 'oken', ';', '\n', 'public', '▁int', '▁the', 'line', ';', '\n\n', 'public', '▁symbol', '(', '▁char', '▁tok', ',', '▁int', '▁line', '▁)', '\n', '{', '\n', 'tok', 'en', '▁=', '▁/', '*', '*', '\n', '▁*', '▁construct', 'or', '.', '\n', '▁*', '▁', '@', 'param', '▁inst', 'ream', '▁the', '▁stream', '▁containing', '▁a', '▁program', '.', '\n', '▁*', '/', '\n', 'public', '▁balance', '(', '▁reader', '▁inst', 'ream', '▁)', '\n', '{', '\n', 'er', 'rors', '▁=', '▁0', ';', '\n', 'tok', '▁=', '▁new', '▁token', 'izer', '(', '▁inst', 'ream', '▁', ');', '\n', '}', '/', '*', '*', '\n', '▁*', '▁print', '▁an', '▁error', '▁message', '▁for', '▁un', 'bal', 'anced', '▁symbols', '.', '\n', '▁*', '▁', '@', 'return', '▁number', '▁of', '▁errors', '▁detected', '.', '\n', '▁*', '/', '\n', 'public', '▁int', '▁check', 'balance', '(', '▁)', '\n', '{', '\n', 'char', '▁ch', ';', '\n', 'sym', 'bol', '▁match', '▁=', '▁null', ';', '\n', 'st', 'ack', '▁pending', 'tok', 'ens', '▁=', '▁new', '▁stack', '(', '▁', ');', '\n\n', '▁private', '▁token', 'izer', '▁tok', ';', '\n', 'private', '▁int', '▁errors', ';', '▁/', '*', '*', '\n', '▁*', '▁print', '▁an', '▁error', '▁message', '▁if', '▁cl', 'sym', '▁does', '▁not', '▁match', '▁op', 'sym', '.', '\n', '▁*', '▁update', '▁errors', '.', '\n', '▁*', '/', '\n', 'private', '▁void', '▁check', 'match', '(', '▁symbol', '▁op', 'sym', ',', '▁symbol', '▁cl', 'sym', '▁)', '\n', '{', '\n', 'if', '(', '▁op', 'sym', '.', '▁token', '▁==', ""▁'"", ""('"", '▁&', '&', '▁cl', 'sym', '.', '▁token', '▁!=', ""▁'"", ')', ""'"", '▁||', '\n', '▁/', '*', '*', '\n', '▁*', '▁main', '▁routine', '▁for', '▁balanced', '▁symbol', '▁check', 'er', '.', '\n', '▁*', '▁slightly', '▁different', '▁from', '▁text', '.', '\n', '▁*', '▁if', '▁no', '▁command', '▁line', '▁parameters', ',', '▁standard', '▁input', '▁is', '▁used', '.', '\n', '▁*', '▁otherwise', ',', '▁files', '▁in', '▁command', '▁line', '▁are', '▁used', '.', '\n', '▁*', '/', '\n', 'public', '▁static', '▁void', '▁main', '(', '▁st', '""', '\n']"~"['▁72', '\t', '""', 'balance', '▁/', '**', '\n', '▁*', '▁symbol', '▁represents', '▁what', '▁will', '▁be', '▁placed', '▁on', '▁the', '▁stack', '.', '\n', '▁*/', '\n', 'private', '▁static', '▁class', '▁symbol', '\n', '{', '\n', 'public', '▁chart', 'oken', ';', '\n', 'public', '▁int', '▁the', 'line', ';', '\n\n', 'public', '▁symbol', '(', '▁char', '▁tok', ',', '▁int', '▁line', '▁)', '\n', '{', '\n', 'token', '▁=', '▁/', '**', '\n', '▁*', '▁constructor', '.', '\n', '▁*', '▁', '@', 'param', '▁inst', 'ream', '▁the', '▁stream', '▁containing', '▁a', '▁program', '.', '\n', '▁*/', '\n', 'public', '▁balance', '(', '▁reader', '▁inst', 'ream', '▁)', '\n', '{', '\n', 'errors', '▁=', '▁0;', '\n', 'tok', '▁=', '▁new', '▁token', 'izer', '(', '▁inst', 'ream', '▁);', '\n', '}', '/', '**', '\n', '▁*', '▁print', '▁an', '▁error', '▁message', '▁for', '▁unbalanced', '▁symbols', '.', '\n', '▁*', '▁', '@', 'return', '▁number', '▁of', '▁errors', '▁detected', '.', '\n', '▁*/', '\n', 'public', '▁int', '▁check', 'balance', '(', '▁)', '\n', '{', '\n', 'char', '▁ch', ';', '\n', 'symbol', '▁match', '▁=', '▁null', ';', '\n', 'stack', '▁pending', 'tok', 'ens', '▁=', '▁new', '▁stack', '(', '▁);', '\n\n', '▁private', '▁token', 'izer', '▁tok', ';', '\n', 'private', '▁int', '▁errors', ';', '▁/', '**', '\n', '▁*', '▁print', '▁an', '▁error', '▁message', '▁if', '▁cl', 'sym', '▁does', '▁not', '▁match', '▁op', 'sym', '.', '\n', '▁*', '▁update', '▁errors', '.', '\n', '▁*/', '\n', 'private', '▁void', '▁check', 'match', '(', '▁symbol', '▁op', 'sym', ',', '▁symbol', '▁cl', 'sym', '▁)', '\n', '{', '\n', 'if', '(', '▁op', 'sym', '.', '▁token', '▁==', ""▁'"", ""('"", '▁&&', '▁cl', 'sym', '.', '▁token', '▁!=', ""▁'"", "")'"", '▁||', '\n', '▁/', '**', '\n', '▁*', '▁main', '▁routine', '▁for', '▁balanced', '▁symbol', '▁checker', '.', '\n', '▁*', '▁slightly', '▁different', '▁from', '▁text', '.', '\n', '▁*', '▁if', '▁no', '▁command', '▁line', '▁parameters', ',', '▁standard', '▁input', '▁is', '▁used', '.', '\n', '▁*', '▁otherwise', ',', '▁files', '▁in', '▁command', '▁line', '▁are', '▁used', '.', '\n', '▁*/', '\n', 'public', '▁static', '▁void', '▁main', '(', '▁st', '""', '\n']"~balanc symbol repres place stack privat static class symbol public chartoken public int line public symbol char tok int line token constructor param stream stream contain program public balanc reader stream error tok new token stream print error messag unbalanc symbol return number error detect public int check balanc char symbol match null stack pend token new stack privat token tok privat int error print error messag sym match sym updat error privat void check match symbol sym symbol sym sym token sym token main routin balanc symbol checker slight differ text command line paramet standard input use otherwis file command line use public static void main
88~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/65.java~65.java~"65	""About Dialog public AboutDialog(JFrame parent, boolean modal) {

 super ( parent, modal);
 
 getContentPane (). setLayout ( new BorderLayout ());
 setTitle (""""About"""");
 setName ("""" aboutDialog"""");
 
 private JTextArea text;""
"~src~"['▁65', '\t', '""', 'ab', 'out', '▁dial', 'og', '▁public', '▁about', 'd', 'ial', 'og', '(', 'j', 'fr', 'ame', '▁paren', 't', ',', '▁bo', 'ole', 'an', '▁mod', 'al', ')', '▁{', '\n\n', '▁super', '▁(', '▁paren', 't', ',', '▁mod', 'al', ');', '\n', '▁', '\n', '▁get', 'cont', 'ent', 'p', 'ane', '▁(', ').', '▁set', 'l', 'ay', 'out', '▁(', '▁new', '▁border', 'l', 'ay', 'out', '▁()', ');', '\n', '▁sett', 'it', 'le', '▁(""', '""', 'ab', 'out', '""', '"")', ';', '\n', '▁set', 'name', '▁(""', '""', '▁about', 'd', 'ial', 'og', '""', '"")', ';', '\n', '▁', '\n', '▁private', '▁j', 'text', 'are', 'a', '▁text', ';""', '\n']"~"['▁65', '\t', '""', 'about', '▁dial', 'og', '▁public', '▁about', 'd', 'ial', 'og', '(', 'j', 'frame', '▁parent', ',', '▁bo', 'olean', '▁mod', 'al', ')', '▁{', '\n\n', '▁super', '▁(', '▁parent', ',', '▁mod', 'al', ');', '\n', '▁', '\n', '▁get', 'content', 'p', 'ane', '▁().', '▁set', 'lay', 'out', '▁(', '▁new', '▁border', 'lay', 'out', '▁()', ');', '\n', '▁sett', 'it', 'le', '▁(""', '""', 'about', '""', '"");', '\n', '▁set', 'name', '▁(""', '""', '▁about', 'd', 'ial', 'og', '""', '"");', '\n', '▁', '\n', '▁private', '▁j', 'text', 'area', '▁text', ';""', '\n']"~"['▁65', '\t', '""', 'about', '▁dialog', '▁public', '▁about', 'dial', 'og', '(', 'j', 'frame', '▁parent', ',', '▁boolean', '▁modal', ')', '▁{', '\n\n', '▁super', '▁(', '▁parent', ',', '▁modal', ');', '\n', '▁', '\n', '▁get', 'content', 'pane', '▁().', '▁set', 'layout', '▁(', '▁new', '▁border', 'layout', '▁()', ');', '\n', '▁sett', 'itle', '▁(""', '""', 'about', '"""");', '\n', '▁set', 'name', '▁(""', '""', '▁about', 'dial', 'og', '"""");', '\n', '▁', '\n', '▁private', '▁j', 'text', 'area', '▁text', ';""', '\n']"~dialog public dialog jframe parent boolean modal super parent modal get content pane set layout new border layout set titl set name dialog privat jtext area text
89~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/95.java~95.java~"95	""Text Model private int CurrentEvent;
private EBT ebt;
private JLabel lblrequirement No, lblProject, lblModulePath;
private JTextField txtrequirement No, txtProject, txtModulePath;
private boolean HideMsg;
p public TextModel(EBT e)
{
 // System. out. println(""""Trying to create text box"""");
ebt = e;
CurrentEvent = -1;
// setForeground( new Color ( 255,255,255) );
 lblrequirement No = new JLabel(""""requirement public void showText(EBShape sh)
{
 // Hide message in bottom box.
 HideMsg = true;
 repaint();
lblProject. setVisible( true);
lblrequirement No. setVisible( true);
lblModulePath. set public void HideText()
{
lblProject. setVisible( false);
lblrequirement No. setVisible( false);
lblModulePath. setVisible( false);
txtProject. setVisible( false);
txtrequirement No. setVisi public void ShowInfo( int CE)
{
CurrentEvent = CE;
HideMsg = false;
HideText();
 repaint();
} public void drawModel()
{
repaint();
} protected void paintComponent(Graphics g)
{
 super. paintComponent( g);

if (HideMsg == true)
{
 g. drawString("""" """",20,25);
 g. drawString("""" """",20,40);
 g. drawString("""" """",20,55 ""
"~src~"['▁9', '5', '\t', '""', 'text', '▁model', '▁private', '▁int', '▁cur', 'ren', 'te', 'vent', ';', '\n', 'pr', 'iv', 'ate', '▁e', 'b', 't', '▁e', 'b', 't', ';', '\n', 'pr', 'iv', 'ate', '▁j', 'l', 'ab', 'el', '▁l', 'bl', 're', 'qu', 'ire', 'ment', '▁no', ',', '▁l', 'bl', 'pro', 'ject', ',', '▁l', 'bl', 'mod', 'ule', 'p', 'ath', ';', '\n', 'pr', 'iv', 'ate', '▁j', 'text', 'field', '▁t', 'xt', 're', 'qu', 'ire', 'ment', '▁no', ',', '▁t', 'xt', 'pro', 'ject', ',', '▁t', 'xt', 'mod', 'ule', 'p', 'ath', ';', '\n', 'pr', 'iv', 'ate', '▁bo', 'ole', 'an', '▁h', 'id', 'ems', 'g', ';', '\n', 'p', '▁public', '▁text', 'mod', 'el', '(', 'e', 'b', 't', '▁e', ')', '\n', '{', '\n', '▁/', '/', '▁system', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 't', 'ry', 'ing', '▁to', '▁create', '▁text', '▁box', '""', '"")', ';', '\n', 'e', 'b', 't', '▁=', '▁e', ';', '\n', 'cur', 'ren', 'te', 'vent', '▁=', '▁-', '1', ';', '\n', '//', '▁set', 'fore', 'ground', '(', '▁new', '▁color', '▁(', '▁25', '5,', '25', '5,', '25', '5)', '▁', ');', '\n', '▁l', 'bl', 're', 'qu', 'ire', 'ment', '▁no', '▁=', '▁new', '▁j', 'l', 'ab', 'el', '(', '""', '""', 're', 'qu', 'ire', 'ment', '▁public', '▁vo', 'id', '▁show', 'text', '(', 'e', 'b', 'sh', 'ape', '▁sh', ')', '\n', '{', '\n', '▁/', '/', '▁h', 'ide', '▁message', '▁in', '▁bottom', '▁box', '.', '\n', '▁h', 'id', 'ems', 'g', '▁=', '▁true', ';', '\n', '▁rep', 'aint', '(', ');', '\n', 'l', 'bl', 'pro', 'ject', '.', '▁set', 'vis', 'ible', '(', '▁true', ');', '\n', 'l', 'bl', 're', 'qu', 'ire', 'ment', '▁no', '.', '▁set', 'vis', 'ible', '(', '▁true', ');', '\n', 'l', 'bl', 'mod', 'ule', 'p', 'ath', '.', '▁set', '▁public', '▁vo', 'id', '▁h', 'id', 'et', 'ext', '(', ')', '\n', '{', '\n', 'l', 'bl', 'pro', 'ject', '.', '▁set', 'vis', 'ible', '(', '▁fal', 'se', ');', '\n', 'l', 'bl', 're', 'qu', 'ire', 'ment', '▁no', '.', '▁set', 'vis', 'ible', '(', '▁fal', 'se', ');', '\n', 'l', 'bl', 'mod', 'ule', 'p', 'ath', '.', '▁set', 'vis', 'ible', '(', '▁fal', 'se', ');', '\n', 't', 'xt', 'pro', 'ject', '.', '▁set', 'vis', 'ible', '(', '▁fal', 'se', ');', '\n', 't', 'xt', 're', 'qu', 'ire', 'ment', '▁no', '.', '▁set', 'vis', 'i', '▁public', '▁vo', 'id', '▁show', 'in', 'fo', '(', '▁int', '▁ce', ')', '\n', '{', '\n', 'cur', 'ren', 'te', 'vent', '▁=', '▁ce', ';', '\n', 'h', 'id', 'ems', 'g', '▁=', '▁fal', 'se', ';', '\n', 'h', 'id', 'et', 'ext', '(', ');', '\n', '▁rep', 'aint', '(', ');', '\n', '}', '▁public', '▁vo', 'id', '▁draw', 'mod', 'el', '(', ')', '\n', '{', '\n', 'rep', 'aint', '(', ');', '\n', '}', '▁protected', '▁vo', 'id', '▁paint', 'com', 'pon', 'ent', '(', 'gr', 'aph', 'ics', '▁g', ')', '\n', '{', '\n', '▁super', '.', '▁paint', 'com', 'pon', 'ent', '(', '▁g', ');', '\n\n', 'if', '▁(', 'h', 'id', 'ems', 'g', '▁=', '=', '▁true', ')', '\n', '{', '\n', '▁g', '.', '▁draw', 'str', 'ing', '(', '""', '""', '▁""', '"",', '20', ',', '2', '5)', ';', '\n', '▁g', '.', '▁draw', 'str', 'ing', '(', '""', '""', '▁""', '"",', '20', ',', '4', '0)', ';', '\n', '▁g', '.', '▁draw', 'str', 'ing', '(', '""', '""', '▁""', '"",', '20', ',', '55', '▁""', '\n']"~"['▁95', '\t', '""', 'text', '▁model', '▁private', '▁int', '▁curren', 'te', 'vent', ';', '\n', 'private', '▁eb', 't', '▁eb', 't', ';', '\n', 'private', '▁j', 'l', 'abel', '▁l', 'bl', 'requ', 'ire', 'ment', '▁no', ',', '▁l', 'bl', 'project', ',', '▁l', 'bl', 'mod', 'ule', 'path', ';', '\n', 'private', '▁j', 'text', 'field', '▁t', 'xt', 'requ', 'ire', 'ment', '▁no', ',', '▁t', 'xt', 'project', ',', '▁t', 'xt', 'mod', 'ule', 'path', ';', '\n', 'private', '▁bo', 'olean', '▁hid', 'ems', 'g', ';', '\n', 'p', '▁public', '▁text', 'model', '(', 'eb', 't', '▁e', ')', '\n', '{', '\n', '▁//', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'try', 'ing', '▁to', '▁create', '▁text', '▁box', '""', '"");', '\n', 'eb', 't', '▁=', '▁e', ';', '\n', 'cur', 'ren', 'te', 'vent', '▁=', '▁-', '1', ';', '\n', '//', '▁set', 'fore', 'ground', '(', '▁new', '▁color', '▁(', '▁25', '5,', '25', '5,', '25', '5)', '▁', ');', '\n', '▁l', 'bl', 'requ', 'ire', 'ment', '▁no', '▁=', '▁new', '▁j', 'l', 'abel', '(""', '""', 'requ', 'ire', 'ment', '▁public', '▁void', '▁show', 'text', '(', 'eb', 'shape', '▁sh', ')', '\n', '{', '\n', '▁//', '▁hide', '▁message', '▁in', '▁bottom', '▁box', '.', '\n', '▁hid', 'ems', 'g', '▁=', '▁true', ';', '\n', '▁rep', 'aint', '();', '\n', 'l', 'bl', 'project', '.', '▁set', 'vis', 'ible', '(', '▁true', ');', '\n', 'l', 'bl', 'requ', 'ire', 'ment', '▁no', '.', '▁set', 'vis', 'ible', '(', '▁true', ');', '\n', 'l', 'bl', 'mod', 'ule', 'path', '.', '▁set', '▁public', '▁void', '▁hid', 'et', 'ext', '()', '\n', '{', '\n', 'l', 'bl', 'project', '.', '▁set', 'vis', 'ible', '(', '▁false', ');', '\n', 'l', 'bl', 'requ', 'ire', 'ment', '▁no', '.', '▁set', 'vis', 'ible', '(', '▁false', ');', '\n', 'l', 'bl', 'mod', 'ule', 'path', '.', '▁set', 'vis', 'ible', '(', '▁false', ');', '\n', 't', 'xt', 'project', '.', '▁set', 'vis', 'ible', '(', '▁false', ');', '\n', 't', 'xt', 'requ', 'ire', 'ment', '▁no', '.', '▁set', 'vis', 'i', '▁public', '▁void', '▁show', 'info', '(', '▁int', '▁ce', ')', '\n', '{', '\n', 'cur', 'ren', 'te', 'vent', '▁=', '▁ce', ';', '\n', 'h', 'id', 'ems', 'g', '▁=', '▁false', ';', '\n', 'h', 'id', 'et', 'ext', '();', '\n', '▁rep', 'aint', '();', '\n', '}', '▁public', '▁void', '▁draw', 'model', '()', '\n', '{', '\n', 'rep', 'aint', '();', '\n', '}', '▁protected', '▁void', '▁paint', 'com', 'ponent', '(', 'graph', 'ics', '▁g', ')', '\n', '{', '\n', '▁super', '.', '▁paint', 'com', 'ponent', '(', '▁g', ');', '\n\n', 'if', '▁(', 'h', 'id', 'ems', 'g', '▁==', '▁true', ')', '\n', '{', '\n', '▁g', '.', '▁draw', 'string', '(""', '""', '▁""', '"",', '20,', '2', '5)', ';', '\n', '▁g', '.', '▁draw', 'string', '(""', '""', '▁""', '"",', '20,', '4', '0)', ';', '\n', '▁g', '.', '▁draw', 'string', '(""', '""', '▁""', '"",', '20,', '55', '▁""', '\n']"~"['▁95', '\t', '""', 'text', '▁model', '▁private', '▁int', '▁curren', 'te', 'vent', ';', '\n', 'private', '▁eb', 't', '▁eb', 't', ';', '\n', 'private', '▁j', 'label', '▁l', 'bl', 'require', 'ment', '▁no', ',', '▁l', 'bl', 'project', ',', '▁l', 'bl', 'module', 'path', ';', '\n', 'private', '▁j', 'text', 'field', '▁t', 'xt', 'require', 'ment', '▁no', ',', '▁t', 'xt', 'project', ',', '▁t', 'xt', 'module', 'path', ';', '\n', 'private', '▁boolean', '▁hid', 'emsg', ';', '\n', 'p', '▁public', '▁text', 'model', '(', 'eb', 't', '▁e', ')', '\n', '{', '\n', '▁//', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'trying', '▁to', '▁create', '▁text', '▁box', '"""");', '\n', 'eb', 't', '▁=', '▁e', ';', '\n', 'cur', 'rente', 'vent', '▁=', '▁-', '1;', '\n', '//', '▁set', 'fore', 'ground', '(', '▁new', '▁color', '▁(', '▁255,', '25', '5,', '25', '5)', '▁);', '\n', '▁l', 'bl', 'require', 'ment', '▁no', '▁=', '▁new', '▁j', 'label', '(""', '""', 'require', 'ment', '▁public', '▁void', '▁show', 'text', '(', 'eb', 'shape', '▁sh', ')', '\n', '{', '\n', '▁//', '▁hide', '▁message', '▁in', '▁bottom', '▁box', '.', '\n', '▁hid', 'emsg', '▁=', '▁true', ';', '\n', '▁rep', 'aint', '();', '\n', 'l', 'bl', 'project', '.', '▁set', 'visible', '(', '▁true', ');', '\n', 'l', 'bl', 'require', 'ment', '▁no', '.', '▁set', 'visible', '(', '▁true', ');', '\n', 'l', 'bl', 'module', 'path', '.', '▁set', '▁public', '▁void', '▁hidet', 'ext', '()', '\n', '{', '\n', 'l', 'bl', 'project', '.', '▁set', 'visible', '(', '▁false', ');', '\n', 'l', 'bl', 'require', 'ment', '▁no', '.', '▁set', 'visible', '(', '▁false', ');', '\n', 'l', 'bl', 'module', 'path', '.', '▁set', 'visible', '(', '▁false', ');', '\n', 't', 'xt', 'project', '.', '▁set', 'visible', '(', '▁false', ');', '\n', 't', 'xt', 'require', 'ment', '▁no', '.', '▁set', 'vis', 'i', '▁public', '▁void', '▁show', 'info', '(', '▁int', '▁ce', ')', '\n', '{', '\n', 'cur', 'rente', 'vent', '▁=', '▁ce', ';', '\n', 'hid', 'emsg', '▁=', '▁false', ';', '\n', 'hid', 'et', 'ext', '();', '\n', '▁rep', 'aint', '();', '\n', '}', '▁public', '▁void', '▁draw', 'model', '()', '\n', '{', '\n', 'rep', 'aint', '();', '\n', '}', '▁protected', '▁void', '▁paint', 'component', '(', 'graphics', '▁g', ')', '\n', '{', '\n', '▁super', '.', '▁paint', 'component', '(', '▁g', ');', '\n\n', 'if', '▁(', 'hid', 'emsg', '▁==', '▁true', ')', '\n', '{', '\n', '▁g', '.', '▁draw', 'string', '(""', '""', '▁"""",', '20,', '2', '5);', '\n', '▁g', '.', '▁draw', 'string', '(""', '""', '▁"""",', '20,', '4', '0);', '\n', '▁g', '.', '▁draw', 'string', '(""', '""', '▁"""",', '20,', '55', '▁""', '\n']"~text model privat int current event privat ebt ebt privat jlabel lblrequir lbl project lbl modul path privat jtext field txtrequir txt project txt modul path privat boolean hide msg public text model ebt system println tri creat text box ebt current event set foreground new color lblrequir new jlabel requir public void show text ebshap hide messag bottom box hide msg true repaint lbl project set visibl true lblrequir set visibl true lbl modul path set public void hide text lbl project set visibl fals lblrequir set visibl fals lbl modul path set visibl fals txt project set visibl fals txtrequir set visi public void show info int current event hide msg fals hide text repaint public void draw model repaint protect void paint compon graphic super paint compon hide msg true draw string draw string draw string
90~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/47.java~47.java~"47	""Impact Report private String server  IP = """" local host  """";
 private JPanel center  Panel = null  ;

 private JPanel driver  Panel = new JPanel  ();

 private JPanel driver  Inner  Panel = null  ;

 private JPanel impact  Panel = null  ;
 private JPanel impact  Inner  P public Impact  Report  ()
 {

  super  (""""  Search Result GUI  """");

  container = get  Content  Pane  ();

  set  Size  (  800  , 250  );

  panel = new JPanel  ();

  panel  . set  Layout  ( null  );

  this  . server  IP =
   JOption  Pane
    . show  In public static void main  (  String [] args  )
 {

  Impact  Report im = new Impact  Report  ();



 } public Vector search  Date  ()
 {

  date  Vector = new Vector  ();
  date  Vector  . add  (""""  Select Query Date  """");
  Socket server  ;
  String line = new String  ();


  try
  {

   server = new Socket  ( server  IP  ,  1701  );
   if ( server  . is  C public void search  Query  ID  (  String date  )
 {

  pair  Vector = new Vector  ();

  query  String  Combo  . remove  All  Items  ();

  query  String  Combo  . add  Item  (""""  Select Query String  """");

  Socket server  ;
  String line = new String  (); Select Actions public void action  Performed  (  Action  Event e  )
  {

   if ( date  Combo == (  JCombo  Box  ) e  . get  Source  ())
   {
    date = (  String  ) date  Combo  . get  Selected  Item  ();
    search  Query  ID  ( date  );
   }
  } Button Actions  public void action  Performed  (  Action  Event e  ) {

   if ( submit  Button == e  . get  Source  ()) {

    for ( int i = 0  ; i < pair  Vector  . size  (); i  ++) {

     Pair pair = (  Pair  ) pair  Vector  . get  ( i  );

     if ( pair
      . get public void impact  Report  (  String id  )
 {

  // super  (""""  Impact Report  """");

  container = get  Content  Pane  ();

  set  Size  (  1020  , 740  );

  this  . query  ID = id  ;

  System  . out  . println  (""""  Impact Report Constructor ..... ID """" + public Vector get  Constraint  From  Data  Base  ()
 {

  Vector v = new Vector  ();

  Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered  public Vector get  Driver  From  Data  Base  ()
 {

  Vector v = new Vector  ();

     Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered""
"~src~"['▁4', '7', '\t', '""', 'im', 'p', 'act', '▁report', '▁private', '▁string', '▁ser', 'ver', '▁ip', '▁=', '▁""', '""', '▁local', '▁host', '▁""', '""', ';', '\n', '▁private', '▁j', 'pan', 'el', '▁center', '▁pan', 'el', '▁=', '▁n', 'ull', '▁;', '\n\n', '▁private', '▁j', 'pan', 'el', '▁driver', '▁pan', 'el', '▁=', '▁new', '▁j', 'pan', 'el', '▁()', ';', '\n\n', '▁private', '▁j', 'pan', 'el', '▁driver', '▁inner', '▁pan', 'el', '▁=', '▁n', 'ull', '▁;', '\n\n', '▁private', '▁j', 'pan', 'el', '▁impact', '▁pan', 'el', '▁=', '▁n', 'ull', '▁;', '\n', '▁private', '▁j', 'pan', 'el', '▁impact', '▁inner', '▁p', '▁public', '▁impact', '▁report', '▁()', '\n', '▁{', '\n\n', '▁super', '▁(""', '""', '▁search', '▁result', '▁gu', 'i', '▁""', '"")', ';', '\n\n', '▁contain', 'er', '▁=', '▁get', '▁content', '▁p', 'ane', '▁()', ';', '\n\n', '▁set', '▁size', '▁(', '▁8', '00', '▁,', '▁2', '50', '▁', ');', '\n\n', '▁pan', 'el', '▁=', '▁new', '▁j', 'pan', 'el', '▁()', ';', '\n\n', '▁pan', 'el', '▁.', '▁set', '▁lay', 'out', '▁(', '▁n', 'ull', '▁', ');', '\n\n', '▁this', '▁.', '▁ser', 'ver', '▁ip', '▁=', '\n', '▁j', 'op', 't', 'ion', '▁p', 'ane', '\n', '▁.', '▁show', '▁in', '▁public', '▁st', 'atic', '▁vo', 'id', '▁main', '▁(', '▁string', '▁[', ']', '▁arg', 's', '▁)', '\n', '▁{', '\n\n', '▁impact', '▁report', '▁im', '▁=', '▁new', '▁impact', '▁report', '▁()', ';', '\n\n\n\n', '▁}', '▁public', '▁v', 'ector', '▁search', '▁date', '▁()', '\n', '▁{', '\n\n', '▁date', '▁v', 'ector', '▁=', '▁new', '▁v', 'ector', '▁()', ';', '\n', '▁date', '▁v', 'ector', '▁.', '▁add', '▁(""', '""', '▁select', '▁qu', 'ery', '▁date', '▁""', '"")', ';', '\n', '▁s', 'ock', 'et', '▁ser', 'ver', '▁;', '\n', '▁string', '▁line', '▁=', '▁new', '▁string', '▁()', ';', '\n\n\n', '▁try', '\n', '▁{', '\n\n', '▁ser', 'ver', '▁=', '▁new', '▁s', 'ock', 'et', '▁(', '▁ser', 'ver', '▁ip', '▁,', '▁17', '01', '▁', ');', '\n', '▁if', '▁(', '▁ser', 'ver', '▁.', '▁is', '▁c', '▁public', '▁vo', 'id', '▁search', '▁qu', 'ery', '▁id', '▁(', '▁string', '▁date', '▁)', '\n', '▁{', '\n\n', '▁pair', '▁v', 'ector', '▁=', '▁new', '▁v', 'ector', '▁()', ';', '\n\n', '▁qu', 'ery', '▁string', '▁com', 'bo', '▁.', '▁rem', 'ove', '▁all', '▁items', '▁()', ';', '\n\n', '▁qu', 'ery', '▁string', '▁com', 'bo', '▁.', '▁add', '▁it', 'em', '▁(""', '""', '▁select', '▁qu', 'ery', '▁string', '▁""', '"")', ';', '\n\n', '▁s', 'ock', 'et', '▁ser', 'ver', '▁;', '\n', '▁string', '▁line', '▁=', '▁new', '▁string', '▁()', ';', '▁select', '▁actions', '▁public', '▁vo', 'id', '▁action', '▁performed', '▁(', '▁action', '▁event', '▁e', '▁)', '\n', '▁{', '\n\n', '▁if', '▁(', '▁date', '▁com', 'bo', '▁=', '=', '▁(', '▁j', 'com', 'bo', '▁box', '▁)', '▁e', '▁.', '▁get', '▁source', '▁()', ')', '\n', '▁{', '\n', '▁date', '▁=', '▁(', '▁string', '▁)', '▁date', '▁com', 'bo', '▁.', '▁get', '▁selected', '▁it', 'em', '▁()', ';', '\n', '▁search', '▁qu', 'ery', '▁id', '▁(', '▁date', '▁', ');', '\n', '▁}', '\n', '▁}', '▁but', 'ton', '▁actions', '▁public', '▁vo', 'id', '▁action', '▁performed', '▁(', '▁action', '▁event', '▁e', '▁)', '▁{', '\n\n', '▁if', '▁(', '▁sub', 'mit', '▁but', 'ton', '▁=', '=', '▁e', '▁.', '▁get', '▁source', '▁()', ')', '▁{', '\n\n', '▁for', '▁(', '▁int', '▁i', '▁=', '▁0', '▁;', '▁i', '▁', '<', '▁pair', '▁v', 'ector', '▁.', '▁size', '▁()', ';', '▁i', '▁+', '+', ')', '▁{', '\n\n', '▁pair', '▁pair', '▁=', '▁(', '▁pair', '▁)', '▁pair', '▁v', 'ector', '▁.', '▁get', '▁(', '▁i', '▁', ');', '\n\n', '▁if', '▁(', '▁pair', '\n', '▁.', '▁get', '▁public', '▁vo', 'id', '▁impact', '▁report', '▁(', '▁string', '▁id', '▁)', '\n', '▁{', '\n\n', '▁/', '/', '▁super', '▁(""', '""', '▁impact', '▁report', '▁""', '"")', ';', '\n\n', '▁contain', 'er', '▁=', '▁get', '▁content', '▁p', 'ane', '▁()', ';', '\n\n', '▁set', '▁size', '▁(', '▁10', '20', '▁,', '▁7', '40', '▁', ');', '\n\n', '▁this', '▁.', '▁qu', 'ery', '▁id', '▁=', '▁id', '▁;', '\n\n', '▁system', '▁.', '▁out', '▁.', '▁print', 'l', 'n', '▁(""', '""', '▁impact', '▁report', '▁construct', 'or', '▁...', '..', '▁id', '▁""', '""', '▁+', '▁public', '▁v', 'ector', '▁get', '▁constr', 'aint', '▁from', '▁data', '▁base', '▁()', '\n', '▁{', '\n\n', '▁v', 'ector', '▁v', '▁=', '▁new', '▁v', 'ector', '▁()', ';', '\n\n', '▁s', 'ock', 'et', '▁ser', 'ver', '▁;', '\n', '▁string', '▁line', '▁=', '▁new', '▁string', '▁()', ';', '\n\n\n', '▁try', '\n', '▁{', '\n', '▁ser', 'ver', '▁=', '▁new', '▁s', 'ock', 'et', '▁(', '▁ser', 'ver', '▁ip', '▁,', '▁17', '01', '▁', ');', '\n\n', '▁if', '▁(', '▁ser', 'ver', '▁.', '▁is', '▁connected', '▁()', '▁)', '\n', '▁{', '\n', '▁bu', 'ffer', 'ed', '▁public', '▁v', 'ector', '▁get', '▁driver', '▁from', '▁data', '▁base', '▁()', '\n', '▁{', '\n\n', '▁v', 'ector', '▁v', '▁=', '▁new', '▁v', 'ector', '▁()', ';', '\n\n', '▁s', 'ock', 'et', '▁ser', 'ver', '▁;', '\n', '▁string', '▁line', '▁=', '▁new', '▁string', '▁()', ';', '\n\n\n', '▁try', '\n', '▁{', '\n', '▁ser', 'ver', '▁=', '▁new', '▁s', 'ock', 'et', '▁(', '▁ser', 'ver', '▁ip', '▁,', '▁17', '01', '▁', ');', '\n\n', '▁if', '▁(', '▁ser', 'ver', '▁.', '▁is', '▁connected', '▁()', '▁)', '\n', '▁{', '\n', '▁bu', 'ffer', 'ed', '""', '\n']"~"['▁47', '\t', '""', 'imp', 'act', '▁report', '▁private', '▁string', '▁server', '▁ip', '▁=', '▁""""', '▁local', '▁host', '▁""', '"";', '\n', '▁private', '▁j', 'pan', 'el', '▁center', '▁panel', '▁=', '▁null', '▁;', '\n\n', '▁private', '▁j', 'pan', 'el', '▁driver', '▁panel', '▁=', '▁new', '▁j', 'pan', 'el', '▁()', ';', '\n\n', '▁private', '▁j', 'pan', 'el', '▁driver', '▁inner', '▁panel', '▁=', '▁null', '▁;', '\n\n', '▁private', '▁j', 'pan', 'el', '▁impact', '▁panel', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'pan', 'el', '▁impact', '▁inner', '▁p', '▁public', '▁impact', '▁report', '▁()', '\n', '▁{', '\n\n', '▁super', '▁(""', '""', '▁search', '▁result', '▁gu', 'i', '▁""', '"");', '\n\n', '▁container', '▁=', '▁get', '▁content', '▁p', 'ane', '▁()', ';', '\n\n', '▁set', '▁size', '▁(', '▁800', '▁,', '▁250', '▁', ');', '\n\n', '▁panel', '▁=', '▁new', '▁j', 'pan', 'el', '▁()', ';', '\n\n', '▁panel', '▁.', '▁set', '▁layout', '▁(', '▁null', '▁', ');', '\n\n', '▁this', '▁.', '▁server', '▁ip', '▁=', '\n', '▁j', 'opt', 'ion', '▁p', 'ane', '\n', '▁.', '▁show', '▁in', '▁public', '▁static', '▁void', '▁main', '▁(', '▁string', '▁[', ']', '▁arg', 's', '▁)', '\n', '▁{', '\n\n', '▁impact', '▁report', '▁im', '▁=', '▁new', '▁impact', '▁report', '▁()', ';', '\n\n\n\n', '▁}', '▁public', '▁vector', '▁search', '▁date', '▁()', '\n', '▁{', '\n\n', '▁date', '▁vector', '▁=', '▁new', '▁vector', '▁()', ';', '\n', '▁date', '▁vector', '▁.', '▁add', '▁(""', '""', '▁select', '▁query', '▁date', '▁""', '"");', '\n', '▁sock', 'et', '▁server', '▁;', '\n', '▁string', '▁line', '▁=', '▁new', '▁string', '▁()', ';', '\n\n\n', '▁try', '\n', '▁{', '\n\n', '▁server', '▁=', '▁new', '▁sock', 'et', '▁(', '▁server', '▁ip', '▁,', '▁17', '01', '▁', ');', '\n', '▁if', '▁(', '▁server', '▁.', '▁is', '▁c', '▁public', '▁void', '▁search', '▁query', '▁id', '▁(', '▁string', '▁date', '▁)', '\n', '▁{', '\n\n', '▁pair', '▁vector', '▁=', '▁new', '▁vector', '▁()', ';', '\n\n', '▁query', '▁string', '▁com', 'bo', '▁.', '▁remove', '▁all', '▁items', '▁()', ';', '\n\n', '▁query', '▁string', '▁com', 'bo', '▁.', '▁add', '▁item', '▁(""', '""', '▁select', '▁query', '▁string', '▁""', '"");', '\n\n', '▁sock', 'et', '▁server', '▁;', '\n', '▁string', '▁line', '▁=', '▁new', '▁string', '▁()', ';', '▁select', '▁actions', '▁public', '▁void', '▁action', '▁performed', '▁(', '▁action', '▁event', '▁e', '▁)', '\n', '▁{', '\n\n', '▁if', '▁(', '▁date', '▁com', 'bo', '▁==', '▁(', '▁j', 'com', 'bo', '▁box', '▁)', '▁e', '▁.', '▁get', '▁source', '▁()', ')', '\n', '▁{', '\n', '▁date', '▁=', '▁(', '▁string', '▁)', '▁date', '▁com', 'bo', '▁.', '▁get', '▁selected', '▁item', '▁()', ';', '\n', '▁search', '▁query', '▁id', '▁(', '▁date', '▁', ');', '\n', '▁}', '\n', '▁}', '▁button', '▁actions', '▁public', '▁void', '▁action', '▁performed', '▁(', '▁action', '▁event', '▁e', '▁)', '▁{', '\n\n', '▁if', '▁(', '▁submit', '▁button', '▁==', '▁e', '▁.', '▁get', '▁source', '▁()', ')', '▁{', '\n\n', '▁for', '▁(', '▁int', '▁i', '▁=', '▁0', '▁;', '▁i', '▁<', '▁pair', '▁vector', '▁.', '▁size', '▁()', ';', '▁i', '▁+', '+', ')', '▁{', '\n\n', '▁pair', '▁pair', '▁=', '▁(', '▁pair', '▁)', '▁pair', '▁vector', '▁.', '▁get', '▁(', '▁i', '▁', ');', '\n\n', '▁if', '▁(', '▁pair', '\n', '▁.', '▁get', '▁public', '▁void', '▁impact', '▁report', '▁(', '▁string', '▁id', '▁)', '\n', '▁{', '\n\n', '▁//', '▁super', '▁(""', '""', '▁impact', '▁report', '▁""', '"");', '\n\n', '▁container', '▁=', '▁get', '▁content', '▁p', 'ane', '▁()', ';', '\n\n', '▁set', '▁size', '▁(', '▁10', '20', '▁,', '▁7', '40', '▁', ');', '\n\n', '▁this', '▁.', '▁query', '▁id', '▁=', '▁id', '▁;', '\n\n', '▁system', '▁.', '▁out', '▁.', '▁print', 'ln', '▁(""', '""', '▁impact', '▁report', '▁construct', 'or', '▁...', '..', '▁id', '▁""""', '▁+', '▁public', '▁vector', '▁get', '▁constr', 'aint', '▁from', '▁data', '▁base', '▁()', '\n', '▁{', '\n\n', '▁vector', '▁v', '▁=', '▁new', '▁vector', '▁()', ';', '\n\n', '▁sock', 'et', '▁server', '▁;', '\n', '▁string', '▁line', '▁=', '▁new', '▁string', '▁()', ';', '\n\n\n', '▁try', '\n', '▁{', '\n', '▁server', '▁=', '▁new', '▁sock', 'et', '▁(', '▁server', '▁ip', '▁,', '▁17', '01', '▁', ');', '\n\n', '▁if', '▁(', '▁server', '▁.', '▁is', '▁connected', '▁()', '▁)', '\n', '▁{', '\n', '▁buffer', 'ed', '▁public', '▁vector', '▁get', '▁driver', '▁from', '▁data', '▁base', '▁()', '\n', '▁{', '\n\n', '▁vector', '▁v', '▁=', '▁new', '▁vector', '▁()', ';', '\n\n', '▁sock', 'et', '▁server', '▁;', '\n', '▁string', '▁line', '▁=', '▁new', '▁string', '▁()', ';', '\n\n\n', '▁try', '\n', '▁{', '\n', '▁server', '▁=', '▁new', '▁sock', 'et', '▁(', '▁server', '▁ip', '▁,', '▁17', '01', '▁', ');', '\n\n', '▁if', '▁(', '▁server', '▁.', '▁is', '▁connected', '▁()', '▁)', '\n', '▁{', '\n', '▁buffer', 'ed', '""', '\n']"~"['▁47', '\t', '""', 'impact', '▁report', '▁private', '▁string', '▁server', '▁ip', '▁=', '▁""""', '▁local', '▁host', '▁""', '"";', '\n', '▁private', '▁j', 'panel', '▁center', '▁panel', '▁=', '▁null', '▁;', '\n\n', '▁private', '▁j', 'panel', '▁driver', '▁panel', '▁=', '▁new', '▁j', 'panel', '▁();', '\n\n', '▁private', '▁j', 'panel', '▁driver', '▁inner', '▁panel', '▁=', '▁null', '▁;', '\n\n', '▁private', '▁j', 'panel', '▁impact', '▁panel', '▁=', '▁null', '▁;', '\n', '▁private', '▁j', 'panel', '▁impact', '▁inner', '▁p', '▁public', '▁impact', '▁report', '▁()', '\n', '▁{', '\n\n', '▁super', '▁(""', '""', '▁search', '▁result', '▁gui', '▁""', '"");', '\n\n', '▁container', '▁=', '▁get', '▁content', '▁pane', '▁();', '\n\n', '▁set', '▁size', '▁(', '▁800', '▁,', '▁250', '▁);', '\n\n', '▁panel', '▁=', '▁new', '▁j', 'panel', '▁();', '\n\n', '▁panel', '▁.', '▁set', '▁layout', '▁(', '▁null', '▁);', '\n\n', '▁this', '▁.', '▁server', '▁ip', '▁=', '\n', '▁j', 'option', '▁pane', '\n', '▁.', '▁show', '▁in', '▁public', '▁static', '▁void', '▁main', '▁(', '▁string', '▁[]', '▁args', '▁)', '\n', '▁{', '\n\n', '▁impact', '▁report', '▁im', '▁=', '▁new', '▁impact', '▁report', '▁();', '\n\n\n\n', '▁}', '▁public', '▁vector', '▁search', '▁date', '▁()', '\n', '▁{', '\n\n', '▁date', '▁vector', '▁=', '▁new', '▁vector', '▁();', '\n', '▁date', '▁vector', '▁.', '▁add', '▁(""', '""', '▁select', '▁query', '▁date', '▁""', '"");', '\n', '▁socket', '▁server', '▁;', '\n', '▁string', '▁line', '▁=', '▁new', '▁string', '▁();', '\n\n\n', '▁try', '\n', '▁{', '\n\n', '▁server', '▁=', '▁new', '▁socket', '▁(', '▁server', '▁ip', '▁,', '▁1701', '▁);', '\n', '▁if', '▁(', '▁server', '▁.', '▁is', '▁c', '▁public', '▁void', '▁search', '▁query', '▁id', '▁(', '▁string', '▁date', '▁)', '\n', '▁{', '\n\n', '▁pair', '▁vector', '▁=', '▁new', '▁vector', '▁();', '\n\n', '▁query', '▁string', '▁combo', '▁.', '▁remove', '▁all', '▁items', '▁();', '\n\n', '▁query', '▁string', '▁combo', '▁.', '▁add', '▁item', '▁(""', '""', '▁select', '▁query', '▁string', '▁""', '"");', '\n\n', '▁socket', '▁server', '▁;', '\n', '▁string', '▁line', '▁=', '▁new', '▁string', '▁();', '▁select', '▁actions', '▁public', '▁void', '▁action', '▁performed', '▁(', '▁action', '▁event', '▁e', '▁)', '\n', '▁{', '\n\n', '▁if', '▁(', '▁date', '▁combo', '▁==', '▁(', '▁j', 'com', 'bo', '▁box', '▁)', '▁e', '▁.', '▁get', '▁source', '▁()', ')', '\n', '▁{', '\n', '▁date', '▁=', '▁(', '▁string', '▁)', '▁date', '▁combo', '▁.', '▁get', '▁selected', '▁item', '▁();', '\n', '▁search', '▁query', '▁id', '▁(', '▁date', '▁);', '\n', '▁}', '\n', '▁}', '▁button', '▁actions', '▁public', '▁void', '▁action', '▁performed', '▁(', '▁action', '▁event', '▁e', '▁)', '▁{', '\n\n', '▁if', '▁(', '▁submit', '▁button', '▁==', '▁e', '▁.', '▁get', '▁source', '▁()', ')', '▁{', '\n\n', '▁for', '▁(', '▁int', '▁i', '▁=', '▁0', '▁;', '▁i', '▁<', '▁pair', '▁vector', '▁.', '▁size', '▁();', '▁i', '▁+', '+)', '▁{', '\n\n', '▁pair', '▁pair', '▁=', '▁(', '▁pair', '▁)', '▁pair', '▁vector', '▁.', '▁get', '▁(', '▁i', '▁);', '\n\n', '▁if', '▁(', '▁pair', '\n', '▁.', '▁get', '▁public', '▁void', '▁impact', '▁report', '▁(', '▁string', '▁id', '▁)', '\n', '▁{', '\n\n', '▁//', '▁super', '▁(""', '""', '▁impact', '▁report', '▁""', '"");', '\n\n', '▁container', '▁=', '▁get', '▁content', '▁pane', '▁();', '\n\n', '▁set', '▁size', '▁(', '▁1020', '▁,', '▁740', '▁);', '\n\n', '▁this', '▁.', '▁query', '▁id', '▁=', '▁id', '▁;', '\n\n', '▁system', '▁.', '▁out', '▁.', '▁print', 'ln', '▁(""', '""', '▁impact', '▁report', '▁constructor', '▁...', '..', '▁id', '▁""""', '▁+', '▁public', '▁vector', '▁get', '▁constraint', '▁from', '▁data', '▁base', '▁()', '\n', '▁{', '\n\n', '▁vector', '▁v', '▁=', '▁new', '▁vector', '▁();', '\n\n', '▁socket', '▁server', '▁;', '\n', '▁string', '▁line', '▁=', '▁new', '▁string', '▁();', '\n\n\n', '▁try', '\n', '▁{', '\n', '▁server', '▁=', '▁new', '▁socket', '▁(', '▁server', '▁ip', '▁,', '▁1701', '▁);', '\n\n', '▁if', '▁(', '▁server', '▁.', '▁is', '▁connected', '▁()', '▁)', '\n', '▁{', '\n', '▁buffered', '▁public', '▁vector', '▁get', '▁driver', '▁from', '▁data', '▁base', '▁()', '\n', '▁{', '\n\n', '▁vector', '▁v', '▁=', '▁new', '▁vector', '▁();', '\n\n', '▁socket', '▁server', '▁;', '\n', '▁string', '▁line', '▁=', '▁new', '▁string', '▁();', '\n\n\n', '▁try', '\n', '▁{', '\n', '▁server', '▁=', '▁new', '▁socket', '▁(', '▁server', '▁ip', '▁,', '▁1701', '▁);', '\n\n', '▁if', '▁(', '▁server', '▁.', '▁is', '▁connected', '▁()', '▁)', '\n', '▁{', '\n', '▁buffered', '""', '\n']"~impact report privat string server local host privat jpanel center panel null privat jpanel driver panel new jpanel privat jpanel driver inner panel null privat jpanel impact panel null privat jpanel impact inner public impact report super search result gui contain get content pane set size panel new jpanel panel set layout null server joption pane show public static void main string arg impact report new impact report public vector search date date vector new vector date vector add select queri date socket server string line new string tri server new socket server server public void search queri string date pair vector new vector queri string combo remov item queri string combo add item select queri string socket server string line new string select action public void action perform action event date combo jcombo box get sourc date string date combo get select item search queri date button action public void action perform action event submit button get sourc int pair vector size pair pair pair pair vector get pair get public void impact report string super impact report contain get content pane set size queri system println impact report constructor public vector get constraint data base vector new vector socket server string line new string tri server new socket server server connect buffer public vector get driver data base vector new vector socket server string line new string (); tri server new socket server 1701 server connect buffer
91~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/64.java~64.java~"64	""DOORs Thread Pool public final static int defaultPort = 2347;
 ServerSocket theServer;
 // static int numberOfThreads = 3; //@param argsNo arguments are used.
 public static void main(String args[])
 {

ThreadPool pool = new ThreadPool(1);

 int port = defaultPort;
 try
 {
 ServerSocket ss = new ServerSocket( port);
 for""
"~src~"['▁6', '4', '\t', '""', 'do', 'ors', '▁th', 'read', '▁pool', '▁public', '▁final', '▁st', 'atic', '▁int', '▁def', 'ault', 'port', '▁=', '▁23', '47', ';', '\n', '▁serv', 'ers', 'ock', 'et', '▁the', 'ser', 'ver', ';', '\n', '▁/', '/', '▁st', 'atic', '▁int', '▁number', 'of', 'th', 'read', 's', '▁=', '▁3', ';', '▁/', '/', '@', 'par', 'am', '▁arg', 's', 'no', '▁arg', 'uments', '▁are', '▁used', '.', '\n', '▁public', '▁st', 'atic', '▁vo', 'id', '▁main', '(', 'str', 'ing', '▁arg', 's', '[', ']', ')', '\n', '▁{', '\n\n', 'th', 'read', 'pool', '▁pool', '▁=', '▁new', '▁th', 'read', 'pool', '(', '1)', ';', '\n\n', '▁int', '▁port', '▁=', '▁def', 'ault', 'port', ';', '\n', '▁try', '\n', '▁{', '\n', '▁serv', 'ers', 'ock', 'et', '▁ss', '▁=', '▁new', '▁serv', 'ers', 'ock', 'et', '(', '▁port', ');', '\n', '▁for', '""', '\n']"~"['▁64', '\t', '""', 'doors', '▁thread', '▁pool', '▁public', '▁final', '▁static', '▁int', '▁default', 'port', '▁=', '▁23', '47', ';', '\n', '▁servers', 'ock', 'et', '▁the', 'ser', 'ver', ';', '\n', '▁//', '▁static', '▁int', '▁number', 'of', 'th', 'read', 's', '▁=', '▁3', ';', '▁//', '@', 'param', '▁arg', 's', 'no', '▁arguments', '▁are', '▁used', '.', '\n', '▁public', '▁static', '▁void', '▁main', '(', 'string', '▁arg', 's', '[', '])', '\n', '▁{', '\n\n', 'th', 'read', 'pool', '▁pool', '▁=', '▁new', '▁thread', 'pool', '(1)', ';', '\n\n', '▁int', '▁port', '▁=', '▁default', 'port', ';', '\n', '▁try', '\n', '▁{', '\n', '▁servers', 'ock', 'et', '▁ss', '▁=', '▁new', '▁servers', 'ock', 'et', '(', '▁port', ');', '\n', '▁for', '""', '\n']"~"['▁64', '\t', '""', 'doors', '▁thread', '▁pool', '▁public', '▁final', '▁static', '▁int', '▁default', 'port', '▁=', '▁23', '47', ';', '\n', '▁servers', 'ocket', '▁the', 'server', ';', '\n', '▁//', '▁static', '▁int', '▁number', 'of', 'th', 'reads', '▁=', '▁3;', '▁//', '@', 'param', '▁args', 'no', '▁arguments', '▁are', '▁used', '.', '\n', '▁public', '▁static', '▁void', '▁main', '(', 'string', '▁args', '[', '])', '\n', '▁{', '\n\n', 'thread', 'pool', '▁pool', '▁=', '▁new', '▁thread', 'pool', '(1)', ';', '\n\n', '▁int', '▁port', '▁=', '▁default', 'port', ';', '\n', '▁try', '\n', '▁{', '\n', '▁servers', 'ocket', '▁ss', '▁=', '▁new', '▁servers', 'ocket', '(', '▁port', ');', '\n', '▁for', '""', '\n']"~door thread pool public final static int default port server socket server static int number thread param arg argument use public static void main string arg thread pool pool new thread pool int port default port tri server socket new server socket port
92~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/61.java~61.java~"61	""Worker Thread /**
* True if this thread is currently processing.
 */
public boolean busy;
/**
 * The thread pool that this object belongs to.
 */
public ThreadPool owner; /**
 * The constructor.
 *
 * @param o the thread pool
 */
WorkerThread(ThreadPool o)
{
owner = o;
} /**
 * Scan for and execute tasks.
 */
public void run()
{
Runnable target = null;

do
{
target = owner. getAssignment();
if ( target!=null)
{
 target. run();
 owner. done. worker""
"~src~"['▁6', '1', '\t', '""', 'work', 'er', '▁th', 'read', '▁/', '*', '*', '\n', '*', '▁true', '▁if', '▁this', '▁th', 'read', '▁is', '▁currently', '▁process', 'ing', '.', '\n', '▁*', '/', '\n', 'publ', 'ic', '▁bo', 'ole', 'an', '▁bus', 'y', ';', '\n', '/', '*', '*', '\n', '▁*', '▁the', '▁th', 'read', '▁pool', '▁that', '▁this', '▁object', '▁belong', 's', '▁to', '.', '\n', '▁*', '/', '\n', 'publ', 'ic', '▁th', 'read', 'pool', '▁owner', ';', '▁/', '*', '*', '\n', '▁*', '▁the', '▁construct', 'or', '.', '\n', '▁*', '\n', '▁*', '▁', '@', 'par', 'am', '▁o', '▁the', '▁th', 'read', '▁pool', '\n', '▁*', '/', '\n', 'work', 'er', 'th', 'read', '(', 'th', 'read', 'pool', '▁o', ')', '\n', '{', '\n', 'own', 'er', '▁=', '▁o', ';', '\n', '}', '▁/', '*', '*', '\n', '▁*', '▁sc', 'an', '▁for', '▁and', '▁ex', 'ec', 'ute', '▁tas', 'ks', '.', '\n', '▁*', '/', '\n', 'publ', 'ic', '▁vo', 'id', '▁run', '(', ')', '\n', '{', '\n', 'run', 'n', 'able', '▁target', '▁=', '▁n', 'ull', ';', '\n\n', 'do', '\n', '{', '\n', 'tar', 'get', '▁=', '▁owner', '.', '▁get', 'ass', 'ign', 'ment', '(', ');', '\n', 'if', '▁(', '▁target', '!', '=', 'n', 'ull', ')', '\n', '{', '\n', '▁target', '.', '▁run', '(', ');', '\n', '▁owner', '.', '▁done', '.', '▁work', 'er', '""', '\n']"~"['▁61', '\t', '""', 'work', 'er', '▁thread', '▁/', '*', '*', '\n', '*', '▁true', '▁if', '▁this', '▁thread', '▁is', '▁currently', '▁processing', '.', '\n', '▁*', '/', '\n', 'public', '▁bo', 'olean', '▁busy', ';', '\n', '/', '*', '*', '\n', '▁*', '▁the', '▁thread', '▁pool', '▁that', '▁this', '▁object', '▁belongs', '▁to', '.', '\n', '▁*', '/', '\n', 'public', '▁thread', 'pool', '▁owner', ';', '▁/', '*', '*', '\n', '▁*', '▁the', '▁construct', 'or', '.', '\n', '▁*', '\n', '▁*', '▁', '@', 'param', '▁o', '▁the', '▁thread', '▁pool', '\n', '▁*', '/', '\n', 'work', 'er', 'th', 'read', '(', 'th', 'read', 'pool', '▁o', ')', '\n', '{', '\n', 'owner', '▁=', '▁o', ';', '\n', '}', '▁/', '*', '*', '\n', '▁*', '▁scan', '▁for', '▁and', '▁execute', '▁tasks', '.', '\n', '▁*', '/', '\n', 'public', '▁void', '▁run', '()', '\n', '{', '\n', 'run', 'n', 'able', '▁target', '▁=', '▁null', ';', '\n\n', 'do', '\n', '{', '\n', 'tar', 'get', '▁=', '▁owner', '.', '▁get', 'ass', 'ignment', '();', '\n', 'if', '▁(', '▁target', '!', '=', 'n', 'ull', ')', '\n', '{', '\n', '▁target', '.', '▁run', '();', '\n', '▁owner', '.', '▁done', '.', '▁worker', '""', '\n']"~"['▁61', '\t', '""', 'worker', '▁thread', '▁/', '**', '\n', '*', '▁true', '▁if', '▁this', '▁thread', '▁is', '▁currently', '▁processing', '.', '\n', '▁*/', '\n', 'public', '▁boolean', '▁busy', ';', '\n', '/', '**', '\n', '▁*', '▁the', '▁thread', '▁pool', '▁that', '▁this', '▁object', '▁belongs', '▁to', '.', '\n', '▁*/', '\n', 'public', '▁thread', 'pool', '▁owner', ';', '▁/', '**', '\n', '▁*', '▁the', '▁constructor', '.', '\n', '▁*', '\n', '▁*', '▁', '@', 'param', '▁o', '▁the', '▁thread', '▁pool', '\n', '▁*/', '\n', 'worker', 'thread', '(', 'thread', 'pool', '▁o', ')', '\n', '{', '\n', 'owner', '▁=', '▁o', ';', '\n', '}', '▁/', '**', '\n', '▁*', '▁scan', '▁for', '▁and', '▁execute', '▁tasks', '.', '\n', '▁*/', '\n', 'public', '▁void', '▁run', '()', '\n', '{', '\n', 'run', 'nable', '▁target', '▁=', '▁null', ';', '\n\n', 'do', '\n', '{', '\n', 'target', '▁=', '▁owner', '.', '▁get', 'ass', 'ignment', '();', '\n', 'if', '▁(', '▁target', '!', '=', 'null', ')', '\n', '{', '\n', '▁target', '.', '▁run', '();', '\n', '▁owner', '.', '▁done', '.', '▁worker', '""', '\n']"~worker thread true thread current process public boolean busi thread pool object belong public thread pool owner constructor param thread pool worker thread thread pool owner scan execut task public void run runnabl target null target owner get assign target null target run owner done worker
93~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/52.java~52.java~"52	""Pair private String queryID;
 private String queryString; public Pair(String queryID, String queryString) {

this. queryID = queryID;
this. queryString = queryString;

 } public String getQueryID() {
return this. queryID;
 } public String getQueryString() {
return this. queryString;
 } public void setQueryID(String queryID) {
this. queryID = queryID ;
 } public void setQueryString(String queryString) {
this. queryString = queryString;
 } public String toString(){


return """"Query ID: """"
+ this. queryID
+ """"\ n""""
+""""Query String : """"
+ this. queryString
+ """"\ n"""";


 }""
"~src~"['▁5', '2', '\t', '""', 'p', 'air', '▁private', '▁string', '▁qu', 'ery', 'id', ';', '\n', '▁private', '▁string', '▁qu', 'ery', 'str', 'ing', ';', '▁public', '▁pair', '(', 'str', 'ing', '▁qu', 'ery', 'id', ',', '▁string', '▁qu', 'ery', 'str', 'ing', ')', '▁{', '\n\n', 'this', '.', '▁qu', 'ery', 'id', '▁=', '▁qu', 'ery', 'id', ';', '\n', 'this', '.', '▁qu', 'ery', 'str', 'ing', '▁=', '▁qu', 'ery', 'str', 'ing', ';', '\n\n', '▁}', '▁public', '▁string', '▁get', 'qu', 'ery', 'id', '(', ')', '▁{', '\n', 'ret', 'urn', '▁this', '.', '▁qu', 'ery', 'id', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'qu', 'ery', 'str', 'ing', '(', ')', '▁{', '\n', 'ret', 'urn', '▁this', '.', '▁qu', 'ery', 'str', 'ing', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', 'qu', 'ery', 'id', '(', 'str', 'ing', '▁qu', 'ery', 'id', ')', '▁{', '\n', 'this', '.', '▁qu', 'ery', 'id', '▁=', '▁qu', 'ery', 'id', '▁;', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', 'qu', 'ery', 'str', 'ing', '(', 'str', 'ing', '▁qu', 'ery', 'str', 'ing', ')', '▁{', '\n', 'this', '.', '▁qu', 'ery', 'str', 'ing', '▁=', '▁qu', 'ery', 'str', 'ing', ';', '\n', '▁}', '▁public', '▁string', '▁to', 'str', 'ing', '(', ')', '{', '\n\n\n', 'ret', 'urn', '▁""', '""', 'qu', 'ery', '▁id', ':', '▁""', '""', '\n', '+', '▁this', '.', '▁qu', 'ery', 'id', '\n', '+', '▁""', '""', '\\', '▁n', '""', '""', '\n', '+', '""', '""', 'qu', 'ery', '▁string', '▁:', '▁""', '""', '\n', '+', '▁this', '.', '▁qu', 'ery', 'str', 'ing', '\n', '+', '▁""', '""', '\\', '▁n', '""', '""', ';', '\n\n\n', '▁}', '""', '\n']"~"['▁52', '\t', '""', 'p', 'air', '▁private', '▁string', '▁query', 'id', ';', '\n', '▁private', '▁string', '▁query', 'string', ';', '▁public', '▁pair', '(', 'string', '▁query', 'id', ',', '▁string', '▁query', 'string', ')', '▁{', '\n\n', 'this', '.', '▁query', 'id', '▁=', '▁query', 'id', ';', '\n', 'this', '.', '▁query', 'string', '▁=', '▁query', 'string', ';', '\n\n', '▁}', '▁public', '▁string', '▁get', 'qu', 'ery', 'id', '()', '▁{', '\n', 'return', '▁this', '.', '▁query', 'id', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'qu', 'ery', 'string', '()', '▁{', '\n', 'return', '▁this', '.', '▁query', 'string', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'qu', 'ery', 'id', '(', 'string', '▁query', 'id', ')', '▁{', '\n', 'this', '.', '▁query', 'id', '▁=', '▁query', 'id', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', 'qu', 'ery', 'string', '(', 'string', '▁query', 'string', ')', '▁{', '\n', 'this', '.', '▁query', 'string', '▁=', '▁query', 'string', ';', '\n', '▁}', '▁public', '▁string', '▁to', 'string', '()', '{', '\n\n\n', 'return', '▁""""', 'qu', 'ery', '▁id', ':', '▁""""', '\n', '+', '▁this', '.', '▁query', 'id', '\n', '+', '▁""""', '\\', '▁n', '""', '""', '\n', '+', '""', '""', 'qu', 'ery', '▁string', '▁:', '▁""""', '\n', '+', '▁this', '.', '▁query', 'string', '\n', '+', '▁""""', '\\', '▁n', '""', '"";', '\n\n\n', '▁}', '""', '\n']"~"['▁52', '\t', '""', 'pair', '▁private', '▁string', '▁query', 'id', ';', '\n', '▁private', '▁string', '▁query', 'string', ';', '▁public', '▁pair', '(', 'string', '▁query', 'id', ',', '▁string', '▁query', 'string', ')', '▁{', '\n\n', 'this', '.', '▁query', 'id', '▁=', '▁query', 'id', ';', '\n', 'this', '.', '▁query', 'string', '▁=', '▁query', 'string', ';', '\n\n', '▁}', '▁public', '▁string', '▁get', 'query', 'id', '()', '▁{', '\n', 'return', '▁this', '.', '▁query', 'id', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'query', 'string', '()', '▁{', '\n', 'return', '▁this', '.', '▁query', 'string', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'query', 'id', '(', 'string', '▁query', 'id', ')', '▁{', '\n', 'this', '.', '▁query', 'id', '▁=', '▁query', 'id', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', 'query', 'string', '(', 'string', '▁query', 'string', ')', '▁{', '\n', 'this', '.', '▁query', 'string', '▁=', '▁query', 'string', ';', '\n', '▁}', '▁public', '▁string', '▁to', 'string', '()', '{', '\n\n\n', 'return', '▁""""', 'query', '▁id', ':', '▁""""', '\n', '+', '▁this', '.', '▁query', 'id', '\n', '+', '▁""""', '\\', '▁n', '""""', '\n', '+', '""""', 'query', '▁string', '▁:', '▁""""', '\n', '+', '▁this', '.', '▁query', 'string', '\n', '+', '▁""""', '\\', '▁n', '""', '"";', '\n\n\n', '▁}', '""', '\n']"~pair privat string queri privat string queri string public pair string queri string queri string queri queri queri string queri string public string get queri return queri public string get queri string return queri string public void set queri string queri queri queri public void set queri string string queri string queri string queri string public string string return queri queri queri string queri string
94~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/69.java~69.java~"69	""Notification Event public String m_SubscriberName = """""""";
public String m_EventID = """""""";
public String m_Message type = """""""";
public String m_EventType = """""""";
public int m_NumberOfRequirements = 0;
public String m_EventTim public Notification_Event()
{
 m_LeftSide = new ArrayList();
 m_RightSide = new ArrayList();
} public Object clone() throws CloneNotSupportedException
 {

Notification_Event nEvt = (Notification_Event) super. clone();
 nEvt. m_LeftSide = new ArrayList();
 nEvt. m_RightSide = new ArrayLis public void ParseEvent(String TextLine)
 {

 StringTokenizer LineSt; // Tokenizer for the line

int i=0;

LineSt = new StringTokenizer(TextLine, """"|"""");

m_SubscriberName = LineSt. nextToken// Set the other members before calling this function

 public void ParseLeftAndRightLists(String LeftLine, String RightLine)
 {

m_LeftSide = new ArrayList();
 m_RightSide = new ArrayList();

if ( m_Eve public void DisplayValues()
{
 System. out. println(""""\ r\ nValues of the event:\ r\ n"""");
 System. out. println("""" m_SubscriberName: """"+ m_SubscriberName);
 System. out. println("""" m_EventI""
"~src~"['▁6', '9', '\t', '""', 'not', 'ification', '▁event', '▁public', '▁string', '▁m', '_', 'sub', 'sc', 'ri', 'ber', 'name', '▁=', '▁""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'ev', 'ent', 'id', '▁=', '▁""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'm', 'ess', 'age', '▁type', '▁=', '▁""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'ev', 'ent', 'type', '▁=', '▁""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁int', '▁m', '_', 'n', 'umber', 'of', 're', 'qu', 'ire', 'ments', '▁=', '▁0', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'ev', 'ent', 'tim', '▁public', '▁not', 'ification', '_', 'ev', 'ent', '(', ')', '\n', '{', '\n', '▁m', '_', 'le', 'f', 'ts', 'ide', '▁=', '▁new', '▁arr', 'ay', 'list', '(', ');', '\n', '▁m', '_', 'right', 'side', '▁=', '▁new', '▁arr', 'ay', 'list', '(', ');', '\n', '}', '▁public', '▁object', '▁cl', 'one', '(', ')', '▁thro', 'ws', '▁cl', 'on', 'en', 'ots', 'up', 'port', 'ed', 'ex', 'ception', '\n', '▁{', '\n\n', 'not', 'ification', '_', 'ev', 'ent', '▁nev', 't', '▁=', '▁(', 'not', 'ification', '_', 'ev', 'ent', ')', '▁super', '.', '▁cl', 'one', '(', ');', '\n', '▁nev', 't', '.', '▁m', '_', 'le', 'f', 'ts', 'ide', '▁=', '▁new', '▁arr', 'ay', 'list', '(', ');', '\n', '▁nev', 't', '.', '▁m', '_', 'right', 'side', '▁=', '▁new', '▁arr', 'ay', 'l', 'is', '▁public', '▁vo', 'id', '▁par', 'se', 'ev', 'ent', '(', 'str', 'ing', '▁text', 'line', ')', '\n', '▁{', '\n\n', '▁string', 't', 'ok', 'en', 'iz', 'er', '▁lin', 'est', ';', '▁/', '/', '▁to', 'ken', 'iz', 'er', '▁for', '▁the', '▁line', '\n\n', 'int', '▁i', '=', '0', ';', '\n\n', 'lin', 'est', '▁=', '▁new', '▁string', 't', 'ok', 'en', 'iz', 'er', '(', 'text', 'line', ',', '▁""', '""|', '""', '"")', ';', '\n\n', 'm', '_', 'sub', 'sc', 'ri', 'ber', 'name', '▁=', '▁lin', 'est', '.', '▁next', 't', 'ok', 'en', '//', '▁set', '▁the', '▁other', '▁members', '▁before', '▁calling', '▁this', '▁function', '\n\n', '▁public', '▁vo', 'id', '▁par', 'se', 'left', 'and', 'right', 'l', 'ists', '(', 'str', 'ing', '▁left', 'line', ',', '▁string', '▁right', 'line', ')', '\n', '▁{', '\n\n', 'm', '_', 'le', 'f', 'ts', 'ide', '▁=', '▁new', '▁arr', 'ay', 'list', '(', ');', '\n', '▁m', '_', 'right', 'side', '▁=', '▁new', '▁arr', 'ay', 'list', '(', ');', '\n\n', 'if', '▁(', '▁m', '_', 'e', 've', '▁public', '▁vo', 'id', '▁display', 'val', 'ues', '(', ')', '\n', '{', '\n', '▁system', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '\\', '▁r', '\\', '▁n', 'val', 'ues', '▁of', '▁the', '▁event', ':', '\\', '▁r', '\\', '▁n', '""', '"")', ';', '\n', '▁system', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '▁m', '_', 'sub', 'sc', 'ri', 'ber', 'name', ':', '▁""', '""', '+', '▁m', '_', 'sub', 'sc', 'ri', 'ber', 'name', ');', '\n', '▁system', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '▁m', '_', 'ev', 'ent', 'i', '""', '\n']"~"['▁69', '\t', '""', 'not', 'ification', '▁event', '▁public', '▁string', '▁m', '_', 'sub', 'sc', 'ri', 'ber', 'name', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'event', 'id', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'mess', 'age', '▁type', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'event', 'type', '▁=', '▁""""""', '"";', '\n', 'public', '▁int', '▁m', '_', 'number', 'of', 'requ', 'ire', 'ments', '▁=', '▁0', ';', '\n', 'public', '▁string', '▁m', '_', 'event', 'tim', '▁public', '▁not', 'ification', '_', 'event', '()', '\n', '{', '\n', '▁m', '_', 'le', 'fts', 'ide', '▁=', '▁new', '▁array', 'list', '();', '\n', '▁m', '_', 'right', 'side', '▁=', '▁new', '▁array', 'list', '();', '\n', '}', '▁public', '▁object', '▁clone', '()', '▁throws', '▁clon', 'en', 'ots', 'up', 'ported', 'exception', '\n', '▁{', '\n\n', 'not', 'ification', '_', 'event', '▁nev', 't', '▁=', '▁(', 'not', 'ification', '_', 'event', ')', '▁super', '.', '▁clone', '();', '\n', '▁nev', 't', '.', '▁m', '_', 'le', 'fts', 'ide', '▁=', '▁new', '▁array', 'list', '();', '\n', '▁nev', 't', '.', '▁m', '_', 'right', 'side', '▁=', '▁new', '▁array', 'lis', '▁public', '▁void', '▁par', 'se', 'event', '(', 'string', '▁text', 'line', ')', '\n', '▁{', '\n\n', '▁string', 'tok', 'en', 'izer', '▁lin', 'est', ';', '▁//', '▁token', 'izer', '▁for', '▁the', '▁line', '\n\n', 'int', '▁i', '=0', ';', '\n\n', 'lin', 'est', '▁=', '▁new', '▁string', 'tok', 'en', 'izer', '(', 'text', 'line', ',', '▁""', '""|', '""', '"");', '\n\n', 'm', '_', 'sub', 'sc', 'ri', 'ber', 'name', '▁=', '▁lin', 'est', '.', '▁next', 'tok', 'en', '//', '▁set', '▁the', '▁other', '▁members', '▁before', '▁calling', '▁this', '▁function', '\n\n', '▁public', '▁void', '▁par', 'se', 'left', 'and', 'right', 'lists', '(', 'string', '▁left', 'line', ',', '▁string', '▁right', 'line', ')', '\n', '▁{', '\n\n', 'm', '_', 'le', 'fts', 'ide', '▁=', '▁new', '▁array', 'list', '();', '\n', '▁m', '_', 'right', 'side', '▁=', '▁new', '▁array', 'list', '();', '\n\n', 'if', '▁(', '▁m', '_', 'e', 've', '▁public', '▁void', '▁display', 'val', 'ues', '()', '\n', '{', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁r', '\\', '▁n', 'val', 'ues', '▁of', '▁the', '▁event', ':', '\\', '▁r', '\\', '▁n', '""', '"");', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '▁m', '_', 'sub', 'sc', 'ri', 'ber', 'name', ':', '▁""""', '+', '▁m', '_', 'sub', 'sc', 'ri', 'ber', 'name', ');', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '▁m', '_', 'event', 'i', '""', '\n']"~"['▁69', '\t', '""', 'not', 'ification', '▁event', '▁public', '▁string', '▁m', '_', 'subsc', 'riber', 'name', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'event', 'id', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'message', '▁type', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'event', 'type', '▁=', '▁""""""', '"";', '\n', 'public', '▁int', '▁m', '_', 'number', 'of', 'require', 'ments', '▁=', '▁0;', '\n', 'public', '▁string', '▁m', '_', 'event', 'tim', '▁public', '▁notification', '_', 'event', '()', '\n', '{', '\n', '▁m', '_', 'le', 'fts', 'ide', '▁=', '▁new', '▁arraylist', '();', '\n', '▁m', '_', 'right', 'side', '▁=', '▁new', '▁arraylist', '();', '\n', '}', '▁public', '▁object', '▁clone', '()', '▁throws', '▁clon', 'en', 'ots', 'up', 'ported', 'exception', '\n', '▁{', '\n\n', 'not', 'ification', '_', 'event', '▁nev', 't', '▁=', '▁(', 'not', 'ification', '_', 'event', ')', '▁super', '.', '▁clone', '();', '\n', '▁nev', 't', '.', '▁m', '_', 'le', 'fts', 'ide', '▁=', '▁new', '▁arraylist', '();', '\n', '▁nev', 't', '.', '▁m', '_', 'right', 'side', '▁=', '▁new', '▁array', 'lis', '▁public', '▁void', '▁parse', 'event', '(', 'string', '▁text', 'line', ')', '\n', '▁{', '\n\n', '▁string', 'token', 'izer', '▁lin', 'est', ';', '▁//', '▁token', 'izer', '▁for', '▁the', '▁line', '\n\n', 'int', '▁i', '=0;', '\n\n', 'lin', 'est', '▁=', '▁new', '▁string', 'token', 'izer', '(', 'text', 'line', ',', '▁""', '""|', '"""");', '\n\n', 'm', '_', 'subsc', 'riber', 'name', '▁=', '▁lin', 'est', '.', '▁next', 'token', '//', '▁set', '▁the', '▁other', '▁members', '▁before', '▁calling', '▁this', '▁function', '\n\n', '▁public', '▁void', '▁parse', 'left', 'and', 'right', 'lists', '(', 'string', '▁left', 'line', ',', '▁string', '▁right', 'line', ')', '\n', '▁{', '\n\n', 'm', '_', 'le', 'fts', 'ide', '▁=', '▁new', '▁arraylist', '();', '\n', '▁m', '_', 'right', 'side', '▁=', '▁new', '▁arraylist', '();', '\n\n', 'if', '▁(', '▁m', '_', 'eve', '▁public', '▁void', '▁display', 'values', '()', '\n', '{', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁r', '\\', '▁n', 'values', '▁of', '▁the', '▁event', ':', '\\', '▁r', '\\', '▁n', '"""");', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '▁m', '_', 'subsc', 'riber', 'name', ':', '▁""""', '+', '▁m', '_', 'subsc', 'riber', 'name', ');', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '▁m', '_', 'event', 'i', '""', '\n']"~notif event public string subscrib name public string event public string messag type public string event type public int number requir public string event tim public notif event left side new array list right side new array list public object clone throw clone support except notif event evt notif event super clone evt left side new array list evt right side new array lis public void pars event string text line string token line token line int line new string token text line subscrib name line next token set member call function public void pars left right list string left line string right line left side new array list right side new array list eve public void display valu system println valu event system println subscrib name subscrib name system println event
95~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/77.java~77.java~"77	""Model Driver String msg=""""""""; public ModelDriver(String text)
 {
this. msg = text;
init();
 } public void init()
 {

System. out. println(""""MODEL DRIVER CLASS 1/10"""");
performance modelHandler pmh = new performance modelHandler( msg);
System. out. println(""""MODEL DRIVER CLASS 2/10"""");
 pmh. messageParser""
"~src~"['▁7', '7', '\t', '""', 'mod', 'el', '▁driver', '▁string', '▁ms', 'g', '=""', '""', '""', '""', ';', '▁public', '▁model', 'dr', 'iver', '(', 'str', 'ing', '▁text', ')', '\n', '▁{', '\n', 'this', '.', '▁ms', 'g', '▁=', '▁text', ';', '\n', 'in', 'it', '(', ');', '\n', '▁}', '▁public', '▁vo', 'id', '▁init', '(', ')', '\n', '▁{', '\n\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'mod', 'el', '▁driver', '▁class', '▁1', '/', '10', '""', '"")', ';', '\n', 'per', 'for', 'man', 'ce', '▁model', 'hand', 'ler', '▁p', 'm', 'h', '▁=', '▁new', '▁performance', '▁model', 'hand', 'ler', '(', '▁ms', 'g', ');', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'mod', 'el', '▁driver', '▁class', '▁2', '/', '10', '""', '"")', ';', '\n', '▁p', 'm', 'h', '.', '▁message', 'p', 'ars', 'er', '""', '\n']"~"['▁77', '\t', '""', 'model', '▁driver', '▁string', '▁ms', 'g', '=""', '""', '""', '"";', '▁public', '▁model', 'dr', 'iver', '(', 'string', '▁text', ')', '\n', '▁{', '\n', 'this', '.', '▁ms', 'g', '▁=', '▁text', ';', '\n', 'init', '();', '\n', '▁}', '▁public', '▁void', '▁init', '()', '\n', '▁{', '\n\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'model', '▁driver', '▁class', '▁1', '/10', '""', '"");', '\n', 'performance', '▁model', 'hand', 'ler', '▁pm', 'h', '▁=', '▁new', '▁performance', '▁model', 'hand', 'ler', '(', '▁ms', 'g', ');', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'model', '▁driver', '▁class', '▁2', '/10', '""', '"");', '\n', '▁pm', 'h', '.', '▁message', 'p', 'ars', 'er', '""', '\n']"~"['▁77', '\t', '""', 'model', '▁driver', '▁string', '▁msg', '=""', '""""', '"";', '▁public', '▁model', 'driver', '(', 'string', '▁text', ')', '\n', '▁{', '\n', 'this', '.', '▁msg', '▁=', '▁text', ';', '\n', 'init', '();', '\n', '▁}', '▁public', '▁void', '▁init', '()', '\n', '▁{', '\n\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'model', '▁driver', '▁class', '▁1/10', '"""");', '\n', 'performance', '▁model', 'handler', '▁pm', 'h', '▁=', '▁new', '▁performance', '▁model', 'handler', '(', '▁msg', ');', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'model', '▁driver', '▁class', '▁2/10', '"""");', '\n', '▁pm', 'h', '.', '▁message', 'parser', '""', '\n']"~model driver string msg public model driver string text msg text init public void init system println model driver class perform model handler pmh new perform model handler msg system println model driver class pmh messag parser
96~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/91.java~91.java~"91	""Modify Model public ModifyModel(EBT em)
{
super( em);
 } // Construct Visual model for Merge Event
public void BuildEvent()
{
 ClearVectors();
AddEventRect(60,80,1);
CurrentEvent = 4;
} public StringBuffer GenerateEvent()
{
StringBuffer thisEvent = new StringBuffer();
thisEvent. append(""""Modify|0|"""");
thisEvent. append( new Date(). toString()+ """"|"""");
 ebs = (EBShape)EventShapes protected void paintComponent(Graphics g)
{
g. drawString(""""TESTING MODIFY"""",5,5);
super. paintComponent( g);
 }""
"~src~"['▁9', '1', '\t', '""', 'mod', 'ify', '▁model', '▁public', '▁mod', 'if', 'ym', 'od', 'el', '(', 'e', 'b', 't', '▁em', ')', '\n', '{', '\n', 'sup', 'er', '(', '▁em', ');', '\n', '▁}', '▁/', '/', '▁construct', '▁visual', '▁model', '▁for', '▁mer', 'ge', '▁event', '\n', 'publ', 'ic', '▁vo', 'id', '▁build', 'ev', 'ent', '(', ')', '\n', '{', '\n', '▁clear', 'v', 'ect', 'ors', '(', ');', '\n', 'ad', 'de', 'vent', 'rect', '(', '6', '0,', '8', '0,', '1)', ';', '\n', 'cur', 'ren', 'te', 'vent', '▁=', '▁4', ';', '\n', '}', '▁public', '▁string', 'b', 'uf', 'fer', '▁gener', 'ate', 'ev', 'ent', '(', ')', '\n', '{', '\n', 'str', 'ing', 'b', 'uf', 'fer', '▁this', 'ev', 'ent', '▁=', '▁new', '▁string', 'b', 'uf', 'fer', '(', ');', '\n', 'th', 'ise', 'vent', '.', '▁app', 'end', '(', '""', '""', 'mod', 'ify', '|', '0', '|', '""', '"")', ';', '\n', 'th', 'ise', 'vent', '.', '▁app', 'end', '(', '▁new', '▁date', '(', ').', '▁to', 'str', 'ing', '(', ')', '+', '▁""', '""|', '""', '"")', ';', '\n', '▁e', 'bs', '▁=', '▁(', 'e', 'b', 'sh', 'ape', ')', 'ev', 'ents', 'h', 'apes', '▁protected', '▁vo', 'id', '▁paint', 'com', 'pon', 'ent', '(', 'gr', 'aph', 'ics', '▁g', ')', '\n', '{', '\n', 'g', '.', '▁draw', 'str', 'ing', '(', '""', '""', 't', 'est', 'ing', '▁mod', 'ify', '""', '"",', '5,', '5)', ';', '\n', 'sup', 'er', '.', '▁paint', 'com', 'pon', 'ent', '(', '▁g', ');', '\n', '▁}', '""', '\n']"~"['▁91', '\t', '""', 'mod', 'ify', '▁model', '▁public', '▁mod', 'if', 'ym', 'od', 'el', '(', 'eb', 't', '▁em', ')', '\n', '{', '\n', 'super', '(', '▁em', ');', '\n', '▁}', '▁//', '▁construct', '▁visual', '▁model', '▁for', '▁merge', '▁event', '\n', 'public', '▁void', '▁build', 'event', '()', '\n', '{', '\n', '▁clear', 'v', 'ectors', '();', '\n', 'ad', 'de', 'vent', 'rect', '(', '6', '0,', '8', '0,', '1)', ';', '\n', 'cur', 'ren', 'te', 'vent', '▁=', '▁4', ';', '\n', '}', '▁public', '▁string', 'b', 'uffer', '▁generate', 'event', '()', '\n', '{', '\n', 'string', 'b', 'uffer', '▁this', 'event', '▁=', '▁new', '▁string', 'b', 'uffer', '();', '\n', 'th', 'ise', 'vent', '.', '▁append', '(""', '""', 'mod', 'ify', '|', '0', '|', '""', '"");', '\n', 'th', 'ise', 'vent', '.', '▁append', '(', '▁new', '▁date', '().', '▁to', 'string', '()', '+', '▁""', '""|', '""', '"");', '\n', '▁e', 'bs', '▁=', '▁(', 'eb', 'shape', ')', 'ev', 'ents', 'h', 'apes', '▁protected', '▁void', '▁paint', 'com', 'ponent', '(', 'graph', 'ics', '▁g', ')', '\n', '{', '\n', 'g', '.', '▁draw', 'string', '(""', '""', 'test', 'ing', '▁modify', '""', '"",', '5,', '5)', ';', '\n', 'super', '.', '▁paint', 'com', 'ponent', '(', '▁g', ');', '\n', '▁}', '""', '\n']"~"['▁91', '\t', '""', 'mod', 'ify', '▁model', '▁public', '▁mod', 'if', 'ym', 'odel', '(', 'eb', 't', '▁em', ')', '\n', '{', '\n', 'super', '(', '▁em', ');', '\n', '▁}', '▁//', '▁construct', '▁visual', '▁model', '▁for', '▁merge', '▁event', '\n', 'public', '▁void', '▁build', 'event', '()', '\n', '{', '\n', '▁clear', 'v', 'ectors', '();', '\n', 'ad', 'de', 'vent', 'rect', '(6', '0,', '80,', '1);', '\n', 'cur', 'rente', 'vent', '▁=', '▁4;', '\n', '}', '▁public', '▁string', 'buffer', '▁generate', 'event', '()', '\n', '{', '\n', 'string', 'buffer', '▁this', 'event', '▁=', '▁new', '▁string', 'buffer', '();', '\n', 'th', 'ise', 'vent', '.', '▁append', '(""', '""', 'mod', 'ify', '|0', '|', '"""");', '\n', 'th', 'ise', 'vent', '.', '▁append', '(', '▁new', '▁date', '().', '▁to', 'string', '()', '+', '▁""', '""|', '"""");', '\n', '▁ebs', '▁=', '▁(', 'eb', 'shape', ')', 'events', 'h', 'apes', '▁protected', '▁void', '▁paint', 'component', '(', 'graphics', '▁g', ')', '\n', '{', '\n', 'g', '.', '▁draw', 'string', '(""', '""', 'testing', '▁modify', '""', '"",', '5,', '5);', '\n', 'super', '.', '▁paint', 'component', '(', '▁g', ');', '\n', '▁}', '""', '\n']"~modifi model public modifi model ebt super construct visual model merg event public void build event clear vector add event rect current event public string buffer generat event string buffer event new string buffer event append modifi event append new date string ebshap event shape protect void paint compon graphic draw string test modifi super paint compon
97~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/59.java~59.java~"59	""Done /**
* The number of Worker object
* threads that are currently working
* on something.
*/
 private int _ activeThreads = 0;

 /**
* This boolean keeps track of if
* the very first thread has started
* or not. This prevents this objec /**
* This method can be called to block
* the current thread until the ThreadPool
* is done.
*/

 synchronized public void waitDone()
 {
try {
 while ( _ activeThreads>0 ) {
wait();
 }
} catch ( InterruptedException/**
* Called to wait for the first thread to
* start. Once this method returns the
* process has begun.
*/

 synchronized public void waitBegin()
 {
try {
 while ( !_ started ) {
wait();
 }
} catch ( InterruptedException e/**
* Called by a Worker object
* to indicate that it has begun
* working on a workload.
*/
 synchronized public void workerBegin()
 {
_ activeThreads++;
_ started = true;
notify();
 } /**
* Called by a Worker object to
* indicate that it has completed a
* workload.
*/
 synchronized public void workerEnd()
 {
_ activeThreads--;
notify();
 } /**
* Called to reset this object to
* its initial state.
*/
 synchronized public void reset()
 {
_ activeThreads = 0;
 }""
"~src~"['▁5', '9', '\t', '""', 'd', 'one', '▁/', '*', '*', '\n', '*', '▁the', '▁number', '▁of', '▁work', 'er', '▁object', '\n', '*', '▁th', 'read', 's', '▁that', '▁are', '▁currently', '▁working', '\n', '*', '▁on', '▁something', '.', '\n', '*', '/', '\n', '▁private', '▁int', '▁', '_', '▁activ', 'eth', 'read', 's', '▁=', '▁0', ';', '\n\n', '▁/', '*', '*', '\n', '*', '▁this', '▁bo', 'ole', 'an', '▁keep', 's', '▁track', '▁of', '▁if', '\n', '*', '▁the', '▁very', '▁first', '▁th', 'read', '▁has', '▁started', '\n', '*', '▁or', '▁not', '.', '▁this', '▁prev', 'ents', '▁this', '▁ob', 'j', 'ec', '▁/', '*', '*', '\n', '*', '▁this', '▁method', '▁can', '▁be', '▁called', '▁to', '▁block', '\n', '*', '▁the', '▁current', '▁th', 'read', '▁until', '▁the', '▁th', 'read', 'pool', '\n', '*', '▁is', '▁done', '.', '\n', '*', '/', '\n\n', '▁syn', 'ch', 'ron', 'ized', '▁public', '▁vo', 'id', '▁wa', 'it', 'd', 'one', '(', ')', '\n', '▁{', '\n', 't', 'ry', '▁{', '\n', '▁while', '▁(', '▁', '_', '▁activ', 'eth', 'read', 's', '>', '0', '▁)', '▁{', '\n', 'wa', 'it', '(', ');', '\n', '▁}', '\n', '}', '▁catch', '▁(', '▁inter', 'rup', 'ted', 'ex', 'ception', '/', '*', '*', '\n', '*', '▁called', '▁to', '▁wa', 'it', '▁for', '▁the', '▁first', '▁th', 'read', '▁to', '\n', '*', '▁start', '.', '▁once', '▁this', '▁method', '▁returns', '▁the', '\n', '*', '▁process', '▁has', '▁beg', 'un', '.', '\n', '*', '/', '\n\n', '▁syn', 'ch', 'ron', 'ized', '▁public', '▁vo', 'id', '▁wa', 'it', 'be', 'gin', '(', ')', '\n', '▁{', '\n', 't', 'ry', '▁{', '\n', '▁while', '▁(', '▁!', '_', '▁started', '▁)', '▁{', '\n', 'wa', 'it', '(', ');', '\n', '▁}', '\n', '}', '▁catch', '▁(', '▁inter', 'rup', 'ted', 'ex', 'ception', '▁e', '/', '*', '*', '\n', '*', '▁called', '▁by', '▁a', '▁work', 'er', '▁object', '\n', '*', '▁to', '▁indicate', '▁that', '▁it', '▁has', '▁beg', 'un', '\n', '*', '▁working', '▁on', '▁a', '▁work', 'load', '.', '\n', '*', '/', '\n', '▁syn', 'ch', 'ron', 'ized', '▁public', '▁vo', 'id', '▁work', 'er', 'be', 'gin', '(', ')', '\n', '▁{', '\n', '_', '▁activ', 'eth', 'read', 's', '+', '+', ';', '\n', '_', '▁started', '▁=', '▁true', ';', '\n', 'not', 'ify', '(', ');', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁called', '▁by', '▁a', '▁work', 'er', '▁object', '▁to', '\n', '*', '▁indicate', '▁that', '▁it', '▁has', '▁completed', '▁a', '\n', '*', '▁work', 'load', '.', '\n', '*', '/', '\n', '▁syn', 'ch', 'ron', 'ized', '▁public', '▁vo', 'id', '▁work', 'er', 'end', '(', ')', '\n', '▁{', '\n', '_', '▁activ', 'eth', 'read', 's', '-', '-', ';', '\n', 'not', 'ify', '(', ');', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁called', '▁to', '▁res', 'et', '▁this', '▁object', '▁to', '\n', '*', '▁its', '▁initial', '▁state', '.', '\n', '*', '/', '\n', '▁syn', 'ch', 'ron', 'ized', '▁public', '▁vo', 'id', '▁res', 'et', '(', ')', '\n', '▁{', '\n', '_', '▁activ', 'eth', 'read', 's', '▁=', '▁0', ';', '\n', '▁}', '""', '\n']"~"['▁59', '\t', '""', 'd', 'one', '▁/', '*', '*', '\n', '*', '▁the', '▁number', '▁of', '▁worker', '▁object', '\n', '*', '▁threads', '▁that', '▁are', '▁currently', '▁working', '\n', '*', '▁on', '▁something', '.', '\n', '*', '/', '\n', '▁private', '▁int', '▁_', '▁activ', 'eth', 'read', 's', '▁=', '▁0', ';', '\n\n', '▁/', '*', '*', '\n', '*', '▁this', '▁bo', 'olean', '▁keeps', '▁track', '▁of', '▁if', '\n', '*', '▁the', '▁very', '▁first', '▁thread', '▁has', '▁started', '\n', '*', '▁or', '▁not', '.', '▁this', '▁prevents', '▁this', '▁ob', 'j', 'ec', '▁/', '*', '*', '\n', '*', '▁this', '▁method', '▁can', '▁be', '▁called', '▁to', '▁block', '\n', '*', '▁the', '▁current', '▁thread', '▁until', '▁the', '▁thread', 'pool', '\n', '*', '▁is', '▁done', '.', '\n', '*', '/', '\n\n', '▁synchronized', '▁public', '▁void', '▁wait', 'd', 'one', '()', '\n', '▁{', '\n', 'try', '▁{', '\n', '▁while', '▁(', '▁_', '▁activ', 'eth', 'read', 's', '>', '0', '▁)', '▁{', '\n', 'wait', '();', '\n', '▁}', '\n', '}', '▁catch', '▁(', '▁interrupted', 'exception', '/', '*', '*', '\n', '*', '▁called', '▁to', '▁wait', '▁for', '▁the', '▁first', '▁thread', '▁to', '\n', '*', '▁start', '.', '▁once', '▁this', '▁method', '▁returns', '▁the', '\n', '*', '▁process', '▁has', '▁begun', '.', '\n', '*', '/', '\n\n', '▁synchronized', '▁public', '▁void', '▁wait', 'be', 'gin', '()', '\n', '▁{', '\n', 'try', '▁{', '\n', '▁while', '▁(', '▁!', '_', '▁started', '▁)', '▁{', '\n', 'wait', '();', '\n', '▁}', '\n', '}', '▁catch', '▁(', '▁interrupted', 'exception', '▁e', '/', '*', '*', '\n', '*', '▁called', '▁by', '▁a', '▁worker', '▁object', '\n', '*', '▁to', '▁indicate', '▁that', '▁it', '▁has', '▁begun', '\n', '*', '▁working', '▁on', '▁a', '▁work', 'load', '.', '\n', '*', '/', '\n', '▁synchronized', '▁public', '▁void', '▁worker', 'be', 'gin', '()', '\n', '▁{', '\n', '_', '▁activ', 'eth', 'read', 's', '++', ';', '\n', '_', '▁started', '▁=', '▁true', ';', '\n', 'not', 'ify', '();', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁called', '▁by', '▁a', '▁worker', '▁object', '▁to', '\n', '*', '▁indicate', '▁that', '▁it', '▁has', '▁completed', '▁a', '\n', '*', '▁work', 'load', '.', '\n', '*', '/', '\n', '▁synchronized', '▁public', '▁void', '▁worker', 'end', '()', '\n', '▁{', '\n', '_', '▁activ', 'eth', 'read', 's', '--', ';', '\n', 'not', 'ify', '();', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁called', '▁to', '▁res', 'et', '▁this', '▁object', '▁to', '\n', '*', '▁its', '▁initial', '▁state', '.', '\n', '*', '/', '\n', '▁synchronized', '▁public', '▁void', '▁res', 'et', '()', '\n', '▁{', '\n', '_', '▁activ', 'eth', 'read', 's', '▁=', '▁0', ';', '\n', '▁}', '""', '\n']"~"['▁59', '\t', '""', 'done', '▁/', '**', '\n', '*', '▁the', '▁number', '▁of', '▁worker', '▁object', '\n', '*', '▁threads', '▁that', '▁are', '▁currently', '▁working', '\n', '*', '▁on', '▁something', '.', '\n', '*', '/', '\n', '▁private', '▁int', '▁_', '▁activ', 'eth', 'reads', '▁=', '▁0;', '\n\n', '▁/', '**', '\n', '*', '▁this', '▁boolean', '▁keeps', '▁track', '▁of', '▁if', '\n', '*', '▁the', '▁very', '▁first', '▁thread', '▁has', '▁started', '\n', '*', '▁or', '▁not', '.', '▁this', '▁prevents', '▁this', '▁ob', 'j', 'ec', '▁/', '**', '\n', '*', '▁this', '▁method', '▁can', '▁be', '▁called', '▁to', '▁block', '\n', '*', '▁the', '▁current', '▁thread', '▁until', '▁the', '▁thread', 'pool', '\n', '*', '▁is', '▁done', '.', '\n', '*', '/', '\n\n', '▁synchronized', '▁public', '▁void', '▁wait', 'done', '()', '\n', '▁{', '\n', 'try', '▁{', '\n', '▁while', '▁(', '▁_', '▁activ', 'eth', 'reads', '>', '0', '▁)', '▁{', '\n', 'wait', '();', '\n', '▁}', '\n', '}', '▁catch', '▁(', '▁interrupted', 'exception', '/', '**', '\n', '*', '▁called', '▁to', '▁wait', '▁for', '▁the', '▁first', '▁thread', '▁to', '\n', '*', '▁start', '.', '▁once', '▁this', '▁method', '▁returns', '▁the', '\n', '*', '▁process', '▁has', '▁begun', '.', '\n', '*', '/', '\n\n', '▁synchronized', '▁public', '▁void', '▁wait', 'begin', '()', '\n', '▁{', '\n', 'try', '▁{', '\n', '▁while', '▁(', '▁!', '_', '▁started', '▁)', '▁{', '\n', 'wait', '();', '\n', '▁}', '\n', '}', '▁catch', '▁(', '▁interrupted', 'exception', '▁e', '/', '**', '\n', '*', '▁called', '▁by', '▁a', '▁worker', '▁object', '\n', '*', '▁to', '▁indicate', '▁that', '▁it', '▁has', '▁begun', '\n', '*', '▁working', '▁on', '▁a', '▁workload', '.', '\n', '*', '/', '\n', '▁synchronized', '▁public', '▁void', '▁worker', 'begin', '()', '\n', '▁{', '\n', '_', '▁activ', 'eth', 'reads', '++;', '\n', '_', '▁started', '▁=', '▁true', ';', '\n', 'not', 'ify', '();', '\n', '▁}', '▁/', '**', '\n', '*', '▁called', '▁by', '▁a', '▁worker', '▁object', '▁to', '\n', '*', '▁indicate', '▁that', '▁it', '▁has', '▁completed', '▁a', '\n', '*', '▁workload', '.', '\n', '*', '/', '\n', '▁synchronized', '▁public', '▁void', '▁worker', 'end', '()', '\n', '▁{', '\n', '_', '▁activ', 'eth', 'reads', '--', ';', '\n', 'not', 'ify', '();', '\n', '▁}', '▁/', '**', '\n', '*', '▁called', '▁to', '▁reset', '▁this', '▁object', '▁to', '\n', '*', '▁its', '▁initial', '▁state', '.', '\n', '*', '/', '\n', '▁synchronized', '▁public', '▁void', '▁reset', '()', '\n', '▁{', '\n', '_', '▁activ', 'eth', 'reads', '▁=', '▁0;', '\n', '▁}', '""', '\n']"~done number worker object thread current work someth privat int activ thread boolean keep track first thread start prevent objec method call block current thread thread pool done synchron public void wait done tri activ thread wait catch interrupt except call wait first thread start method return process begun synchron public void wait begin tri start wait catch interrupt except call worker object indic begun work workload synchron public void worker begin activ thread start true notifi call worker object indic complet workload synchron public void worker end activ thread notifi call reset object initi state synchron public void reset activ thread
98~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/75.java~75.java~"75	""Driver String id;
 double valueFrom;
 double valueTo;
 String name; Driver(String id, double valueFrom, double valueTo, String name)
 {
this. id = id;
this. valueFrom = valueFrom;
this. valueTo = valueTo;
this. name = name;
 } public String toString()
 {
String temp;
temp = """"ID = """" + id + """", valueFrom = """" + valueFrom + """", valueTo = """" + valueTo + """", Name = """" + name;
return temp;
 } /**
* Returns the id.
* @return int
*/
 public String getId()
 {
return id;
 } /**
* Returns the name.
* @return String
*/
 public String getName()
 {
return name;
 } /**
* Returns the value.
* @return double
*/
 public double getValueFrom()
 {
return valueFrom;
 } public double getValueTo()
 {
return valueTo;
 } /**
* Sets the id.
* @param id The id to set
*/
 public void setId(String id)
 {
this. id = id;
 } **
* Sets the name.
* @param name The name to set
*/
 public void setName(String name)
 {
this. name = name;
 } **
* Sets the value.
* @param value The value to set
*/
 public void setValueFrom( double value)
 {
this. valueFrom = valueFrom;
 } public void setValueTo( double value)
 {
this. valueTo = valueTo;
 }""
"~src~"['▁7', '5', '\t', '""', 'dr', 'iver', '▁string', '▁id', ';', '\n', '▁double', '▁value', 'from', ';', '\n', '▁double', '▁val', 'u', 'et', 'o', ';', '\n', '▁string', '▁name', ';', '▁driver', '(', 'str', 'ing', '▁id', ',', '▁double', '▁value', 'from', ',', '▁double', '▁val', 'u', 'et', 'o', ',', '▁string', '▁name', ')', '\n', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', 'this', '.', '▁value', 'from', '▁=', '▁value', 'from', ';', '\n', 'this', '.', '▁val', 'u', 'et', 'o', '▁=', '▁val', 'u', 'et', 'o', ';', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', '▁}', '▁public', '▁string', '▁to', 'str', 'ing', '(', ')', '\n', '▁{', '\n', 'str', 'ing', '▁tem', 'p', ';', '\n', 't', 'em', 'p', '▁=', '▁""', '""', 'id', '▁=', '▁""', '""', '▁+', '▁id', '▁+', '▁""', '"",', '▁value', 'from', '▁=', '▁""', '""', '▁+', '▁value', 'from', '▁+', '▁""', '"",', '▁val', 'u', 'et', 'o', '▁=', '▁""', '""', '▁+', '▁val', 'u', 'et', 'o', '▁+', '▁""', '"",', '▁name', '▁=', '▁""', '""', '▁+', '▁name', ';', '\n', 'ret', 'urn', '▁tem', 'p', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'ret', 'urn', '▁int', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'id', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁id', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'ret', 'urn', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'name', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁name', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'ret', 'urn', '▁double', '\n', '*', '/', '\n', '▁public', '▁double', '▁get', 'value', 'from', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁value', 'from', ';', '\n', '▁}', '▁public', '▁double', '▁get', 'val', 'u', 'et', 'o', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁val', 'u', 'et', 'o', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'par', 'am', '▁id', '▁the', '▁id', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁set', 'id', '(', 'str', 'ing', '▁id', ')', '\n', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', '▁}', '▁*', '*', '\n', '*', '▁sets', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'par', 'am', '▁name', '▁the', '▁name', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁set', 'name', '(', 'str', 'ing', '▁name', ')', '\n', '▁{', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', '▁}', '▁*', '*', '\n', '*', '▁sets', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'par', 'am', '▁value', '▁the', '▁value', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁set', 'value', 'from', '(', '▁double', '▁value', ')', '\n', '▁{', '\n', 'this', '.', '▁value', 'from', '▁=', '▁value', 'from', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', 'val', 'u', 'et', 'o', '(', '▁double', '▁value', ')', '\n', '▁{', '\n', 'this', '.', '▁val', 'u', 'et', 'o', '▁=', '▁val', 'u', 'et', 'o', ';', '\n', '▁}', '""', '\n']"~"['▁75', '\t', '""', 'dr', 'iver', '▁string', '▁id', ';', '\n', '▁double', '▁value', 'from', ';', '\n', '▁double', '▁val', 'u', 'eto', ';', '\n', '▁string', '▁name', ';', '▁driver', '(', 'string', '▁id', ',', '▁double', '▁value', 'from', ',', '▁double', '▁val', 'u', 'eto', ',', '▁string', '▁name', ')', '\n', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', 'this', '.', '▁value', 'from', '▁=', '▁value', 'from', ';', '\n', 'this', '.', '▁val', 'u', 'eto', '▁=', '▁val', 'u', 'eto', ';', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', '▁}', '▁public', '▁string', '▁to', 'string', '()', '\n', '▁{', '\n', 'string', '▁temp', ';', '\n', 'tem', 'p', '▁=', '▁""""', 'id', '▁=', '▁""""', '▁+', '▁id', '▁+', '▁""', '"",', '▁value', 'from', '▁=', '▁""""', '▁+', '▁value', 'from', '▁+', '▁""', '"",', '▁val', 'u', 'eto', '▁=', '▁""""', '▁+', '▁val', 'u', 'eto', '▁+', '▁""', '"",', '▁name', '▁=', '▁""""', '▁+', '▁name', ';', '\n', 'return', '▁temp', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'return', '▁int', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'id', '()', '\n', '▁{', '\n', 'return', '▁id', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'return', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'name', '()', '\n', '▁{', '\n', 'return', '▁name', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'return', '▁double', '\n', '*', '/', '\n', '▁public', '▁double', '▁get', 'value', 'from', '()', '\n', '▁{', '\n', 'return', '▁value', 'from', ';', '\n', '▁}', '▁public', '▁double', '▁get', 'val', 'u', 'eto', '()', '\n', '▁{', '\n', 'return', '▁val', 'u', 'eto', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'param', '▁id', '▁the', '▁id', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'id', '(', 'string', '▁id', ')', '\n', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', '▁}', '▁**', '\n', '*', '▁sets', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'param', '▁name', '▁the', '▁name', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'name', '(', 'string', '▁name', ')', '\n', '▁{', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', '▁}', '▁**', '\n', '*', '▁sets', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'param', '▁value', '▁the', '▁value', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'value', 'from', '(', '▁double', '▁value', ')', '\n', '▁{', '\n', 'this', '.', '▁value', 'from', '▁=', '▁value', 'from', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'val', 'u', 'eto', '(', '▁double', '▁value', ')', '\n', '▁{', '\n', 'this', '.', '▁val', 'u', 'eto', '▁=', '▁val', 'u', 'eto', ';', '\n', '▁}', '""', '\n']"~"['▁75', '\t', '""', 'driver', '▁string', '▁id', ';', '\n', '▁double', '▁value', 'from', ';', '\n', '▁double', '▁valu', 'eto', ';', '\n', '▁string', '▁name', ';', '▁driver', '(', 'string', '▁id', ',', '▁double', '▁value', 'from', ',', '▁double', '▁valu', 'eto', ',', '▁string', '▁name', ')', '\n', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', 'this', '.', '▁value', 'from', '▁=', '▁value', 'from', ';', '\n', 'this', '.', '▁valu', 'eto', '▁=', '▁valu', 'eto', ';', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', '▁}', '▁public', '▁string', '▁to', 'string', '()', '\n', '▁{', '\n', 'string', '▁temp', ';', '\n', 'tem', 'p', '▁=', '▁""""', 'id', '▁=', '▁""""', '▁+', '▁id', '▁+', '▁"""",', '▁value', 'from', '▁=', '▁""""', '▁+', '▁value', 'from', '▁+', '▁"""",', '▁valu', 'eto', '▁=', '▁""""', '▁+', '▁valu', 'eto', '▁+', '▁"""",', '▁name', '▁=', '▁""""', '▁+', '▁name', ';', '\n', 'return', '▁temp', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁returns', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'return', '▁int', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'id', '()', '\n', '▁{', '\n', 'return', '▁id', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁returns', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'return', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'name', '()', '\n', '▁{', '\n', 'return', '▁name', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁returns', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'return', '▁double', '\n', '*', '/', '\n', '▁public', '▁double', '▁get', 'value', 'from', '()', '\n', '▁{', '\n', 'return', '▁value', 'from', ';', '\n', '▁}', '▁public', '▁double', '▁get', 'valu', 'eto', '()', '\n', '▁{', '\n', 'return', '▁valu', 'eto', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁sets', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'param', '▁id', '▁the', '▁id', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'id', '(', 'string', '▁id', ')', '\n', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', '▁}', '▁**', '\n', '*', '▁sets', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'param', '▁name', '▁the', '▁name', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'name', '(', 'string', '▁name', ')', '\n', '▁{', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', '▁}', '▁**', '\n', '*', '▁sets', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'param', '▁value', '▁the', '▁value', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'value', 'from', '(', '▁double', '▁value', ')', '\n', '▁{', '\n', 'this', '.', '▁value', 'from', '▁=', '▁value', 'from', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'valu', 'eto', '(', '▁double', '▁value', ')', '\n', '▁{', '\n', 'this', '.', '▁valu', 'eto', '▁=', '▁valu', 'eto', ';', '\n', '▁}', '""', '\n']"~driver string doubl valu doubl valu string name driver string doubl valu doubl valu string name valu valu valu valu name name public string string string temp temp valu valu valu valu name name return temp return return int public string get return return name return string public string get name return name return valu return doubl public doubl get valu return valu public doubl get valu return valu set param set public void set string set name param name name set public void set name string name name name set valu param valu valu set public void set valu doubl valu valu valu public void set valu doubl valu valu valu
99~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/87.java~87.java~"87	""EBTprivate JSplitPane splitPane;
private JSplitPane splitPane2;
private Frame FrameParent;
private JPanel MenuPanel;
private TextModel WorkArea;
private EventModel VisualPanel;
private MergeModel M public EBT(Frame f)
{

FrameParent = f;
CurrentEvent = -1;

this. serverIP =
 JOptionPane
. showInputDialog(""""Please Enter the IP Address of eventserver"""")
. trim();

 // Set up JList Selection wid public void getrequirement Text(EBShape sh)
{
WorkArea. showText( sh);
 } public boolean mouseDown( java. awt.Evente, int x, int y)
 {
 return true;
 }public boolean mouseUp( java. awt.Evente, int x, int y)
{
return true;
 } public void mouseClicked( java. awt. event.MouseEvente)
{
VisualPanel.Clicked( e. getX(), e. getY());
} public void mouseExited( java. awt. event.MouseEvente){} public void mousePressed( java. awt. event.MouseEvente){} public void mouseReleased( java. awt. event.MouseEvente){}public void mouseEntered( java. awt. event.MouseEvente){} public void paint(Graphics g) {} public void update(Graphics g) {} public JSplitPane getSplitPane()
{
return splitPane;
} public void valueChanged(ListSelectionEvent e)
{
if ( e. getValueIsAdjusting())
return;
} private class ValueReporter implements ListSelectionListener
{

public void valueChanged(ListSelectionEvent event)
{
 if (! event. getValueIsAdjusting())
 {
switch(EventList. getSelectedIndex())
public void RedrawAll(EBShape sh)
{
VisualPanel. drawModel( sh);
VisualPanel.CheckNotifyStatus();
} public static void main(String s[])
{
JFrame mainframe = new JFrame(""""Trigger an Event Notification"""");

mainframe. addWindowListener( new WindowAdapter()
{
public void windowClosing(Wind""
"~src~"['▁8', '7', '\t', '""', 'e', 'b', 't', 'pr', 'iv', 'ate', '▁j', 's', 'pl', 'it', 'p', 'ane', '▁split', 'p', 'ane', ';', '\n', 'pr', 'iv', 'ate', '▁j', 's', 'pl', 'it', 'p', 'ane', '▁split', 'p', 'ane', '2', ';', '\n', 'pr', 'iv', 'ate', '▁frame', '▁frame', 'p', 'arent', ';', '\n', 'pr', 'iv', 'ate', '▁j', 'pan', 'el', '▁men', 'up', 'an', 'el', ';', '\n', 'pr', 'iv', 'ate', '▁text', 'mod', 'el', '▁work', 'are', 'a', ';', '\n', 'pr', 'iv', 'ate', '▁event', 'mod', 'el', '▁visual', 'pan', 'el', ';', '\n', 'pr', 'iv', 'ate', '▁mer', 'g', 'em', 'od', 'el', '▁m', '▁public', '▁e', 'b', 't', '(', 'fr', 'ame', '▁f', ')', '\n', '{', '\n\n', 'fr', 'ame', 'p', 'arent', '▁=', '▁f', ';', '\n', 'cur', 'ren', 'te', 'vent', '▁=', '▁-', '1', ';', '\n\n', 'this', '.', '▁ser', 'ver', 'ip', '▁=', '\n', '▁j', 'op', 't', 'ion', 'p', 'ane', '\n', '.', '▁show', 'in', 'put', 'd', 'ial', 'og', '(', '""', '""', 'ple', 'ase', '▁enter', '▁the', '▁ip', '▁address', '▁of', '▁events', 'er', 'ver', '""', '"")', '\n', '.', '▁tr', 'im', '(', ');', '\n\n', '▁/', '/', '▁set', '▁up', '▁j', 'list', '▁selection', '▁wid', '▁public', '▁vo', 'id', '▁get', 're', 'qu', 'ire', 'ment', '▁text', '(', 'e', 'b', 'sh', 'ape', '▁sh', ')', '\n', '{', '\n', 'work', 'are', 'a', '.', '▁show', 'text', '(', '▁sh', ');', '\n', '▁}', '▁public', '▁bo', 'ole', 'an', '▁m', 'ous', 'ed', 'own', '(', '▁j', 'ava', '.', '▁aw', 't', '.', 'ev', 'ent', 'e', ',', '▁int', '▁x', ',', '▁int', '▁y', ')', '\n', '▁{', '\n', '▁return', '▁true', ';', '\n', '▁}', 'publ', 'ic', '▁bo', 'ole', 'an', '▁m', 'ouse', 'up', '(', '▁j', 'ava', '.', '▁aw', 't', '.', 'ev', 'ent', 'e', ',', '▁int', '▁x', ',', '▁int', '▁y', ')', '\n', '{', '\n', 'ret', 'urn', '▁true', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁m', 'ous', 'ec', 'l', 'ick', 'ed', '(', '▁j', 'ava', '.', '▁aw', 't', '.', '▁event', '.', 'm', 'ous', 'ee', 'vent', 'e', ')', '\n', '{', '\n', 'vis', 'ual', 'pan', 'el', '.', 'cl', 'ick', 'ed', '(', '▁e', '.', '▁get', 'x', '(', '),', '▁e', '.', '▁g', 'ety', '(', ')', ');', '\n', '}', '▁public', '▁vo', 'id', '▁m', 'ouse', 'ex', 'ited', '(', '▁j', 'ava', '.', '▁aw', 't', '.', '▁event', '.', 'm', 'ous', 'ee', 'vent', 'e', ')', '{', '}', '▁public', '▁vo', 'id', '▁m', 'ous', 'ep', 'ressed', '(', '▁j', 'ava', '.', '▁aw', 't', '.', '▁event', '.', 'm', 'ous', 'ee', 'vent', 'e', ')', '{', '}', '▁public', '▁vo', 'id', '▁m', 'ous', 'ere', 'le', 'ased', '(', '▁j', 'ava', '.', '▁aw', 't', '.', '▁event', '.', 'm', 'ous', 'ee', 'vent', 'e', ')', '{', '}', 'publ', 'ic', '▁vo', 'id', '▁m', 'ouse', 'ent', 'ered', '(', '▁j', 'ava', '.', '▁aw', 't', '.', '▁event', '.', 'm', 'ous', 'ee', 'vent', 'e', ')', '{', '}', '▁public', '▁vo', 'id', '▁paint', '(', 'gr', 'aph', 'ics', '▁g', ')', '▁{', '}', '▁public', '▁vo', 'id', '▁upd', 'ate', '(', 'gr', 'aph', 'ics', '▁g', ')', '▁{', '}', '▁public', '▁j', 's', 'pl', 'it', 'p', 'ane', '▁gets', 'pl', 'it', 'p', 'ane', '(', ')', '\n', '{', '\n', 'ret', 'urn', '▁split', 'p', 'ane', ';', '\n', '}', '▁public', '▁vo', 'id', '▁val', 'u', 'ech', 'anged', '(', 'list', 'se', 'lect', 'ion', 'ev', 'ent', '▁e', ')', '\n', '{', '\n', 'if', '▁(', '▁e', '.', '▁get', 'value', 'is', 'ad', 'j', 'ust', 'ing', '(', ')', ')', '\n', 'ret', 'urn', ';', '\n', '}', '▁private', '▁class', '▁val', 'u', 'ere', 'por', 'ter', '▁imp', 'le', 'ments', '▁list', 'se', 'lect', 'ion', 'list', 'en', 'er', '\n', '{', '\n\n', 'publ', 'ic', '▁vo', 'id', '▁val', 'u', 'ech', 'anged', '(', 'list', 'se', 'lect', 'ion', 'ev', 'ent', '▁event', ')', '\n', '{', '\n', '▁if', '▁(', '!', '▁event', '.', '▁get', 'value', 'is', 'ad', 'j', 'ust', 'ing', '(', ')', ')', '\n', '▁{', '\n', 'sw', 'itch', '(', 'ev', 'ent', 'list', '.', '▁get', 'se', 'lect', 'ed', 'ind', 'ex', '(', ')', ')', '\n', 'publ', 'ic', '▁vo', 'id', '▁red', 'raw', 'all', '(', 'e', 'b', 'sh', 'ape', '▁sh', ')', '\n', '{', '\n', 'vis', 'ual', 'pan', 'el', '.', '▁draw', 'mod', 'el', '(', '▁sh', ');', '\n', 'vis', 'ual', 'pan', 'el', '.', 'che', 'ck', 'not', 'ify', 'st', 'atus', '(', ');', '\n', '}', '▁public', '▁st', 'atic', '▁vo', 'id', '▁main', '(', 'str', 'ing', '▁s', '[', ']', ')', '\n', '{', '\n', 'j', 'fr', 'ame', '▁main', 'fr', 'ame', '▁=', '▁new', '▁j', 'fr', 'ame', '(', '""', '""', 'tr', 'ig', 'ger', '▁an', '▁event', '▁not', 'ification', '""', '"")', ';', '\n\n', 'm', 'ain', 'fr', 'ame', '.', '▁add', 'w', 'ind', 'ow', 'list', 'en', 'er', '(', '▁new', '▁window', 'ad', 'ap', 'ter', '(', ')', '\n', '{', '\n', 'publ', 'ic', '▁vo', 'id', '▁window', 'cl', 'os', 'ing', '(', 'w', 'ind', '""', '\n']"~"['▁87', '\t', '""', 'eb', 't', 'private', '▁j', 'split', 'p', 'ane', '▁split', 'p', 'ane', ';', '\n', 'private', '▁j', 'split', 'p', 'ane', '▁split', 'p', 'ane', '2', ';', '\n', 'private', '▁frame', '▁frame', 'p', 'arent', ';', '\n', 'private', '▁j', 'pan', 'el', '▁men', 'up', 'an', 'el', ';', '\n', 'private', '▁text', 'model', '▁work', 'area', ';', '\n', 'private', '▁event', 'model', '▁visual', 'pan', 'el', ';', '\n', 'private', '▁mer', 'gem', 'od', 'el', '▁m', '▁public', '▁eb', 't', '(', 'frame', '▁f', ')', '\n', '{', '\n\n', 'frame', 'p', 'arent', '▁=', '▁f', ';', '\n', 'cur', 'ren', 'te', 'vent', '▁=', '▁-', '1', ';', '\n\n', 'this', '.', '▁server', 'ip', '▁=', '\n', '▁j', 'opt', 'ion', 'p', 'ane', '\n', '.', '▁show', 'in', 'put', 'd', 'ial', 'og', '(""', '""', 'ple', 'ase', '▁enter', '▁the', '▁ip', '▁address', '▁of', '▁events', 'erver', '""', '"")', '\n', '.', '▁trim', '();', '\n\n', '▁//', '▁set', '▁up', '▁j', 'list', '▁selection', '▁wid', '▁public', '▁void', '▁get', 'requ', 'ire', 'ment', '▁text', '(', 'eb', 'shape', '▁sh', ')', '\n', '{', '\n', 'work', 'area', '.', '▁show', 'text', '(', '▁sh', ');', '\n', '▁}', '▁public', '▁bo', 'olean', '▁mous', 'ed', 'own', '(', '▁java', '.', '▁aw', 't', '.', 'ev', 'ente', ',', '▁int', '▁x', ',', '▁int', '▁y', ')', '\n', '▁{', '\n', '▁return', '▁true', ';', '\n', '▁}', 'public', '▁bo', 'olean', '▁mouse', 'up', '(', '▁java', '.', '▁aw', 't', '.', 'ev', 'ente', ',', '▁int', '▁x', ',', '▁int', '▁y', ')', '\n', '{', '\n', 'return', '▁true', ';', '\n', '▁}', '▁public', '▁void', '▁mous', 'ec', 'l', 'ick', 'ed', '(', '▁java', '.', '▁aw', 't', '.', '▁event', '.', 'm', 'ous', 'ee', 'vent', 'e', ')', '\n', '{', '\n', 'vis', 'ual', 'pan', 'el', '.', 'cl', 'ick', 'ed', '(', '▁e', '.', '▁get', 'x', '(', '),', '▁e', '.', '▁g', 'ety', '());', '\n', '}', '▁public', '▁void', '▁mouse', 'ex', 'ited', '(', '▁java', '.', '▁aw', 't', '.', '▁event', '.', 'm', 'ous', 'ee', 'vent', 'e', ')', '{', '}', '▁public', '▁void', '▁mous', 'ep', 'ressed', '(', '▁java', '.', '▁aw', 't', '.', '▁event', '.', 'm', 'ous', 'ee', 'vent', 'e', ')', '{', '}', '▁public', '▁void', '▁mous', 'ere', 'le', 'ased', '(', '▁java', '.', '▁aw', 't', '.', '▁event', '.', 'm', 'ous', 'ee', 'vent', 'e', ')', '{', '}', 'public', '▁void', '▁mouse', 'ent', 'ered', '(', '▁java', '.', '▁aw', 't', '.', '▁event', '.', 'm', 'ous', 'ee', 'vent', 'e', ')', '{', '}', '▁public', '▁void', '▁paint', '(', 'graph', 'ics', '▁g', ')', '▁{', '}', '▁public', '▁void', '▁update', '(', 'graph', 'ics', '▁g', ')', '▁{', '}', '▁public', '▁j', 'split', 'p', 'ane', '▁gets', 'pl', 'it', 'p', 'ane', '()', '\n', '{', '\n', 'return', '▁split', 'p', 'ane', ';', '\n', '}', '▁public', '▁void', '▁val', 'u', 'ech', 'anged', '(', 'list', 'se', 'lection', 'event', '▁e', ')', '\n', '{', '\n', 'if', '▁(', '▁e', '.', '▁get', 'value', 'is', 'ad', 'just', 'ing', '())', '\n', 'return', ';', '\n', '}', '▁private', '▁class', '▁val', 'u', 'ere', 'porter', '▁imp', 'lements', '▁list', 'se', 'lection', 'list', 'ener', '\n', '{', '\n\n', 'public', '▁void', '▁val', 'u', 'ech', 'anged', '(', 'list', 'se', 'lection', 'event', '▁event', ')', '\n', '{', '\n', '▁if', '▁(', '!', '▁event', '.', '▁get', 'value', 'is', 'ad', 'just', 'ing', '())', '\n', '▁{', '\n', 'sw', 'itch', '(', 'event', 'list', '.', '▁get', 'se', 'lected', 'index', '())', '\n', 'public', '▁void', '▁red', 'raw', 'all', '(', 'eb', 'shape', '▁sh', ')', '\n', '{', '\n', 'vis', 'ual', 'pan', 'el', '.', '▁draw', 'model', '(', '▁sh', ');', '\n', 'vis', 'ual', 'pan', 'el', '.', 'check', 'not', 'ify', 'st', 'atus', '();', '\n', '}', '▁public', '▁static', '▁void', '▁main', '(', 'string', '▁s', '[', '])', '\n', '{', '\n', 'j', 'frame', '▁main', 'frame', '▁=', '▁new', '▁j', 'frame', '(""', '""', 'tr', 'ig', 'ger', '▁an', '▁event', '▁not', 'ification', '""', '"");', '\n\n', 'main', 'frame', '.', '▁add', 'wind', 'ow', 'list', 'ener', '(', '▁new', '▁window', 'ad', 'ap', 'ter', '()', '\n', '{', '\n', 'public', '▁void', '▁window', 'cl', 'osing', '(', 'wind', '""', '\n']"~"['▁87', '\t', '""', 'eb', 't', 'private', '▁j', 'split', 'pane', '▁split', 'pane', ';', '\n', 'private', '▁j', 'split', 'pane', '▁split', 'pane', '2;', '\n', 'private', '▁frame', '▁frame', 'parent', ';', '\n', 'private', '▁j', 'panel', '▁men', 'upan', 'el', ';', '\n', 'private', '▁text', 'model', '▁work', 'area', ';', '\n', 'private', '▁event', 'model', '▁visual', 'panel', ';', '\n', 'private', '▁mer', 'gem', 'odel', '▁m', '▁public', '▁eb', 't', '(', 'frame', '▁f', ')', '\n', '{', '\n\n', 'frame', 'parent', '▁=', '▁f', ';', '\n', 'cur', 'rente', 'vent', '▁=', '▁-', '1;', '\n\n', 'this', '.', '▁server', 'ip', '▁=', '\n', '▁j', 'option', 'pane', '\n', '.', '▁show', 'input', 'dial', 'og', '(""', '""', 'please', '▁enter', '▁the', '▁ip', '▁address', '▁of', '▁events', 'erver', '""', '"")', '\n', '.', '▁trim', '();', '\n\n', '▁//', '▁set', '▁up', '▁j', 'list', '▁selection', '▁wid', '▁public', '▁void', '▁get', 'require', 'ment', '▁text', '(', 'eb', 'shape', '▁sh', ')', '\n', '{', '\n', 'work', 'area', '.', '▁show', 'text', '(', '▁sh', ');', '\n', '▁}', '▁public', '▁boolean', '▁mous', 'ed', 'own', '(', '▁java', '.', '▁aw', 't', '.', 'ev', 'ente', ',', '▁int', '▁x', ',', '▁int', '▁y', ')', '\n', '▁{', '\n', '▁return', '▁true', ';', '\n', '▁}', 'public', '▁boolean', '▁mouse', 'up', '(', '▁java', '.', '▁aw', 't', '.', 'ev', 'ente', ',', '▁int', '▁x', ',', '▁int', '▁y', ')', '\n', '{', '\n', 'return', '▁true', ';', '\n', '▁}', '▁public', '▁void', '▁mous', 'ec', 'lick', 'ed', '(', '▁java', '.', '▁aw', 't', '.', '▁event', '.', 'mous', 'ee', 'vent', 'e', ')', '\n', '{', '\n', 'visual', 'panel', '.', 'click', 'ed', '(', '▁e', '.', '▁get', 'x', '(),', '▁e', '.', '▁g', 'ety', '());', '\n', '}', '▁public', '▁void', '▁mouse', 'ex', 'ited', '(', '▁java', '.', '▁aw', 't', '.', '▁event', '.', 'mous', 'ee', 'vent', 'e', ')', '{}', '▁public', '▁void', '▁mous', 'ep', 'ressed', '(', '▁java', '.', '▁aw', 't', '.', '▁event', '.', 'mous', 'ee', 'vent', 'e', ')', '{}', '▁public', '▁void', '▁mous', 'ere', 'leased', '(', '▁java', '.', '▁aw', 't', '.', '▁event', '.', 'mous', 'ee', 'vent', 'e', ')', '{}', 'public', '▁void', '▁mouse', 'entered', '(', '▁java', '.', '▁aw', 't', '.', '▁event', '.', 'mous', 'ee', 'vent', 'e', ')', '{}', '▁public', '▁void', '▁paint', '(', 'graphics', '▁g', ')', '▁{}', '▁public', '▁void', '▁update', '(', 'graphics', '▁g', ')', '▁{}', '▁public', '▁j', 'split', 'pane', '▁gets', 'pl', 'it', 'pane', '()', '\n', '{', '\n', 'return', '▁split', 'pane', ';', '\n', '}', '▁public', '▁void', '▁valu', 'ech', 'anged', '(', 'list', 'selection', 'event', '▁e', ')', '\n', '{', '\n', 'if', '▁(', '▁e', '.', '▁get', 'value', 'is', 'adjust', 'ing', '())', '\n', 'return', ';', '\n', '}', '▁private', '▁class', '▁valu', 'ere', 'porter', '▁implements', '▁list', 'selection', 'listener', '\n', '{', '\n\n', 'public', '▁void', '▁valu', 'ech', 'anged', '(', 'list', 'selection', 'event', '▁event', ')', '\n', '{', '\n', '▁if', '▁(!', '▁event', '.', '▁get', 'value', 'is', 'adjust', 'ing', '())', '\n', '▁{', '\n', 'switch', '(', 'event', 'list', '.', '▁get', 'selected', 'index', '())', '\n', 'public', '▁void', '▁redraw', 'all', '(', 'eb', 'shape', '▁sh', ')', '\n', '{', '\n', 'visual', 'panel', '.', '▁draw', 'model', '(', '▁sh', ');', '\n', 'visual', 'panel', '.', 'check', 'not', 'ify', 'status', '();', '\n', '}', '▁public', '▁static', '▁void', '▁main', '(', 'string', '▁s', '[', '])', '\n', '{', '\n', 'j', 'frame', '▁mainframe', '▁=', '▁new', '▁j', 'frame', '(""', '""', 'trigger', '▁an', '▁event', '▁notification', '"""");', '\n\n', 'main', 'frame', '.', '▁add', 'window', 'listener', '(', '▁new', '▁window', 'adap', 'ter', '()', '\n', '{', '\n', 'public', '▁void', '▁window', 'closing', '(', 'wind', '""', '\n']"~ebtpriv jsplit pane split pane privat jsplit pane split pane privat frame frame parent privat jpanel menu panel privat text model work area privat event model visual panel privat merg model public ebt frame frame parent current event server joption pane show input dialog pleas enter address eventserv trim set jlist select wid public void getrequir text ebshap work area show text public boolean mous java awt event int int return true public boolean mous java awt event int int return true public void mous click java awt event mous event visual panel click get get public void mous exit java awt event mous event public void mous press java awt event mous event public void mous releas java awt event mous event public void mous enter java awt event mous event public void paint graphic public void updat graphic public jsplit pane get split pane return split pane public void valu chang list select event get valu adjust return privat class valu report implement list select listen public void valu chang list select event event event get valu adjust switch event list get select index public void redraw ebshap visual panel draw model visual panel check notifi status public static void main string jframe mainfram new jframe trigger event notif mainfram add window listen new window adapt public void window close wind
100~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/86.java~86.java~"86	""EB Shape private int x, y;
 private String requirement No;
 private String ProjectName, ModulePath;
private Color c; public EBShape( int xpos, int ypos, Color col)
 {
x = xpos;
y = ypos;
c = col;
requirement No = """""""";
ProjectName = """""""";
ModulePath = """""""";
 } public void Updaterequirement Info(String rno, String pname, String mname)
 {
requirement No = rno. trim();
ProjectName = pname. trim();
ModulePath = mname. trim();
 } public boolean match( int mx, int my)
 {
return true;

 } public int GetX()
 {
return x;
 } public int GetY()
 {
return y;
 } public Color GetC()
{
return c;
 } public String GetReqno()
 {
return requirement No;
 } public String GetProject()
 {
return ProjectName;
 } public String GetModule()
 {
return ModulePath;
 }""
"~src~"['▁8', '6', '\t', '""', 'e', 'b', '▁shape', '▁private', '▁int', '▁x', ',', '▁y', ';', '\n', '▁private', '▁string', '▁require', 'ment', '▁no', ';', '\n', '▁private', '▁string', '▁project', 'name', ',', '▁mod', 'ule', 'p', 'ath', ';', '\n', 'pr', 'iv', 'ate', '▁color', '▁c', ';', '▁public', '▁e', 'b', 'sh', 'ape', '(', '▁int', '▁x', 'pos', ',', '▁int', '▁y', 'pos', ',', '▁color', '▁col', ')', '\n', '▁{', '\n', 'x', '▁=', '▁x', 'pos', ';', '\n', 'y', '▁=', '▁y', 'pos', ';', '\n', 'c', '▁=', '▁col', ';', '\n', 're', 'qu', 'ire', 'ment', '▁no', '▁=', '▁""', '""', '""', '""', ';', '\n', 'pro', 'ject', 'name', '▁=', '▁""', '""', '""', '""', ';', '\n', 'mod', 'ule', 'p', 'ath', '▁=', '▁""', '""', '""', '""', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁upd', 'at', 'ere', 'qu', 'ire', 'ment', '▁inf', 'o', '(', 'str', 'ing', '▁r', 'no', ',', '▁string', '▁p', 'name', ',', '▁string', '▁m', 'name', ')', '\n', '▁{', '\n', 're', 'qu', 'ire', 'ment', '▁no', '▁=', '▁r', 'no', '.', '▁tr', 'im', '(', ');', '\n', 'pro', 'ject', 'name', '▁=', '▁p', 'name', '.', '▁tr', 'im', '(', ');', '\n', 'mod', 'ule', 'p', 'ath', '▁=', '▁m', 'name', '.', '▁tr', 'im', '(', ');', '\n', '▁}', '▁public', '▁bo', 'ole', 'an', '▁match', '(', '▁int', '▁m', 'x', ',', '▁int', '▁my', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁true', ';', '\n\n', '▁}', '▁public', '▁int', '▁get', 'x', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁x', ';', '\n', '▁}', '▁public', '▁int', '▁g', 'ety', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁y', ';', '\n', '▁}', '▁public', '▁color', '▁get', 'c', '(', ')', '\n', '{', '\n', 'ret', 'urn', '▁c', ';', '\n', '▁}', '▁public', '▁string', '▁get', 're', 'q', 'no', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁require', 'ment', '▁no', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'pro', 'ject', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁project', 'name', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'mod', 'ule', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁mod', 'ule', 'p', 'ath', ';', '\n', '▁}', '""', '\n']"~"['▁86', '\t', '""', 'eb', '▁shape', '▁private', '▁int', '▁x', ',', '▁y', ';', '\n', '▁private', '▁string', '▁requirement', '▁no', ';', '\n', '▁private', '▁string', '▁project', 'name', ',', '▁module', 'path', ';', '\n', 'private', '▁color', '▁c', ';', '▁public', '▁eb', 'shape', '(', '▁int', '▁x', 'pos', ',', '▁int', '▁y', 'pos', ',', '▁color', '▁col', ')', '\n', '▁{', '\n', 'x', '▁=', '▁x', 'pos', ';', '\n', 'y', '▁=', '▁y', 'pos', ';', '\n', 'c', '▁=', '▁col', ';', '\n', 'requ', 'ire', 'ment', '▁no', '▁=', '▁""""""', '"";', '\n', 'project', 'name', '▁=', '▁""""""', '"";', '\n', 'mod', 'ule', 'path', '▁=', '▁""""""', '"";', '\n', '▁}', '▁public', '▁void', '▁upd', 'at', 'ere', 'qu', 'ire', 'ment', '▁info', '(', 'string', '▁r', 'no', ',', '▁string', '▁p', 'name', ',', '▁string', '▁m', 'name', ')', '\n', '▁{', '\n', 'requ', 'ire', 'ment', '▁no', '▁=', '▁r', 'no', '.', '▁trim', '();', '\n', 'project', 'name', '▁=', '▁p', 'name', '.', '▁trim', '();', '\n', 'mod', 'ule', 'path', '▁=', '▁m', 'name', '.', '▁trim', '();', '\n', '▁}', '▁public', '▁bo', 'olean', '▁match', '(', '▁int', '▁mx', ',', '▁int', '▁my', ')', '\n', '▁{', '\n', 'return', '▁true', ';', '\n\n', '▁}', '▁public', '▁int', '▁get', 'x', '()', '\n', '▁{', '\n', 'return', '▁x', ';', '\n', '▁}', '▁public', '▁int', '▁g', 'ety', '()', '\n', '▁{', '\n', 'return', '▁y', ';', '\n', '▁}', '▁public', '▁color', '▁get', 'c', '()', '\n', '{', '\n', 'return', '▁c', ';', '\n', '▁}', '▁public', '▁string', '▁get', 're', 'q', 'no', '()', '\n', '▁{', '\n', 'return', '▁requirement', '▁no', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'project', '()', '\n', '▁{', '\n', 'return', '▁project', 'name', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'mod', 'ule', '()', '\n', '▁{', '\n', 'return', '▁module', 'path', ';', '\n', '▁}', '""', '\n']"~"['▁86', '\t', '""', 'eb', '▁shape', '▁private', '▁int', '▁x', ',', '▁y', ';', '\n', '▁private', '▁string', '▁requirement', '▁no', ';', '\n', '▁private', '▁string', '▁project', 'name', ',', '▁module', 'path', ';', '\n', 'private', '▁color', '▁c', ';', '▁public', '▁eb', 'shape', '(', '▁int', '▁x', 'pos', ',', '▁int', '▁y', 'pos', ',', '▁color', '▁col', ')', '\n', '▁{', '\n', 'x', '▁=', '▁x', 'pos', ';', '\n', 'y', '▁=', '▁y', 'pos', ';', '\n', 'c', '▁=', '▁col', ';', '\n', 'require', 'ment', '▁no', '▁=', '▁""""""', '"";', '\n', 'project', 'name', '▁=', '▁""""""', '"";', '\n', 'module', 'path', '▁=', '▁""""""', '"";', '\n', '▁}', '▁public', '▁void', '▁upd', 'at', 'ere', 'quire', 'ment', '▁info', '(', 'string', '▁r', 'no', ',', '▁string', '▁p', 'name', ',', '▁string', '▁m', 'name', ')', '\n', '▁{', '\n', 'require', 'ment', '▁no', '▁=', '▁r', 'no', '.', '▁trim', '();', '\n', 'project', 'name', '▁=', '▁p', 'name', '.', '▁trim', '();', '\n', 'module', 'path', '▁=', '▁m', 'name', '.', '▁trim', '();', '\n', '▁}', '▁public', '▁boolean', '▁match', '(', '▁int', '▁mx', ',', '▁int', '▁my', ')', '\n', '▁{', '\n', 'return', '▁true', ';', '\n\n', '▁}', '▁public', '▁int', '▁get', 'x', '()', '\n', '▁{', '\n', 'return', '▁x', ';', '\n', '▁}', '▁public', '▁int', '▁g', 'ety', '()', '\n', '▁{', '\n', 'return', '▁y', ';', '\n', '▁}', '▁public', '▁color', '▁get', 'c', '()', '\n', '{', '\n', 'return', '▁c', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'req', 'no', '()', '\n', '▁{', '\n', 'return', '▁requirement', '▁no', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'project', '()', '\n', '▁{', '\n', 'return', '▁project', 'name', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'module', '()', '\n', '▁{', '\n', 'return', '▁module', 'path', ';', '\n', '▁}', '""', '\n']"~shape privat int privat string requir privat string project name modul path privat color public ebshap int xpos int ypos color col xpos ypos col requir project name modul path public void updaterequir info string rno string pname string mname requir rno trim project name pname trim modul path mname trim public boolean match int int return true public int get return public int get return public color get return public string get reqno return requir public string get project return project name public string get modul return modul path
101~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/88.java~88.java~"88	""Event Model 
protected Vector EventShapes = new Vector();
protected Vector EventLines = new Vector();
protected EB Shape ebs, ebs2;
protected EventLine mline;
protected Color ShapeColor = new Color (190,190,190);
 public EventModel(EBT e)
{
ebt = e;
CurrentEvent = -1;
NotifyButton = new JButton(""""Notify"""");
setLayout( null);
NotifyButton. setBounds(305,265,80,25);
MinimumNoRects = 1;

add public void getIP Server( String serverIP)
 {

this. serverIP = serverIP;
 } public void ClearVectors()
{
EventShapes. removeAllElements();
EventLines. removeAllElements();
}public void drawModel()
{
repaint();
} public void drawModel(EBShape sh)
{
EventShapes. setElementAt( sh, ESCursor);
repaint();
} private void ClearData()
{
for ( int i = 0; i < EventShapes. size(); i++)
{
ebs = (EBShape)EventShapes. elementAt( i);
ebs.Updaterequirement Info("""""""","""""""","""""""");
 }
}public void Clicked ( int x, int y)
{
int Hit = 0;
for ( int i = 0; i < EventShapes. size(); i++)
{
 ebs = (EBShape)EventShapes. elementAt( i);

if (( x >= ebs.GetX() && ( x <= ebs public void CheckNotifyStatus()
 {
//Check if Minimum Standards have been met.
int j = 0;
for ( j = 0; j < MinimumNoRects; j++)
{
ebs2 = (EBShape)EventShapes. elementAt( j);

 if (((((protected void BuildEvent(){} protected void AddLine( int t, int l, int r, int b)
{
EventLines. addElement( new EventLine( t, l, r, b));
} protected void AddEventRect( int x, int y, int colorStatus)
{
if ( colorStatus == 1)
{
 EventShapes. addElement( new EBShape( x, y, new Color (100,100,100)));
 }
 else
 {
Even public String getrequirement Text(String r, String p, String m)
{
return new String(""""requirementwill go here"""");
 } public StringBuffer GenerateEvent()
{
return new StringBuffer("""" """");
 }// end of GenerateEvent method protected void paintComponent(Graphics g)
{
super. paintComponent( g);
for ( int i = 0; i < EventShapes. size(); i++)
{
ebs = (EBShape)EventShapes. elementAt( i);
 g. setC""
"~src~"['▁8', '8', '\t', '""', 'ev', 'ent', '▁model', '▁', '\n', 'pro', 't', 'ected', '▁v', 'ector', '▁events', 'h', 'apes', '▁=', '▁new', '▁v', 'ector', '(', ');', '\n', 'pro', 't', 'ected', '▁v', 'ector', '▁event', 'lines', '▁=', '▁new', '▁v', 'ector', '(', ');', '\n', 'pro', 't', 'ected', '▁e', 'b', '▁shape', '▁e', 'bs', ',', '▁e', 'bs', '2', ';', '\n', 'pro', 't', 'ected', '▁event', 'line', '▁m', 'line', ';', '\n', 'pro', 't', 'ected', '▁color', '▁sh', 'ap', 'ec', 'ol', 'or', '▁=', '▁new', '▁color', '▁(19', '0,', '19', '0,', '19', '0)', ';', '\n', '▁public', '▁event', 'mod', 'el', '(', 'e', 'b', 't', '▁e', ')', '\n', '{', '\n', 'e', 'b', 't', '▁=', '▁e', ';', '\n', 'cur', 'ren', 'te', 'vent', '▁=', '▁-', '1', ';', '\n', 'not', 'ify', 'but', 'ton', '▁=', '▁new', '▁j', 'but', 'ton', '(', '""', '""', 'not', 'ify', '""', '"")', ';', '\n', 'set', 'l', 'ay', 'out', '(', '▁n', 'ull', ');', '\n', 'not', 'ify', 'but', 'ton', '.', '▁set', 'bo', 'unds', '(', '30', '5,', '26', '5,', '8', '0,', '2', '5)', ';', '\n', 'min', 'im', 'umn', 'or', 'ects', '▁=', '▁1', ';', '\n\n', 'ad', 'd', '▁public', '▁vo', 'id', '▁get', 'ip', '▁ser', 'ver', '(', '▁string', '▁ser', 'ver', 'ip', ')', '\n', '▁{', '\n\n', 'this', '.', '▁ser', 'ver', 'ip', '▁=', '▁ser', 'ver', 'ip', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁clear', 'v', 'ect', 'ors', '(', ')', '\n', '{', '\n', 'ev', 'ents', 'h', 'apes', '.', '▁rem', 'ove', 'alle', 'le', 'ments', '(', ');', '\n', 'ev', 'ent', 'lines', '.', '▁rem', 'ove', 'alle', 'le', 'ments', '(', ');', '\n', '}', 'publ', 'ic', '▁vo', 'id', '▁draw', 'mod', 'el', '(', ')', '\n', '{', '\n', 'rep', 'aint', '(', ');', '\n', '}', '▁public', '▁vo', 'id', '▁draw', 'mod', 'el', '(', 'e', 'b', 'sh', 'ape', '▁sh', ')', '\n', '{', '\n', 'ev', 'ents', 'h', 'apes', '.', '▁set', 'e', 'lement', 'at', '(', '▁sh', ',', '▁esc', 'urs', 'or', ');', '\n', 'rep', 'aint', '(', ');', '\n', '}', '▁private', '▁vo', 'id', '▁cle', 'ard', 'ata', '(', ')', '\n', '{', '\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', ';', '▁i', '▁', '<', '▁events', 'h', 'apes', '.', '▁size', '(', ');', '▁i', '+', '+', ')', '\n', '{', '\n', 'e', 'bs', '▁=', '▁(', 'e', 'b', 'sh', 'ape', ')', 'ev', 'ents', 'h', 'apes', '.', '▁element', 'at', '(', '▁i', ');', '\n', 'e', 'bs', '.', 'up', 'd', 'at', 'ere', 'qu', 'ire', 'ment', '▁inf', 'o', '(', '""', '""', '""', '"",', '""', '""', '""', '"",', '""', '""', '""', '"")', ';', '\n', '▁}', '\n', '}', 'publ', 'ic', '▁vo', 'id', '▁cl', 'ick', 'ed', '▁(', '▁int', '▁x', ',', '▁int', '▁y', ')', '\n', '{', '\n', 'int', '▁hit', '▁=', '▁0', ';', '\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', ';', '▁i', '▁', '<', '▁events', 'h', 'apes', '.', '▁size', '(', ');', '▁i', '+', '+', ')', '\n', '{', '\n', '▁e', 'bs', '▁=', '▁(', 'e', 'b', 'sh', 'ape', ')', 'ev', 'ents', 'h', 'apes', '.', '▁element', 'at', '(', '▁i', ');', '\n\n', 'if', '▁(', '(', '▁x', '▁', '>', '=', '▁e', 'bs', '.', 'get', 'x', '(', ')', '▁&', '&', '▁(', '▁x', '▁', '<', '=', '▁e', 'bs', '▁public', '▁vo', 'id', '▁check', 'not', 'ify', 'st', 'atus', '(', ')', '\n', '▁{', '\n', '//', 'che', 'ck', '▁if', '▁minimum', '▁standards', '▁have', '▁been', '▁met', '.', '\n', 'int', '▁j', '▁=', '▁0', ';', '\n', 'for', '▁(', '▁j', '▁=', '▁0', ';', '▁j', '▁', '<', '▁minim', 'umn', 'or', 'ects', ';', '▁j', '+', '+', ')', '\n', '{', '\n', 'e', 'bs', '2', '▁=', '▁(', 'e', 'b', 'sh', 'ape', ')', 'ev', 'ents', 'h', 'apes', '.', '▁element', 'at', '(', '▁j', ');', '\n\n', '▁if', '▁(', '(', '(', '(', '(', 'pro', 't', 'ected', '▁vo', 'id', '▁build', 'ev', 'ent', '(', ')', '{', '}', '▁protected', '▁vo', 'id', '▁add', 'line', '(', '▁int', '▁t', ',', '▁int', '▁l', ',', '▁int', '▁r', ',', '▁int', '▁b', ')', '\n', '{', '\n', 'ev', 'ent', 'lines', '.', '▁add', 'e', 'lement', '(', '▁new', '▁event', 'line', '(', '▁t', ',', '▁l', ',', '▁r', ',', '▁b', ')', ');', '\n', '}', '▁protected', '▁vo', 'id', '▁add', 'ev', 'ent', 'rect', '(', '▁int', '▁x', ',', '▁int', '▁y', ',', '▁int', '▁color', 'st', 'atus', ')', '\n', '{', '\n', 'if', '▁(', '▁color', 'st', 'atus', '▁=', '=', '▁1', ')', '\n', '{', '\n', '▁events', 'h', 'apes', '.', '▁add', 'e', 'lement', '(', '▁new', '▁e', 'b', 'sh', 'ape', '(', '▁x', ',', '▁y', ',', '▁new', '▁color', '▁(1', '00', ',', '100', ',', '100', ')', ')', ');', '\n', '▁}', '\n', '▁else', '\n', '▁{', '\n', 'e', 'ven', '▁public', '▁string', '▁get', 're', 'qu', 'ire', 'ment', '▁text', '(', 'str', 'ing', '▁r', ',', '▁string', '▁p', ',', '▁string', '▁m', ')', '\n', '{', '\n', 'ret', 'urn', '▁new', '▁string', '(', '""', '""', 're', 'qu', 'ire', 'ment', 'w', 'ill', '▁go', '▁here', '""', '"")', ';', '\n', '▁}', '▁public', '▁string', 'b', 'uf', 'fer', '▁gener', 'ate', 'ev', 'ent', '(', ')', '\n', '{', '\n', 'ret', 'urn', '▁new', '▁string', 'b', 'uf', 'fer', '(', '""', '""', '▁""', '"")', ';', '\n', '▁}', '//', '▁end', '▁of', '▁gener', 'ate', 'ev', 'ent', '▁method', '▁protected', '▁vo', 'id', '▁paint', 'com', 'pon', 'ent', '(', 'gr', 'aph', 'ics', '▁g', ')', '\n', '{', '\n', 'sup', 'er', '.', '▁paint', 'com', 'pon', 'ent', '(', '▁g', ');', '\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', ';', '▁i', '▁', '<', '▁events', 'h', 'apes', '.', '▁size', '(', ');', '▁i', '+', '+', ')', '\n', '{', '\n', 'e', 'bs', '▁=', '▁(', 'e', 'b', 'sh', 'ape', ')', 'ev', 'ents', 'h', 'apes', '.', '▁element', 'at', '(', '▁i', ');', '\n', '▁g', '.', '▁set', 'c', '""', '\n']"~"['▁88', '\t', '""', 'event', '▁model', '▁', '\n', 'protected', '▁vector', '▁events', 'h', 'apes', '▁=', '▁new', '▁vector', '();', '\n', 'protected', '▁vector', '▁event', 'lines', '▁=', '▁new', '▁vector', '();', '\n', 'protected', '▁eb', '▁shape', '▁e', 'bs', ',', '▁e', 'bs', '2', ';', '\n', 'protected', '▁event', 'line', '▁m', 'line', ';', '\n', 'protected', '▁color', '▁shap', 'ec', 'ol', 'or', '▁=', '▁new', '▁color', '▁(19', '0,', '19', '0,', '19', '0)', ';', '\n', '▁public', '▁event', 'model', '(', 'eb', 't', '▁e', ')', '\n', '{', '\n', 'eb', 't', '▁=', '▁e', ';', '\n', 'cur', 'ren', 'te', 'vent', '▁=', '▁-', '1', ';', '\n', 'not', 'ify', 'but', 'ton', '▁=', '▁new', '▁j', 'but', 'ton', '(""', '""', 'not', 'ify', '""', '"");', '\n', 'set', 'lay', 'out', '(', '▁null', ');', '\n', 'not', 'ify', 'but', 'ton', '.', '▁set', 'bo', 'unds', '(', '30', '5,', '26', '5,', '8', '0,', '2', '5)', ';', '\n', 'min', 'im', 'umn', 'or', 'ects', '▁=', '▁1', ';', '\n\n', 'add', '▁public', '▁void', '▁get', 'ip', '▁server', '(', '▁string', '▁server', 'ip', ')', '\n', '▁{', '\n\n', 'this', '.', '▁server', 'ip', '▁=', '▁server', 'ip', ';', '\n', '▁}', '▁public', '▁void', '▁clear', 'v', 'ectors', '()', '\n', '{', '\n', 'ev', 'ents', 'h', 'apes', '.', '▁remove', 'alle', 'lements', '();', '\n', 'event', 'lines', '.', '▁remove', 'alle', 'lements', '();', '\n', '}', 'public', '▁void', '▁draw', 'model', '()', '\n', '{', '\n', 'rep', 'aint', '();', '\n', '}', '▁public', '▁void', '▁draw', 'model', '(', 'eb', 'shape', '▁sh', ')', '\n', '{', '\n', 'ev', 'ents', 'h', 'apes', '.', '▁set', 'e', 'lement', 'at', '(', '▁sh', ',', '▁esc', 'urs', 'or', ');', '\n', 'rep', 'aint', '();', '\n', '}', '▁private', '▁void', '▁cle', 'ard', 'ata', '()', '\n', '{', '\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', ';', '▁i', '▁<', '▁events', 'h', 'apes', '.', '▁size', '();', '▁i', '++', ')', '\n', '{', '\n', 'e', 'bs', '▁=', '▁(', 'eb', 'shape', ')', 'ev', 'ents', 'h', 'apes', '.', '▁element', 'at', '(', '▁i', ');', '\n', 'e', 'bs', '.', 'up', 'dat', 'ere', 'qu', 'ire', 'ment', '▁info', '(""', '""', '""', '"",', '""', '""', '""', '"",', '""', '""', '""', '"");', '\n', '▁}', '\n', '}', 'public', '▁void', '▁click', 'ed', '▁(', '▁int', '▁x', ',', '▁int', '▁y', ')', '\n', '{', '\n', 'int', '▁hit', '▁=', '▁0', ';', '\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', ';', '▁i', '▁<', '▁events', 'h', 'apes', '.', '▁size', '();', '▁i', '++', ')', '\n', '{', '\n', '▁e', 'bs', '▁=', '▁(', 'eb', 'shape', ')', 'ev', 'ents', 'h', 'apes', '.', '▁element', 'at', '(', '▁i', ');', '\n\n', 'if', '▁(', '(', '▁x', '▁>', '=', '▁e', 'bs', '.', 'get', 'x', '()', '▁&', '&', '▁(', '▁x', '▁<', '=', '▁e', 'bs', '▁public', '▁void', '▁check', 'not', 'ify', 'st', 'atus', '()', '\n', '▁{', '\n', '//', 'check', '▁if', '▁minimum', '▁standards', '▁have', '▁been', '▁met', '.', '\n', 'int', '▁j', '▁=', '▁0', ';', '\n', 'for', '▁(', '▁j', '▁=', '▁0', ';', '▁j', '▁<', '▁minim', 'umn', 'or', 'ects', ';', '▁j', '++', ')', '\n', '{', '\n', 'e', 'bs', '2', '▁=', '▁(', 'eb', 'shape', ')', 'ev', 'ents', 'h', 'apes', '.', '▁element', 'at', '(', '▁j', ');', '\n\n', '▁if', '▁(', '(', '(', '(', '(', 'protected', '▁void', '▁build', 'event', '()', '{', '}', '▁protected', '▁void', '▁add', 'line', '(', '▁int', '▁t', ',', '▁int', '▁l', ',', '▁int', '▁r', ',', '▁int', '▁b', ')', '\n', '{', '\n', 'event', 'lines', '.', '▁add', 'e', 'lement', '(', '▁new', '▁event', 'line', '(', '▁t', ',', '▁l', ',', '▁r', ',', '▁b', ')', ');', '\n', '}', '▁protected', '▁void', '▁add', 'event', 'rect', '(', '▁int', '▁x', ',', '▁int', '▁y', ',', '▁int', '▁color', 'st', 'atus', ')', '\n', '{', '\n', 'if', '▁(', '▁color', 'st', 'atus', '▁==', '▁1)', '\n', '{', '\n', '▁events', 'h', 'apes', '.', '▁add', 'e', 'lement', '(', '▁new', '▁eb', 'shape', '(', '▁x', ',', '▁y', ',', '▁new', '▁color', '▁(1', '00,', '100', ',', '100', '))', ');', '\n', '▁}', '\n', '▁else', '\n', '▁{', '\n', 'even', '▁public', '▁string', '▁get', 'requ', 'ire', 'ment', '▁text', '(', 'string', '▁r', ',', '▁string', '▁p', ',', '▁string', '▁m', ')', '\n', '{', '\n', 'return', '▁new', '▁string', '(""', '""', 'requ', 'ire', 'ment', 'will', '▁go', '▁here', '""', '"");', '\n', '▁}', '▁public', '▁string', 'b', 'uffer', '▁generate', 'event', '()', '\n', '{', '\n', 'return', '▁new', '▁string', 'b', 'uffer', '(""', '""', '▁""', '"");', '\n', '▁}', '//', '▁end', '▁of', '▁generate', 'event', '▁method', '▁protected', '▁void', '▁paint', 'com', 'ponent', '(', 'graph', 'ics', '▁g', ')', '\n', '{', '\n', 'super', '.', '▁paint', 'com', 'ponent', '(', '▁g', ');', '\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', ';', '▁i', '▁<', '▁events', 'h', 'apes', '.', '▁size', '();', '▁i', '++', ')', '\n', '{', '\n', 'e', 'bs', '▁=', '▁(', 'eb', 'shape', ')', 'ev', 'ents', 'h', 'apes', '.', '▁element', 'at', '(', '▁i', ');', '\n', '▁g', '.', '▁set', 'c', '""', '\n']"~"['▁88', '\t', '""', 'event', '▁model', '▁', '\n', 'protected', '▁vector', '▁events', 'h', 'apes', '▁=', '▁new', '▁vector', '();', '\n', 'protected', '▁vector', '▁event', 'lines', '▁=', '▁new', '▁vector', '();', '\n', 'protected', '▁eb', '▁shape', '▁ebs', ',', '▁ebs', '2;', '\n', 'protected', '▁event', 'line', '▁m', 'line', ';', '\n', 'protected', '▁color', '▁shap', 'ec', 'olor', '▁=', '▁new', '▁color', '▁(19', '0,', '19', '0,', '19', '0);', '\n', '▁public', '▁event', 'model', '(', 'eb', 't', '▁e', ')', '\n', '{', '\n', 'eb', 't', '▁=', '▁e', ';', '\n', 'cur', 'rente', 'vent', '▁=', '▁-', '1;', '\n', 'not', 'ify', 'button', '▁=', '▁new', '▁j', 'button', '(""', '""', 'not', 'ify', '"""");', '\n', 'set', 'layout', '(', '▁null', ');', '\n', 'not', 'ify', 'button', '.', '▁set', 'bounds', '(', '30', '5,', '26', '5,', '80,', '2', '5);', '\n', 'minim', 'umn', 'or', 'ects', '▁=', '▁1;', '\n\n', 'add', '▁public', '▁void', '▁get', 'ip', '▁server', '(', '▁string', '▁server', 'ip', ')', '\n', '▁{', '\n\n', 'this', '.', '▁server', 'ip', '▁=', '▁server', 'ip', ';', '\n', '▁}', '▁public', '▁void', '▁clear', 'v', 'ectors', '()', '\n', '{', '\n', 'events', 'h', 'apes', '.', '▁remove', 'alle', 'lements', '();', '\n', 'event', 'lines', '.', '▁remove', 'alle', 'lements', '();', '\n', '}', 'public', '▁void', '▁draw', 'model', '()', '\n', '{', '\n', 'rep', 'aint', '();', '\n', '}', '▁public', '▁void', '▁draw', 'model', '(', 'eb', 'shape', '▁sh', ')', '\n', '{', '\n', 'events', 'h', 'apes', '.', '▁set', 'element', 'at', '(', '▁sh', ',', '▁esc', 'ursor', ');', '\n', 'rep', 'aint', '();', '\n', '}', '▁private', '▁void', '▁cle', 'ard', 'ata', '()', '\n', '{', '\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0;', '▁i', '▁<', '▁events', 'h', 'apes', '.', '▁size', '();', '▁i', '++)', '\n', '{', '\n', 'e', 'bs', '▁=', '▁(', 'eb', 'shape', ')', 'events', 'h', 'apes', '.', '▁element', 'at', '(', '▁i', ');', '\n', 'e', 'bs', '.', 'up', 'dat', 'ere', 'quire', 'ment', '▁info', '(""', '""""', '"",', '""""""', '"",', '""""', '"""");', '\n', '▁}', '\n', '}', 'public', '▁void', '▁click', 'ed', '▁(', '▁int', '▁x', ',', '▁int', '▁y', ')', '\n', '{', '\n', 'int', '▁hit', '▁=', '▁0;', '\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0;', '▁i', '▁<', '▁events', 'h', 'apes', '.', '▁size', '();', '▁i', '++)', '\n', '{', '\n', '▁ebs', '▁=', '▁(', 'eb', 'shape', ')', 'events', 'h', 'apes', '.', '▁element', 'at', '(', '▁i', ');', '\n\n', 'if', '▁((', '▁x', '▁>=', '▁ebs', '.', 'get', 'x', '()', '▁&&', '▁(', '▁x', '▁<', '=', '▁ebs', '▁public', '▁void', '▁check', 'not', 'ify', 'status', '()', '\n', '▁{', '\n', '//', 'check', '▁if', '▁minimum', '▁standards', '▁have', '▁been', '▁met', '.', '\n', 'int', '▁j', '▁=', '▁0;', '\n', 'for', '▁(', '▁j', '▁=', '▁0;', '▁j', '▁<', '▁minim', 'umn', 'or', 'ects', ';', '▁j', '++)', '\n', '{', '\n', 'e', 'bs', '2', '▁=', '▁(', 'eb', 'shape', ')', 'events', 'h', 'apes', '.', '▁element', 'at', '(', '▁j', ');', '\n\n', '▁if', '▁((', '((', '(', 'protected', '▁void', '▁build', 'event', '()', '{}', '▁protected', '▁void', '▁add', 'line', '(', '▁int', '▁t', ',', '▁int', '▁l', ',', '▁int', '▁r', ',', '▁int', '▁b', ')', '\n', '{', '\n', 'event', 'lines', '.', '▁add', 'element', '(', '▁new', '▁event', 'line', '(', '▁t', ',', '▁l', ',', '▁r', ',', '▁b', '));', '\n', '}', '▁protected', '▁void', '▁add', 'event', 'rect', '(', '▁int', '▁x', ',', '▁int', '▁y', ',', '▁int', '▁color', 'status', ')', '\n', '{', '\n', 'if', '▁(', '▁color', 'status', '▁==', '▁1)', '\n', '{', '\n', '▁events', 'h', 'apes', '.', '▁add', 'element', '(', '▁new', '▁eb', 'shape', '(', '▁x', ',', '▁y', ',', '▁new', '▁color', '▁(1', '00,', '100,', '100', '))', ');', '\n', '▁}', '\n', '▁else', '\n', '▁{', '\n', 'even', '▁public', '▁string', '▁get', 'require', 'ment', '▁text', '(', 'string', '▁r', ',', '▁string', '▁p', ',', '▁string', '▁m', ')', '\n', '{', '\n', 'return', '▁new', '▁string', '(""', '""', 'require', 'ment', 'will', '▁go', '▁here', '"""");', '\n', '▁}', '▁public', '▁string', 'buffer', '▁generate', 'event', '()', '\n', '{', '\n', 'return', '▁new', '▁string', 'buffer', '(""', '""', '▁""', '"");', '\n', '▁}', '//', '▁end', '▁of', '▁generate', 'event', '▁method', '▁protected', '▁void', '▁paint', 'component', '(', 'graphics', '▁g', ')', '\n', '{', '\n', 'super', '.', '▁paint', 'component', '(', '▁g', ');', '\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0;', '▁i', '▁<', '▁events', 'h', 'apes', '.', '▁size', '();', '▁i', '++)', '\n', '{', '\n', 'e', 'bs', '▁=', '▁(', 'eb', 'shape', ')', 'events', 'h', 'apes', '.', '▁element', 'at', '(', '▁i', ');', '\n', '▁g', '.', '▁set', 'c', '""', '\n']"~"event model protect vector event shape new vector protect vector event line new vector protect shape protect event line mline protect color shape color new color public event model ebt ebt current event notifi button new jbutton notifi set layout null notifi button set bound minimum rect add public void get server string server server server public void clear vector event shape remov element event line remov element public void draw model repaint public void draw model ebshap event shape set element escursor repaint privat void clear data int event shape size ebshap event shape element updaterequir info public void click int int int hit int event shape size ebshap event shape element get public void check notifi status check minimum standard met int minimum rect ebshap event shape element protect void build event protect void add line int int int int event line add element new event line protect void add event rect int int int color status color status event shape add element new ebshap new color 100 100 100 ))); els even public string getrequir text string string string return new string ("""" requirementwil """"); public string buffer generat event return new string buffer ("""" """"); }// end generat event method protect void paint compon graphic super paint compon int event shape size (); ++) ebshap event shape element set"
102~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/84.java~84.java~"84	""White Board Execution Graph //Driver data members
 double avgShapeSize_Original;
 double avgShapeSize_Speculate;

 // constraints data members
 double avgTextSize;
 double writeTime;
 double noShapes;
 double noTextItems;
 double bandWidth public WhiteBoardExecutionGraph(Vector driver, Vector constraints){
this. driver = driver;
this. constraints = constraints;
 }// end of constructor public String toString(){
 String result;

 result = """" avgShapeSize_Original = """" + avgShapeSize_Original +
"""",\ navgShapeSize_Speculate = """" + avgShapeSize_Speculate +
"""",\ navgTextSize = """" + avgTextSizepublic void injectDrivers(){
System. out. println(""""\ t\ tINSIDE INJECT DRIVERs METHOD"""");
//To Do: Run for loop for more then one drivers
//To Do: have a case insensitive check for driver name and then populate the data member public void injectConstraints(){
System. out. println(""""\ t\ tINSIDE INJECT CONSTRAINTs METHOD"""");

//To Do: have a case insensitive check for constraints name and then populate the data member
//System. out. println( const public double timeToBroadcastShapeBefore(){
System. out. println(""""\ t\ t\ tINSIDE timeToBroadcastShapeBefore METHOD"""");

double targetResponse time_ temp = 0.00;

 for( int i=0; i< noShapes; i++ public double timeToBroadcastShapeAfter(){
System. out. println(""""\ t\ t\ tINSIDE timeToBroadcastShapeAfter METHOD"""");

double targetResponse time_ temp = 0.00;

 for( int i=0; i< noShapes; i++){ public double timeToBroadcastText(){
System. out. println(""""\ t\ t\ tINSIDE timeToBroadcastText METHOD"""");

double targetResponse time_ temp = 0.00;

 for( int i=0; i< noTextItems; i++){

 target public double writeTime(){
System. out. println(""""\ t\ t\ tINSIDE writeTime METHOD"""");

System. out. println(""""\ t\ t\ t\ tTotal time to write = """" + writeTime);

System. out. println(""""\ t\ t\ tLEAVING w public double targetResponseTimeBefore(){
System. out. println(""""\ t\ tINSIDE targetResponseTimeBefore METHOD\ n"""");

targetResponse time = timeToBroadcastShapeBefore() +
timeToBroadcastText()public double targetResponseTimeAfter(){
System. out. println(""""\ t\ tINSIDE targetResponseTimeAfter METHOD\ n"""");

targetResponse time = timeToBroadcastShapeAfter() +
timeToBroadcastText() + w""
"~src~"['▁8', '4', '\t', '""', 'white', '▁board', '▁ex', 'ecution', '▁graph', '▁/', '/', 'dr', 'iver', '▁data', '▁members', '\n', '▁double', '▁av', 'g', 'sh', 'apes', 'ize', '_', 'original', ';', '\n', '▁double', '▁av', 'g', 'sh', 'apes', 'ize', '_', 'spec', 'ulate', ';', '\n\n', '▁/', '/', '▁constr', 'aints', '▁data', '▁members', '\n', '▁double', '▁av', 'g', 'te', 'x', 'ts', 'ize', ';', '\n', '▁double', '▁writ', 'etime', ';', '\n', '▁double', '▁n', 'osh', 'apes', ';', '\n', '▁double', '▁note', 'xt', 'it', 'ems', ';', '\n', '▁double', '▁band', 'w', 'id', 'th', '▁public', '▁white', 'board', 'ex', 'ecution', 'gr', 'aph', '(', 'v', 'ector', '▁driver', ',', '▁v', 'ector', '▁constr', 'aints', ')', '{', '\n', 'this', '.', '▁driver', '▁=', '▁driver', ';', '\n', 'this', '.', '▁constr', 'aints', '▁=', '▁constr', 'aints', ';', '\n', '▁}', '//', '▁end', '▁of', '▁construct', 'or', '▁public', '▁string', '▁to', 'str', 'ing', '(', ')', '{', '\n', '▁string', '▁result', ';', '\n\n', '▁result', '▁=', '▁""', '""', '▁av', 'g', 'sh', 'apes', 'ize', '_', 'original', '▁=', '▁""', '""', '▁+', '▁av', 'g', 'sh', 'apes', 'ize', '_', 'original', '▁+', '\n', '""', '"",', '\\', '▁nav', 'g', 'sh', 'apes', 'ize', '_', 'spec', 'ulate', '▁=', '▁""', '""', '▁+', '▁av', 'g', 'sh', 'apes', 'ize', '_', 'spec', 'ulate', '▁+', '\n', '""', '"",', '\\', '▁nav', 'g', 'te', 'x', 'ts', 'ize', '▁=', '▁""', '""', '▁+', '▁av', 'g', 'te', 'x', 'ts', 'iz', 'ep', 'ubl', 'ic', '▁vo', 'id', '▁in', 'ject', 'dr', 'ivers', '(', ')', '{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁in', 'ject', '▁drivers', '▁method', '""', '"")', ';', '\n', '//', 'to', '▁do', ':', '▁run', '▁for', '▁lo', 'op', '▁for', '▁more', '▁then', '▁one', '▁drivers', '\n', '//', 'to', '▁do', ':', '▁have', '▁a', '▁case', '▁ins', 'ens', 'itive', '▁check', '▁for', '▁driver', '▁name', '▁and', '▁then', '▁pop', 'ulate', '▁the', '▁data', '▁member', '▁public', '▁vo', 'id', '▁in', 'ject', 'con', 'str', 'aints', '(', ')', '{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁in', 'ject', '▁constr', 'aints', '▁method', '""', '"")', ';', '\n\n', '//', 'to', '▁do', ':', '▁have', '▁a', '▁case', '▁ins', 'ens', 'itive', '▁check', '▁for', '▁constr', 'aints', '▁name', '▁and', '▁then', '▁pop', 'ulate', '▁the', '▁data', '▁member', '\n', '//', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '▁const', '▁public', '▁double', '▁tim', 'et', 'ob', 'road', 'cast', 'sh', 'ape', 'be', 'fore', '(', ')', '{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁tim', 'et', 'ob', 'road', 'cast', 'sh', 'ape', 'be', 'fore', '▁method', '""', '"")', ';', '\n\n', 'do', 'uble', '▁target', 'resp', 'onse', '▁time', '_', '▁tem', 'p', '▁=', '▁0.', '00', ';', '\n\n', '▁for', '(', '▁int', '▁i', '=', '0', ';', '▁i', '<', '▁n', 'osh', 'apes', ';', '▁i', '+', '+', '▁public', '▁double', '▁tim', 'et', 'ob', 'road', 'cast', 'sh', 'ape', 'after', '(', ')', '{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁tim', 'et', 'ob', 'road', 'cast', 'sh', 'ape', 'after', '▁method', '""', '"")', ';', '\n\n', 'do', 'uble', '▁target', 'resp', 'onse', '▁time', '_', '▁tem', 'p', '▁=', '▁0.', '00', ';', '\n\n', '▁for', '(', '▁int', '▁i', '=', '0', ';', '▁i', '<', '▁n', 'osh', 'apes', ';', '▁i', '+', '+', ')', '{', '▁public', '▁double', '▁tim', 'et', 'ob', 'road', 'cast', 'text', '(', ')', '{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁tim', 'et', 'ob', 'road', 'cast', 'text', '▁method', '""', '"")', ';', '\n\n', 'do', 'uble', '▁target', 'resp', 'onse', '▁time', '_', '▁tem', 'p', '▁=', '▁0.', '00', ';', '\n\n', '▁for', '(', '▁int', '▁i', '=', '0', ';', '▁i', '<', '▁note', 'xt', 'it', 'ems', ';', '▁i', '+', '+', ')', '{', '\n\n', '▁target', '▁public', '▁double', '▁writ', 'etime', '(', ')', '{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁writ', 'etime', '▁method', '""', '"")', ';', '\n\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁t', '\\', '▁t', 't', 'ot', 'al', '▁time', '▁to', '▁write', '▁=', '▁""', '""', '▁+', '▁writ', 'etime', ');', '\n\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁t', 'le', 'aving', '▁w', '▁public', '▁double', '▁target', 'resp', 'ons', 'etime', 'be', 'fore', '(', ')', '{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁target', 'resp', 'ons', 'etime', 'be', 'fore', '▁method', '\\', '▁n', '""', '"")', ';', '\n\n', 'tar', 'get', 'resp', 'onse', '▁time', '▁=', '▁tim', 'et', 'ob', 'road', 'cast', 'sh', 'ape', 'be', 'fore', '(', ')', '▁+', '\n', 'tim', 'et', 'ob', 'road', 'cast', 'text', '(', ')', 'publ', 'ic', '▁double', '▁target', 'resp', 'ons', 'etime', 'after', '(', ')', '{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁target', 'resp', 'ons', 'etime', 'after', '▁method', '\\', '▁n', '""', '"")', ';', '\n\n', 'tar', 'get', 'resp', 'onse', '▁time', '▁=', '▁tim', 'et', 'ob', 'road', 'cast', 'sh', 'ape', 'after', '(', ')', '▁+', '\n', 'tim', 'et', 'ob', 'road', 'cast', 'text', '(', ')', '▁+', '▁w', '""', '\n']"~"['▁84', '\t', '""', 'white', '▁board', '▁execution', '▁graph', '▁//', 'dr', 'iver', '▁data', '▁members', '\n', '▁double', '▁av', 'g', 'sh', 'apes', 'ize', '_', 'original', ';', '\n', '▁double', '▁av', 'g', 'sh', 'apes', 'ize', '_', 'spec', 'ulate', ';', '\n\n', '▁//', '▁constraints', '▁data', '▁members', '\n', '▁double', '▁av', 'g', 'tex', 'ts', 'ize', ';', '\n', '▁double', '▁writ', 'etime', ';', '\n', '▁double', '▁n', 'osh', 'apes', ';', '\n', '▁double', '▁note', 'xt', 'it', 'ems', ';', '\n', '▁double', '▁band', 'width', '▁public', '▁white', 'board', 'ex', 'ecution', 'graph', '(', 'v', 'ector', '▁driver', ',', '▁vector', '▁constraints', ')', '{', '\n', 'this', '.', '▁driver', '▁=', '▁driver', ';', '\n', 'this', '.', '▁constraints', '▁=', '▁constraints', ';', '\n', '▁}', '//', '▁end', '▁of', '▁construct', 'or', '▁public', '▁string', '▁to', 'string', '()', '{', '\n', '▁string', '▁result', ';', '\n\n', '▁result', '▁=', '▁""""', '▁av', 'g', 'sh', 'apes', 'ize', '_', 'original', '▁=', '▁""""', '▁+', '▁av', 'g', 'sh', 'apes', 'ize', '_', 'original', '▁+', '\n', '""', '"",', '\\', '▁nav', 'g', 'sh', 'apes', 'ize', '_', 'spec', 'ulate', '▁=', '▁""""', '▁+', '▁av', 'g', 'sh', 'apes', 'ize', '_', 'spec', 'ulate', '▁+', '\n', '""', '"",', '\\', '▁nav', 'g', 'tex', 'ts', 'ize', '▁=', '▁""""', '▁+', '▁av', 'g', 'tex', 'ts', 'iz', 'ep', 'ubl', 'ic', '▁void', '▁inject', 'dr', 'ivers', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁inject', '▁drivers', '▁method', '""', '"");', '\n', '//', 'to', '▁do', ':', '▁run', '▁for', '▁loop', '▁for', '▁more', '▁then', '▁one', '▁drivers', '\n', '//', 'to', '▁do', ':', '▁have', '▁a', '▁case', '▁ins', 'ens', 'itive', '▁check', '▁for', '▁driver', '▁name', '▁and', '▁then', '▁pop', 'ulate', '▁the', '▁data', '▁member', '▁public', '▁void', '▁inject', 'con', 'str', 'aints', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁inject', '▁constraints', '▁method', '""', '"");', '\n\n', '//', 'to', '▁do', ':', '▁have', '▁a', '▁case', '▁ins', 'ens', 'itive', '▁check', '▁for', '▁constraints', '▁name', '▁and', '▁then', '▁pop', 'ulate', '▁the', '▁data', '▁member', '\n', '//', 'system', '.', '▁out', '.', '▁print', 'ln', '(', '▁const', '▁public', '▁double', '▁timet', 'ob', 'road', 'cast', 'shape', 'before', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁timet', 'ob', 'road', 'cast', 'shape', 'before', '▁method', '""', '"");', '\n\n', 'double', '▁target', 'response', '▁time', '_', '▁temp', '▁=', '▁0.', '00', ';', '\n\n', '▁for', '(', '▁int', '▁i', '=0', ';', '▁i', '<', '▁n', 'osh', 'apes', ';', '▁i', '++', '▁public', '▁double', '▁timet', 'ob', 'road', 'cast', 'shape', 'after', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁timet', 'ob', 'road', 'cast', 'shape', 'after', '▁method', '""', '"");', '\n\n', 'double', '▁target', 'response', '▁time', '_', '▁temp', '▁=', '▁0.', '00', ';', '\n\n', '▁for', '(', '▁int', '▁i', '=0', ';', '▁i', '<', '▁n', 'osh', 'apes', ';', '▁i', '++', ')', '{', '▁public', '▁double', '▁timet', 'ob', 'road', 'cast', 'text', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁timet', 'ob', 'road', 'cast', 'text', '▁method', '""', '"");', '\n\n', 'double', '▁target', 'response', '▁time', '_', '▁temp', '▁=', '▁0.', '00', ';', '\n\n', '▁for', '(', '▁int', '▁i', '=0', ';', '▁i', '<', '▁note', 'xt', 'it', 'ems', ';', '▁i', '++', ')', '{', '\n\n', '▁target', '▁public', '▁double', '▁writ', 'etime', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁writ', 'etime', '▁method', '""', '"");', '\n\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁t', '\\', '▁t', 'total', '▁time', '▁to', '▁write', '▁=', '▁""""', '▁+', '▁writ', 'etime', ');', '\n\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁t', 'le', 'aving', '▁w', '▁public', '▁double', '▁target', 'respons', 'etime', 'before', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁target', 'respons', 'etime', 'before', '▁method', '\\', '▁n', '""', '"");', '\n\n', 'tar', 'get', 'response', '▁time', '▁=', '▁timet', 'ob', 'road', 'cast', 'shape', 'before', '()', '▁+', '\n', 'tim', 'et', 'ob', 'road', 'cast', 'text', '()', 'public', '▁double', '▁target', 'respons', 'etime', 'after', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', 'ins', 'ide', '▁target', 'respons', 'etime', 'after', '▁method', '\\', '▁n', '""', '"");', '\n\n', 'tar', 'get', 'response', '▁time', '▁=', '▁timet', 'ob', 'road', 'cast', 'shape', 'after', '()', '▁+', '\n', 'tim', 'et', 'ob', 'road', 'cast', 'text', '()', '▁+', '▁w', '""', '\n']"~"['▁84', '\t', '""', 'white', '▁board', '▁execution', '▁graph', '▁//', 'driver', '▁data', '▁members', '\n', '▁double', '▁avg', 'sh', 'apes', 'ize', '_', 'original', ';', '\n', '▁double', '▁avg', 'sh', 'apes', 'ize', '_', 'spec', 'ulate', ';', '\n\n', '▁//', '▁constraints', '▁data', '▁members', '\n', '▁double', '▁avg', 'texts', 'ize', ';', '\n', '▁double', '▁writ', 'etime', ';', '\n', '▁double', '▁n', 'osh', 'apes', ';', '\n', '▁double', '▁note', 'xt', 'items', ';', '\n', '▁double', '▁bandwidth', '▁public', '▁white', 'board', 'execution', 'graph', '(', 'vector', '▁driver', ',', '▁vector', '▁constraints', ')', '{', '\n', 'this', '.', '▁driver', '▁=', '▁driver', ';', '\n', 'this', '.', '▁constraints', '▁=', '▁constraints', ';', '\n', '▁}', '//', '▁end', '▁of', '▁constructor', '▁public', '▁string', '▁to', 'string', '()', '{', '\n', '▁string', '▁result', ';', '\n\n', '▁result', '▁=', '▁""""', '▁avg', 'sh', 'apes', 'ize', '_', 'original', '▁=', '▁""""', '▁+', '▁avg', 'sh', 'apes', 'ize', '_', 'original', '▁+', '\n', '""', '"",', '\\', '▁nav', 'g', 'sh', 'apes', 'ize', '_', 'spec', 'ulate', '▁=', '▁""""', '▁+', '▁avg', 'sh', 'apes', 'ize', '_', 'spec', 'ulate', '▁+', '\n', '""', '"",', '\\', '▁nav', 'g', 'texts', 'ize', '▁=', '▁""""', '▁+', '▁avg', 'texts', 'iz', 'ep', 'ubl', 'ic', '▁void', '▁inject', 'drivers', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁tins', 'ide', '▁inject', '▁drivers', '▁method', '"""");', '\n', '//', 'to', '▁do', ':', '▁run', '▁for', '▁loop', '▁for', '▁more', '▁then', '▁one', '▁drivers', '\n', '//', 'to', '▁do', ':', '▁have', '▁a', '▁case', '▁insensitive', '▁check', '▁for', '▁driver', '▁name', '▁and', '▁then', '▁populate', '▁the', '▁data', '▁member', '▁public', '▁void', '▁inject', 'con', 'str', 'aints', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁tins', 'ide', '▁inject', '▁constraints', '▁method', '"""");', '\n\n', '//', 'to', '▁do', ':', '▁have', '▁a', '▁case', '▁insensitive', '▁check', '▁for', '▁constraints', '▁name', '▁and', '▁then', '▁populate', '▁the', '▁data', '▁member', '\n', '//', 'system', '.', '▁out', '.', '▁print', 'ln', '(', '▁const', '▁public', '▁double', '▁timet', 'ob', 'roadcast', 'shape', 'before', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁tins', 'ide', '▁timet', 'ob', 'roadcast', 'shape', 'before', '▁method', '"""");', '\n\n', 'double', '▁target', 'response', '▁time', '_', '▁temp', '▁=', '▁0.', '00;', '\n\n', '▁for', '(', '▁int', '▁i', '=0;', '▁i', '<', '▁n', 'osh', 'apes', ';', '▁i', '++', '▁public', '▁double', '▁timet', 'ob', 'roadcast', 'shape', 'after', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁tins', 'ide', '▁timet', 'ob', 'roadcast', 'shape', 'after', '▁method', '"""");', '\n\n', 'double', '▁target', 'response', '▁time', '_', '▁temp', '▁=', '▁0.', '00;', '\n\n', '▁for', '(', '▁int', '▁i', '=0;', '▁i', '<', '▁n', 'osh', 'apes', ';', '▁i', '++)', '{', '▁public', '▁double', '▁timet', 'ob', 'roadcast', 'text', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁tins', 'ide', '▁timet', 'ob', 'roadcast', 'text', '▁method', '"""");', '\n\n', 'double', '▁target', 'response', '▁time', '_', '▁temp', '▁=', '▁0.', '00;', '\n\n', '▁for', '(', '▁int', '▁i', '=0;', '▁i', '<', '▁note', 'xt', 'items', ';', '▁i', '++)', '{', '\n\n', '▁target', '▁public', '▁double', '▁writ', 'etime', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁tins', 'ide', '▁writ', 'etime', '▁method', '"""");', '\n\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁t', '\\', '▁t', 'total', '▁time', '▁to', '▁write', '▁=', '▁""""', '▁+', '▁writ', 'etime', ');', '\n\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁t', '\\', '▁t', 'leaving', '▁w', '▁public', '▁double', '▁target', 'respons', 'etime', 'before', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁tins', 'ide', '▁target', 'respons', 'etime', 'before', '▁method', '\\', '▁n', '"""");', '\n\n', 'target', 'response', '▁time', '▁=', '▁timet', 'ob', 'roadcast', 'shape', 'before', '()', '▁+', '\n', 'tim', 'et', 'ob', 'roadcast', 'text', '()', 'public', '▁double', '▁target', 'respons', 'etime', 'after', '()', '{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁t', '\\', '▁tins', 'ide', '▁target', 'respons', 'etime', 'after', '▁method', '\\', '▁n', '"""");', '\n\n', 'target', 'response', '▁time', '▁=', '▁timet', 'ob', 'roadcast', 'shape', 'after', '()', '▁+', '\n', 'tim', 'et', 'ob', 'roadcast', 'text', '()', '▁+', '▁w', '""', '\n']"~"white board execut graph driver data member doubl avg shape size origin doubl avg shape size specul constraint data member doubl avg text size doubl write time doubl shape doubl text item doubl band width public white board execut graph vector driver vector constraint driver driver constraint constraint end constructor public string string string result result avg shape size origin avg shape size origin navg shape size specul avg shape size specul navg text size avg text sizepubl void inject driver system println insid inject driver method run loop one driver case insensit check driver name popul data member public void inject constraint system println insid inject constraint method case insensit check constraint name popul data member system println const public doubl time broadcast shape system println insid time broadcast shape method doubl target respons time temp int shape public doubl time broadcast shape system println insid time broadcast shape method doubl target respons time temp int shape public doubl time broadcast text system println insid time broadcast text method doubl target respons time temp int text item target public doubl write time system println insid write time method system println total time write write time system println leav public doubl target respons time system println insid target respons time method target respons time time broadcast shape time broadcast text public doubl target respons time system println (""""\ insid target respons time method """"); target respons time time broadcast shape time broadcast text"
103~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/79.java~79.java~"79	""performance model Handler String strES; // string received from eventserver
 String impactReport;// string to be send to eventServer

 String commandStr; // represent the command ex. execute, re - execute etc
 String eventId;// refers to the eventId
 String performance model Handler(String msg)
 {
this. strES = msg;
 } public void messageParser()
 {
System. out. println(""""INSIDE PARSER"""");

mainSto = new StringTokenizer( strES,""""|""""); // current ex will have 10 tokens in mainSto


tempStr1 = mainSto. nextToken();
//Re-execut public String generateReport()
{
 System. out. println(""""INSIDE generateReport"""");

 mainSto = new StringTokenizer( strES,""""|""""); // current ex will have 10 tokens in mainSto
 /*
""""ImpactReport|1015818161020| int grId; public int getId(){
 // get GraphId
 System. out. println(""""database start"""");
 int grId = database. getGraphId( modelName);
 return grId;
 } public void saveModel( int id)
 {
// save current model
database. saveCurrentModel( id);
 } public void insertData( int id){
// inject data into model
database. injectVariables( id, variable);
 } public void execute( int id){
// inject data into model
database. executeModel( id, variable);
 }""
"~src~"['▁7', '9', '\t', '""', 'per', 'for', 'man', 'ce', '▁model', '▁hand', 'ler', '▁string', '▁st', 'res', ';', '▁/', '/', '▁string', '▁received', '▁from', '▁events', 'er', 'ver', '\n', '▁string', '▁impact', 're', 'port', ';', '//', '▁string', '▁to', '▁be', '▁s', 'end', '▁to', '▁events', 'er', 'ver', '\n\n', '▁string', '▁command', 'str', ';', '▁/', '/', '▁represent', '▁the', '▁command', '▁ex', '.', '▁ex', 'ec', 'ute', ',', '▁re', '▁-', '▁ex', 'ec', 'ute', '▁etc', '\n', '▁string', '▁event', 'id', ';', '//', '▁refers', '▁to', '▁the', '▁event', 'id', '\n', '▁string', '▁performance', '▁model', '▁hand', 'ler', '(', 'str', 'ing', '▁ms', 'g', ')', '\n', '▁{', '\n', 'this', '.', '▁st', 'res', '▁=', '▁ms', 'g', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁message', 'p', 'ars', 'er', '(', ')', '\n', '▁{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'ins', 'ide', '▁par', 'ser', '""', '"")', ';', '\n\n', 'm', 'ain', 'st', 'o', '▁=', '▁new', '▁string', 't', 'ok', 'en', 'iz', 'er', '(', '▁st', 'res', ',""', '""|', '""', '"")', ';', '▁/', '/', '▁current', '▁ex', '▁will', '▁have', '▁10', '▁to', 'k', 'ens', '▁in', '▁main', 'st', 'o', '\n\n\n', 't', 'em', 'p', 'str', '1', '▁=', '▁main', 'st', 'o', '.', '▁next', 't', 'ok', 'en', '(', ');', '\n', '//', 're', '-', 'ex', 'ecut', '▁public', '▁string', '▁gener', 'at', 'ere', 'port', '(', ')', '\n', '{', '\n', '▁system', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'ins', 'ide', '▁gener', 'at', 'ere', 'port', '""', '"")', ';', '\n\n', '▁main', 'st', 'o', '▁=', '▁new', '▁string', 't', 'ok', 'en', 'iz', 'er', '(', '▁st', 'res', ',""', '""|', '""', '"")', ';', '▁/', '/', '▁current', '▁ex', '▁will', '▁have', '▁10', '▁to', 'k', 'ens', '▁in', '▁main', 'st', 'o', '\n', '▁/', '*', '\n', '""', '""', 'im', 'p', 'act', 're', 'port', '|', '10', '15', '8', '18', '16', '10', '20', '|', '▁int', '▁gr', 'id', ';', '▁public', '▁int', '▁get', 'id', '(', ')', '{', '\n', '▁/', '/', '▁get', '▁graph', 'id', '\n', '▁system', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'd', 'at', 'ab', 'ase', '▁start', '""', '"")', ';', '\n', '▁int', '▁gr', 'id', '▁=', '▁database', '.', '▁get', 'gr', 'aph', 'id', '(', '▁model', 'name', ');', '\n', '▁return', '▁gr', 'id', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁sav', 'em', 'od', 'el', '(', '▁int', '▁id', ')', '\n', '▁{', '\n', '//', '▁save', '▁current', '▁model', '\n', 'd', 'at', 'ab', 'ase', '.', '▁sav', 'ec', 'ur', 'rent', 'mod', 'el', '(', '▁id', ');', '\n', '▁}', '▁public', '▁vo', 'id', '▁ins', 'ert', 'd', 'ata', '(', '▁int', '▁id', ')', '{', '\n', '//', '▁in', 'ject', '▁data', '▁into', '▁model', '\n', 'd', 'at', 'ab', 'ase', '.', '▁in', 'ject', 'v', 'ari', 'ables', '(', '▁id', ',', '▁vari', 'able', ');', '\n', '▁}', '▁public', '▁vo', 'id', '▁ex', 'ec', 'ute', '(', '▁int', '▁id', ')', '{', '\n', '//', '▁in', 'ject', '▁data', '▁into', '▁model', '\n', 'd', 'at', 'ab', 'ase', '.', '▁execut', 'em', 'od', 'el', '(', '▁id', ',', '▁vari', 'able', ');', '\n', '▁}', '""', '\n']"~"['▁79', '\t', '""', 'performance', '▁model', '▁hand', 'ler', '▁string', '▁st', 'res', ';', '▁//', '▁string', '▁received', '▁from', '▁events', 'erver', '\n', '▁string', '▁impact', 're', 'port', ';', '//', '▁string', '▁to', '▁be', '▁send', '▁to', '▁events', 'erver', '\n\n', '▁string', '▁command', 'str', ';', '▁//', '▁represent', '▁the', '▁command', '▁ex', '.', '▁execute', ',', '▁re', '▁-', '▁execute', '▁etc', '\n', '▁string', '▁event', 'id', ';', '//', '▁refers', '▁to', '▁the', '▁event', 'id', '\n', '▁string', '▁performance', '▁model', '▁hand', 'ler', '(', 'string', '▁ms', 'g', ')', '\n', '▁{', '\n', 'this', '.', '▁st', 'res', '▁=', '▁ms', 'g', ';', '\n', '▁}', '▁public', '▁void', '▁message', 'p', 'ars', 'er', '()', '\n', '▁{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'ins', 'ide', '▁par', 'ser', '""', '"");', '\n\n', 'main', 'st', 'o', '▁=', '▁new', '▁string', 'tok', 'en', 'izer', '(', '▁st', 'res', ',""', '""|', '""', '"");', '▁//', '▁current', '▁ex', '▁will', '▁have', '▁10', '▁tok', 'ens', '▁in', '▁main', 'st', 'o', '\n\n\n', 'tem', 'p', 'str', '1', '▁=', '▁main', 'st', 'o', '.', '▁next', 'tok', 'en', '();', '\n', '//', 're', '-', 'ex', 'ecut', '▁public', '▁string', '▁gener', 'at', 'ere', 'port', '()', '\n', '{', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'ins', 'ide', '▁gener', 'at', 'ere', 'port', '""', '"");', '\n\n', '▁main', 'st', 'o', '▁=', '▁new', '▁string', 'tok', 'en', 'izer', '(', '▁st', 'res', ',""', '""|', '""', '"");', '▁//', '▁current', '▁ex', '▁will', '▁have', '▁10', '▁tok', 'ens', '▁in', '▁main', 'st', 'o', '\n', '▁/', '*', '\n', '""', '""', 'imp', 'act', 're', 'port', '|', '10', '15', '8', '18', '16', '10', '20', '|', '▁int', '▁grid', ';', '▁public', '▁int', '▁get', 'id', '()', '{', '\n', '▁//', '▁get', '▁graph', 'id', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'dat', 'abase', '▁start', '""', '"");', '\n', '▁int', '▁grid', '▁=', '▁database', '.', '▁get', 'graph', 'id', '(', '▁model', 'name', ');', '\n', '▁return', '▁grid', ';', '\n', '▁}', '▁public', '▁void', '▁sav', 'em', 'od', 'el', '(', '▁int', '▁id', ')', '\n', '▁{', '\n', '//', '▁save', '▁current', '▁model', '\n', 'dat', 'abase', '.', '▁sav', 'ec', 'ur', 'rent', 'model', '(', '▁id', ');', '\n', '▁}', '▁public', '▁void', '▁insert', 'data', '(', '▁int', '▁id', ')', '{', '\n', '//', '▁inject', '▁data', '▁into', '▁model', '\n', 'dat', 'abase', '.', '▁inject', 'vari', 'ables', '(', '▁id', ',', '▁variable', ');', '\n', '▁}', '▁public', '▁void', '▁execute', '(', '▁int', '▁id', ')', '{', '\n', '//', '▁inject', '▁data', '▁into', '▁model', '\n', 'dat', 'abase', '.', '▁execut', 'em', 'od', 'el', '(', '▁id', ',', '▁variable', ');', '\n', '▁}', '""', '\n']"~"['▁79', '\t', '""', 'performance', '▁model', '▁handler', '▁string', '▁st', 'res', ';', '▁//', '▁string', '▁received', '▁from', '▁events', 'erver', '\n', '▁string', '▁impact', 'report', ';', '//', '▁string', '▁to', '▁be', '▁send', '▁to', '▁events', 'erver', '\n\n', '▁string', '▁command', 'str', ';', '▁//', '▁represent', '▁the', '▁command', '▁ex', '.', '▁execute', ',', '▁re', '▁-', '▁execute', '▁etc', '\n', '▁string', '▁event', 'id', ';', '//', '▁refers', '▁to', '▁the', '▁event', 'id', '\n', '▁string', '▁performance', '▁model', '▁handler', '(', 'string', '▁msg', ')', '\n', '▁{', '\n', 'this', '.', '▁st', 'res', '▁=', '▁msg', ';', '\n', '▁}', '▁public', '▁void', '▁message', 'parser', '()', '\n', '▁{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'inside', '▁parser', '"""");', '\n\n', 'main', 'sto', '▁=', '▁new', '▁string', 'token', 'izer', '(', '▁st', 'res', ',""', '""|', '"""");', '▁//', '▁current', '▁ex', '▁will', '▁have', '▁10', '▁tokens', '▁in', '▁main', 'sto', '\n\n\n', 'tem', 'p', 'str', '1', '▁=', '▁main', 'sto', '.', '▁next', 'token', '();', '\n', '//', 're', '-', 'execut', '▁public', '▁string', '▁gener', 'at', 'ere', 'port', '()', '\n', '{', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'inside', '▁gener', 'at', 'ere', 'port', '"""");', '\n\n', '▁main', 'sto', '▁=', '▁new', '▁string', 'token', 'izer', '(', '▁st', 'res', ',""', '""|', '"""");', '▁//', '▁current', '▁ex', '▁will', '▁have', '▁10', '▁tokens', '▁in', '▁main', 'sto', '\n', '▁/*', '\n', '""""', 'impact', 'report', '|10', '158', '18', '16', '10', '20', '|', '▁int', '▁grid', ';', '▁public', '▁int', '▁get', 'id', '()', '{', '\n', '▁//', '▁get', '▁graph', 'id', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'database', '▁start', '"""");', '\n', '▁int', '▁grid', '▁=', '▁database', '.', '▁get', 'graph', 'id', '(', '▁model', 'name', ');', '\n', '▁return', '▁grid', ';', '\n', '▁}', '▁public', '▁void', '▁sav', 'em', 'odel', '(', '▁int', '▁id', ')', '\n', '▁{', '\n', '//', '▁save', '▁current', '▁model', '\n', 'database', '.', '▁sav', 'ec', 'urrent', 'model', '(', '▁id', ');', '\n', '▁}', '▁public', '▁void', '▁insert', 'data', '(', '▁int', '▁id', ')', '{', '\n', '//', '▁inject', '▁data', '▁into', '▁model', '\n', 'database', '.', '▁inject', 'vari', 'ables', '(', '▁id', ',', '▁variable', ');', '\n', '▁}', '▁public', '▁void', '▁execute', '(', '▁int', '▁id', ')', '{', '\n', '//', '▁inject', '▁data', '▁into', '▁model', '\n', 'database', '.', '▁execut', 'em', 'odel', '(', '▁id', ',', '▁variable', ');', '\n', '▁}', '""', '\n']"~perform model handler string str string receiv eventserv string impact report string send event server string command str repres command execut execut etc string event refer event string perform model handler string msg str msg public void messag parser system println insid parser main sto new string token str current token main sto temp str main sto next token execut public string generat report system println insid generat report main sto new string token str current token main sto impact report int public int get get graph system println databas start int databas get graph model name return public void save model int save current model databas save current model public void insert data int inject data model databas inject variabl variabl public void execut int inject data model databas execut model variabl
104~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/55.java~55.java~"55	""eventserver Threadstatic private int count = 0;
 private int taskNumber;
 protected Done done;
 ServerSocket theServer;

 private Connection conn;
 private Statement stmt;
 private ResultSet rs;

 private EventParser ep;
 private int id; EventServerThread(ServerSocket ss)
 {
 theServer = ss;
 count++;
 taskNumber = count;
 ep = new EventParser();
 } public void run()
 {

 while( true)
 {
 try
 {

Socket client = theServer. accept();
BufferedReader input = new BufferedReader( new InputStreamReader( client. getInputStream()));
PrintWriter output = new P public String getNextID()
 {

try
{
Class. forName("""" sun. jdbc. odbc.jdbcodbcDriver"""");
this. conn = DriverManager. getConnection("""" jdbc: odbc:EBT"""",""""EBT"""",""""EBT"""");
this. stmt = connpublic String searchDate()
 {

String dateString = new String();
Vector dateVector = new Vector();

try
{

 Class. forName("""" sun. jdbc. odbc.jdbcodbcDriver"""");
 Connection conn = DriverManager. getConnectio public String searchQueryID(String date)
 {
Vector queryVector = new Vector();

String searchQuery = new String();

try
{
 Class. forName("""" sun. jdbc. odbc.JdbcOdbcDriver"""");
 conn = DriverManager. getpublic String getConstraintFromDataBase(String queryID)
 {

String ConstString = new String();


try
{

 Class. forName("""" sun. jdbc. odbc.JdbcOdbcDriver"""");

 conn = DriverManager. getConnection("""" j public String getDriverFromDataBase(String queryID)
 {

String driverString = new String();

try
{

 Class. forName("""" sun. jdbc. odbc.JdbcOdbcDriver"""");

 conn = DriverManager. getConnection("""" jdbc ""
"~src~"['▁5', '5', '\t', '""', 'ev', 'ents', 'er', 'ver', '▁th', 'read', 'st', 'atic', '▁private', '▁int', '▁count', '▁=', '▁0', ';', '\n', '▁private', '▁int', '▁tas', 'kn', 'umber', ';', '\n', '▁protected', '▁done', '▁done', ';', '\n', '▁serv', 'ers', 'ock', 'et', '▁the', 'ser', 'ver', ';', '\n\n', '▁private', '▁connection', '▁conn', ';', '\n', '▁private', '▁statement', '▁st', 'm', 't', ';', '\n', '▁private', '▁results', 'et', '▁r', 's', ';', '\n\n', '▁private', '▁event', 'p', 'ars', 'er', '▁ep', ';', '\n', '▁private', '▁int', '▁id', ';', '▁events', 'er', 'ver', 'th', 'read', '(', 's', 'erv', 'ers', 'ock', 'et', '▁ss', ')', '\n', '▁{', '\n', '▁the', 'ser', 'ver', '▁=', '▁ss', ';', '\n', '▁count', '+', '+', ';', '\n', '▁tas', 'kn', 'umber', '▁=', '▁count', ';', '\n', '▁ep', '▁=', '▁new', '▁event', 'p', 'ars', 'er', '(', ');', '\n', '▁}', '▁public', '▁vo', 'id', '▁run', '(', ')', '\n', '▁{', '\n\n', '▁while', '(', '▁true', ')', '\n', '▁{', '\n', '▁try', '\n', '▁{', '\n\n', 's', 'ock', 'et', '▁cl', 'ient', '▁=', '▁the', 'ser', 'ver', '.', '▁accept', '(', ');', '\n', 'b', 'uf', 'fer', 'ed', 'read', 'er', '▁in', 'put', '▁=', '▁new', '▁bu', 'ffer', 'ed', 'read', 'er', '(', '▁new', '▁in', 'put', 'stream', 'read', 'er', '(', '▁cl', 'ient', '.', '▁get', 'in', 'put', 'stream', '(', ')', ')', ');', '\n', 'pr', 'int', 'writer', '▁out', 'put', '▁=', '▁new', '▁p', '▁public', '▁string', '▁get', 'ne', 'xt', 'id', '(', ')', '\n', '▁{', '\n\n', 't', 'ry', '\n', '{', '\n', 'class', '.', '▁for', 'name', '(', '""', '""', '▁sun', '.', '▁j', 'd', 'bc', '.', '▁od', 'bc', '.', 'j', 'd', 'bc', 'od', 'bc', 'dr', 'iver', '""', '"")', ';', '\n', 'this', '.', '▁conn', '▁=', '▁driver', 'man', 'ager', '.', '▁get', 'con', 'n', 'ection', '(', '""', '""', '▁j', 'd', 'bc', ':', '▁od', 'bc', ':', 'e', 'b', 't', '""', '"",', '""', '""', 'e', 'b', 't', '""', '"",', '""', '""', 'e', 'b', 't', '""', '"")', ';', '\n', 'this', '.', '▁st', 'm', 't', '▁=', '▁conn', 'publ', 'ic', '▁string', '▁search', 'd', 'ate', '(', ')', '\n', '▁{', '\n\n', 'str', 'ing', '▁dat', 'est', 'ring', '▁=', '▁new', '▁string', '(', ');', '\n', 'v', 'ector', '▁date', 'v', 'ector', '▁=', '▁new', '▁v', 'ector', '(', ');', '\n\n', 't', 'ry', '\n', '{', '\n\n', '▁class', '.', '▁for', 'name', '(', '""', '""', '▁sun', '.', '▁j', 'd', 'bc', '.', '▁od', 'bc', '.', 'j', 'd', 'bc', 'od', 'bc', 'dr', 'iver', '""', '"")', ';', '\n', '▁connection', '▁conn', '▁=', '▁driver', 'man', 'ager', '.', '▁get', 'con', 'n', 'ect', 'io', '▁public', '▁string', '▁search', 'qu', 'ery', 'id', '(', 'str', 'ing', '▁date', ')', '\n', '▁{', '\n', 'v', 'ector', '▁qu', 'ery', 'v', 'ector', '▁=', '▁new', '▁v', 'ector', '(', ');', '\n\n', 'str', 'ing', '▁search', 'qu', 'ery', '▁=', '▁new', '▁string', '(', ');', '\n\n', 't', 'ry', '\n', '{', '\n', '▁class', '.', '▁for', 'name', '(', '""', '""', '▁sun', '.', '▁j', 'd', 'bc', '.', '▁od', 'bc', '.', 'j', 'd', 'bc', 'od', 'bc', 'dr', 'iver', '""', '"")', ';', '\n', '▁conn', '▁=', '▁driver', 'man', 'ager', '.', '▁get', 'publ', 'ic', '▁string', '▁get', 'con', 'str', 'aint', 'from', 'd', 'at', 'ab', 'ase', '(', 'str', 'ing', '▁qu', 'ery', 'id', ')', '\n', '▁{', '\n\n', 'str', 'ing', '▁const', 'str', 'ing', '▁=', '▁new', '▁string', '(', ');', '\n\n\n', 't', 'ry', '\n', '{', '\n\n', '▁class', '.', '▁for', 'name', '(', '""', '""', '▁sun', '.', '▁j', 'd', 'bc', '.', '▁od', 'bc', '.', 'j', 'd', 'bc', 'od', 'bc', 'dr', 'iver', '""', '"")', ';', '\n\n', '▁conn', '▁=', '▁driver', 'man', 'ager', '.', '▁get', 'con', 'n', 'ection', '(', '""', '""', '▁j', '▁public', '▁string', '▁get', 'dr', 'iver', 'from', 'd', 'at', 'ab', 'ase', '(', 'str', 'ing', '▁qu', 'ery', 'id', ')', '\n', '▁{', '\n\n', 'str', 'ing', '▁driver', 'str', 'ing', '▁=', '▁new', '▁string', '(', ');', '\n\n', 't', 'ry', '\n', '{', '\n\n', '▁class', '.', '▁for', 'name', '(', '""', '""', '▁sun', '.', '▁j', 'd', 'bc', '.', '▁od', 'bc', '.', 'j', 'd', 'bc', 'od', 'bc', 'dr', 'iver', '""', '"")', ';', '\n\n', '▁conn', '▁=', '▁driver', 'man', 'ager', '.', '▁get', 'con', 'n', 'ection', '(', '""', '""', '▁j', 'd', 'bc', '▁""', '\n']"~"['▁55', '\t', '""', 'ev', 'ents', 'erver', '▁thread', 'static', '▁private', '▁int', '▁count', '▁=', '▁0', ';', '\n', '▁private', '▁int', '▁tas', 'kn', 'umber', ';', '\n', '▁protected', '▁done', '▁done', ';', '\n', '▁servers', 'ock', 'et', '▁the', 'ser', 'ver', ';', '\n\n', '▁private', '▁connection', '▁conn', ';', '\n', '▁private', '▁statement', '▁st', 'mt', ';', '\n', '▁private', '▁results', 'et', '▁rs', ';', '\n\n', '▁private', '▁event', 'p', 'ars', 'er', '▁ep', ';', '\n', '▁private', '▁int', '▁id', ';', '▁events', 'erver', 'th', 'read', '(', 'serv', 'ers', 'ock', 'et', '▁ss', ')', '\n', '▁{', '\n', '▁the', 'ser', 'ver', '▁=', '▁ss', ';', '\n', '▁count', '++', ';', '\n', '▁tas', 'kn', 'umber', '▁=', '▁count', ';', '\n', '▁ep', '▁=', '▁new', '▁event', 'p', 'ars', 'er', '();', '\n', '▁}', '▁public', '▁void', '▁run', '()', '\n', '▁{', '\n\n', '▁while', '(', '▁true', ')', '\n', '▁{', '\n', '▁try', '\n', '▁{', '\n\n', 's', 'ock', 'et', '▁client', '▁=', '▁the', 'ser', 'ver', '.', '▁accept', '();', '\n', 'b', 'uffer', 'ed', 'read', 'er', '▁input', '▁=', '▁new', '▁buffer', 'ed', 'read', 'er', '(', '▁new', '▁input', 'stream', 'read', 'er', '(', '▁client', '.', '▁get', 'in', 'put', 'stream', '())', ');', '\n', 'print', 'writer', '▁output', '▁=', '▁new', '▁p', '▁public', '▁string', '▁get', 'next', 'id', '()', '\n', '▁{', '\n\n', 'try', '\n', '{', '\n', 'class', '.', '▁for', 'name', '(""', '""', '▁sun', '.', '▁j', 'd', 'bc', '.', '▁od', 'bc', '.', 'j', 'd', 'bc', 'od', 'bc', 'dr', 'iver', '""', '"");', '\n', 'this', '.', '▁conn', '▁=', '▁driver', 'manager', '.', '▁get', 'conn', 'ection', '(""', '""', '▁j', 'd', 'bc', ':', '▁od', 'bc', ':', 'eb', 't', '""', '"",', '""', '""', 'eb', 't', '""', '"",', '""', '""', 'eb', 't', '""', '"");', '\n', 'this', '.', '▁st', 'mt', '▁=', '▁conn', 'public', '▁string', '▁search', 'date', '()', '\n', '▁{', '\n\n', 'string', '▁dat', 'est', 'ring', '▁=', '▁new', '▁string', '();', '\n', 'v', 'ector', '▁date', 'v', 'ector', '▁=', '▁new', '▁vector', '();', '\n\n', 'try', '\n', '{', '\n\n', '▁class', '.', '▁for', 'name', '(""', '""', '▁sun', '.', '▁j', 'd', 'bc', '.', '▁od', 'bc', '.', 'j', 'd', 'bc', 'od', 'bc', 'dr', 'iver', '""', '"");', '\n', '▁connection', '▁conn', '▁=', '▁driver', 'manager', '.', '▁get', 'connect', 'io', '▁public', '▁string', '▁search', 'qu', 'ery', 'id', '(', 'string', '▁date', ')', '\n', '▁{', '\n', 'v', 'ector', '▁query', 'v', 'ector', '▁=', '▁new', '▁vector', '();', '\n\n', 'string', '▁search', 'qu', 'ery', '▁=', '▁new', '▁string', '();', '\n\n', 'try', '\n', '{', '\n', '▁class', '.', '▁for', 'name', '(""', '""', '▁sun', '.', '▁j', 'd', 'bc', '.', '▁od', 'bc', '.', 'j', 'd', 'bc', 'od', 'bc', 'dr', 'iver', '""', '"");', '\n', '▁conn', '▁=', '▁driver', 'manager', '.', '▁get', 'public', '▁string', '▁get', 'con', 'str', 'aint', 'from', 'dat', 'abase', '(', 'string', '▁query', 'id', ')', '\n', '▁{', '\n\n', 'string', '▁const', 'string', '▁=', '▁new', '▁string', '();', '\n\n\n', 'try', '\n', '{', '\n\n', '▁class', '.', '▁for', 'name', '(""', '""', '▁sun', '.', '▁j', 'd', 'bc', '.', '▁od', 'bc', '.', 'j', 'd', 'bc', 'od', 'bc', 'dr', 'iver', '""', '"");', '\n\n', '▁conn', '▁=', '▁driver', 'manager', '.', '▁get', 'conn', 'ection', '(""', '""', '▁j', '▁public', '▁string', '▁get', 'dr', 'iver', 'from', 'dat', 'abase', '(', 'string', '▁query', 'id', ')', '\n', '▁{', '\n\n', 'string', '▁driver', 'string', '▁=', '▁new', '▁string', '();', '\n\n', 'try', '\n', '{', '\n\n', '▁class', '.', '▁for', 'name', '(""', '""', '▁sun', '.', '▁j', 'd', 'bc', '.', '▁od', 'bc', '.', 'j', 'd', 'bc', 'od', 'bc', 'dr', 'iver', '""', '"");', '\n\n', '▁conn', '▁=', '▁driver', 'manager', '.', '▁get', 'conn', 'ection', '(""', '""', '▁j', 'd', 'bc', '▁""', '\n']"~"['▁55', '\t', '""', 'events', 'erver', '▁thread', 'static', '▁private', '▁int', '▁count', '▁=', '▁0;', '\n', '▁private', '▁int', '▁tas', 'kn', 'umber', ';', '\n', '▁protected', '▁done', '▁done', ';', '\n', '▁servers', 'ocket', '▁the', 'server', ';', '\n\n', '▁private', '▁connection', '▁conn', ';', '\n', '▁private', '▁statement', '▁st', 'mt', ';', '\n', '▁private', '▁results', 'et', '▁rs', ';', '\n\n', '▁private', '▁event', 'parser', '▁ep', ';', '\n', '▁private', '▁int', '▁id', ';', '▁events', 'erver', 'thread', '(', 'serv', 'ers', 'ocket', '▁ss', ')', '\n', '▁{', '\n', '▁the', 'server', '▁=', '▁ss', ';', '\n', '▁count', '++;', '\n', '▁tas', 'kn', 'umber', '▁=', '▁count', ';', '\n', '▁ep', '▁=', '▁new', '▁event', 'parser', '();', '\n', '▁}', '▁public', '▁void', '▁run', '()', '\n', '▁{', '\n\n', '▁while', '(', '▁true', ')', '\n', '▁{', '\n', '▁try', '\n', '▁{', '\n\n', 's', 'ocket', '▁client', '▁=', '▁the', 'server', '.', '▁accept', '();', '\n', 'buffer', 'ed', 'reader', '▁input', '▁=', '▁new', '▁buffered', 'reader', '(', '▁new', '▁input', 'stream', 'reader', '(', '▁client', '.', '▁get', 'input', 'stream', '())', ');', '\n', 'print', 'writer', '▁output', '▁=', '▁new', '▁p', '▁public', '▁string', '▁get', 'next', 'id', '()', '\n', '▁{', '\n\n', 'try', '\n', '{', '\n', 'class', '.', '▁for', 'name', '(""', '""', '▁sun', '.', '▁jd', 'bc', '.', '▁od', 'bc', '.', 'jd', 'bc', 'od', 'bc', 'driver', '"""");', '\n', 'this', '.', '▁conn', '▁=', '▁driver', 'manager', '.', '▁get', 'connection', '(""', '""', '▁jd', 'bc', ':', '▁od', 'bc', ':', 'eb', 't', '""', '"",', '""""', 'eb', 't', '""', '"",', '""""', 'eb', 't', '"""");', '\n', 'this', '.', '▁st', 'mt', '▁=', '▁conn', 'public', '▁string', '▁search', 'date', '()', '\n', '▁{', '\n\n', 'string', '▁dat', 'estring', '▁=', '▁new', '▁string', '();', '\n', 'vector', '▁date', 'vector', '▁=', '▁new', '▁vector', '();', '\n\n', 'try', '\n', '{', '\n\n', '▁class', '.', '▁for', 'name', '(""', '""', '▁sun', '.', '▁jd', 'bc', '.', '▁od', 'bc', '.', 'jd', 'bc', 'od', 'bc', 'driver', '"""");', '\n', '▁connection', '▁conn', '▁=', '▁driver', 'manager', '.', '▁get', 'connect', 'io', '▁public', '▁string', '▁search', 'query', 'id', '(', 'string', '▁date', ')', '\n', '▁{', '\n', 'vector', '▁query', 'vector', '▁=', '▁new', '▁vector', '();', '\n\n', 'string', '▁search', 'query', '▁=', '▁new', '▁string', '();', '\n\n', 'try', '\n', '{', '\n', '▁class', '.', '▁for', 'name', '(""', '""', '▁sun', '.', '▁jd', 'bc', '.', '▁od', 'bc', '.', 'jd', 'bc', 'od', 'bc', 'driver', '"""");', '\n', '▁conn', '▁=', '▁driver', 'manager', '.', '▁get', 'public', '▁string', '▁get', 'con', 'str', 'aint', 'from', 'database', '(', 'string', '▁query', 'id', ')', '\n', '▁{', '\n\n', 'string', '▁const', 'string', '▁=', '▁new', '▁string', '();', '\n\n\n', 'try', '\n', '{', '\n\n', '▁class', '.', '▁for', 'name', '(""', '""', '▁sun', '.', '▁jd', 'bc', '.', '▁od', 'bc', '.', 'jd', 'bc', 'od', 'bc', 'driver', '"""");', '\n\n', '▁conn', '▁=', '▁driver', 'manager', '.', '▁get', 'connection', '(""', '""', '▁j', '▁public', '▁string', '▁get', 'driver', 'from', 'database', '(', 'string', '▁query', 'id', ')', '\n', '▁{', '\n\n', 'string', '▁driver', 'string', '▁=', '▁new', '▁string', '();', '\n\n', 'try', '\n', '{', '\n\n', '▁class', '.', '▁for', 'name', '(""', '""', '▁sun', '.', '▁jd', 'bc', '.', '▁od', 'bc', '.', 'jd', 'bc', 'od', 'bc', 'driver', '"""");', '\n\n', '▁conn', '▁=', '▁driver', 'manager', '.', '▁get', 'connection', '(""', '""', '▁jd', 'bc', '▁""', '\n']"~eventserv threadstat privat int count privat int task number protect done done server socket server privat connect conn privat statement stmt privat result set privat event parser privat int event server thread server socket server count task number count new event parser public void run true tri socket client server accept buffer reader input new buffer reader new input stream reader client get input stream print writer output new public string get next tri class name sun jdbc odbc jdbcodbc driver conn driver manag get connect jdbc odbc ebt ebt ebt stmt connpubl string search date string date string new string vector date vector new vector tri class name sun jdbc odbc jdbcodbc driver connect conn driver manag get connectio public string search queri string date vector queri vector new vector string search queri new string tri class name sun jdbc odbc jdbc odbc driver conn driver manag getpubl string get constraint data base string queri string const string new string tri class name sun jdbc odbc jdbc odbc driver conn driver manag get connect public string get driver data base string queri string driver string new string tri class name sun jdbc odbc jdbc odbc driver conn driver manag get connect jdbc
105~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/49.java~49.java~"49	""Constraints Description private String project  Name = null  ;
 private String module  Path = null  ;
 private String requirement  ID = null  ;

 private String value = null  ;
 private String logic = null  ;
 private String units = null  ;
 private String description = null  ;
 public Constraints  Description  (
  String project  Name  ,
  String module  Path  ,
  String requirement  ID  )
 {

  this  . project  Name = project  Name  ;
  this  . module  Path = module  Path  ;
  this  . requirement  ID = requirement  ID  ;

 }  public String get  Description  () {
  return this  . description  ;
 }  public String get  Logic  () {
  return this  . logic  ;
 }  public String get  Module  Path  () {
  return this  . module  Path  ;
 }  public String get  Project  Name  () {
  return this  . project  Name  ;
 }  public String get  Requirement  ID  () {
  return this  . requirement  ID  ;
 }  public String get  Units  () {
  return this  . units  ;
 }  public String get  Value  () {
  return this  . value  ;
 }  public void set  Description  (  String description  ) {
  this  . description = description  ;
 }  public void set  Logic  (  String logic  ) {
  this  . logic = logic  ;
 }  public void set  Module  Path  (  String module  Path  ) {
  this  . module  Path = module  Path  ;
 }  public void set  Project  Name  (  String project  Name  ) {
  this  . project  Name = project  Name  ;
 }  public void set  Requirement  ID  (  String requirement  ID  ) {
  this  . requirement  ID = requirement  ID  ;
 }  public void set  Units  (  String units  ) {
  this  . units = units  ;
 }  public void set  Value  (  String units  ) {
  this  . value = units  ;
 }  public String get  Impacted  Constraint  () {
  return this  . impacted  Constraint  ;
 }  public void set  Impacted  Constraint  (  String impacted  Constraint  ) {
  this  . impacted  Constraint = impacted  Constraint  ;
 }  public String get  Attribute  () {
  return this  . attribute  ;
 }  public void set  Attribute  (  String attribute  ) {
  this  . attribute = attribute  ;
 }  public String get  Performance  Model  Name  () {
  return this  . performance  Model  Name  ;
 }  public void set  Performance  Model  Name  (  String performance  Model  Name  ) {
  this  . performance  Model  Name = performance  Model  Name  ;
 } public String to  String  () {

  String str =
   """"\ n  Project Name = """"
    + this  . project  Name
    + """"\ n  """"
    + """"  Module Path = """"
    + this  . module  Path
    + """"\ n  """"
    + """"  Requirement ID = """"
    + this  . requirement  ID
    + """"\ n  """"
   public boolean equals  (  Object o  ) {

  if (!( o instance of Constraints  Description  ))
   return false  ;

  Constraints  Description cd = (  Constraints  Description  ) o  ;

  if ( cd  . project  Name  . equals  Ignore  Case  ( this  . project  Na  public int hash  Code  () {

  int hash  Code = 0  ;

  if ( hash  Code == 0  ) {
   int result = 17  ;
   result = 37 * result + this  . project  Name  . hash  Code  ();
   result = 37 * result + this  . module  Path  . hash  Code  ();
   result = 37 * ""
"~src~"['▁49', '\t', '""', 'con', 'str', 'aints', '▁description', '▁private', '▁string', '▁project', '▁name', '▁=', '▁n', 'ull', '▁;', '\n', '▁private', '▁string', '▁mod', 'ule', '▁path', '▁=', '▁n', 'ull', '▁;', '\n', '▁private', '▁string', '▁require', 'ment', '▁id', '▁=', '▁n', 'ull', '▁;', '\n\n', '▁private', '▁string', '▁value', '▁=', '▁n', 'ull', '▁;', '\n', '▁private', '▁string', '▁log', 'ic', '▁=', '▁n', 'ull', '▁;', '\n', '▁private', '▁string', '▁units', '▁=', '▁n', 'ull', '▁;', '\n', '▁private', '▁string', '▁description', '▁=', '▁n', 'ull', '▁;', '\n', '▁public', '▁constr', 'aints', '▁description', '▁(', '\n', '▁string', '▁project', '▁name', '▁,', '\n', '▁string', '▁mod', 'ule', '▁path', '▁,', '\n', '▁string', '▁require', 'ment', '▁id', '▁)', '\n', '▁{', '\n\n', '▁this', '▁.', '▁project', '▁name', '▁=', '▁project', '▁name', '▁;', '\n', '▁this', '▁.', '▁mod', 'ule', '▁path', '▁=', '▁mod', 'ule', '▁path', '▁;', '\n', '▁this', '▁.', '▁require', 'ment', '▁id', '▁=', '▁require', 'ment', '▁id', '▁;', '\n\n', '▁}', '▁public', '▁string', '▁get', '▁description', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁description', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁log', 'ic', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁log', 'ic', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁mod', 'ule', '▁path', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁mod', 'ule', '▁path', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁project', '▁name', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁project', '▁name', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁require', 'ment', '▁id', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁require', 'ment', '▁id', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁units', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁units', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁value', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁value', '▁;', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', '▁description', '▁(', '▁string', '▁description', '▁)', '▁{', '\n', '▁this', '▁.', '▁description', '▁=', '▁description', '▁;', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', '▁log', 'ic', '▁(', '▁string', '▁log', 'ic', '▁)', '▁{', '\n', '▁this', '▁.', '▁log', 'ic', '▁=', '▁log', 'ic', '▁;', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', '▁mod', 'ule', '▁path', '▁(', '▁string', '▁mod', 'ule', '▁path', '▁)', '▁{', '\n', '▁this', '▁.', '▁mod', 'ule', '▁path', '▁=', '▁mod', 'ule', '▁path', '▁;', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', '▁project', '▁name', '▁(', '▁string', '▁project', '▁name', '▁)', '▁{', '\n', '▁this', '▁.', '▁project', '▁name', '▁=', '▁project', '▁name', '▁;', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', '▁require', 'ment', '▁id', '▁(', '▁string', '▁require', 'ment', '▁id', '▁)', '▁{', '\n', '▁this', '▁.', '▁require', 'ment', '▁id', '▁=', '▁require', 'ment', '▁id', '▁;', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', '▁units', '▁(', '▁string', '▁units', '▁)', '▁{', '\n', '▁this', '▁.', '▁units', '▁=', '▁units', '▁;', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', '▁value', '▁(', '▁string', '▁units', '▁)', '▁{', '\n', '▁this', '▁.', '▁value', '▁=', '▁units', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁impact', 'ed', '▁constr', 'aint', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁impact', 'ed', '▁constr', 'aint', '▁;', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', '▁impact', 'ed', '▁constr', 'aint', '▁(', '▁string', '▁impact', 'ed', '▁constr', 'aint', '▁)', '▁{', '\n', '▁this', '▁.', '▁impact', 'ed', '▁constr', 'aint', '▁=', '▁impact', 'ed', '▁constr', 'aint', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁att', 'rib', 'ute', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁att', 'rib', 'ute', '▁;', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', '▁att', 'rib', 'ute', '▁(', '▁string', '▁att', 'rib', 'ute', '▁)', '▁{', '\n', '▁this', '▁.', '▁att', 'rib', 'ute', '▁=', '▁att', 'rib', 'ute', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁performance', '▁model', '▁name', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁performance', '▁model', '▁name', '▁;', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', '▁performance', '▁model', '▁name', '▁(', '▁string', '▁performance', '▁model', '▁name', '▁)', '▁{', '\n', '▁this', '▁.', '▁performance', '▁model', '▁name', '▁=', '▁performance', '▁model', '▁name', '▁;', '\n', '▁}', '▁public', '▁string', '▁to', '▁string', '▁()', '▁{', '\n\n', '▁string', '▁str', '▁=', '\n', '▁""', '""', '\\', '▁n', '▁project', '▁name', '▁=', '▁""', '""', '\n', '▁+', '▁this', '▁.', '▁project', '▁name', '\n', '▁+', '▁""', '""', '\\', '▁n', '▁""', '""', '\n', '▁+', '▁""', '""', '▁mod', 'ule', '▁path', '▁=', '▁""', '""', '\n', '▁+', '▁this', '▁.', '▁mod', 'ule', '▁path', '\n', '▁+', '▁""', '""', '\\', '▁n', '▁""', '""', '\n', '▁+', '▁""', '""', '▁require', 'ment', '▁id', '▁=', '▁""', '""', '\n', '▁+', '▁this', '▁.', '▁require', 'ment', '▁id', '\n', '▁+', '▁""', '""', '\\', '▁n', '▁""', '""', '\n', '▁public', '▁bo', 'ole', 'an', '▁equ', 'als', '▁(', '▁object', '▁o', '▁)', '▁{', '\n\n', '▁if', '▁(', '!', '(', '▁o', '▁instance', '▁of', '▁constr', 'aints', '▁description', '▁)', ')', '\n', '▁return', '▁fal', 'se', '▁;', '\n\n', '▁constr', 'aints', '▁description', '▁cd', '▁=', '▁(', '▁constr', 'aints', '▁description', '▁)', '▁o', '▁;', '\n\n', '▁if', '▁(', '▁cd', '▁.', '▁project', '▁name', '▁.', '▁equ', 'als', '▁ign', 'ore', '▁case', '▁(', '▁this', '▁.', '▁project', '▁na', '▁public', '▁int', '▁has', 'h', '▁code', '▁()', '▁{', '\n\n', '▁int', '▁has', 'h', '▁code', '▁=', '▁0', '▁;', '\n\n', '▁if', '▁(', '▁has', 'h', '▁code', '▁=', '=', '▁0', '▁)', '▁{', '\n', '▁int', '▁result', '▁=', '▁17', '▁;', '\n', '▁result', '▁=', '▁37', '▁*', '▁result', '▁+', '▁this', '▁.', '▁project', '▁name', '▁.', '▁has', 'h', '▁code', '▁()', ';', '\n', '▁result', '▁=', '▁37', '▁*', '▁result', '▁+', '▁this', '▁.', '▁mod', 'ule', '▁path', '▁.', '▁has', 'h', '▁code', '▁()', ';', '\n', '▁result', '▁=', '▁37', '▁*', '▁""', '\n']"~"['▁49', '\t', '""', 'con', 'str', 'aints', '▁description', '▁private', '▁string', '▁project', '▁name', '▁=', '▁null', '▁;', '\n', '▁private', '▁string', '▁module', '▁path', '▁=', '▁null', '▁;', '\n', '▁private', '▁string', '▁requirement', '▁id', '▁=', '▁null', '▁;', '\n\n', '▁private', '▁string', '▁value', '▁=', '▁null', '▁;', '\n', '▁private', '▁string', '▁logic', '▁=', '▁null', '▁;', '\n', '▁private', '▁string', '▁units', '▁=', '▁null', '▁;', '\n', '▁private', '▁string', '▁description', '▁=', '▁null', '▁;', '\n', '▁public', '▁constraints', '▁description', '▁(', '\n', '▁string', '▁project', '▁name', '▁,', '\n', '▁string', '▁module', '▁path', '▁,', '\n', '▁string', '▁requirement', '▁id', '▁)', '\n', '▁{', '\n\n', '▁this', '▁.', '▁project', '▁name', '▁=', '▁project', '▁name', '▁;', '\n', '▁this', '▁.', '▁module', '▁path', '▁=', '▁module', '▁path', '▁;', '\n', '▁this', '▁.', '▁requirement', '▁id', '▁=', '▁requirement', '▁id', '▁;', '\n\n', '▁}', '▁public', '▁string', '▁get', '▁description', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁description', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁logic', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁logic', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁module', '▁path', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁module', '▁path', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁project', '▁name', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁project', '▁name', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁requirement', '▁id', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁requirement', '▁id', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁units', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁units', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁value', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁value', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁description', '▁(', '▁string', '▁description', '▁)', '▁{', '\n', '▁this', '▁.', '▁description', '▁=', '▁description', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁logic', '▁(', '▁string', '▁logic', '▁)', '▁{', '\n', '▁this', '▁.', '▁logic', '▁=', '▁logic', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁module', '▁path', '▁(', '▁string', '▁module', '▁path', '▁)', '▁{', '\n', '▁this', '▁.', '▁module', '▁path', '▁=', '▁module', '▁path', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁project', '▁name', '▁(', '▁string', '▁project', '▁name', '▁)', '▁{', '\n', '▁this', '▁.', '▁project', '▁name', '▁=', '▁project', '▁name', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁requirement', '▁id', '▁(', '▁string', '▁requirement', '▁id', '▁)', '▁{', '\n', '▁this', '▁.', '▁requirement', '▁id', '▁=', '▁requirement', '▁id', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁units', '▁(', '▁string', '▁units', '▁)', '▁{', '\n', '▁this', '▁.', '▁units', '▁=', '▁units', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁value', '▁(', '▁string', '▁units', '▁)', '▁{', '\n', '▁this', '▁.', '▁value', '▁=', '▁units', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁impacted', '▁constr', 'aint', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁impacted', '▁constr', 'aint', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁impacted', '▁constr', 'aint', '▁(', '▁string', '▁impacted', '▁constr', 'aint', '▁)', '▁{', '\n', '▁this', '▁.', '▁impacted', '▁constr', 'aint', '▁=', '▁impacted', '▁constr', 'aint', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁attribute', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁attribute', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁attribute', '▁(', '▁string', '▁attribute', '▁)', '▁{', '\n', '▁this', '▁.', '▁attribute', '▁=', '▁attribute', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁performance', '▁model', '▁name', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁performance', '▁model', '▁name', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁performance', '▁model', '▁name', '▁(', '▁string', '▁performance', '▁model', '▁name', '▁)', '▁{', '\n', '▁this', '▁.', '▁performance', '▁model', '▁name', '▁=', '▁performance', '▁model', '▁name', '▁;', '\n', '▁}', '▁public', '▁string', '▁to', '▁string', '▁()', '▁{', '\n\n', '▁string', '▁str', '▁=', '\n', '▁""""', '\\', '▁n', '▁project', '▁name', '▁=', '▁""""', '\n', '▁+', '▁this', '▁.', '▁project', '▁name', '\n', '▁+', '▁""""', '\\', '▁n', '▁""""', '\n', '▁+', '▁""""', '▁module', '▁path', '▁=', '▁""""', '\n', '▁+', '▁this', '▁.', '▁module', '▁path', '\n', '▁+', '▁""""', '\\', '▁n', '▁""""', '\n', '▁+', '▁""""', '▁requirement', '▁id', '▁=', '▁""""', '\n', '▁+', '▁this', '▁.', '▁requirement', '▁id', '\n', '▁+', '▁""""', '\\', '▁n', '▁""""', '\n', '▁public', '▁bo', 'olean', '▁equals', '▁(', '▁object', '▁o', '▁)', '▁{', '\n\n', '▁if', '▁(', '!', '(', '▁o', '▁instance', '▁of', '▁constraints', '▁description', '▁)', ')', '\n', '▁return', '▁false', '▁;', '\n\n', '▁constraints', '▁description', '▁cd', '▁=', '▁(', '▁constraints', '▁description', '▁)', '▁o', '▁;', '\n\n', '▁if', '▁(', '▁cd', '▁.', '▁project', '▁name', '▁.', '▁equals', '▁ignore', '▁case', '▁(', '▁this', '▁.', '▁project', '▁na', '▁public', '▁int', '▁hash', '▁code', '▁()', '▁{', '\n\n', '▁int', '▁hash', '▁code', '▁=', '▁0', '▁;', '\n\n', '▁if', '▁(', '▁hash', '▁code', '▁==', '▁0', '▁)', '▁{', '\n', '▁int', '▁result', '▁=', '▁17', '▁;', '\n', '▁result', '▁=', '▁37', '▁*', '▁result', '▁+', '▁this', '▁.', '▁project', '▁name', '▁.', '▁hash', '▁code', '▁()', ';', '\n', '▁result', '▁=', '▁37', '▁*', '▁result', '▁+', '▁this', '▁.', '▁module', '▁path', '▁.', '▁hash', '▁code', '▁()', ';', '\n', '▁result', '▁=', '▁37', '▁*', '▁""', '\n']"~"['▁49', '\t', '""', 'con', 'str', 'aints', '▁description', '▁private', '▁string', '▁project', '▁name', '▁=', '▁null', '▁;', '\n', '▁private', '▁string', '▁module', '▁path', '▁=', '▁null', '▁;', '\n', '▁private', '▁string', '▁requirement', '▁id', '▁=', '▁null', '▁;', '\n\n', '▁private', '▁string', '▁value', '▁=', '▁null', '▁;', '\n', '▁private', '▁string', '▁logic', '▁=', '▁null', '▁;', '\n', '▁private', '▁string', '▁units', '▁=', '▁null', '▁;', '\n', '▁private', '▁string', '▁description', '▁=', '▁null', '▁;', '\n', '▁public', '▁constraints', '▁description', '▁(', '\n', '▁string', '▁project', '▁name', '▁,', '\n', '▁string', '▁module', '▁path', '▁,', '\n', '▁string', '▁requirement', '▁id', '▁)', '\n', '▁{', '\n\n', '▁this', '▁.', '▁project', '▁name', '▁=', '▁project', '▁name', '▁;', '\n', '▁this', '▁.', '▁module', '▁path', '▁=', '▁module', '▁path', '▁;', '\n', '▁this', '▁.', '▁requirement', '▁id', '▁=', '▁requirement', '▁id', '▁;', '\n\n', '▁}', '▁public', '▁string', '▁get', '▁description', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁description', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁logic', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁logic', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁module', '▁path', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁module', '▁path', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁project', '▁name', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁project', '▁name', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁requirement', '▁id', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁requirement', '▁id', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁units', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁units', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁value', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁value', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁description', '▁(', '▁string', '▁description', '▁)', '▁{', '\n', '▁this', '▁.', '▁description', '▁=', '▁description', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁logic', '▁(', '▁string', '▁logic', '▁)', '▁{', '\n', '▁this', '▁.', '▁logic', '▁=', '▁logic', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁module', '▁path', '▁(', '▁string', '▁module', '▁path', '▁)', '▁{', '\n', '▁this', '▁.', '▁module', '▁path', '▁=', '▁module', '▁path', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁project', '▁name', '▁(', '▁string', '▁project', '▁name', '▁)', '▁{', '\n', '▁this', '▁.', '▁project', '▁name', '▁=', '▁project', '▁name', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁requirement', '▁id', '▁(', '▁string', '▁requirement', '▁id', '▁)', '▁{', '\n', '▁this', '▁.', '▁requirement', '▁id', '▁=', '▁requirement', '▁id', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁units', '▁(', '▁string', '▁units', '▁)', '▁{', '\n', '▁this', '▁.', '▁units', '▁=', '▁units', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁value', '▁(', '▁string', '▁units', '▁)', '▁{', '\n', '▁this', '▁.', '▁value', '▁=', '▁units', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁impacted', '▁constraint', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁impacted', '▁constraint', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁impacted', '▁constraint', '▁(', '▁string', '▁impacted', '▁constraint', '▁)', '▁{', '\n', '▁this', '▁.', '▁impacted', '▁constraint', '▁=', '▁impacted', '▁constraint', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁attribute', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁attribute', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁attribute', '▁(', '▁string', '▁attribute', '▁)', '▁{', '\n', '▁this', '▁.', '▁attribute', '▁=', '▁attribute', '▁;', '\n', '▁}', '▁public', '▁string', '▁get', '▁performance', '▁model', '▁name', '▁()', '▁{', '\n', '▁return', '▁this', '▁.', '▁performance', '▁model', '▁name', '▁;', '\n', '▁}', '▁public', '▁void', '▁set', '▁performance', '▁model', '▁name', '▁(', '▁string', '▁performance', '▁model', '▁name', '▁)', '▁{', '\n', '▁this', '▁.', '▁performance', '▁model', '▁name', '▁=', '▁performance', '▁model', '▁name', '▁;', '\n', '▁}', '▁public', '▁string', '▁to', '▁string', '▁()', '▁{', '\n\n', '▁string', '▁str', '▁=', '\n', '▁""""', '\\', '▁n', '▁project', '▁name', '▁=', '▁""""', '\n', '▁+', '▁this', '▁.', '▁project', '▁name', '\n', '▁+', '▁""""', '\\', '▁n', '▁""""', '\n', '▁+', '▁""""', '▁module', '▁path', '▁=', '▁""""', '\n', '▁+', '▁this', '▁.', '▁module', '▁path', '\n', '▁+', '▁""""', '\\', '▁n', '▁""""', '\n', '▁+', '▁""""', '▁requirement', '▁id', '▁=', '▁""""', '\n', '▁+', '▁this', '▁.', '▁requirement', '▁id', '\n', '▁+', '▁""""', '\\', '▁n', '▁""""', '\n', '▁public', '▁boolean', '▁equals', '▁(', '▁object', '▁o', '▁)', '▁{', '\n\n', '▁if', '▁(!', '(', '▁o', '▁instance', '▁of', '▁constraints', '▁description', '▁))', '\n', '▁return', '▁false', '▁;', '\n\n', '▁constraints', '▁description', '▁cd', '▁=', '▁(', '▁constraints', '▁description', '▁)', '▁o', '▁;', '\n\n', '▁if', '▁(', '▁cd', '▁.', '▁project', '▁name', '▁.', '▁equals', '▁ignore', '▁case', '▁(', '▁this', '▁.', '▁project', '▁na', '▁public', '▁int', '▁hash', '▁code', '▁()', '▁{', '\n\n', '▁int', '▁hash', '▁code', '▁=', '▁0', '▁;', '\n\n', '▁if', '▁(', '▁hash', '▁code', '▁==', '▁0', '▁)', '▁{', '\n', '▁int', '▁result', '▁=', '▁17', '▁;', '\n', '▁result', '▁=', '▁37', '▁*', '▁result', '▁+', '▁this', '▁.', '▁project', '▁name', '▁.', '▁hash', '▁code', '▁();', '\n', '▁result', '▁=', '▁37', '▁*', '▁result', '▁+', '▁this', '▁.', '▁module', '▁path', '▁.', '▁hash', '▁code', '▁();', '\n', '▁result', '▁=', '▁37', '▁*', '▁""', '\n']"~constraint descript privat string project name null privat string modul path null privat string requir null privat string valu null privat string logic null privat string unit null privat string descript null public constraint descript string project name string modul path string requir project name project name modul path modul path requir requir public string get descript return descript public string get logic return logic public string get modul path return modul path public string get project name return project name public string get requir return requir public string get unit return unit public string get valu return valu public void set descript string descript descript descript public void set logic string logic logic logic public void set modul path string modul path modul path modul path public void set project name string project name project name project name public void set requir string requir requir requir public void set unit string unit unit unit public void set valu string unit valu unit public string get impact constraint return impact constraint public void set impact constraint string impact constraint impact constraint impact constraint public string get attribut return attribut public void set attribut string attribut attribut attribut public string get perform model name return perform model name public void set perform model name string perform model name perform model name perform model name public string string string str project name project name modul path modul path requir requir public boolean equal object instanc constraint descript return fals constraint descript constraint descript project name equal ignor case project public int hash code int hash code hash code int result result result project name hash code result result modul path hash code (); result
106~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/56.java~56.java~"56	""Event Parser private Connection conn;
 private ResultSet rs;
 private Statement stmt; //EventParser Constructor
 // initializes the Database connection
 public EventParser()
 {
try
{
 Class. forName("""" sun. jdbc. odbc.JdbcOdbcDriver"""");
 this. conn = DriverManager. getConnection("""" jdbc: odbc: public void updateEvent(String str, String ID)
 {

String mProject;
String mEvent;
String mType;
String mNum;
String mrequirement ;
String mModule;
String mSQL;
String mDate;
String mReqtext;
//Check if a subscription exists
 public boolean CheckSubscription(String str)
 {

StringTokenizer tokens = new StringTokenizer( str, """"|"""");
String Message type = tokens. nextToken();
String SubscriberName = tokens. next //Insert a subscription into the """"Subscription"""" table
 public void AddSubscription(String str, int ID)
 {

// Parse the message string and get the fields

StringTokenizer tokens = new StringTokenizer( str, """"|"""");
String Messag //DeleteSubscription from the """"Subscription"""" table
 public void DeleteSubscription(String str, int ID)
 {
// Parse the message string and get the fields
StringTokenizer tokens = new StringTokenizer( str, """"|"""");
String Messag //Speculate method will receive a string from the Speculative GUI
 // tool and parse it using CallBack class to identify the
 // performance models
 public void speculate(String str)
 {
System. out. println(""""Speculate"""");
CallBack public void impactReport(String str)
 {
CallBack cb = new CallBack();
cb. parseImpactReport( str);
 }// end impactReport()""
"~src~"['▁5', '6', '\t', '""', 'ev', 'ent', '▁par', 'ser', '▁private', '▁connection', '▁conn', ';', '\n', '▁private', '▁results', 'et', '▁r', 's', ';', '\n', '▁private', '▁statement', '▁st', 'm', 't', ';', '▁/', '/', 'ev', 'ent', 'p', 'ars', 'er', '▁construct', 'or', '\n', '▁/', '/', '▁initial', 'izes', '▁the', '▁database', '▁connection', '\n', '▁public', '▁event', 'p', 'ars', 'er', '(', ')', '\n', '▁{', '\n', 't', 'ry', '\n', '{', '\n', '▁class', '.', '▁for', 'name', '(', '""', '""', '▁sun', '.', '▁j', 'd', 'bc', '.', '▁od', 'bc', '.', 'j', 'd', 'bc', 'od', 'bc', 'dr', 'iver', '""', '"")', ';', '\n', '▁this', '.', '▁conn', '▁=', '▁driver', 'man', 'ager', '.', '▁get', 'con', 'n', 'ection', '(', '""', '""', '▁j', 'd', 'bc', ':', '▁od', 'bc', ':', '▁public', '▁vo', 'id', '▁upd', 'ate', 'ev', 'ent', '(', 'str', 'ing', '▁str', ',', '▁string', '▁id', ')', '\n', '▁{', '\n\n', 'str', 'ing', '▁m', 'pro', 'ject', ';', '\n', 'str', 'ing', '▁me', 'vent', ';', '\n', 'str', 'ing', '▁m', 'type', ';', '\n', 'str', 'ing', '▁m', 'n', 'um', ';', '\n', 'str', 'ing', '▁m', 're', 'qu', 'ire', 'ment', '▁;', '\n', 'str', 'ing', '▁m', 'mod', 'ule', ';', '\n', 'str', 'ing', '▁ms', 'q', 'l', ';', '\n', 'str', 'ing', '▁m', 'd', 'ate', ';', '\n', 'str', 'ing', '▁m', 're', 'q', 'text', ';', '\n', '//', 'che', 'ck', '▁if', '▁a', '▁sub', 'sc', 'ription', '▁ex', 'ists', '\n', '▁public', '▁bo', 'ole', 'an', '▁che', 'c', 'ks', 'ub', 'sc', 'ription', '(', 'str', 'ing', '▁str', ')', '\n', '▁{', '\n\n', 'str', 'ing', 't', 'ok', 'en', 'iz', 'er', '▁to', 'k', 'ens', '▁=', '▁new', '▁string', 't', 'ok', 'en', 'iz', 'er', '(', '▁str', ',', '▁""', '""|', '""', '"")', ';', '\n', 'str', 'ing', '▁message', '▁type', '▁=', '▁to', 'k', 'ens', '.', '▁next', 't', 'ok', 'en', '(', ');', '\n', 'str', 'ing', '▁sub', 'sc', 'ri', 'ber', 'name', '▁=', '▁to', 'k', 'ens', '.', '▁next', '▁/', '/', 'ins', 'ert', '▁a', '▁sub', 'sc', 'ription', '▁into', '▁the', '▁""', '""', 'sub', 'sc', 'ription', '""', '""', '▁table', '\n', '▁public', '▁vo', 'id', '▁add', 'sub', 'sc', 'ription', '(', 'str', 'ing', '▁str', ',', '▁int', '▁id', ')', '\n', '▁{', '\n\n', '//', '▁par', 'se', '▁the', '▁message', '▁string', '▁and', '▁get', '▁the', '▁fields', '\n\n', 'str', 'ing', 't', 'ok', 'en', 'iz', 'er', '▁to', 'k', 'ens', '▁=', '▁new', '▁string', 't', 'ok', 'en', 'iz', 'er', '(', '▁str', ',', '▁""', '""|', '""', '"")', ';', '\n', 'str', 'ing', '▁mess', 'ag', '▁/', '/', 'de', 'let', 'es', 'ub', 'sc', 'ription', '▁from', '▁the', '▁""', '""', 'sub', 'sc', 'ription', '""', '""', '▁table', '\n', '▁public', '▁vo', 'id', '▁de', 'let', 'es', 'ub', 'sc', 'ription', '(', 'str', 'ing', '▁str', ',', '▁int', '▁id', ')', '\n', '▁{', '\n', '//', '▁par', 'se', '▁the', '▁message', '▁string', '▁and', '▁get', '▁the', '▁fields', '\n', 'str', 'ing', 't', 'ok', 'en', 'iz', 'er', '▁to', 'k', 'ens', '▁=', '▁new', '▁string', 't', 'ok', 'en', 'iz', 'er', '(', '▁str', ',', '▁""', '""|', '""', '"")', ';', '\n', 'str', 'ing', '▁mess', 'ag', '▁/', '/', 'spec', 'ulate', '▁method', '▁will', '▁receive', '▁a', '▁string', '▁from', '▁the', '▁spec', 'ul', 'ative', '▁gu', 'i', '\n', '▁/', '/', '▁to', 'ol', '▁and', '▁par', 'se', '▁it', '▁using', '▁call', 'back', '▁class', '▁to', '▁ident', 'ify', '▁the', '\n', '▁/', '/', '▁performance', '▁models', '\n', '▁public', '▁vo', 'id', '▁spec', 'ulate', '(', 'str', 'ing', '▁str', ')', '\n', '▁{', '\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 'spec', 'ulate', '""', '"")', ';', '\n', 'c', 'all', 'back', '▁public', '▁vo', 'id', '▁impact', 're', 'port', '(', 'str', 'ing', '▁str', ')', '\n', '▁{', '\n', 'c', 'all', 'back', '▁c', 'b', '▁=', '▁new', '▁call', 'back', '(', ');', '\n', 'c', 'b', '.', '▁par', 'se', 'im', 'p', 'act', 're', 'port', '(', '▁str', ');', '\n', '▁}', '//', '▁end', '▁impact', 're', 'port', '(', ')""', '\n']"~"['▁56', '\t', '""', 'event', '▁par', 'ser', '▁private', '▁connection', '▁conn', ';', '\n', '▁private', '▁results', 'et', '▁rs', ';', '\n', '▁private', '▁statement', '▁st', 'mt', ';', '▁//', 'event', 'p', 'ars', 'er', '▁construct', 'or', '\n', '▁//', '▁initial', 'izes', '▁the', '▁database', '▁connection', '\n', '▁public', '▁event', 'p', 'ars', 'er', '()', '\n', '▁{', '\n', 'try', '\n', '{', '\n', '▁class', '.', '▁for', 'name', '(""', '""', '▁sun', '.', '▁j', 'd', 'bc', '.', '▁od', 'bc', '.', 'j', 'd', 'bc', 'od', 'bc', 'dr', 'iver', '""', '"");', '\n', '▁this', '.', '▁conn', '▁=', '▁driver', 'manager', '.', '▁get', 'conn', 'ection', '(""', '""', '▁j', 'd', 'bc', ':', '▁od', 'bc', ':', '▁public', '▁void', '▁update', 'event', '(', 'string', '▁str', ',', '▁string', '▁id', ')', '\n', '▁{', '\n\n', 'string', '▁m', 'project', ';', '\n', 'string', '▁me', 'vent', ';', '\n', 'string', '▁m', 'type', ';', '\n', 'string', '▁m', 'num', ';', '\n', 'string', '▁m', 'requ', 'ire', 'ment', '▁;', '\n', 'string', '▁m', 'mod', 'ule', ';', '\n', 'string', '▁ms', 'q', 'l', ';', '\n', 'string', '▁md', 'ate', ';', '\n', 'string', '▁m', 're', 'q', 'text', ';', '\n', '//', 'check', '▁if', '▁a', '▁subscription', '▁exists', '\n', '▁public', '▁bo', 'olean', '▁checks', 'ub', 'sc', 'ription', '(', 'string', '▁str', ')', '\n', '▁{', '\n\n', 'string', 'tok', 'en', 'izer', '▁tok', 'ens', '▁=', '▁new', '▁string', 'tok', 'en', 'izer', '(', '▁str', ',', '▁""', '""|', '""', '"");', '\n', 'string', '▁message', '▁type', '▁=', '▁tok', 'ens', '.', '▁next', 'tok', 'en', '();', '\n', 'string', '▁subsc', 'ri', 'ber', 'name', '▁=', '▁tok', 'ens', '.', '▁next', '▁//', 'ins', 'ert', '▁a', '▁subscription', '▁into', '▁the', '▁""""', 'sub', 'sc', 'ription', '""', '""', '▁table', '\n', '▁public', '▁void', '▁add', 'sub', 'sc', 'ription', '(', 'string', '▁str', ',', '▁int', '▁id', ')', '\n', '▁{', '\n\n', '//', '▁par', 'se', '▁the', '▁message', '▁string', '▁and', '▁get', '▁the', '▁fields', '\n\n', 'string', 'tok', 'en', 'izer', '▁tok', 'ens', '▁=', '▁new', '▁string', 'tok', 'en', 'izer', '(', '▁str', ',', '▁""', '""|', '""', '"");', '\n', 'string', '▁mess', 'ag', '▁//', 'de', 'let', 'es', 'ub', 'sc', 'ription', '▁from', '▁the', '▁""""', 'sub', 'sc', 'ription', '""', '""', '▁table', '\n', '▁public', '▁void', '▁de', 'let', 'es', 'ub', 'sc', 'ription', '(', 'string', '▁str', ',', '▁int', '▁id', ')', '\n', '▁{', '\n', '//', '▁par', 'se', '▁the', '▁message', '▁string', '▁and', '▁get', '▁the', '▁fields', '\n', 'string', 'tok', 'en', 'izer', '▁tok', 'ens', '▁=', '▁new', '▁string', 'tok', 'en', 'izer', '(', '▁str', ',', '▁""', '""|', '""', '"");', '\n', 'string', '▁mess', 'ag', '▁//', 'spec', 'ulate', '▁method', '▁will', '▁receive', '▁a', '▁string', '▁from', '▁the', '▁speculative', '▁gu', 'i', '\n', '▁//', '▁tool', '▁and', '▁par', 'se', '▁it', '▁using', '▁call', 'back', '▁class', '▁to', '▁identify', '▁the', '\n', '▁//', '▁performance', '▁models', '\n', '▁public', '▁void', '▁spec', 'ulate', '(', 'string', '▁str', ')', '\n', '▁{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'spec', 'ulate', '""', '"");', '\n', 'call', 'back', '▁public', '▁void', '▁impact', 're', 'port', '(', 'string', '▁str', ')', '\n', '▁{', '\n', 'call', 'back', '▁cb', '▁=', '▁new', '▁call', 'back', '();', '\n', 'cb', '.', '▁par', 'se', 'imp', 'act', 're', 'port', '(', '▁str', ');', '\n', '▁}', '//', '▁end', '▁impact', 're', 'port', '(', ')""', '\n']"~"['▁56', '\t', '""', 'event', '▁parser', '▁private', '▁connection', '▁conn', ';', '\n', '▁private', '▁results', 'et', '▁rs', ';', '\n', '▁private', '▁statement', '▁st', 'mt', ';', '▁//', 'event', 'parser', '▁constructor', '\n', '▁//', '▁initial', 'izes', '▁the', '▁database', '▁connection', '\n', '▁public', '▁event', 'parser', '()', '\n', '▁{', '\n', 'try', '\n', '{', '\n', '▁class', '.', '▁for', 'name', '(""', '""', '▁sun', '.', '▁jd', 'bc', '.', '▁od', 'bc', '.', 'jd', 'bc', 'od', 'bc', 'driver', '"""");', '\n', '▁this', '.', '▁conn', '▁=', '▁driver', 'manager', '.', '▁get', 'connection', '(""', '""', '▁jd', 'bc', ':', '▁od', 'bc', ':', '▁public', '▁void', '▁update', 'event', '(', 'string', '▁str', ',', '▁string', '▁id', ')', '\n', '▁{', '\n\n', 'string', '▁m', 'project', ';', '\n', 'string', '▁me', 'vent', ';', '\n', 'string', '▁m', 'type', ';', '\n', 'string', '▁m', 'num', ';', '\n', 'string', '▁m', 'require', 'ment', '▁;', '\n', 'string', '▁m', 'module', ';', '\n', 'string', '▁ms', 'ql', ';', '\n', 'string', '▁md', 'ate', ';', '\n', 'string', '▁m', 'req', 'text', ';', '\n', '//', 'check', '▁if', '▁a', '▁subscription', '▁exists', '\n', '▁public', '▁boolean', '▁checks', 'ub', 'sc', 'ription', '(', 'string', '▁str', ')', '\n', '▁{', '\n\n', 'string', 'token', 'izer', '▁tokens', '▁=', '▁new', '▁string', 'token', 'izer', '(', '▁str', ',', '▁""', '""|', '"""");', '\n', 'string', '▁message', '▁type', '▁=', '▁tokens', '.', '▁next', 'token', '();', '\n', 'string', '▁subscriber', 'name', '▁=', '▁tokens', '.', '▁next', '▁//', 'insert', '▁a', '▁subscription', '▁into', '▁the', '▁""""', 'subscription', '""""', '▁table', '\n', '▁public', '▁void', '▁add', 'subscription', '(', 'string', '▁str', ',', '▁int', '▁id', ')', '\n', '▁{', '\n\n', '//', '▁parse', '▁the', '▁message', '▁string', '▁and', '▁get', '▁the', '▁fields', '\n\n', 'string', 'token', 'izer', '▁tokens', '▁=', '▁new', '▁string', 'token', 'izer', '(', '▁str', ',', '▁""', '""|', '"""");', '\n', 'string', '▁mess', 'ag', '▁//', 'de', 'letes', 'ub', 'sc', 'ription', '▁from', '▁the', '▁""""', 'subscription', '""""', '▁table', '\n', '▁public', '▁void', '▁deletes', 'ub', 'sc', 'ription', '(', 'string', '▁str', ',', '▁int', '▁id', ')', '\n', '▁{', '\n', '//', '▁parse', '▁the', '▁message', '▁string', '▁and', '▁get', '▁the', '▁fields', '\n', 'string', 'token', 'izer', '▁tokens', '▁=', '▁new', '▁string', 'token', 'izer', '(', '▁str', ',', '▁""', '""|', '"""");', '\n', 'string', '▁mess', 'ag', '▁//', 'spec', 'ulate', '▁method', '▁will', '▁receive', '▁a', '▁string', '▁from', '▁the', '▁speculative', '▁gui', '\n', '▁//', '▁tool', '▁and', '▁parse', '▁it', '▁using', '▁callback', '▁class', '▁to', '▁identify', '▁the', '\n', '▁//', '▁performance', '▁models', '\n', '▁public', '▁void', '▁speculate', '(', 'string', '▁str', ')', '\n', '▁{', '\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'spec', 'ulate', '"""");', '\n', 'call', 'back', '▁public', '▁void', '▁impact', 'report', '(', 'string', '▁str', ')', '\n', '▁{', '\n', 'call', 'back', '▁cb', '▁=', '▁new', '▁callback', '();', '\n', 'cb', '.', '▁parse', 'impact', 'report', '(', '▁str', ');', '\n', '▁}', '//', '▁end', '▁impact', 'report', '(', ')""', '\n']"~event parser privat connect conn privat result set privat statement stmt event parser constructor initi databas connect public event parser tri class name sun jdbc odbc jdbc odbc driver conn driver manag get connect jdbc odbc public void updat event string str string string project string event string type string num string mrequir string modul string sql string date string reqtext check subscript exist public boolean check subscript string str string token token new string token str string messag type token next token string subscrib name token next insert subscript subscript tabl public void add subscript string str int pars messag string get field string token token new string token str string messag delet subscript subscript tabl public void delet subscript string str int pars messag string get field string token token new string token str string messag specul method receiv string specul gui tool pars use call back class identifi perform model public void specul string str system println specul call back public void impact report string str call back new call back pars impact report str end impact report
107~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/78.java~78.java~"78	""Notification Event public String m_SubscriberName = """""""";
public String m_EventID = """""""";
public String m_Message type = """""""";
public String m_EventType = """""""";
public int m_NumberOfRequirements = 0;
public String m_EventTim // constructor
public Notification_Event()
{
 m_LeftSide = new ArrayList();
 m_RightSide = new ArrayList();
}// end of class Notification_Event public Object clone() throws CloneNotSupportedException
 {

// create new object with the same type
Notification_Event nEvt = (Notification_Event) super. clone();
 nEvt. m_LeftSide = new ArrayList();
 npublic void ParseEvent(String TextLine)
 {

String msg = TextLine;

if( msg. startsWith(""""Re-execute"""") )
{

 ModelDriver md = new ModelDriver( msg );
 md. init();

//ToDo:
// divert all the calls fo // Set the other members before calling this function

 public void ParseLeftAndRightLists(String LeftLine, String RightLine)
 {

m_LeftSide = new ArrayList();
 m_RightSide = new ArrayList();

if ( m_Eve //Comment Added by Amit Uchat
 //This method displays the contents of two array list to console
public void DisplayValues()
{
 System. out. println(""""\ r\ nValues of the event:\ r\ n"""");
 System. out. println("""" ""
"~src~"['▁7', '8', '\t', '""', 'not', 'ification', '▁event', '▁public', '▁string', '▁m', '_', 'sub', 'sc', 'ri', 'ber', 'name', '▁=', '▁""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'ev', 'ent', 'id', '▁=', '▁""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'm', 'ess', 'age', '▁type', '▁=', '▁""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'ev', 'ent', 'type', '▁=', '▁""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁int', '▁m', '_', 'n', 'umber', 'of', 're', 'qu', 'ire', 'ments', '▁=', '▁0', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'ev', 'ent', 'tim', '▁/', '/', '▁construct', 'or', '\n', 'publ', 'ic', '▁not', 'ification', '_', 'ev', 'ent', '(', ')', '\n', '{', '\n', '▁m', '_', 'le', 'f', 'ts', 'ide', '▁=', '▁new', '▁arr', 'ay', 'list', '(', ');', '\n', '▁m', '_', 'right', 'side', '▁=', '▁new', '▁arr', 'ay', 'list', '(', ');', '\n', '}', '//', '▁end', '▁of', '▁class', '▁not', 'ification', '_', 'ev', 'ent', '▁public', '▁object', '▁cl', 'one', '(', ')', '▁thro', 'ws', '▁cl', 'on', 'en', 'ots', 'up', 'port', 'ed', 'ex', 'ception', '\n', '▁{', '\n\n', '//', '▁create', '▁new', '▁object', '▁with', '▁the', '▁same', '▁type', '\n', 'not', 'ification', '_', 'ev', 'ent', '▁nev', 't', '▁=', '▁(', 'not', 'ification', '_', 'ev', 'ent', ')', '▁super', '.', '▁cl', 'one', '(', ');', '\n', '▁nev', 't', '.', '▁m', '_', 'le', 'f', 'ts', 'ide', '▁=', '▁new', '▁arr', 'ay', 'list', '(', ');', '\n', '▁n', 'publ', 'ic', '▁vo', 'id', '▁par', 'se', 'ev', 'ent', '(', 'str', 'ing', '▁text', 'line', ')', '\n', '▁{', '\n\n', 'str', 'ing', '▁ms', 'g', '▁=', '▁text', 'line', ';', '\n\n', 'if', '(', '▁ms', 'g', '.', '▁start', 'sw', 'ith', '(', '""', '""', 're', '-', 'ex', 'ec', 'ute', '""', '"")', '▁)', '\n', '{', '\n\n', '▁model', 'dr', 'iver', '▁m', 'd', '▁=', '▁new', '▁model', 'dr', 'iver', '(', '▁ms', 'g', '▁', ');', '\n', '▁m', 'd', '.', '▁init', '(', ');', '\n\n', '//', 't', 'od', 'o', ':', '\n', '//', '▁div', 'ert', '▁all', '▁the', '▁calls', '▁fo', '▁/', '/', '▁set', '▁the', '▁other', '▁members', '▁before', '▁calling', '▁this', '▁function', '\n\n', '▁public', '▁vo', 'id', '▁par', 'se', 'left', 'and', 'right', 'l', 'ists', '(', 'str', 'ing', '▁left', 'line', ',', '▁string', '▁right', 'line', ')', '\n', '▁{', '\n\n', 'm', '_', 'le', 'f', 'ts', 'ide', '▁=', '▁new', '▁arr', 'ay', 'list', '(', ');', '\n', '▁m', '_', 'right', 'side', '▁=', '▁new', '▁arr', 'ay', 'list', '(', ');', '\n\n', 'if', '▁(', '▁m', '_', 'e', 've', '▁/', '/', 'com', 'ment', '▁added', '▁by', '▁am', 'it', '▁', 'uch', 'at', '\n', '▁/', '/', 'this', '▁method', '▁displ', 'ays', '▁the', '▁cont', 'ents', '▁of', '▁two', '▁arr', 'ay', '▁list', '▁to', '▁con', 'so', 'le', '\n', 'publ', 'ic', '▁vo', 'id', '▁display', 'val', 'ues', '(', ')', '\n', '{', '\n', '▁system', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '\\', '▁r', '\\', '▁n', 'val', 'ues', '▁of', '▁the', '▁event', ':', '\\', '▁r', '\\', '▁n', '""', '"")', ';', '\n', '▁system', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', '▁""', '\n']"~"['▁78', '\t', '""', 'not', 'ification', '▁event', '▁public', '▁string', '▁m', '_', 'sub', 'sc', 'ri', 'ber', 'name', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'event', 'id', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'mess', 'age', '▁type', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'event', 'type', '▁=', '▁""""""', '"";', '\n', 'public', '▁int', '▁m', '_', 'number', 'of', 'requ', 'ire', 'ments', '▁=', '▁0', ';', '\n', 'public', '▁string', '▁m', '_', 'event', 'tim', '▁//', '▁construct', 'or', '\n', 'public', '▁not', 'ification', '_', 'event', '()', '\n', '{', '\n', '▁m', '_', 'le', 'fts', 'ide', '▁=', '▁new', '▁array', 'list', '();', '\n', '▁m', '_', 'right', 'side', '▁=', '▁new', '▁array', 'list', '();', '\n', '}', '//', '▁end', '▁of', '▁class', '▁not', 'ification', '_', 'event', '▁public', '▁object', '▁clone', '()', '▁throws', '▁clon', 'en', 'ots', 'up', 'ported', 'exception', '\n', '▁{', '\n\n', '//', '▁create', '▁new', '▁object', '▁with', '▁the', '▁same', '▁type', '\n', 'not', 'ification', '_', 'event', '▁nev', 't', '▁=', '▁(', 'not', 'ification', '_', 'event', ')', '▁super', '.', '▁clone', '();', '\n', '▁nev', 't', '.', '▁m', '_', 'le', 'fts', 'ide', '▁=', '▁new', '▁array', 'list', '();', '\n', '▁n', 'public', '▁void', '▁par', 'se', 'event', '(', 'string', '▁text', 'line', ')', '\n', '▁{', '\n\n', 'string', '▁ms', 'g', '▁=', '▁text', 'line', ';', '\n\n', 'if', '(', '▁ms', 'g', '.', '▁start', 'sw', 'ith', '(""', '""', 're', '-', 'ex', 'ecute', '""', '"")', '▁)', '\n', '{', '\n\n', '▁model', 'dr', 'iver', '▁md', '▁=', '▁new', '▁model', 'dr', 'iver', '(', '▁ms', 'g', '▁', ');', '\n', '▁md', '.', '▁init', '();', '\n\n', '//', 'tod', 'o', ':', '\n', '//', '▁divert', '▁all', '▁the', '▁calls', '▁fo', '▁//', '▁set', '▁the', '▁other', '▁members', '▁before', '▁calling', '▁this', '▁function', '\n\n', '▁public', '▁void', '▁par', 'se', 'left', 'and', 'right', 'lists', '(', 'string', '▁left', 'line', ',', '▁string', '▁right', 'line', ')', '\n', '▁{', '\n\n', 'm', '_', 'le', 'fts', 'ide', '▁=', '▁new', '▁array', 'list', '();', '\n', '▁m', '_', 'right', 'side', '▁=', '▁new', '▁array', 'list', '();', '\n\n', 'if', '▁(', '▁m', '_', 'e', 've', '▁//', 'com', 'ment', '▁added', '▁by', '▁am', 'it', '▁', 'uch', 'at', '\n', '▁//', 'this', '▁method', '▁displays', '▁the', '▁contents', '▁of', '▁two', '▁array', '▁list', '▁to', '▁console', '\n', 'public', '▁void', '▁display', 'val', 'ues', '()', '\n', '{', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁r', '\\', '▁n', 'val', 'ues', '▁of', '▁the', '▁event', ':', '\\', '▁r', '\\', '▁n', '""', '"");', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '▁""', '\n']"~"['▁78', '\t', '""', 'not', 'ification', '▁event', '▁public', '▁string', '▁m', '_', 'subsc', 'riber', 'name', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'event', 'id', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'message', '▁type', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'event', 'type', '▁=', '▁""""""', '"";', '\n', 'public', '▁int', '▁m', '_', 'number', 'of', 'require', 'ments', '▁=', '▁0;', '\n', 'public', '▁string', '▁m', '_', 'event', 'tim', '▁//', '▁constructor', '\n', 'public', '▁notification', '_', 'event', '()', '\n', '{', '\n', '▁m', '_', 'le', 'fts', 'ide', '▁=', '▁new', '▁arraylist', '();', '\n', '▁m', '_', 'right', 'side', '▁=', '▁new', '▁arraylist', '();', '\n', '}', '//', '▁end', '▁of', '▁class', '▁notification', '_', 'event', '▁public', '▁object', '▁clone', '()', '▁throws', '▁clon', 'en', 'ots', 'up', 'ported', 'exception', '\n', '▁{', '\n\n', '//', '▁create', '▁new', '▁object', '▁with', '▁the', '▁same', '▁type', '\n', 'not', 'ification', '_', 'event', '▁nev', 't', '▁=', '▁(', 'not', 'ification', '_', 'event', ')', '▁super', '.', '▁clone', '();', '\n', '▁nev', 't', '.', '▁m', '_', 'le', 'fts', 'ide', '▁=', '▁new', '▁arraylist', '();', '\n', '▁n', 'public', '▁void', '▁parse', 'event', '(', 'string', '▁text', 'line', ')', '\n', '▁{', '\n\n', 'string', '▁msg', '▁=', '▁text', 'line', ';', '\n\n', 'if', '(', '▁msg', '.', '▁start', 'swith', '(""', '""', 're', '-', 'execute', '""', '"")', '▁)', '\n', '{', '\n\n', '▁model', 'driver', '▁md', '▁=', '▁new', '▁model', 'driver', '(', '▁msg', '▁);', '\n', '▁md', '.', '▁init', '();', '\n\n', '//', 'tod', 'o', ':', '\n', '//', '▁divert', '▁all', '▁the', '▁calls', '▁fo', '▁//', '▁set', '▁the', '▁other', '▁members', '▁before', '▁calling', '▁this', '▁function', '\n\n', '▁public', '▁void', '▁parse', 'left', 'and', 'right', 'lists', '(', 'string', '▁left', 'line', ',', '▁string', '▁right', 'line', ')', '\n', '▁{', '\n\n', 'm', '_', 'le', 'fts', 'ide', '▁=', '▁new', '▁arraylist', '();', '\n', '▁m', '_', 'right', 'side', '▁=', '▁new', '▁arraylist', '();', '\n\n', 'if', '▁(', '▁m', '_', 'eve', '▁//', 'comment', '▁added', '▁by', '▁amit', '▁uch', 'at', '\n', '▁//', 'this', '▁method', '▁displays', '▁the', '▁contents', '▁of', '▁two', '▁array', '▁list', '▁to', '▁console', '\n', 'public', '▁void', '▁display', 'values', '()', '\n', '{', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '\\', '▁r', '\\', '▁n', 'values', '▁of', '▁the', '▁event', ':', '\\', '▁r', '\\', '▁n', '"""");', '\n', '▁system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', '▁""', '\n']"~notif event public string subscrib name public string event public string messag type public string event type public int number requir public string event tim constructor public notif event left side new array list right side new array list end class notif event public object clone throw clone support except creat new object type notif event evt notif event super clone evt left side new array list npublic void pars event string text line string msg text line msg start execut model driver new model driver msg init divert call set member call function public void pars left right list string left line string right line left side new array list right side new array list eve comment amit uchat method display content two array list consol public void display valu system println valu event system println
108~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/66.java~66.java~"66	""Config Dialog public ConfigDialog(Notification_Processing parent, boolean modal) {
 
super ( parent, modal);
 setTitle(""""Config Dialog Box"""");
 getContentPane (). setLayout ( new GridLayout(5,2));

private void closeDialog(WindowEvent evt) {
setVisible ( false);
dispose ();
}// event listener for """"Ok"""" button 
private void okButtonActionPerformed (ActionEvent evt) {
 
 if( UserName. getText(). equals("""""""") || DSN. getText(). equals("""""""") || EventServerIP. getText(). equa// event listener for """"Cancel"""" button
private void cancelButtonActionPerformed (ActionEvent evt) {
setVisible ( false);
dispose (); 
} // configuration entries
private JLabel UserNameLabel; 
private JTextField UserName;
private JLabel DSN Label; 
private JTextField DSN;
private JLabel EventServerIP Label; 
private JTextField EventSe""
"~src~"['▁6', '6', '\t', '""', 'con', 'f', 'ig', '▁dial', 'og', '▁public', '▁conf', 'ig', 'd', 'ial', 'og', '(', 'not', 'ification', '_', 'pro', 'cess', 'ing', '▁paren', 't', ',', '▁bo', 'ole', 'an', '▁mod', 'al', ')', '▁{', '\n', '▁', '\n', 'sup', 'er', '▁(', '▁paren', 't', ',', '▁mod', 'al', ');', '\n', '▁sett', 'it', 'le', '(', '""', '""', 'con', 'f', 'ig', '▁dial', 'og', '▁box', '""', '"")', ';', '\n', '▁get', 'cont', 'ent', 'p', 'ane', '▁(', ').', '▁set', 'l', 'ay', 'out', '▁(', '▁new', '▁gr', 'id', 'l', 'ay', 'out', '(', '5,', '2)', ');', '\n\n', 'pr', 'iv', 'ate', '▁vo', 'id', '▁closed', 'ial', 'og', '(', 'w', 'ind', 'ow', 'ev', 'ent', '▁ev', 't', ')', '▁{', '\n', 'set', 'vis', 'ible', '▁(', '▁fal', 'se', ');', '\n', 'dis', 'pose', '▁()', ';', '\n', '}', '//', '▁event', '▁list', 'en', 'er', '▁for', '▁""', '""', 'ok', '""', '""', '▁but', 'ton', '▁', '\n', 'pr', 'iv', 'ate', '▁vo', 'id', '▁ok', 'but', 'ton', 'action', 'per', 'form', 'ed', '▁(', 'action', 'ev', 'ent', '▁ev', 't', ')', '▁{', '\n', '▁', '\n', '▁if', '(', '▁us', 'ern', 'ame', '.', '▁get', 'text', '(', ').', '▁equ', 'als', '(', '""', '""', '""', '"")', '▁||', '▁d', 's', 'n', '.', '▁get', 'text', '(', ').', '▁equ', 'als', '(', '""', '""', '""', '"")', '▁||', '▁events', 'er', 'ver', 'ip', '.', '▁get', 'text', '(', ').', '▁equ', 'a', '//', '▁event', '▁list', 'en', 'er', '▁for', '▁""', '""', 'c', 'anc', 'el', '""', '""', '▁but', 'ton', '\n', 'pr', 'iv', 'ate', '▁vo', 'id', '▁can', 'cel', 'but', 'ton', 'action', 'per', 'form', 'ed', '▁(', 'action', 'ev', 'ent', '▁ev', 't', ')', '▁{', '\n', 'set', 'vis', 'ible', '▁(', '▁fal', 'se', ');', '\n', 'dis', 'pose', '▁()', ';', '▁', '\n', '}', '▁/', '/', '▁conf', 'ig', 'ur', 'ation', '▁ent', 'ries', '\n', 'pr', 'iv', 'ate', '▁j', 'l', 'ab', 'el', '▁us', 'ern', 'am', 'el', 'ab', 'el', ';', '▁', '\n', 'pr', 'iv', 'ate', '▁j', 'text', 'field', '▁us', 'ern', 'ame', ';', '\n', 'pr', 'iv', 'ate', '▁j', 'l', 'ab', 'el', '▁d', 's', 'n', '▁label', ';', '▁', '\n', 'pr', 'iv', 'ate', '▁j', 'text', 'field', '▁d', 's', 'n', ';', '\n', 'pr', 'iv', 'ate', '▁j', 'l', 'ab', 'el', '▁events', 'er', 'ver', 'ip', '▁label', ';', '▁', '\n', 'pr', 'iv', 'ate', '▁j', 'text', 'field', '▁event', 'se', '""', '\n']"~"['▁66', '\t', '""', 'con', 'fig', '▁dial', 'og', '▁public', '▁config', 'd', 'ial', 'og', '(', 'not', 'ification', '_', 'process', 'ing', '▁parent', ',', '▁bo', 'olean', '▁mod', 'al', ')', '▁{', '\n', '▁', '\n', 'super', '▁(', '▁parent', ',', '▁mod', 'al', ');', '\n', '▁sett', 'it', 'le', '(""', '""', 'con', 'fig', '▁dial', 'og', '▁box', '""', '"");', '\n', '▁get', 'content', 'p', 'ane', '▁().', '▁set', 'lay', 'out', '▁(', '▁new', '▁grid', 'lay', 'out', '(', '5,', '2)', ');', '\n\n', 'private', '▁void', '▁closed', 'ial', 'og', '(', 'wind', 'ow', 'event', '▁ev', 't', ')', '▁{', '\n', 'set', 'vis', 'ible', '▁(', '▁false', ');', '\n', 'dis', 'pose', '▁()', ';', '\n', '}', '//', '▁event', '▁listener', '▁for', '▁""""', 'ok', '""', '""', '▁button', '▁', '\n', 'private', '▁void', '▁ok', 'but', 'ton', 'action', 'per', 'formed', '▁(', 'action', 'event', '▁ev', 't', ')', '▁{', '\n', '▁', '\n', '▁if', '(', '▁us', 'ern', 'ame', '.', '▁get', 'text', '().', '▁equals', '(""', '""', '""', '"")', '▁||', '▁d', 'sn', '.', '▁get', 'text', '().', '▁equals', '(""', '""', '""', '"")', '▁||', '▁events', 'erver', 'ip', '.', '▁get', 'text', '().', '▁equ', 'a', '//', '▁event', '▁listener', '▁for', '▁""""', 'canc', 'el', '""', '""', '▁button', '\n', 'private', '▁void', '▁cancel', 'but', 'ton', 'action', 'per', 'formed', '▁(', 'action', 'event', '▁ev', 't', ')', '▁{', '\n', 'set', 'vis', 'ible', '▁(', '▁false', ');', '\n', 'dis', 'pose', '▁()', ';', '▁', '\n', '}', '▁//', '▁configuration', '▁entries', '\n', 'private', '▁j', 'l', 'abel', '▁us', 'ern', 'amel', 'abel', ';', '▁', '\n', 'private', '▁j', 'text', 'field', '▁us', 'ern', 'ame', ';', '\n', 'private', '▁j', 'l', 'abel', '▁d', 'sn', '▁label', ';', '▁', '\n', 'private', '▁j', 'text', 'field', '▁d', 'sn', ';', '\n', 'private', '▁j', 'l', 'abel', '▁events', 'erver', 'ip', '▁label', ';', '▁', '\n', 'private', '▁j', 'text', 'field', '▁event', 'se', '""', '\n']"~"['▁66', '\t', '""', 'config', '▁dialog', '▁public', '▁config', 'dial', 'og', '(', 'not', 'ification', '_', 'processing', '▁parent', ',', '▁boolean', '▁modal', ')', '▁{', '\n', '▁', '\n', 'super', '▁(', '▁parent', ',', '▁modal', ');', '\n', '▁sett', 'itle', '(""', '""', 'config', '▁dialog', '▁box', '"""");', '\n', '▁get', 'content', 'pane', '▁().', '▁set', 'layout', '▁(', '▁new', '▁grid', 'layout', '(', '5,', '2)', ');', '\n\n', 'private', '▁void', '▁closed', 'ial', 'og', '(', 'window', 'event', '▁ev', 't', ')', '▁{', '\n', 'set', 'visible', '▁(', '▁false', ');', '\n', 'dis', 'pose', '▁();', '\n', '}', '//', '▁event', '▁listener', '▁for', '▁""""', 'ok', '""""', '▁button', '▁', '\n', 'private', '▁void', '▁ok', 'button', 'action', 'performed', '▁(', 'action', 'event', '▁ev', 't', ')', '▁{', '\n', '▁', '\n', '▁if', '(', '▁us', 'ername', '.', '▁get', 'text', '().', '▁equals', '(""', '""""', '"")', '▁||', '▁d', 'sn', '.', '▁get', 'text', '().', '▁equals', '(""', '""""', '"")', '▁||', '▁events', 'erver', 'ip', '.', '▁get', 'text', '().', '▁equ', 'a', '//', '▁event', '▁listener', '▁for', '▁""""', 'canc', 'el', '""""', '▁button', '\n', 'private', '▁void', '▁cancel', 'button', 'action', 'performed', '▁(', 'action', 'event', '▁ev', 't', ')', '▁{', '\n', 'set', 'visible', '▁(', '▁false', ');', '\n', 'dis', 'pose', '▁();', '▁', '\n', '}', '▁//', '▁configuration', '▁entries', '\n', 'private', '▁j', 'label', '▁us', 'ern', 'amel', 'abel', ';', '▁', '\n', 'private', '▁j', 'text', 'field', '▁us', 'ername', ';', '\n', 'private', '▁j', 'label', '▁d', 'sn', '▁label', ';', '▁', '\n', 'private', '▁j', 'text', 'field', '▁d', 'sn', ';', '\n', 'private', '▁j', 'label', '▁events', 'erver', 'ip', '▁label', ';', '▁', '\n', 'private', '▁j', 'text', 'field', '▁event', 'se', '""', '\n']"~config dialog public config dialog notif process parent boolean modal super parent modal set titl config dialog box get content pane set layout new grid layout privat void close dialog window event evt set visibl fals dispos event listen button privat void button action perform action event evt user name get text equal dsn get text equal event server get text equa event listen cancel button privat void cancel button action perform action event evt set visibl fals dispos configur entri privat jlabel user name label privat jtext field user name privat jlabel dsn label privat jtext field dsn privat jlabel event server label privat jtext field event
109~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/60.java~60.java~"60	""Thread Pool /**
* The threads in the pool.
*/
protected Thread threads[] = null;
/**
* The backlog of assignments, which are waiting
* for the thread pool.
*/
Collection assignments = new ArrayList(3);
/**
* A Done object that is /**
 * The constructor.
 *
 * @param sizeHow many threads in the thread pool.
 */
public ThreadPool( int size)
{

threads = new WorkerThread[ size];

for ( int i=0; i< threads. length; i++)
{
thr /**
* Add a task to the thread pool. Any class
* which implements the Runnable interface
* may be assigned. When this task runs, its
* run method will be called.
*
* @param r An object that implements the Runnable interface
*/
 pub /**
* Get a new work assignment.
*
* @return A new assignment
*/
 public synchronized Runnable getAssignment()
 {
try {
 while ( ! assignments. iterator(). hasNext() )
wait();

 Runnable r = (Runnable) assignments./**
* Called to block the current thread until
* the thread pool has no more work.
*/
 public void complete()
 {
done. waitBegin();
done. waitDone();
 } protected void finalize()
 {
done. reset();
for ( int i=0; i< threads. length; i++) {
 threads[ i]. interrupt();
 done. workerBegin();
 threads[ i]. destroy();
}
done. waitDone();
 }
}""
"~src~"['▁60', '\t', '""', 'th', 'read', '▁pool', '▁/', '*', '*', '\n', '*', '▁the', '▁th', 'read', 's', '▁in', '▁the', '▁pool', '.', '\n', '*', '/', '\n', 'pro', 't', 'ected', '▁th', 'read', '▁th', 'read', 's', '[', ']', '▁=', '▁n', 'ull', ';', '\n', '/', '*', '*', '\n', '*', '▁the', '▁back', 'l', 'og', '▁of', '▁assign', 'ments', ',', '▁which', '▁are', '▁wa', 'iting', '\n', '*', '▁for', '▁the', '▁th', 'read', '▁pool', '.', '\n', '*', '/', '\n', 'col', 'lect', 'ion', '▁assign', 'ments', '▁=', '▁new', '▁arr', 'ay', 'list', '(', '3)', ';', '\n', '/', '*', '*', '\n', '*', '▁a', '▁done', '▁object', '▁that', '▁is', '▁/', '*', '*', '\n', '▁*', '▁the', '▁construct', 'or', '.', '\n', '▁*', '\n', '▁*', '▁', '@', 'par', 'am', '▁size', 'h', 'ow', '▁many', '▁th', 'read', 's', '▁in', '▁the', '▁th', 'read', '▁pool', '.', '\n', '▁*', '/', '\n', 'publ', 'ic', '▁th', 'read', 'pool', '(', '▁int', '▁size', ')', '\n', '{', '\n\n', 'th', 'read', 's', '▁=', '▁new', '▁work', 'er', 'th', 'read', '[', '▁size', ']', ';', '\n\n', 'for', '▁(', '▁int', '▁i', '=', '0', ';', '▁i', '<', '▁th', 'read', 's', '.', '▁length', ';', '▁i', '+', '+', ')', '\n', '{', '\n', 'th', 'r', '▁/', '*', '*', '\n', '*', '▁add', '▁a', '▁task', '▁to', '▁the', '▁th', 'read', '▁pool', '.', '▁any', '▁class', '\n', '*', '▁which', '▁imp', 'le', 'ments', '▁the', '▁run', 'n', 'able', '▁inter', 'face', '\n', '*', '▁may', '▁be', '▁assigned', '.', '▁when', '▁this', '▁task', '▁runs', ',', '▁its', '\n', '*', '▁run', '▁method', '▁will', '▁be', '▁called', '.', '\n', '*', '\n', '*', '▁', '@', 'par', 'am', '▁r', '▁an', '▁object', '▁that', '▁imp', 'le', 'ments', '▁the', '▁run', 'n', 'able', '▁inter', 'face', '\n', '*', '/', '\n', '▁p', 'ub', '▁/', '*', '*', '\n', '*', '▁get', '▁a', '▁new', '▁work', '▁assign', 'ment', '.', '\n', '*', '\n', '*', '▁', '@', 'ret', 'urn', '▁a', '▁new', '▁assign', 'ment', '\n', '*', '/', '\n', '▁public', '▁syn', 'ch', 'ron', 'ized', '▁run', 'n', 'able', '▁get', 'ass', 'ign', 'ment', '(', ')', '\n', '▁{', '\n', 't', 'ry', '▁{', '\n', '▁while', '▁(', '▁!', '▁assign', 'ments', '.', '▁it', 'er', 'ator', '(', ').', '▁has', 'ne', 'xt', '(', ')', '▁)', '\n', 'wa', 'it', '(', ');', '\n\n', '▁run', 'n', 'able', '▁r', '▁=', '▁(', 'run', 'n', 'able', ')', '▁assign', 'ments', '.', '/', '*', '*', '\n', '*', '▁called', '▁to', '▁block', '▁the', '▁current', '▁th', 'read', '▁until', '\n', '*', '▁the', '▁th', 'read', '▁pool', '▁has', '▁no', '▁more', '▁work', '.', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁complete', '(', ')', '\n', '▁{', '\n', 'd', 'one', '.', '▁wa', 'it', 'be', 'gin', '(', ');', '\n', 'd', 'one', '.', '▁wa', 'it', 'd', 'one', '(', ');', '\n', '▁}', '▁protected', '▁vo', 'id', '▁final', 'ize', '(', ')', '\n', '▁{', '\n', 'd', 'one', '.', '▁res', 'et', '(', ');', '\n', 'for', '▁(', '▁int', '▁i', '=', '0', ';', '▁i', '<', '▁th', 'read', 's', '.', '▁length', ';', '▁i', '+', '+', ')', '▁{', '\n', '▁th', 'read', 's', '[', '▁i', ']', '.', '▁inter', 'rupt', '(', ');', '\n', '▁done', '.', '▁work', 'er', 'be', 'gin', '(', ');', '\n', '▁th', 'read', 's', '[', '▁i', ']', '.', '▁destroy', '(', ');', '\n', '}', '\n', 'd', 'one', '.', '▁wa', 'it', 'd', 'one', '(', ');', '\n', '▁}', '\n', '}', '""', '\n']"~"['▁60', '\t', '""', 'th', 'read', '▁pool', '▁/', '*', '*', '\n', '*', '▁the', '▁threads', '▁in', '▁the', '▁pool', '.', '\n', '*', '/', '\n', 'protected', '▁thread', '▁threads', '[]', '▁=', '▁null', ';', '\n', '/', '*', '*', '\n', '*', '▁the', '▁back', 'log', '▁of', '▁assignments', ',', '▁which', '▁are', '▁waiting', '\n', '*', '▁for', '▁the', '▁thread', '▁pool', '.', '\n', '*', '/', '\n', 'col', 'lection', '▁assignments', '▁=', '▁new', '▁array', 'list', '(3)', ';', '\n', '/', '*', '*', '\n', '*', '▁a', '▁done', '▁object', '▁that', '▁is', '▁/', '*', '*', '\n', '▁*', '▁the', '▁construct', 'or', '.', '\n', '▁*', '\n', '▁*', '▁', '@', 'param', '▁size', 'how', '▁many', '▁threads', '▁in', '▁the', '▁thread', '▁pool', '.', '\n', '▁*', '/', '\n', 'public', '▁thread', 'pool', '(', '▁int', '▁size', ')', '\n', '{', '\n\n', 'th', 'read', 's', '▁=', '▁new', '▁worker', 'th', 'read', '[', '▁size', ']', ';', '\n\n', 'for', '▁(', '▁int', '▁i', '=0', ';', '▁i', '<', '▁threads', '.', '▁length', ';', '▁i', '++', ')', '\n', '{', '\n', 'thr', '▁/', '*', '*', '\n', '*', '▁add', '▁a', '▁task', '▁to', '▁the', '▁thread', '▁pool', '.', '▁any', '▁class', '\n', '*', '▁which', '▁imp', 'lements', '▁the', '▁run', 'n', 'able', '▁interface', '\n', '*', '▁may', '▁be', '▁assigned', '.', '▁when', '▁this', '▁task', '▁runs', ',', '▁its', '\n', '*', '▁run', '▁method', '▁will', '▁be', '▁called', '.', '\n', '*', '\n', '*', '▁', '@', 'param', '▁r', '▁an', '▁object', '▁that', '▁imp', 'lements', '▁the', '▁run', 'n', 'able', '▁interface', '\n', '*', '/', '\n', '▁pub', '▁/', '*', '*', '\n', '*', '▁get', '▁a', '▁new', '▁work', '▁assignment', '.', '\n', '*', '\n', '*', '▁', '@', 'return', '▁a', '▁new', '▁assignment', '\n', '*', '/', '\n', '▁public', '▁synchronized', '▁run', 'n', 'able', '▁get', 'ass', 'ignment', '()', '\n', '▁{', '\n', 'try', '▁{', '\n', '▁while', '▁(', '▁!', '▁assignments', '.', '▁iter', 'ator', '().', '▁has', 'next', '()', '▁)', '\n', 'wait', '();', '\n\n', '▁run', 'n', 'able', '▁r', '▁=', '▁(', 'run', 'n', 'able', ')', '▁assignments', './', '*', '*', '\n', '*', '▁called', '▁to', '▁block', '▁the', '▁current', '▁thread', '▁until', '\n', '*', '▁the', '▁thread', '▁pool', '▁has', '▁no', '▁more', '▁work', '.', '\n', '*', '/', '\n', '▁public', '▁void', '▁complete', '()', '\n', '▁{', '\n', 'd', 'one', '.', '▁wait', 'be', 'gin', '();', '\n', 'd', 'one', '.', '▁wait', 'd', 'one', '();', '\n', '▁}', '▁protected', '▁void', '▁final', 'ize', '()', '\n', '▁{', '\n', 'd', 'one', '.', '▁res', 'et', '();', '\n', 'for', '▁(', '▁int', '▁i', '=0', ';', '▁i', '<', '▁threads', '.', '▁length', ';', '▁i', '++', ')', '▁{', '\n', '▁threads', '[', '▁i', '].', '▁inter', 'rupt', '();', '\n', '▁done', '.', '▁worker', 'be', 'gin', '();', '\n', '▁threads', '[', '▁i', '].', '▁destroy', '();', '\n', '}', '\n', 'd', 'one', '.', '▁wait', 'd', 'one', '();', '\n', '▁}', '\n', '}', '""', '\n']"~"['▁60', '\t', '""', 'thread', '▁pool', '▁/', '**', '\n', '*', '▁the', '▁threads', '▁in', '▁the', '▁pool', '.', '\n', '*', '/', '\n', 'protected', '▁thread', '▁threads', '[]', '▁=', '▁null', ';', '\n', '/', '**', '\n', '*', '▁the', '▁backlog', '▁of', '▁assignments', ',', '▁which', '▁are', '▁waiting', '\n', '*', '▁for', '▁the', '▁thread', '▁pool', '.', '\n', '*', '/', '\n', 'collection', '▁assignments', '▁=', '▁new', '▁arraylist', '(3)', ';', '\n', '/', '**', '\n', '*', '▁a', '▁done', '▁object', '▁that', '▁is', '▁/', '**', '\n', '▁*', '▁the', '▁constructor', '.', '\n', '▁*', '\n', '▁*', '▁', '@', 'param', '▁size', 'how', '▁many', '▁threads', '▁in', '▁the', '▁thread', '▁pool', '.', '\n', '▁*/', '\n', 'public', '▁thread', 'pool', '(', '▁int', '▁size', ')', '\n', '{', '\n\n', 'th', 'reads', '▁=', '▁new', '▁worker', 'thread', '[', '▁size', '];', '\n\n', 'for', '▁(', '▁int', '▁i', '=0;', '▁i', '<', '▁threads', '.', '▁length', ';', '▁i', '++)', '\n', '{', '\n', 'thr', '▁/', '**', '\n', '*', '▁add', '▁a', '▁task', '▁to', '▁the', '▁thread', '▁pool', '.', '▁any', '▁class', '\n', '*', '▁which', '▁implements', '▁the', '▁run', 'nable', '▁interface', '\n', '*', '▁may', '▁be', '▁assigned', '.', '▁when', '▁this', '▁task', '▁runs', ',', '▁its', '\n', '*', '▁run', '▁method', '▁will', '▁be', '▁called', '.', '\n', '*', '\n', '*', '▁', '@', 'param', '▁r', '▁an', '▁object', '▁that', '▁implements', '▁the', '▁run', 'nable', '▁interface', '\n', '*', '/', '\n', '▁pub', '▁/', '**', '\n', '*', '▁get', '▁a', '▁new', '▁work', '▁assignment', '.', '\n', '*', '\n', '*', '▁', '@', 'return', '▁a', '▁new', '▁assignment', '\n', '*', '/', '\n', '▁public', '▁synchronized', '▁run', 'nable', '▁get', 'ass', 'ignment', '()', '\n', '▁{', '\n', 'try', '▁{', '\n', '▁while', '▁(', '▁!', '▁assignments', '.', '▁iterator', '().', '▁has', 'next', '()', '▁)', '\n', 'wait', '();', '\n\n', '▁run', 'nable', '▁r', '▁=', '▁(', 'run', 'nable', ')', '▁assignments', './', '**', '\n', '*', '▁called', '▁to', '▁block', '▁the', '▁current', '▁thread', '▁until', '\n', '*', '▁the', '▁thread', '▁pool', '▁has', '▁no', '▁more', '▁work', '.', '\n', '*', '/', '\n', '▁public', '▁void', '▁complete', '()', '\n', '▁{', '\n', 'done', '.', '▁wait', 'begin', '();', '\n', 'done', '.', '▁wait', 'done', '();', '\n', '▁}', '▁protected', '▁void', '▁final', 'ize', '()', '\n', '▁{', '\n', 'done', '.', '▁reset', '();', '\n', 'for', '▁(', '▁int', '▁i', '=0;', '▁i', '<', '▁threads', '.', '▁length', ';', '▁i', '++)', '▁{', '\n', '▁threads', '[', '▁i', '].', '▁interrupt', '();', '\n', '▁done', '.', '▁worker', 'begin', '();', '\n', '▁threads', '[', '▁i', '].', '▁destroy', '();', '\n', '}', '\n', 'done', '.', '▁wait', 'done', '();', '\n', '▁}', '\n', '}', '""', '\n']"~thread pool thread pool protect thread thread null backlog assign wait thread pool collect assign new array list done object constructor param size mani thread thread pool public thread pool int size thread new worker thread size int thread length thr add task thread pool class implement runnabl interfac may assign task run run method call param object implement runnabl interfac pub get new work assign return new assign public synchron runnabl get assign tri assign iter next wait runnabl runnabl assign call block current thread thread pool work public void complet done wait begin done wait done protect void final done reset int thread length thread interrupt done worker begin thread destroy done wait done
110~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/92.java~92.java~"92	""New Modelpublic NewModel(EBT em)
{
super( em);
 } // Construct Visual model for Merge Event
public void BuildEvent()
{
ClearVectors();
AddEventRect(60,80,1);
AddArrow(35,97,59,97);
CurrentEvent = 0;
} public StringBuffer GenerateEvent()
{
StringBuffer thisEvent = new StringBuffer();
thisEvent. append(""""New|0|"""");
thisEvent. append( new Date(). toString()+ """"|"""");
ebs = (EBShape)EventShapes. elem""
"~src~"['▁9', '2', '\t', '""', 'new', '▁model', 'publ', 'ic', '▁new', 'mod', 'el', '(', 'e', 'b', 't', '▁em', ')', '\n', '{', '\n', 'sup', 'er', '(', '▁em', ');', '\n', '▁}', '▁/', '/', '▁construct', '▁visual', '▁model', '▁for', '▁mer', 'ge', '▁event', '\n', 'publ', 'ic', '▁vo', 'id', '▁build', 'ev', 'ent', '(', ')', '\n', '{', '\n', 'cle', 'ar', 'v', 'ect', 'ors', '(', ');', '\n', 'ad', 'de', 'vent', 'rect', '(', '6', '0,', '8', '0,', '1)', ';', '\n', 'ad', 'd', 'ar', 'row', '(', '3', '5,', '9', '7,', '5', '9,', '9', '7)', ';', '\n', 'cur', 'ren', 'te', 'vent', '▁=', '▁0', ';', '\n', '}', '▁public', '▁string', 'b', 'uf', 'fer', '▁gener', 'ate', 'ev', 'ent', '(', ')', '\n', '{', '\n', 'str', 'ing', 'b', 'uf', 'fer', '▁this', 'ev', 'ent', '▁=', '▁new', '▁string', 'b', 'uf', 'fer', '(', ');', '\n', 'th', 'ise', 'vent', '.', '▁app', 'end', '(', '""', '""', 'new', '|', '0', '|', '""', '"")', ';', '\n', 'th', 'ise', 'vent', '.', '▁app', 'end', '(', '▁new', '▁date', '(', ').', '▁to', 'str', 'ing', '(', ')', '+', '▁""', '""|', '""', '"")', ';', '\n', 'e', 'bs', '▁=', '▁(', 'e', 'b', 'sh', 'ape', ')', 'ev', 'ents', 'h', 'apes', '.', '▁ele', 'm', '""', '\n']"~"['▁92', '\t', '""', 'new', '▁model', 'public', '▁new', 'model', '(', 'eb', 't', '▁em', ')', '\n', '{', '\n', 'super', '(', '▁em', ');', '\n', '▁}', '▁//', '▁construct', '▁visual', '▁model', '▁for', '▁merge', '▁event', '\n', 'public', '▁void', '▁build', 'event', '()', '\n', '{', '\n', 'clear', 'v', 'ectors', '();', '\n', 'ad', 'de', 'vent', 'rect', '(', '6', '0,', '8', '0,', '1)', ';', '\n', 'add', 'ar', 'row', '(', '3', '5,', '9', '7,', '5', '9,', '9', '7)', ';', '\n', 'cur', 'ren', 'te', 'vent', '▁=', '▁0', ';', '\n', '}', '▁public', '▁string', 'b', 'uffer', '▁generate', 'event', '()', '\n', '{', '\n', 'string', 'b', 'uffer', '▁this', 'event', '▁=', '▁new', '▁string', 'b', 'uffer', '();', '\n', 'th', 'ise', 'vent', '.', '▁append', '(""', '""', 'new', '|', '0', '|', '""', '"");', '\n', 'th', 'ise', 'vent', '.', '▁append', '(', '▁new', '▁date', '().', '▁to', 'string', '()', '+', '▁""', '""|', '""', '"");', '\n', 'e', 'bs', '▁=', '▁(', 'eb', 'shape', ')', 'ev', 'ents', 'h', 'apes', '.', '▁ele', 'm', '""', '\n']"~"['▁92', '\t', '""', 'new', '▁model', 'public', '▁new', 'model', '(', 'eb', 't', '▁em', ')', '\n', '{', '\n', 'super', '(', '▁em', ');', '\n', '▁}', '▁//', '▁construct', '▁visual', '▁model', '▁for', '▁merge', '▁event', '\n', 'public', '▁void', '▁build', 'event', '()', '\n', '{', '\n', 'clear', 'v', 'ectors', '();', '\n', 'ad', 'de', 'vent', 'rect', '(6', '0,', '80,', '1);', '\n', 'add', 'arrow', '(3', '5,9', '7,', '5', '9,9', '7);', '\n', 'cur', 'rente', 'vent', '▁=', '▁0;', '\n', '}', '▁public', '▁string', 'buffer', '▁generate', 'event', '()', '\n', '{', '\n', 'string', 'buffer', '▁this', 'event', '▁=', '▁new', '▁string', 'buffer', '();', '\n', 'th', 'ise', 'vent', '.', '▁append', '(""', '""', 'new', '|0', '|', '"""");', '\n', 'th', 'ise', 'vent', '.', '▁append', '(', '▁new', '▁date', '().', '▁to', 'string', '()', '+', '▁""', '""|', '"""");', '\n', 'e', 'bs', '▁=', '▁(', 'eb', 'shape', ')', 'events', 'h', 'apes', '.', '▁elem', '""', '\n']"~new modelpubl new model ebt super construct visual model merg event public void build event clear vector add event rect add arrow current event public string buffer generat event string buffer event new string buffer event append new event append new date string ebshap event shape elem
111~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/85.java~85.java~"85	""Decompose Model public DecomposeModel(EBT em)
{
super( em);
MinimumNoRects = 3;
 }// Construct Visual model for Merge Event
public void BuildEvent()
{
 ClearVectors();
AddEventRect(20,20,1);
AddEventRect(60,70,1);
AddEventRect(60,120,1);
AddEventRect public StringBuffer GenerateEvent()
{
StringBuffer thisEvent = new StringBuffer();
StringBuffer temp = new StringBuffer();
int Count = -1;
thisEvent. append(""""Decompose|"""");

for ( int i = 0; i < EventShapes""
"~src~"['▁8', '5', '\t', '""', 'dec', 'om', 'pose', '▁model', '▁public', '▁dec', 'om', 'pos', 'em', 'od', 'el', '(', 'e', 'b', 't', '▁em', ')', '\n', '{', '\n', 'sup', 'er', '(', '▁em', ');', '\n', 'min', 'im', 'umn', 'or', 'ects', '▁=', '▁3', ';', '\n', '▁}', '//', '▁construct', '▁visual', '▁model', '▁for', '▁mer', 'ge', '▁event', '\n', 'publ', 'ic', '▁vo', 'id', '▁build', 'ev', 'ent', '(', ')', '\n', '{', '\n', '▁clear', 'v', 'ect', 'ors', '(', ');', '\n', 'ad', 'de', 'vent', 'rect', '(', '20', ',', '20', ',', '1)', ';', '\n', 'ad', 'de', 'vent', 'rect', '(', '6', '0,', '7', '0,', '1)', ';', '\n', 'ad', 'de', 'vent', 'rect', '(', '6', '0,', '1', '20', ',', '1)', ';', '\n', 'ad', 'de', 'vent', 'rect', '▁public', '▁string', 'b', 'uf', 'fer', '▁gener', 'ate', 'ev', 'ent', '(', ')', '\n', '{', '\n', 'str', 'ing', 'b', 'uf', 'fer', '▁this', 'ev', 'ent', '▁=', '▁new', '▁string', 'b', 'uf', 'fer', '(', ');', '\n', 'str', 'ing', 'b', 'uf', 'fer', '▁tem', 'p', '▁=', '▁new', '▁string', 'b', 'uf', 'fer', '(', ');', '\n', 'int', '▁count', '▁=', '▁-', '1', ';', '\n', 'th', 'ise', 'vent', '.', '▁app', 'end', '(', '""', '""', 'dec', 'om', 'pose', '|', '""', '"")', ';', '\n\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', ';', '▁i', '▁', '<', '▁events', 'h', 'apes', '""', '\n']"~"['▁85', '\t', '""', 'dec', 'om', 'pose', '▁model', '▁public', '▁decom', 'pos', 'em', 'od', 'el', '(', 'eb', 't', '▁em', ')', '\n', '{', '\n', 'super', '(', '▁em', ');', '\n', 'min', 'im', 'umn', 'or', 'ects', '▁=', '▁3', ';', '\n', '▁}', '//', '▁construct', '▁visual', '▁model', '▁for', '▁merge', '▁event', '\n', 'public', '▁void', '▁build', 'event', '()', '\n', '{', '\n', '▁clear', 'v', 'ectors', '();', '\n', 'ad', 'de', 'vent', 'rect', '(', '20,', '20,', '1)', ';', '\n', 'ad', 'de', 'vent', 'rect', '(', '6', '0,', '7', '0,', '1)', ';', '\n', 'ad', 'de', 'vent', 'rect', '(', '6', '0,', '1', '20,', '1)', ';', '\n', 'ad', 'de', 'vent', 'rect', '▁public', '▁string', 'b', 'uffer', '▁generate', 'event', '()', '\n', '{', '\n', 'string', 'b', 'uffer', '▁this', 'event', '▁=', '▁new', '▁string', 'b', 'uffer', '();', '\n', 'string', 'b', 'uffer', '▁temp', '▁=', '▁new', '▁string', 'b', 'uffer', '();', '\n', 'int', '▁count', '▁=', '▁-', '1', ';', '\n', 'th', 'ise', 'vent', '.', '▁append', '(""', '""', 'dec', 'om', 'pose', '|', '""', '"");', '\n\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0', ';', '▁i', '▁<', '▁events', 'h', 'apes', '""', '\n']"~"['▁85', '\t', '""', 'decom', 'pose', '▁model', '▁public', '▁decom', 'pos', 'em', 'odel', '(', 'eb', 't', '▁em', ')', '\n', '{', '\n', 'super', '(', '▁em', ');', '\n', 'minim', 'umn', 'or', 'ects', '▁=', '▁3;', '\n', '▁}', '//', '▁construct', '▁visual', '▁model', '▁for', '▁merge', '▁event', '\n', 'public', '▁void', '▁build', 'event', '()', '\n', '{', '\n', '▁clear', 'v', 'ectors', '();', '\n', 'ad', 'de', 'vent', 'rect', '(', '20,', '20,', '1);', '\n', 'ad', 'de', 'vent', 'rect', '(6', '0,', '7', '0,', '1);', '\n', 'ad', 'de', 'vent', 'rect', '(6', '0,', '1', '20,', '1);', '\n', 'ad', 'de', 'vent', 'rect', '▁public', '▁string', 'buffer', '▁generate', 'event', '()', '\n', '{', '\n', 'string', 'buffer', '▁this', 'event', '▁=', '▁new', '▁string', 'buffer', '();', '\n', 'string', 'buffer', '▁temp', '▁=', '▁new', '▁string', 'buffer', '();', '\n', 'int', '▁count', '▁=', '▁-', '1;', '\n', 'th', 'ise', 'vent', '.', '▁append', '(""', '""', 'decom', 'pose', '|', '"""");', '\n\n', 'for', '▁(', '▁int', '▁i', '▁=', '▁0;', '▁i', '▁<', '▁events', 'h', 'apes', '""', '\n']"~decompos model public decompos model ebt super minimum rect construct visual model merg event public void build event clear vector add event rect add event rect add event rect add event rect public string buffer generat event string buffer event new string buffer string buffer temp new string buffer int count event append decompos int event shape
112~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/50.java~50.java~"50	""Driver Description private String projectName = null;
 private String modulePath = null;
 private String requirementID = null;

 private String description = null; // Description of the requirement.
 private String changedArrtibute = null;
 private Strinpublic DriverDescription(
String projectName,
String modulePath,
String requirementID,
String description,
String changedAttribute,
String fromAttribute,
String toAttribute)
 {

this. projectName = projecpublic String getChangedAttribute()
 {
return changedAttribute;
 }public String getDescription()
 {
return description;
 }public String getFromAttribute()
 {
return fromAttribute;
 } public String getModulePath()
 {
return modulePath;
 }public String getProjectName()
 {
return projectName;
 } public String getRequirementID()
 {
return requirementID;
 } public String getToAttribute()
 {
return toAttribute;
 } public void setChangedAttribute(String changedAttribute)
 {
this. changedAttribute = changedAttribute;
 } public void setDescription(String description)
 {
this. description = description;
 } public void setFromAttribute(String fromAttribute)
 {
this. fromAttribute = fromAttribute;
 } public void setModulePath(String modulePath)
 {
this. modulePath = modulePath;
 } public void setProjectName(String projectName)
 {
this. projectName = projectName;
 } public void setRequirementID(String requirementID)
 {
this. requirementID = requirementID;
 } public void setToAttribute(String toAttribute)
 {
this. toAttribute = toAttribute;
 } public String createKey()
 {
String key =
 this. projectName + this. modulePath + """"\\"""" + this. requirementID;

return key. toLowerCase();

 } public boolean equals(Object o)
 {
if (!( o instance of DriverDescription))
 return false;

DriverDescription dd = (DriverDescription) o;

if ( dd. projectName. equalsIgnoreCase( this. projectName)
 && ddpublic String toString()
 {

String str =
 """"\ nProject Name = """"
+ this. projectName
+ """"\ n""""
+ """"Module Path = """"
+ this. modulePath
+ """"\ n""""
+ """"Requirement ID = """"
+ this. requirementID
+ """"\ n""""
public int hashCode()
 {

int hashCode = 0;

if ( hashCode == 0)
{
 int result = 17;
 result = 37 * result + this. projectName. hashCode();
 result = 37 * result + this. modulePath. hashCode();
 result = 37 ""
"~src~"['▁50', '\t', '""', 'dr', 'iver', '▁description', '▁private', '▁string', '▁project', 'name', '▁=', '▁n', 'ull', ';', '\n', '▁private', '▁string', '▁mod', 'ule', 'p', 'ath', '▁=', '▁n', 'ull', ';', '\n', '▁private', '▁string', '▁require', 'ment', 'id', '▁=', '▁n', 'ull', ';', '\n\n', '▁private', '▁string', '▁description', '▁=', '▁n', 'ull', ';', '▁/', '/', '▁description', '▁of', '▁the', '▁require', 'ment', '.', '\n', '▁private', '▁string', '▁changed', 'ar', 'r', 't', 'ib', 'ute', '▁=', '▁n', 'ull', ';', '\n', '▁private', '▁str', 'in', 'publ', 'ic', '▁driver', 'des', 'c', 'ription', '(', '\n', 'str', 'ing', '▁project', 'name', ',', '\n', 'str', 'ing', '▁mod', 'ule', 'p', 'ath', ',', '\n', 'str', 'ing', '▁require', 'ment', 'id', ',', '\n', 'str', 'ing', '▁description', ',', '\n', 'str', 'ing', '▁changed', 'att', 'rib', 'ute', ',', '\n', 'str', 'ing', '▁from', 'att', 'rib', 'ute', ',', '\n', 'str', 'ing', '▁to', 'att', 'rib', 'ute', ')', '\n', '▁{', '\n\n', 'this', '.', '▁project', 'name', '▁=', '▁pro', 'j', 'ec', 'publ', 'ic', '▁string', '▁get', 'ch', 'anged', 'att', 'rib', 'ute', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁changed', 'att', 'rib', 'ute', ';', '\n', '▁}', 'publ', 'ic', '▁string', '▁get', 'des', 'c', 'ription', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁description', ';', '\n', '▁}', 'publ', 'ic', '▁string', '▁get', 'from', 'att', 'rib', 'ute', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁from', 'att', 'rib', 'ute', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'mod', 'ule', 'p', 'ath', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁mod', 'ule', 'p', 'ath', ';', '\n', '▁}', 'publ', 'ic', '▁string', '▁get', 'pro', 'ject', 'name', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁project', 'name', ';', '\n', '▁}', '▁public', '▁string', '▁get', 're', 'qu', 'ire', 'ment', 'id', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁require', 'ment', 'id', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'to', 'att', 'rib', 'ute', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁to', 'att', 'rib', 'ute', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', 'ch', 'anged', 'att', 'rib', 'ute', '(', 'str', 'ing', '▁changed', 'att', 'rib', 'ute', ')', '\n', '▁{', '\n', 'this', '.', '▁changed', 'att', 'rib', 'ute', '▁=', '▁changed', 'att', 'rib', 'ute', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', 'des', 'c', 'ription', '(', 'str', 'ing', '▁description', ')', '\n', '▁{', '\n', 'this', '.', '▁description', '▁=', '▁description', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', 'from', 'att', 'rib', 'ute', '(', 'str', 'ing', '▁from', 'att', 'rib', 'ute', ')', '\n', '▁{', '\n', 'this', '.', '▁from', 'att', 'rib', 'ute', '▁=', '▁from', 'att', 'rib', 'ute', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', 'mod', 'ule', 'p', 'ath', '(', 'str', 'ing', '▁mod', 'ule', 'p', 'ath', ')', '\n', '▁{', '\n', 'this', '.', '▁mod', 'ule', 'p', 'ath', '▁=', '▁mod', 'ule', 'p', 'ath', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', 'pro', 'ject', 'name', '(', 'str', 'ing', '▁project', 'name', ')', '\n', '▁{', '\n', 'this', '.', '▁project', 'name', '▁=', '▁project', 'name', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', 're', 'qu', 'ire', 'ment', 'id', '(', 'str', 'ing', '▁require', 'ment', 'id', ')', '\n', '▁{', '\n', 'this', '.', '▁require', 'ment', 'id', '▁=', '▁require', 'ment', 'id', ';', '\n', '▁}', '▁public', '▁vo', 'id', '▁set', 'to', 'att', 'rib', 'ute', '(', 'str', 'ing', '▁to', 'att', 'rib', 'ute', ')', '\n', '▁{', '\n', 'this', '.', '▁to', 'att', 'rib', 'ute', '▁=', '▁to', 'att', 'rib', 'ute', ';', '\n', '▁}', '▁public', '▁string', '▁create', 'key', '(', ')', '\n', '▁{', '\n', 'str', 'ing', '▁key', '▁=', '\n', '▁this', '.', '▁project', 'name', '▁+', '▁this', '.', '▁mod', 'ule', 'p', 'ath', '▁+', '▁""', '""', '\\\\', '""', '""', '▁+', '▁this', '.', '▁require', 'ment', 'id', ';', '\n\n', 'ret', 'urn', '▁key', '.', '▁to', 'l', 'ower', 'c', 'ase', '(', ');', '\n\n', '▁}', '▁public', '▁bo', 'ole', 'an', '▁equ', 'als', '(', 'ob', 'ject', '▁o', ')', '\n', '▁{', '\n', 'if', '▁(', '!', '(', '▁o', '▁instance', '▁of', '▁driver', 'des', 'c', 'ription', ')', ')', '\n', '▁return', '▁fal', 'se', ';', '\n\n', 'dr', 'iver', 'des', 'c', 'ription', '▁d', 'd', '▁=', '▁(', 'dr', 'iver', 'des', 'c', 'ription', ')', '▁o', ';', '\n\n', 'if', '▁(', '▁d', 'd', '.', '▁project', 'name', '.', '▁equ', 'als', 'ign', 'or', 'ec', 'ase', '(', '▁this', '.', '▁project', 'name', ')', '\n', '▁&', '&', '▁d', 'd', 'publ', 'ic', '▁string', '▁to', 'str', 'ing', '(', ')', '\n', '▁{', '\n\n', 'str', 'ing', '▁str', '▁=', '\n', '▁""', '""', '\\', '▁n', 'pro', 'ject', '▁name', '▁=', '▁""', '""', '\n', '+', '▁this', '.', '▁project', 'name', '\n', '+', '▁""', '""', '\\', '▁n', '""', '""', '\n', '+', '▁""', '""', 'mod', 'ule', '▁path', '▁=', '▁""', '""', '\n', '+', '▁this', '.', '▁mod', 'ule', 'p', 'ath', '\n', '+', '▁""', '""', '\\', '▁n', '""', '""', '\n', '+', '▁""', '""', 're', 'qu', 'ire', 'ment', '▁id', '▁=', '▁""', '""', '\n', '+', '▁this', '.', '▁require', 'ment', 'id', '\n', '+', '▁""', '""', '\\', '▁n', '""', '""', '\n', 'publ', 'ic', '▁int', '▁has', 'h', 'c', 'ode', '(', ')', '\n', '▁{', '\n\n', 'int', '▁has', 'h', 'c', 'ode', '▁=', '▁0', ';', '\n\n', 'if', '▁(', '▁has', 'h', 'c', 'ode', '▁=', '=', '▁', '0)', '\n', '{', '\n', '▁int', '▁result', '▁=', '▁17', ';', '\n', '▁result', '▁=', '▁37', '▁*', '▁result', '▁+', '▁this', '.', '▁project', 'name', '.', '▁has', 'h', 'c', 'ode', '(', ');', '\n', '▁result', '▁=', '▁37', '▁*', '▁result', '▁+', '▁this', '.', '▁mod', 'ule', 'p', 'ath', '.', '▁has', 'h', 'c', 'ode', '(', ');', '\n', '▁result', '▁=', '▁37', '▁""', '\n']"~"['▁50', '\t', '""', 'dr', 'iver', '▁description', '▁private', '▁string', '▁project', 'name', '▁=', '▁null', ';', '\n', '▁private', '▁string', '▁module', 'path', '▁=', '▁null', ';', '\n', '▁private', '▁string', '▁requirement', 'id', '▁=', '▁null', ';', '\n\n', '▁private', '▁string', '▁description', '▁=', '▁null', ';', '▁//', '▁description', '▁of', '▁the', '▁requirement', '.', '\n', '▁private', '▁string', '▁changed', 'ar', 'rt', 'ib', 'ute', '▁=', '▁null', ';', '\n', '▁private', '▁str', 'in', 'public', '▁driver', 'desc', 'ription', '(', '\n', 'string', '▁project', 'name', ',', '\n', 'string', '▁module', 'path', ',', '\n', 'string', '▁requirement', 'id', ',', '\n', 'string', '▁description', ',', '\n', 'string', '▁changed', 'att', 'ribute', ',', '\n', 'string', '▁from', 'att', 'ribute', ',', '\n', 'string', '▁to', 'att', 'ribute', ')', '\n', '▁{', '\n\n', 'this', '.', '▁project', 'name', '▁=', '▁pro', 'j', 'ec', 'public', '▁string', '▁get', 'changed', 'att', 'ribute', '()', '\n', '▁{', '\n', 'return', '▁changed', 'att', 'ribute', ';', '\n', '▁}', 'public', '▁string', '▁get', 'desc', 'ription', '()', '\n', '▁{', '\n', 'return', '▁description', ';', '\n', '▁}', 'public', '▁string', '▁get', 'from', 'att', 'ribute', '()', '\n', '▁{', '\n', 'return', '▁from', 'att', 'ribute', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'mod', 'ule', 'path', '()', '\n', '▁{', '\n', 'return', '▁module', 'path', ';', '\n', '▁}', 'public', '▁string', '▁get', 'project', 'name', '()', '\n', '▁{', '\n', 'return', '▁project', 'name', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'requ', 'ire', 'ment', 'id', '()', '\n', '▁{', '\n', 'return', '▁requirement', 'id', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'to', 'att', 'ribute', '()', '\n', '▁{', '\n', 'return', '▁to', 'att', 'ribute', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'changed', 'att', 'ribute', '(', 'string', '▁changed', 'att', 'ribute', ')', '\n', '▁{', '\n', 'this', '.', '▁changed', 'att', 'ribute', '▁=', '▁changed', 'att', 'ribute', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'desc', 'ription', '(', 'string', '▁description', ')', '\n', '▁{', '\n', 'this', '.', '▁description', '▁=', '▁description', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'from', 'att', 'ribute', '(', 'string', '▁from', 'att', 'ribute', ')', '\n', '▁{', '\n', 'this', '.', '▁from', 'att', 'ribute', '▁=', '▁from', 'att', 'ribute', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'mod', 'ule', 'path', '(', 'string', '▁module', 'path', ')', '\n', '▁{', '\n', 'this', '.', '▁module', 'path', '▁=', '▁module', 'path', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'project', 'name', '(', 'string', '▁project', 'name', ')', '\n', '▁{', '\n', 'this', '.', '▁project', 'name', '▁=', '▁project', 'name', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'requ', 'ire', 'ment', 'id', '(', 'string', '▁requirement', 'id', ')', '\n', '▁{', '\n', 'this', '.', '▁requirement', 'id', '▁=', '▁requirement', 'id', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'to', 'att', 'ribute', '(', 'string', '▁to', 'att', 'ribute', ')', '\n', '▁{', '\n', 'this', '.', '▁to', 'att', 'ribute', '▁=', '▁to', 'att', 'ribute', ';', '\n', '▁}', '▁public', '▁string', '▁create', 'key', '()', '\n', '▁{', '\n', 'string', '▁key', '▁=', '\n', '▁this', '.', '▁project', 'name', '▁+', '▁this', '.', '▁module', 'path', '▁+', '▁""""', '\\\\', '""', '""', '▁+', '▁this', '.', '▁requirement', 'id', ';', '\n\n', 'return', '▁key', '.', '▁tol', 'ower', 'case', '();', '\n\n', '▁}', '▁public', '▁bo', 'olean', '▁equals', '(', 'object', '▁o', ')', '\n', '▁{', '\n', 'if', '▁(', '!', '(', '▁o', '▁instance', '▁of', '▁driver', 'desc', 'ription', '))', '\n', '▁return', '▁false', ';', '\n\n', 'dr', 'iver', 'desc', 'ription', '▁dd', '▁=', '▁(', 'dr', 'iver', 'desc', 'ription', ')', '▁o', ';', '\n\n', 'if', '▁(', '▁dd', '.', '▁project', 'name', '.', '▁equals', 'ign', 'or', 'ec', 'ase', '(', '▁this', '.', '▁project', 'name', ')', '\n', '▁&', '&', '▁dd', 'public', '▁string', '▁to', 'string', '()', '\n', '▁{', '\n\n', 'string', '▁str', '▁=', '\n', '▁""""', '\\', '▁n', 'project', '▁name', '▁=', '▁""""', '\n', '+', '▁this', '.', '▁project', 'name', '\n', '+', '▁""""', '\\', '▁n', '""', '""', '\n', '+', '▁""""', 'mod', 'ule', '▁path', '▁=', '▁""""', '\n', '+', '▁this', '.', '▁module', 'path', '\n', '+', '▁""""', '\\', '▁n', '""', '""', '\n', '+', '▁""""', 'requ', 'ire', 'ment', '▁id', '▁=', '▁""""', '\n', '+', '▁this', '.', '▁requirement', 'id', '\n', '+', '▁""""', '\\', '▁n', '""', '""', '\n', 'public', '▁int', '▁has', 'hc', 'ode', '()', '\n', '▁{', '\n\n', 'int', '▁has', 'hc', 'ode', '▁=', '▁0', ';', '\n\n', 'if', '▁(', '▁has', 'hc', 'ode', '▁==', '▁', '0)', '\n', '{', '\n', '▁int', '▁result', '▁=', '▁17', ';', '\n', '▁result', '▁=', '▁37', '▁*', '▁result', '▁+', '▁this', '.', '▁project', 'name', '.', '▁has', 'hc', 'ode', '();', '\n', '▁result', '▁=', '▁37', '▁*', '▁result', '▁+', '▁this', '.', '▁module', 'path', '.', '▁has', 'hc', 'ode', '();', '\n', '▁result', '▁=', '▁37', '▁""', '\n']"~"['▁50', '\t', '""', 'driver', '▁description', '▁private', '▁string', '▁project', 'name', '▁=', '▁null', ';', '\n', '▁private', '▁string', '▁module', 'path', '▁=', '▁null', ';', '\n', '▁private', '▁string', '▁requirement', 'id', '▁=', '▁null', ';', '\n\n', '▁private', '▁string', '▁description', '▁=', '▁null', ';', '▁//', '▁description', '▁of', '▁the', '▁requirement', '.', '\n', '▁private', '▁string', '▁changed', 'ar', 'rt', 'ib', 'ute', '▁=', '▁null', ';', '\n', '▁private', '▁str', 'in', 'public', '▁driver', 'description', '(', '\n', 'string', '▁project', 'name', ',', '\n', 'string', '▁module', 'path', ',', '\n', 'string', '▁requirement', 'id', ',', '\n', 'string', '▁description', ',', '\n', 'string', '▁changed', 'attribute', ',', '\n', 'string', '▁from', 'attribute', ',', '\n', 'string', '▁to', 'attribute', ')', '\n', '▁{', '\n\n', 'this', '.', '▁project', 'name', '▁=', '▁proj', 'ec', 'public', '▁string', '▁get', 'changed', 'attribute', '()', '\n', '▁{', '\n', 'return', '▁changed', 'attribute', ';', '\n', '▁}', 'public', '▁string', '▁get', 'description', '()', '\n', '▁{', '\n', 'return', '▁description', ';', '\n', '▁}', 'public', '▁string', '▁get', 'from', 'attribute', '()', '\n', '▁{', '\n', 'return', '▁from', 'attribute', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'module', 'path', '()', '\n', '▁{', '\n', 'return', '▁module', 'path', ';', '\n', '▁}', 'public', '▁string', '▁get', 'project', 'name', '()', '\n', '▁{', '\n', 'return', '▁project', 'name', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'require', 'ment', 'id', '()', '\n', '▁{', '\n', 'return', '▁requirement', 'id', ';', '\n', '▁}', '▁public', '▁string', '▁get', 'to', 'attribute', '()', '\n', '▁{', '\n', 'return', '▁to', 'attribute', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'changed', 'attribute', '(', 'string', '▁changed', 'attribute', ')', '\n', '▁{', '\n', 'this', '.', '▁changed', 'attribute', '▁=', '▁changed', 'attribute', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'description', '(', 'string', '▁description', ')', '\n', '▁{', '\n', 'this', '.', '▁description', '▁=', '▁description', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'from', 'attribute', '(', 'string', '▁from', 'attribute', ')', '\n', '▁{', '\n', 'this', '.', '▁from', 'attribute', '▁=', '▁from', 'attribute', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'module', 'path', '(', 'string', '▁module', 'path', ')', '\n', '▁{', '\n', 'this', '.', '▁module', 'path', '▁=', '▁module', 'path', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'project', 'name', '(', 'string', '▁project', 'name', ')', '\n', '▁{', '\n', 'this', '.', '▁project', 'name', '▁=', '▁project', 'name', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'require', 'ment', 'id', '(', 'string', '▁requirement', 'id', ')', '\n', '▁{', '\n', 'this', '.', '▁requirement', 'id', '▁=', '▁requirement', 'id', ';', '\n', '▁}', '▁public', '▁void', '▁set', 'to', 'attribute', '(', 'string', '▁to', 'attribute', ')', '\n', '▁{', '\n', 'this', '.', '▁to', 'attribute', '▁=', '▁to', 'attribute', ';', '\n', '▁}', '▁public', '▁string', '▁create', 'key', '()', '\n', '▁{', '\n', 'string', '▁key', '▁=', '\n', '▁this', '.', '▁project', 'name', '▁+', '▁this', '.', '▁module', 'path', '▁+', '▁""""', '\\\\', '""""', '▁+', '▁this', '.', '▁requirement', 'id', ';', '\n\n', 'return', '▁key', '.', '▁tol', 'ower', 'case', '();', '\n\n', '▁}', '▁public', '▁boolean', '▁equals', '(', 'object', '▁o', ')', '\n', '▁{', '\n', 'if', '▁(!', '(', '▁o', '▁instance', '▁of', '▁driver', 'description', '))', '\n', '▁return', '▁false', ';', '\n\n', 'driver', 'description', '▁dd', '▁=', '▁(', 'driver', 'description', ')', '▁o', ';', '\n\n', 'if', '▁(', '▁dd', '.', '▁project', 'name', '.', '▁equals', 'ign', 'orec', 'ase', '(', '▁this', '.', '▁project', 'name', ')', '\n', '▁&&', '▁dd', 'public', '▁string', '▁to', 'string', '()', '\n', '▁{', '\n\n', 'string', '▁str', '▁=', '\n', '▁""""', '\\', '▁n', 'project', '▁name', '▁=', '▁""""', '\n', '+', '▁this', '.', '▁project', 'name', '\n', '+', '▁""""', '\\', '▁n', '""""', '\n', '+', '▁""""', 'module', '▁path', '▁=', '▁""""', '\n', '+', '▁this', '.', '▁module', 'path', '\n', '+', '▁""""', '\\', '▁n', '""""', '\n', '+', '▁""""', 'require', 'ment', '▁id', '▁=', '▁""""', '\n', '+', '▁this', '.', '▁requirement', 'id', '\n', '+', '▁""""', '\\', '▁n', '""""', '\n', 'public', '▁int', '▁has', 'hc', 'ode', '()', '\n', '▁{', '\n\n', 'int', '▁has', 'hc', 'ode', '▁=', '▁0;', '\n\n', 'if', '▁(', '▁has', 'hc', 'ode', '▁==', '▁0)', '\n', '{', '\n', '▁int', '▁result', '▁=', '▁17', ';', '\n', '▁result', '▁=', '▁37', '▁*', '▁result', '▁+', '▁this', '.', '▁project', 'name', '.', '▁has', 'hc', 'ode', '();', '\n', '▁result', '▁=', '▁37', '▁*', '▁result', '▁+', '▁this', '.', '▁module', 'path', '.', '▁has', 'hc', 'ode', '();', '\n', '▁result', '▁=', '▁37', '▁""', '\n']"~driver descript privat string project name null privat string modul path null privat string requir null privat string descript null descript requir privat string chang arrtibut null privat strinpubl driver descript string project name string modul path string requir string descript string chang attribut string attribut string attribut project name projecpubl string get chang attribut return chang attribut public string get descript return descript public string get attribut return attribut public string get modul path return modul path public string get project name return project name public string get requir return requir public string get attribut return attribut public void set chang attribut string chang attribut chang attribut chang attribut public void set descript string descript descript descript public void set attribut string attribut attribut attribut public void set modul path string modul path modul path modul path public void set project name string project name project name project name public void set requir string requir requir requir public void set attribut string attribut attribut attribut public string creat key string key project name modul path requir return key lower case public boolean equal object instanc driver descript return fals driver descript driver descript project name equal ignor case project name ddpublic string string string str project name project name modul path modul path requir requir public int hash code int hash code hash code int result result result project name hash code result result modul path hash code result
113~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/62.java~62.java~"62	""Call Back private Hash table requirementDescTable = new Hash table();

 private Hash table constraintDescTable = new Hash table();

 private Hash table performanceModelTable = new Hash table();

 private PerformanceModel performance model= nullpublic void parseSpeculateInformation(String str)
 {

System. out. println(""""Received String = """" + str);

Connection conn = null;

Statement stmt = null;

DriverDescription dd = null;

String eventType = null; // public void identifyPerformanceModels()
 {

Connection conn = null;
ResultSet rs = null;
Statement stmt = null;

String subscriberName = null;

DriverDescription dd = null;

Enumeration subscriberTableEnumeration = nu public void pullInformationFromDoors()
 {

String serverIP = """"140.192.37.150"""";

String[] attribute = { """"Value"""", """"Logic"""", """"Units"""", """"Attribute"""" };

String subscriberName = null;

Vector constraints = n public void insertValuesInDataBase()
 {

Connection conn = null;

Statement stmt = null;

String subscriberName = null;

DriverDescription dd = null;
Vector driverVector = null;

ConstraintsDescription cd = null;
 public void createExecuteString()
 {

Connection conn = null;

Statement stmt = null;

ResultSet rs = null;

StringBuffer sb = null;

String subscriberName = null;

DriverDescription dd = null;
Vector driverVector public void parseImpactReport(String str)
 {

Connection conn = null;

Statement stmt = null;

Vector constraintsVector = null;
Vector driversVector = null;

ConstraintsDescription constraint = null;

int driverLoop""
"~src~"['▁6', '2', '\t', '""', 'c', 'all', '▁back', '▁private', '▁has', 'h', '▁table', '▁require', 'ment', 'des', 'ct', 'able', '▁=', '▁new', '▁has', 'h', '▁table', '(', ');', '\n\n', '▁private', '▁has', 'h', '▁table', '▁constr', 'aint', 'des', 'ct', 'able', '▁=', '▁new', '▁has', 'h', '▁table', '(', ');', '\n\n', '▁private', '▁has', 'h', '▁table', '▁performan', 'c', 'em', 'od', 'el', 't', 'able', '▁=', '▁new', '▁has', 'h', '▁table', '(', ');', '\n\n', '▁private', '▁performan', 'c', 'em', 'od', 'el', '▁performance', '▁model', '=', '▁n', 'ull', 'publ', 'ic', '▁vo', 'id', '▁par', 'ses', 'p', 'ec', 'ulate', 'in', 'form', 'ation', '(', 'str', 'ing', '▁str', ')', '\n', '▁{', '\n\n', 'sy', 'stem', '.', '▁out', '.', '▁print', 'l', 'n', '(', '""', '""', 're', 'ce', 'ived', '▁string', '▁=', '▁""', '""', '▁+', '▁str', ');', '\n\n', 'con', 'n', 'ection', '▁conn', '▁=', '▁n', 'ull', ';', '\n\n', 'state', 'ment', '▁st', 'm', 't', '▁=', '▁n', 'ull', ';', '\n\n', 'dr', 'iver', 'des', 'c', 'ription', '▁d', 'd', '▁=', '▁n', 'ull', ';', '\n\n', 'str', 'ing', '▁event', 'type', '▁=', '▁n', 'ull', ';', '▁/', '/', '▁public', '▁vo', 'id', '▁ident', 'ify', 'per', 'for', 'man', 'c', 'em', 'od', 'els', '(', ')', '\n', '▁{', '\n\n', 'con', 'n', 'ection', '▁conn', '▁=', '▁n', 'ull', ';', '\n', 'res', 'ult', 'set', '▁r', 's', '▁=', '▁n', 'ull', ';', '\n', 'state', 'ment', '▁st', 'm', 't', '▁=', '▁n', 'ull', ';', '\n\n', 'str', 'ing', '▁sub', 'sc', 'ri', 'ber', 'name', '▁=', '▁n', 'ull', ';', '\n\n', 'dr', 'iver', 'des', 'c', 'ription', '▁d', 'd', '▁=', '▁n', 'ull', ';', '\n\n', 'en', 'um', 'eration', '▁sub', 'sc', 'ri', 'bert', 'able', 'en', 'um', 'eration', '▁=', '▁n', 'u', '▁public', '▁vo', 'id', '▁pull', 'in', 'form', 'ation', 'from', 'do', 'ors', '(', ')', '\n', '▁{', '\n\n', 'str', 'ing', '▁ser', 'ver', 'ip', '▁=', '▁""', '""', '14', '0.', '19', '2.', '3', '7.', '1', '50', '""', '""', ';', '\n\n', 'str', 'ing', '[', ']', '▁att', 'rib', 'ute', '▁=', '▁{', '▁""', '""', 'value', '""', '"",', '▁""', '""', 'l', 'og', 'ic', '""', '"",', '▁""', '""', 'un', 'its', '""', '"",', '▁""', '""', 'att', 'rib', 'ute', '""', '""', '▁}', ';', '\n\n', 'str', 'ing', '▁sub', 'sc', 'ri', 'ber', 'name', '▁=', '▁n', 'ull', ';', '\n\n', 'v', 'ector', '▁constr', 'aints', '▁=', '▁n', '▁public', '▁vo', 'id', '▁ins', 'ert', 'val', 'ues', 'ind', 'at', 'ab', 'ase', '(', ')', '\n', '▁{', '\n\n', 'con', 'n', 'ection', '▁conn', '▁=', '▁n', 'ull', ';', '\n\n', 'state', 'ment', '▁st', 'm', 't', '▁=', '▁n', 'ull', ';', '\n\n', 'str', 'ing', '▁sub', 'sc', 'ri', 'ber', 'name', '▁=', '▁n', 'ull', ';', '\n\n', 'dr', 'iver', 'des', 'c', 'ription', '▁d', 'd', '▁=', '▁n', 'ull', ';', '\n', 'v', 'ector', '▁driver', 'v', 'ector', '▁=', '▁n', 'ull', ';', '\n\n', 'con', 'str', 'aints', 'des', 'c', 'ription', '▁cd', '▁=', '▁n', 'ull', ';', '\n', '▁public', '▁vo', 'id', '▁create', 'ex', 'ecut', 'est', 'ring', '(', ')', '\n', '▁{', '\n\n', 'con', 'n', 'ection', '▁conn', '▁=', '▁n', 'ull', ';', '\n\n', 'state', 'ment', '▁st', 'm', 't', '▁=', '▁n', 'ull', ';', '\n\n', 'res', 'ult', 'set', '▁r', 's', '▁=', '▁n', 'ull', ';', '\n\n', 'str', 'ing', 'b', 'uf', 'fer', '▁s', 'b', '▁=', '▁n', 'ull', ';', '\n\n', 'str', 'ing', '▁sub', 'sc', 'ri', 'ber', 'name', '▁=', '▁n', 'ull', ';', '\n\n', 'dr', 'iver', 'des', 'c', 'ription', '▁d', 'd', '▁=', '▁n', 'ull', ';', '\n', 'v', 'ector', '▁driver', 'v', 'ector', '▁public', '▁vo', 'id', '▁par', 'se', 'im', 'p', 'act', 're', 'port', '(', 'str', 'ing', '▁str', ')', '\n', '▁{', '\n\n', 'con', 'n', 'ection', '▁conn', '▁=', '▁n', 'ull', ';', '\n\n', 'state', 'ment', '▁st', 'm', 't', '▁=', '▁n', 'ull', ';', '\n\n', 'v', 'ector', '▁constr', 'aints', 'v', 'ector', '▁=', '▁n', 'ull', ';', '\n', 'v', 'ector', '▁drivers', 'v', 'ector', '▁=', '▁n', 'ull', ';', '\n\n', 'con', 'str', 'aints', 'des', 'c', 'ription', '▁constr', 'aint', '▁=', '▁n', 'ull', ';', '\n\n', 'int', '▁driver', 'lo', 'op', '""', '\n']"~"['▁62', '\t', '""', 'call', '▁back', '▁private', '▁hash', '▁table', '▁requirement', 'des', 'ct', 'able', '▁=', '▁new', '▁hash', '▁table', '();', '\n\n', '▁private', '▁hash', '▁table', '▁constr', 'aint', 'des', 'ct', 'able', '▁=', '▁new', '▁hash', '▁table', '();', '\n\n', '▁private', '▁hash', '▁table', '▁performan', 'c', 'em', 'od', 'elt', 'able', '▁=', '▁new', '▁hash', '▁table', '();', '\n\n', '▁private', '▁performan', 'c', 'em', 'od', 'el', '▁performance', '▁model', '=', '▁null', 'public', '▁void', '▁par', 'ses', 'pec', 'ulate', 'information', '(', 'string', '▁str', ')', '\n', '▁{', '\n\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 're', 'ceived', '▁string', '▁=', '▁""""', '▁+', '▁str', ');', '\n\n', 'conn', 'ection', '▁conn', '▁=', '▁null', ';', '\n\n', 'state', 'ment', '▁st', 'mt', '▁=', '▁null', ';', '\n\n', 'dr', 'iver', 'desc', 'ription', '▁dd', '▁=', '▁null', ';', '\n\n', 'string', '▁event', 'type', '▁=', '▁null', ';', '▁//', '▁public', '▁void', '▁identify', 'per', 'forman', 'c', 'em', 'od', 'els', '()', '\n', '▁{', '\n\n', 'conn', 'ection', '▁conn', '▁=', '▁null', ';', '\n', 'result', 'set', '▁rs', '▁=', '▁null', ';', '\n', 'state', 'ment', '▁st', 'mt', '▁=', '▁null', ';', '\n\n', 'string', '▁subsc', 'ri', 'ber', 'name', '▁=', '▁null', ';', '\n\n', 'dr', 'iver', 'desc', 'ription', '▁dd', '▁=', '▁null', ';', '\n\n', 'en', 'um', 'eration', '▁subsc', 'ri', 'bert', 'able', 'en', 'um', 'eration', '▁=', '▁nu', '▁public', '▁void', '▁pull', 'information', 'from', 'doors', '()', '\n', '▁{', '\n\n', 'string', '▁server', 'ip', '▁=', '▁""""', '14', '0.', '19', '2.', '3', '7.', '1', '50', '""', '"";', '\n\n', 'string', '[]', '▁attribute', '▁=', '▁{', '▁""""', 'value', '""', '"",', '▁""""', 'log', 'ic', '""', '"",', '▁""""', 'units', '""', '"",', '▁""""', 'att', 'ribute', '""', '""', '▁}', ';', '\n\n', 'string', '▁subsc', 'ri', 'ber', 'name', '▁=', '▁null', ';', '\n\n', 'v', 'ector', '▁constraints', '▁=', '▁n', '▁public', '▁void', '▁insert', 'val', 'ues', 'ind', 'at', 'abase', '()', '\n', '▁{', '\n\n', 'conn', 'ection', '▁conn', '▁=', '▁null', ';', '\n\n', 'state', 'ment', '▁st', 'mt', '▁=', '▁null', ';', '\n\n', 'string', '▁subsc', 'ri', 'ber', 'name', '▁=', '▁null', ';', '\n\n', 'dr', 'iver', 'desc', 'ription', '▁dd', '▁=', '▁null', ';', '\n', 'v', 'ector', '▁driver', 'v', 'ector', '▁=', '▁null', ';', '\n\n', 'con', 'str', 'aints', 'desc', 'ription', '▁cd', '▁=', '▁null', ';', '\n', '▁public', '▁void', '▁create', 'ex', 'ecut', 'est', 'ring', '()', '\n', '▁{', '\n\n', 'conn', 'ection', '▁conn', '▁=', '▁null', ';', '\n\n', 'state', 'ment', '▁st', 'mt', '▁=', '▁null', ';', '\n\n', 'result', 'set', '▁rs', '▁=', '▁null', ';', '\n\n', 'string', 'b', 'uffer', '▁sb', '▁=', '▁null', ';', '\n\n', 'string', '▁subsc', 'ri', 'ber', 'name', '▁=', '▁null', ';', '\n\n', 'dr', 'iver', 'desc', 'ription', '▁dd', '▁=', '▁null', ';', '\n', 'v', 'ector', '▁driver', 'v', 'ector', '▁public', '▁void', '▁par', 'se', 'imp', 'act', 're', 'port', '(', 'string', '▁str', ')', '\n', '▁{', '\n\n', 'conn', 'ection', '▁conn', '▁=', '▁null', ';', '\n\n', 'state', 'ment', '▁st', 'mt', '▁=', '▁null', ';', '\n\n', 'v', 'ector', '▁constraints', 'v', 'ector', '▁=', '▁null', ';', '\n', 'v', 'ector', '▁drivers', 'v', 'ector', '▁=', '▁null', ';', '\n\n', 'con', 'str', 'aints', 'desc', 'ription', '▁constr', 'aint', '▁=', '▁null', ';', '\n\n', 'int', '▁driver', 'lo', 'op', '""', '\n']"~"['▁62', '\t', '""', 'call', '▁back', '▁private', '▁hash', '▁table', '▁requirement', 'des', 'ct', 'able', '▁=', '▁new', '▁hash', '▁table', '();', '\n\n', '▁private', '▁hash', '▁table', '▁constraint', 'des', 'ct', 'able', '▁=', '▁new', '▁hash', '▁table', '();', '\n\n', '▁private', '▁hash', '▁table', '▁performan', 'cem', 'od', 'elt', 'able', '▁=', '▁new', '▁hash', '▁table', '();', '\n\n', '▁private', '▁performan', 'cem', 'odel', '▁performance', '▁model', '=', '▁null', 'public', '▁void', '▁par', 'ses', 'pec', 'ulate', 'information', '(', 'string', '▁str', ')', '\n', '▁{', '\n\n', 'system', '.', '▁out', '.', '▁print', 'ln', '(""', '""', 'received', '▁string', '▁=', '▁""""', '▁+', '▁str', ');', '\n\n', 'connection', '▁conn', '▁=', '▁null', ';', '\n\n', 'statement', '▁st', 'mt', '▁=', '▁null', ';', '\n\n', 'driver', 'description', '▁dd', '▁=', '▁null', ';', '\n\n', 'string', '▁event', 'type', '▁=', '▁null', ';', '▁//', '▁public', '▁void', '▁identify', 'per', 'forman', 'cem', 'odels', '()', '\n', '▁{', '\n\n', 'connection', '▁conn', '▁=', '▁null', ';', '\n', 'result', 'set', '▁rs', '▁=', '▁null', ';', '\n', 'statement', '▁st', 'mt', '▁=', '▁null', ';', '\n\n', 'string', '▁subscriber', 'name', '▁=', '▁null', ';', '\n\n', 'driver', 'description', '▁dd', '▁=', '▁null', ';', '\n\n', 'enum', 'eration', '▁subsc', 'ri', 'bert', 'able', 'enum', 'eration', '▁=', '▁nu', '▁public', '▁void', '▁pull', 'information', 'from', 'doors', '()', '\n', '▁{', '\n\n', 'string', '▁server', 'ip', '▁=', '▁""""', '14', '0.', '19', '2.3', '7.', '150', '""', '"";', '\n\n', 'string', '[]', '▁attribute', '▁=', '▁{', '▁""""', 'value', '""', '"",', '▁""""', 'logic', '""', '"",', '▁""""', 'units', '""', '"",', '▁""""', 'attribute', '""""', '▁};', '\n\n', 'string', '▁subscriber', 'name', '▁=', '▁null', ';', '\n\n', 'vector', '▁constraints', '▁=', '▁n', '▁public', '▁void', '▁insert', 'values', 'ind', 'atabase', '()', '\n', '▁{', '\n\n', 'connection', '▁conn', '▁=', '▁null', ';', '\n\n', 'statement', '▁st', 'mt', '▁=', '▁null', ';', '\n\n', 'string', '▁subscriber', 'name', '▁=', '▁null', ';', '\n\n', 'driver', 'description', '▁dd', '▁=', '▁null', ';', '\n', 'vector', '▁driver', 'vector', '▁=', '▁null', ';', '\n\n', 'con', 'str', 'aints', 'description', '▁cd', '▁=', '▁null', ';', '\n', '▁public', '▁void', '▁create', 'execut', 'estring', '()', '\n', '▁{', '\n\n', 'connection', '▁conn', '▁=', '▁null', ';', '\n\n', 'statement', '▁st', 'mt', '▁=', '▁null', ';', '\n\n', 'result', 'set', '▁rs', '▁=', '▁null', ';', '\n\n', 'string', 'buffer', '▁sb', '▁=', '▁null', ';', '\n\n', 'string', '▁subscriber', 'name', '▁=', '▁null', ';', '\n\n', 'driver', 'description', '▁dd', '▁=', '▁null', ';', '\n', 'vector', '▁driver', 'vector', '▁public', '▁void', '▁parse', 'impact', 'report', '(', 'string', '▁str', ')', '\n', '▁{', '\n\n', 'connection', '▁conn', '▁=', '▁null', ';', '\n\n', 'statement', '▁st', 'mt', '▁=', '▁null', ';', '\n\n', 'vector', '▁constraints', 'vector', '▁=', '▁null', ';', '\n', 'vector', '▁drivers', 'vector', '▁=', '▁null', ';', '\n\n', 'con', 'str', 'aints', 'description', '▁constraint', '▁=', '▁null', ';', '\n\n', 'int', '▁driver', 'loop', '""', '\n']"~call back privat hash tabl requir desc tabl new hash tabl privat hash tabl constraint desc tabl new hash tabl privat hash tabl perform model tabl new hash tabl privat perform model perform model nullpubl void pars specul inform string str system println receiv string str connect conn null statement stmt null driver descript null string event type null public void identifi perform model connect conn null result set null statement stmt null string subscrib name null driver descript null enumer subscrib tabl enumer public void pull inform door string server string attribut valu logic unit attribut string subscrib name null vector constraint public void insert valu data base connect conn null statement stmt null string subscrib name null driver descript null vector driver vector null constraint descript null public void creat execut string connect conn null statement stmt null result set null string buffer null string subscrib name null driver descript null vector driver vector public void pars impact report string str connect conn null statement stmt null vector constraint vector null vector driver vector null constraint descript constraint null int driver loop
114~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/83.java~83.java~"83	""Variable String id = """"""""; // requirement id ex WB10
 String type= """"""""; // type of requirement ex Driver or Constraints
 String name= """"""""; // requirement name which is same as variable name in graph
 double value= 0.0; // value of variable
 double speculat //General Constructor to initialize all the members
 Variable(String id, String type, String name, double value, double speculateValue, String logic, String project_ path)
 {
this. id = id;
this. type = type;
this.//Constructor to Add driver related members
 Variable(String id, String type, String name, double value, double speculateValue)
 {
this. id = id;
this. type = type;
this. name = name;
this. value = value;
this //Constructor to Add constraints related members
 Variable(String id, String type, String name, double value, String logic){
this. id = id;
this. type = type;
this. name = name;
this. value = value;
this. logicpublic String toString()
 {
String temp;
temp = """"ID = """" + id + """", Type = """" + type + """", Name = """" + name +"""", value = """" + value +
 """", SpeculateValue = """" + speculateValue + """", Logic = """" + logic + """", Project_Path = """" + project_ path /**
* Returns the id.
* @return int
*/
 public String getId()
 {
return id;
 } /**
* Returns the logic.
* @return String
*/
 public String getLogic()
 {
return logic;
 } /**
* Returns the name.
* @return String
*/
 public String getName()
 {
return name;
 } /**
* Returns the value.
* @return double
*/
 public double getValue() {
return value;
 } /**
* Sets the id.
* @param id The id to set
*/
 public void setId(String id) {
this. id = id;
 } /**
* Sets the logic.
* @param logic The logic to set
*/
 public void setLogic(String logic) {
this. logic = logic;
 } /**
* Sets the name.
* @param name The name to set
*/
 public void setName(String name) {
this. name = name;
 } /**
* Sets the value.
* @param value The value to set
*/
 public void setValue( double value) {
this. value = value;
 } /**
* Returns the speculateValue.
* @return double
*/
 public double getSpeculateValue() {
return speculateValue;
 } /**
* Sets the speculateValue.
* @param speculateValue The speculateValue to set
*/
 public void setSpeculateValue( double speculateValue) {
this. speculateValue = speculateValue;
 } /**
* Returns the type.
* @return String
*/
 public String getType() {
return type;
 } /**
* Sets the type.
* @param type The type to set
*/
 public void setType(String type) {
this. type = type;
 } /**
* Returns the project_ path.
* @return String
*/
 public String getProject_ path() {
return project_ path;
 } /**
* Sets the project_ path.
* @param project_ path The project_ path to set
*/
 public void setProject_ path(String project_ path) {
this. project_ path = project_ path;
 }""
"~src~"['▁8', '3', '\t', '""', 'v', 'ari', 'able', '▁string', '▁id', '▁=', '▁""', '""', '""', '""', ';', '▁/', '/', '▁require', 'ment', '▁id', '▁ex', '▁w', 'b', '10', '\n', '▁string', '▁type', '=', '▁""', '""', '""', '""', ';', '▁/', '/', '▁type', '▁of', '▁require', 'ment', '▁ex', '▁driver', '▁or', '▁constr', 'aints', '\n', '▁string', '▁name', '=', '▁""', '""', '""', '""', ';', '▁/', '/', '▁require', 'ment', '▁name', '▁which', '▁is', '▁same', '▁as', '▁vari', 'able', '▁name', '▁in', '▁graph', '\n', '▁double', '▁value', '=', '▁0.', '0', ';', '▁/', '/', '▁value', '▁of', '▁vari', 'able', '\n', '▁double', '▁spec', 'ul', 'at', '▁/', '/', 'general', '▁construct', 'or', '▁to', '▁initial', 'ize', '▁all', '▁the', '▁members', '\n', '▁vari', 'able', '(', 'str', 'ing', '▁id', ',', '▁string', '▁type', ',', '▁string', '▁name', ',', '▁double', '▁value', ',', '▁double', '▁spec', 'ulate', 'value', ',', '▁string', '▁log', 'ic', ',', '▁string', '▁project', '_', '▁path', ')', '\n', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', 'this', '.', '▁type', '▁=', '▁type', ';', '\n', 'this', '.', '//', 'con', 'str', 'uct', 'or', '▁to', '▁add', '▁driver', '▁related', '▁members', '\n', '▁vari', 'able', '(', 'str', 'ing', '▁id', ',', '▁string', '▁type', ',', '▁string', '▁name', ',', '▁double', '▁value', ',', '▁double', '▁spec', 'ulate', 'value', ')', '\n', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', 'this', '.', '▁type', '▁=', '▁type', ';', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', 'this', '.', '▁value', '▁=', '▁value', ';', '\n', 'this', '▁/', '/', 'con', 'str', 'uct', 'or', '▁to', '▁add', '▁constr', 'aints', '▁related', '▁members', '\n', '▁vari', 'able', '(', 'str', 'ing', '▁id', ',', '▁string', '▁type', ',', '▁string', '▁name', ',', '▁double', '▁value', ',', '▁string', '▁log', 'ic', ')', '{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', 'this', '.', '▁type', '▁=', '▁type', ';', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', 'this', '.', '▁value', '▁=', '▁value', ';', '\n', 'this', '.', '▁log', 'ic', 'publ', 'ic', '▁string', '▁to', 'str', 'ing', '(', ')', '\n', '▁{', '\n', 'str', 'ing', '▁tem', 'p', ';', '\n', 't', 'em', 'p', '▁=', '▁""', '""', 'id', '▁=', '▁""', '""', '▁+', '▁id', '▁+', '▁""', '"",', '▁type', '▁=', '▁""', '""', '▁+', '▁type', '▁+', '▁""', '"",', '▁name', '▁=', '▁""', '""', '▁+', '▁name', '▁+', '""', '"",', '▁value', '▁=', '▁""', '""', '▁+', '▁value', '▁+', '\n', '▁""', '"",', '▁spec', 'ulate', 'value', '▁=', '▁""', '""', '▁+', '▁spec', 'ulate', 'value', '▁+', '▁""', '"",', '▁log', 'ic', '▁=', '▁""', '""', '▁+', '▁log', 'ic', '▁+', '▁""', '"",', '▁project', '_', 'p', 'ath', '▁=', '▁""', '""', '▁+', '▁project', '_', '▁path', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'ret', 'urn', '▁int', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'id', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁id', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁log', 'ic', '.', '\n', '*', '▁', '@', 'ret', 'urn', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'l', 'og', 'ic', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁log', 'ic', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'ret', 'urn', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'name', '(', ')', '\n', '▁{', '\n', 'ret', 'urn', '▁name', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'ret', 'urn', '▁double', '\n', '*', '/', '\n', '▁public', '▁double', '▁get', 'value', '(', ')', '▁{', '\n', 'ret', 'urn', '▁value', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'par', 'am', '▁id', '▁the', '▁id', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁set', 'id', '(', 'str', 'ing', '▁id', ')', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁log', 'ic', '.', '\n', '*', '▁', '@', 'par', 'am', '▁log', 'ic', '▁the', '▁log', 'ic', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁set', 'l', 'og', 'ic', '(', 'str', 'ing', '▁log', 'ic', ')', '▁{', '\n', 'this', '.', '▁log', 'ic', '▁=', '▁log', 'ic', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'par', 'am', '▁name', '▁the', '▁name', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁set', 'name', '(', 'str', 'ing', '▁name', ')', '▁{', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'par', 'am', '▁value', '▁the', '▁value', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁set', 'value', '(', '▁double', '▁value', ')', '▁{', '\n', 'this', '.', '▁value', '▁=', '▁value', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁spec', 'ulate', 'value', '.', '\n', '*', '▁', '@', 'ret', 'urn', '▁double', '\n', '*', '/', '\n', '▁public', '▁double', '▁get', 'spec', 'ulate', 'value', '(', ')', '▁{', '\n', 'ret', 'urn', '▁spec', 'ulate', 'value', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁spec', 'ulate', 'value', '.', '\n', '*', '▁', '@', 'par', 'am', '▁spec', 'ulate', 'value', '▁the', '▁spec', 'ulate', 'value', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁set', 'spec', 'ulate', 'value', '(', '▁double', '▁spec', 'ulate', 'value', ')', '▁{', '\n', 'this', '.', '▁spec', 'ulate', 'value', '▁=', '▁spec', 'ulate', 'value', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁type', '.', '\n', '*', '▁', '@', 'ret', 'urn', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'type', '(', ')', '▁{', '\n', 'ret', 'urn', '▁type', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁type', '.', '\n', '*', '▁', '@', 'par', 'am', '▁type', '▁the', '▁type', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁set', 'type', '(', 'str', 'ing', '▁type', ')', '▁{', '\n', 'this', '.', '▁type', '▁=', '▁type', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁project', '_', '▁path', '.', '\n', '*', '▁', '@', 'ret', 'urn', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'pro', 'ject', '_', '▁path', '(', ')', '▁{', '\n', 'ret', 'urn', '▁project', '_', '▁path', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁project', '_', '▁path', '.', '\n', '*', '▁', '@', 'par', 'am', '▁project', '_', '▁path', '▁the', '▁project', '_', '▁path', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁vo', 'id', '▁set', 'pro', 'ject', '_', '▁path', '(', 'str', 'ing', '▁project', '_', '▁path', ')', '▁{', '\n', 'this', '.', '▁project', '_', '▁path', '▁=', '▁project', '_', '▁path', ';', '\n', '▁}', '""', '\n']"~"['▁83', '\t', '""', 'vari', 'able', '▁string', '▁id', '▁=', '▁""""""', '"";', '▁//', '▁requirement', '▁id', '▁ex', '▁wb', '10', '\n', '▁string', '▁type', '=', '▁""""""', '"";', '▁//', '▁type', '▁of', '▁requirement', '▁ex', '▁driver', '▁or', '▁constraints', '\n', '▁string', '▁name', '=', '▁""""""', '"";', '▁//', '▁requirement', '▁name', '▁which', '▁is', '▁same', '▁as', '▁variable', '▁name', '▁in', '▁graph', '\n', '▁double', '▁value', '=', '▁0.0', ';', '▁//', '▁value', '▁of', '▁variable', '\n', '▁double', '▁spec', 'ul', 'at', '▁//', 'general', '▁construct', 'or', '▁to', '▁initial', 'ize', '▁all', '▁the', '▁members', '\n', '▁variable', '(', 'string', '▁id', ',', '▁string', '▁type', ',', '▁string', '▁name', ',', '▁double', '▁value', ',', '▁double', '▁spec', 'ulate', 'value', ',', '▁string', '▁logic', ',', '▁string', '▁project', '_', '▁path', ')', '\n', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', 'this', '.', '▁type', '▁=', '▁type', ';', '\n', 'this', '.', '//', 'con', 'struct', 'or', '▁to', '▁add', '▁driver', '▁related', '▁members', '\n', '▁variable', '(', 'string', '▁id', ',', '▁string', '▁type', ',', '▁string', '▁name', ',', '▁double', '▁value', ',', '▁double', '▁spec', 'ulate', 'value', ')', '\n', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', 'this', '.', '▁type', '▁=', '▁type', ';', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', 'this', '.', '▁value', '▁=', '▁value', ';', '\n', 'this', '▁//', 'con', 'struct', 'or', '▁to', '▁add', '▁constraints', '▁related', '▁members', '\n', '▁variable', '(', 'string', '▁id', ',', '▁string', '▁type', ',', '▁string', '▁name', ',', '▁double', '▁value', ',', '▁string', '▁logic', ')', '{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', 'this', '.', '▁type', '▁=', '▁type', ';', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', 'this', '.', '▁value', '▁=', '▁value', ';', '\n', 'this', '.', '▁logic', 'public', '▁string', '▁to', 'string', '()', '\n', '▁{', '\n', 'string', '▁temp', ';', '\n', 'tem', 'p', '▁=', '▁""""', 'id', '▁=', '▁""""', '▁+', '▁id', '▁+', '▁""', '"",', '▁type', '▁=', '▁""""', '▁+', '▁type', '▁+', '▁""', '"",', '▁name', '▁=', '▁""""', '▁+', '▁name', '▁+', '""', '"",', '▁value', '▁=', '▁""""', '▁+', '▁value', '▁+', '\n', '▁""', '"",', '▁spec', 'ulate', 'value', '▁=', '▁""""', '▁+', '▁spec', 'ulate', 'value', '▁+', '▁""', '"",', '▁logic', '▁=', '▁""""', '▁+', '▁logic', '▁+', '▁""', '"",', '▁project', '_', 'path', '▁=', '▁""""', '▁+', '▁project', '_', '▁path', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'return', '▁int', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'id', '()', '\n', '▁{', '\n', 'return', '▁id', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁logic', '.', '\n', '*', '▁', '@', 'return', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'log', 'ic', '()', '\n', '▁{', '\n', 'return', '▁logic', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'return', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'name', '()', '\n', '▁{', '\n', 'return', '▁name', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'return', '▁double', '\n', '*', '/', '\n', '▁public', '▁double', '▁get', 'value', '()', '▁{', '\n', 'return', '▁value', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'param', '▁id', '▁the', '▁id', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'id', '(', 'string', '▁id', ')', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁logic', '.', '\n', '*', '▁', '@', 'param', '▁logic', '▁the', '▁logic', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'log', 'ic', '(', 'string', '▁logic', ')', '▁{', '\n', 'this', '.', '▁logic', '▁=', '▁logic', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'param', '▁name', '▁the', '▁name', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'name', '(', 'string', '▁name', ')', '▁{', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'param', '▁value', '▁the', '▁value', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'value', '(', '▁double', '▁value', ')', '▁{', '\n', 'this', '.', '▁value', '▁=', '▁value', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁spec', 'ulate', 'value', '.', '\n', '*', '▁', '@', 'return', '▁double', '\n', '*', '/', '\n', '▁public', '▁double', '▁get', 'spec', 'ulate', 'value', '()', '▁{', '\n', 'return', '▁spec', 'ulate', 'value', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁spec', 'ulate', 'value', '.', '\n', '*', '▁', '@', 'param', '▁spec', 'ulate', 'value', '▁the', '▁spec', 'ulate', 'value', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'spec', 'ulate', 'value', '(', '▁double', '▁spec', 'ulate', 'value', ')', '▁{', '\n', 'this', '.', '▁spec', 'ulate', 'value', '▁=', '▁spec', 'ulate', 'value', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁type', '.', '\n', '*', '▁', '@', 'return', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'type', '()', '▁{', '\n', 'return', '▁type', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁type', '.', '\n', '*', '▁', '@', 'param', '▁type', '▁the', '▁type', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'type', '(', 'string', '▁type', ')', '▁{', '\n', 'this', '.', '▁type', '▁=', '▁type', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁returns', '▁the', '▁project', '_', '▁path', '.', '\n', '*', '▁', '@', 'return', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'project', '_', '▁path', '()', '▁{', '\n', 'return', '▁project', '_', '▁path', ';', '\n', '▁}', '▁/', '*', '*', '\n', '*', '▁sets', '▁the', '▁project', '_', '▁path', '.', '\n', '*', '▁', '@', 'param', '▁project', '_', '▁path', '▁the', '▁project', '_', '▁path', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'project', '_', '▁path', '(', 'string', '▁project', '_', '▁path', ')', '▁{', '\n', 'this', '.', '▁project', '_', '▁path', '▁=', '▁project', '_', '▁path', ';', '\n', '▁}', '""', '\n']"~"['▁83', '\t', '""', 'variable', '▁string', '▁id', '▁=', '▁""""""', '"";', '▁//', '▁requirement', '▁id', '▁ex', '▁wb', '10', '\n', '▁string', '▁type', '=', '▁""""""', '"";', '▁//', '▁type', '▁of', '▁requirement', '▁ex', '▁driver', '▁or', '▁constraints', '\n', '▁string', '▁name', '=', '▁""""""', '"";', '▁//', '▁requirement', '▁name', '▁which', '▁is', '▁same', '▁as', '▁variable', '▁name', '▁in', '▁graph', '\n', '▁double', '▁value', '=', '▁0.0', ';', '▁//', '▁value', '▁of', '▁variable', '\n', '▁double', '▁spec', 'ulat', '▁//', 'general', '▁constructor', '▁to', '▁initialize', '▁all', '▁the', '▁members', '\n', '▁variable', '(', 'string', '▁id', ',', '▁string', '▁type', ',', '▁string', '▁name', ',', '▁double', '▁value', ',', '▁double', '▁speculate', 'value', ',', '▁string', '▁logic', ',', '▁string', '▁project', '_', '▁path', ')', '\n', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', 'this', '.', '▁type', '▁=', '▁type', ';', '\n', 'this', '.', '//', 'construct', 'or', '▁to', '▁add', '▁driver', '▁related', '▁members', '\n', '▁variable', '(', 'string', '▁id', ',', '▁string', '▁type', ',', '▁string', '▁name', ',', '▁double', '▁value', ',', '▁double', '▁speculate', 'value', ')', '\n', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', 'this', '.', '▁type', '▁=', '▁type', ';', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', 'this', '.', '▁value', '▁=', '▁value', ';', '\n', 'this', '▁//', 'construct', 'or', '▁to', '▁add', '▁constraints', '▁related', '▁members', '\n', '▁variable', '(', 'string', '▁id', ',', '▁string', '▁type', ',', '▁string', '▁name', ',', '▁double', '▁value', ',', '▁string', '▁logic', ')', '{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', 'this', '.', '▁type', '▁=', '▁type', ';', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', 'this', '.', '▁value', '▁=', '▁value', ';', '\n', 'this', '.', '▁logic', 'public', '▁string', '▁to', 'string', '()', '\n', '▁{', '\n', 'string', '▁temp', ';', '\n', 'tem', 'p', '▁=', '▁""""', 'id', '▁=', '▁""""', '▁+', '▁id', '▁+', '▁"""",', '▁type', '▁=', '▁""""', '▁+', '▁type', '▁+', '▁"""",', '▁name', '▁=', '▁""""', '▁+', '▁name', '▁+', '""', '"",', '▁value', '▁=', '▁""""', '▁+', '▁value', '▁+', '\n', '▁"""",', '▁speculate', 'value', '▁=', '▁""""', '▁+', '▁speculate', 'value', '▁+', '▁"""",', '▁logic', '▁=', '▁""""', '▁+', '▁logic', '▁+', '▁"""",', '▁project', '_', 'path', '▁=', '▁""""', '▁+', '▁project', '_', '▁path', '▁/', '**', '\n', '*', '▁returns', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'return', '▁int', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'id', '()', '\n', '▁{', '\n', 'return', '▁id', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁returns', '▁the', '▁logic', '.', '\n', '*', '▁', '@', 'return', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'logic', '()', '\n', '▁{', '\n', 'return', '▁logic', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁returns', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'return', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'name', '()', '\n', '▁{', '\n', 'return', '▁name', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁returns', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'return', '▁double', '\n', '*', '/', '\n', '▁public', '▁double', '▁get', 'value', '()', '▁{', '\n', 'return', '▁value', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁sets', '▁the', '▁id', '.', '\n', '*', '▁', '@', 'param', '▁id', '▁the', '▁id', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'id', '(', 'string', '▁id', ')', '▁{', '\n', 'this', '.', '▁id', '▁=', '▁id', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁sets', '▁the', '▁logic', '.', '\n', '*', '▁', '@', 'param', '▁logic', '▁the', '▁logic', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'logic', '(', 'string', '▁logic', ')', '▁{', '\n', 'this', '.', '▁logic', '▁=', '▁logic', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁sets', '▁the', '▁name', '.', '\n', '*', '▁', '@', 'param', '▁name', '▁the', '▁name', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'name', '(', 'string', '▁name', ')', '▁{', '\n', 'this', '.', '▁name', '▁=', '▁name', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁sets', '▁the', '▁value', '.', '\n', '*', '▁', '@', 'param', '▁value', '▁the', '▁value', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'value', '(', '▁double', '▁value', ')', '▁{', '\n', 'this', '.', '▁value', '▁=', '▁value', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁returns', '▁the', '▁speculate', 'value', '.', '\n', '*', '▁', '@', 'return', '▁double', '\n', '*', '/', '\n', '▁public', '▁double', '▁get', 'spec', 'ulate', 'value', '()', '▁{', '\n', 'return', '▁speculate', 'value', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁sets', '▁the', '▁speculate', 'value', '.', '\n', '*', '▁', '@', 'param', '▁speculate', 'value', '▁the', '▁speculate', 'value', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'spec', 'ulate', 'value', '(', '▁double', '▁speculate', 'value', ')', '▁{', '\n', 'this', '.', '▁speculate', 'value', '▁=', '▁speculate', 'value', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁returns', '▁the', '▁type', '.', '\n', '*', '▁', '@', 'return', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'type', '()', '▁{', '\n', 'return', '▁type', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁sets', '▁the', '▁type', '.', '\n', '*', '▁', '@', 'param', '▁type', '▁the', '▁type', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'type', '(', 'string', '▁type', ')', '▁{', '\n', 'this', '.', '▁type', '▁=', '▁type', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁returns', '▁the', '▁project', '_', '▁path', '.', '\n', '*', '▁', '@', 'return', '▁string', '\n', '*', '/', '\n', '▁public', '▁string', '▁get', 'project', '_', '▁path', '()', '▁{', '\n', 'return', '▁project', '_', '▁path', ';', '\n', '▁}', '▁/', '**', '\n', '*', '▁sets', '▁the', '▁project', '_', '▁path', '.', '\n', '*', '▁', '@', 'param', '▁project', '_', '▁path', '▁the', '▁project', '_', '▁path', '▁to', '▁set', '\n', '*', '/', '\n', '▁public', '▁void', '▁set', 'project', '_', '▁path', '(', 'string', '▁project', '_', '▁path', ')', '▁{', '\n', 'this', '.', '▁project', '_', '▁path', '▁=', '▁project', '_', '▁path', ';', '\n', '▁}', '""', '\n']"~variabl string requir string type type requir driver constraint string name requir name variabl name graph doubl valu valu variabl doubl speculat general constructor initi member variabl string string type string name doubl valu doubl specul valu string logic string project path type type constructor add driver relat member variabl string string type string name doubl valu doubl specul valu type type name name valu valu constructor add constraint relat member variabl string string type string name doubl valu string logic type type name name valu valu logicpubl string string string temp temp type type name name valu valu specul valu specul valu logic logic project path project path return return int public string get return return logic return string public string get logic return logic return name return string public string get name return name return valu return doubl public doubl get valu return valu set param set public void set string set logic param logic logic set public void set logic string logic logic logic set name param name name set public void set name string name name name /** set valu param valu valu set public void set valu doubl valu valu valu /** return specul valu return doubl public doubl get specul valu return specul valu /** set specul valu param specul valu specul valu set public void set specul valu doubl specul valu specul valu specul valu /** return type return string public string get type return type /** set type param type type set public void set type string type type type /** return project_ path return string public string get project_ path return project_ path /** set project_ path param project_ path project_ path set public void set project_ path string project_ path project_ path project_ path
115~../dvc-ds4se/se-benchmarking/traceability/datasets/formatted/semeru_format/EBT_semeru_format/source_code/80.java~80.java~"80	""Requirement public String m_RequirementID ="""""""";
public String m_Project ="""""""";
public String m_ModulePath="""""""";
public String m_Content = """""""";
public String m_RegFlag = """"N"""";public Requirement() {// empty constructor

} public Object clone() throws CloneNotSupportedException {

Requirement requirement= (Requirement) super. clone();

return requirement ; 
 } public void ReadValues(String RequirementID, String Project, String ModulePath, String Content, String RegFlag) {
this. m_RequirementID = RequirementID;
this. m_Project = Project;
this. m_ModulePathpublic void ParseRequirement(String TextLine) {

 StringTokenizer LineSt;
LineSt = new StringTokenizer(TextLine, """","""");

m_RequirementID=LineSt. nextToken();
m_Project=Line""
"~src~"['▁80', '\t', '""', 're', 'qu', 'ire', 'ment', '▁public', '▁string', '▁m', '_', 're', 'qu', 'ire', 'ment', 'id', '▁', '=""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'pro', 'ject', '▁', '=""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'mod', 'ule', 'p', 'ath', '=""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'cont', 'ent', '▁=', '▁""', '""', '""', '""', ';', '\n', 'publ', 'ic', '▁string', '▁m', '_', 'reg', 'fl', 'ag', '▁=', '▁""', '""', 'n', '""', '""', ';', 'publ', 'ic', '▁require', 'ment', '(', ')', '▁{', '//', '▁em', 'pt', 'y', '▁construct', 'or', '\n\n', '}', '▁public', '▁object', '▁cl', 'one', '(', ')', '▁thro', 'ws', '▁cl', 'on', 'en', 'ots', 'up', 'port', 'ed', 'ex', 'ception', '▁{', '\n\n', 're', 'qu', 'ire', 'ment', '▁require', 'ment', '=', '▁(', 're', 'qu', 'ire', 'ment', ')', '▁super', '.', '▁cl', 'one', '(', ');', '\n\n', 'ret', 'urn', '▁require', 'ment', '▁;', '▁', '\n', '▁}', '▁public', '▁vo', 'id', '▁read', 'val', 'ues', '(', 'str', 'ing', '▁require', 'ment', 'id', ',', '▁string', '▁project', ',', '▁string', '▁mod', 'ule', 'p', 'ath', ',', '▁string', '▁content', ',', '▁string', '▁reg', 'fl', 'ag', ')', '▁{', '\n', 'this', '.', '▁m', '_', 're', 'qu', 'ire', 'ment', 'id', '▁=', '▁require', 'ment', 'id', ';', '\n', 'this', '.', '▁m', '_', 'pro', 'ject', '▁=', '▁project', ';', '\n', 'this', '.', '▁m', '_', 'mod', 'ule', 'p', 'ath', 'publ', 'ic', '▁vo', 'id', '▁par', 's', 'ere', 'qu', 'ire', 'ment', '(', 'str', 'ing', '▁text', 'line', ')', '▁{', '\n\n', '▁string', 't', 'ok', 'en', 'iz', 'er', '▁lin', 'est', ';', '\n', 'lin', 'est', '▁=', '▁new', '▁string', 't', 'ok', 'en', 'iz', 'er', '(', 'text', 'line', ',', '▁""', '"",', '""', '"")', ';', '\n\n', 'm', '_', 're', 'qu', 'ire', 'ment', 'id', '=', 'lin', 'est', '.', '▁next', 't', 'ok', 'en', '(', ');', '\n', 'm', '_', 'pro', 'ject', '=', 'line', '""', '\n']"~"['▁80', '\t', '""', 'requ', 'ire', 'ment', '▁public', '▁string', '▁m', '_', 'requ', 'ire', 'ment', 'id', '▁', '=""', '""', '""', '"";', '\n', 'public', '▁string', '▁m', '_', 'project', '▁', '=""', '""', '""', '"";', '\n', 'public', '▁string', '▁m', '_', 'mod', 'ule', 'path', '=""', '""', '""', '"";', '\n', 'public', '▁string', '▁m', '_', 'content', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'reg', 'flag', '▁=', '▁""""', 'n', '""', '"";', 'public', '▁requirement', '()', '▁{', '//', '▁empty', '▁construct', 'or', '\n\n', '}', '▁public', '▁object', '▁clone', '()', '▁throws', '▁clon', 'en', 'ots', 'up', 'ported', 'exception', '▁{', '\n\n', 'requ', 'ire', 'ment', '▁requirement', '=', '▁(', 'requ', 'ire', 'ment', ')', '▁super', '.', '▁clone', '();', '\n\n', 'return', '▁requirement', '▁;', '▁', '\n', '▁}', '▁public', '▁void', '▁read', 'val', 'ues', '(', 'string', '▁requirement', 'id', ',', '▁string', '▁project', ',', '▁string', '▁module', 'path', ',', '▁string', '▁content', ',', '▁string', '▁reg', 'flag', ')', '▁{', '\n', 'this', '.', '▁m', '_', 'requ', 'ire', 'ment', 'id', '▁=', '▁requirement', 'id', ';', '\n', 'this', '.', '▁m', '_', 'project', '▁=', '▁project', ';', '\n', 'this', '.', '▁m', '_', 'mod', 'ule', 'path', 'public', '▁void', '▁par', 's', 'ere', 'qu', 'ire', 'ment', '(', 'string', '▁text', 'line', ')', '▁{', '\n\n', '▁string', 'tok', 'en', 'izer', '▁lin', 'est', ';', '\n', 'lin', 'est', '▁=', '▁new', '▁string', 'tok', 'en', 'izer', '(', 'text', 'line', ',', '▁""', '"",', '""', '"");', '\n\n', 'm', '_', 'requ', 'ire', 'ment', 'id', '=', 'lin', 'est', '.', '▁next', 'tok', 'en', '();', '\n', 'm', '_', 'project', '=', 'line', '""', '\n']"~"['▁80', '\t', '""', 'require', 'ment', '▁public', '▁string', '▁m', '_', 'require', 'ment', 'id', '▁', '=""', '""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'project', '▁', '=""', '""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'module', 'path', '=""', '""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'content', '▁=', '▁""""""', '"";', '\n', 'public', '▁string', '▁m', '_', 'reg', 'flag', '▁=', '▁""""', 'n', '""', '"";', 'public', '▁requirement', '()', '▁{', '//', '▁empty', '▁constructor', '\n\n', '}', '▁public', '▁object', '▁clone', '()', '▁throws', '▁clon', 'en', 'ots', 'up', 'ported', 'exception', '▁{', '\n\n', 'require', 'ment', '▁requirement', '=', '▁(', 'require', 'ment', ')', '▁super', '.', '▁clone', '();', '\n\n', 'return', '▁requirement', '▁;', '▁', '\n', '▁}', '▁public', '▁void', '▁read', 'values', '(', 'string', '▁requirement', 'id', ',', '▁string', '▁project', ',', '▁string', '▁module', 'path', ',', '▁string', '▁content', ',', '▁string', '▁reg', 'flag', ')', '▁{', '\n', 'this', '.', '▁m', '_', 'require', 'ment', 'id', '▁=', '▁requirement', 'id', ';', '\n', 'this', '.', '▁m', '_', 'project', '▁=', '▁project', ';', '\n', 'this', '.', '▁m', '_', 'module', 'path', 'public', '▁void', '▁pars', 'ere', 'quire', 'ment', '(', 'string', '▁text', 'line', ')', '▁{', '\n\n', '▁string', 'token', 'izer', '▁lin', 'est', ';', '\n', 'lin', 'est', '▁=', '▁new', '▁string', 'token', 'izer', '(', 'text', 'line', ',', '▁"""",', '"""");', '\n\n', 'm', '_', 'require', 'ment', 'id', '=', 'lin', 'est', '.', '▁next', 'token', '();', '\n', 'm', '_', 'project', '=', 'line', '""', '\n']"~requir public string requir public string project public string modul path public string content public string reg flag public requir empti constructor public object clone throw clone support except requir requir requir super clone return requir public void read valu string requir string project string modul path string content string reg flag requir requir project project modul pathpubl void pars requir string text line string token line line new string token text line requir line next token project line
