Electronic sessions must terminate after a pre-determined period of inactivity. Allow the administrator to set the length of this period of time and ensure that all authorization is disabled after a period of inactivity that exceeds this length.

An HCP can remove a previously created lab procedure for a given office visit. The HCP chooses to remove the lab procedure as long as the status is either in transit or received. The HCP is prompted to confirm that he/she wishes to remove the lab procedure.

The patient chosen is not the desired patient. The health care personnel does not confirm the selection and is prompted to try again.

The HCP enters a patient as a new user of iTrust Medical Records system. Only the name and email are is provided. The patient's assigned MID and a secret key (the initial password) is personally provided to the user, with which the user can reset his/her password. The HCP can edit the patient according to data format 6.4 [E1] with all initial values (except patient MID) defaulting to null and/or 0 as appropriate. Patient MID should be the number assigned when the patient is added to the system and cannot be edited. The HCP does not have the ability to enter/edit/view the patient's security question/password.

The system shall enable the administrator to (1) add a new entry for an appointment type, including its type name with up to 30 alpha characters and duration in the unit of minutes [E1], and (2) modify the duration in an existing entry [E1]. A new entry shall not have the same type name as that of any existing entry [E1]. Note that the administrator is not allowed through the system interface to delete an existing entry or modify the appointment type name in an existing entry.

If answer to security question is correct, allow user to change their password. An email notification is sent.

The health care personnel types an invalid medical identification number and is prompted to try again.

The HCP provides a deceased date (data format 6.4). An optional diagnosis code is entered as the cause of death.

The HCP types an invalid medical identification number and is prompted to try again.

A user (an LHCP or patient) wishes to view a list of his or her upcoming appointments (i.e., a list including appointments whose appointment date and start time is equal or later than the current date/time). The user chooses to open his or her upcoming appointment list. Each row in the list includes the appointment type, appointment date and start time, duration, and the name of either the patient (only for the user being an LHCP) or the LHCP (only for the user being a patient). The appointments in the list shall be ordered by appointment date and start time, the soonest upcoming first. The row for each conflicting appointment is highlighted in bold (a conflicting appointment is one that has overlap in its appointment duration period with that of at least another appointment of the same user). When viewing the calendar, the user selects an appointment from the list to read comment by clicking the Read Comment link beside the row for the appointment, and then the comment for the appointment shall be displayed in a new page [E2].

The LHCP chooses to schedule an appointment with a patient (it is assumed that the LHCP and patient have already worked out the details of the appointment in person or via telephone outside of the system). The LHCP enters the patient MID, selects the type of appointment from a pull-down menu of the existing appointment types, enter the appointment date and start time (only a date/time equal or after the current date/time is allowed) (the user interface shall provide both the option of typing in a specific date in the date format and the option of selecting a date from a calendar for the current month), enter comment (optional) up to 1000 characters such as reason for the appointment [E1].

If the security question/answer has been set (it is not null) [E2], present security question and obtain answer.

"A patient is presented with a screen of links to the following:

Any upcoming appointments"

An HCP can view a previously created lab procedure for a given office visit. The HCP can view patient name, lab procedure code, current lab procedure status, timestamp, and Lab Technician name.

The patient, receiving HCP, referral notes, and/or referral priority are invalid, and the HCP is prompted to enter this information again.

For creating, viewing, modifying, or deleting information, the following information is recorded: the MID of the logged in user, any appropriate secondary MID of the user whose information is being accessed, a transaction type corresponding to the given action, and the current timestamp.

The administrator types an invalid code information and is prompted to try again.

The user (patient or personal health representative) can choose to view a list of (1) their own prescriptions or (2) the prescriptions for whom the user is a person health representative by choosing one patient from a a list of these patients. A prescription list is then displayed [S3], sorted by start date (the later date is ranked earlier).

An HCP can reassign a previously created lab procedure to a different Lab Technician if the lab procedure is not yet in the testing state. The HCP selects a different Lab Technician from the list of available Lab Technicians (displayed with Lab Technician specialty and the number of pending lab procedures in his/her priority queue, grouped by priority). The HCP confirms the reassignment, or cancels the reassignment [E2].

"A LHCP is presented with a screen of links to the following:

Recent Laboratory Results: recent (within the last month) laboratory results (UC26) for laboratory procedures he/she ordered in office visits.

Any upcoming appointments for the day. (In the notification center)

Rejection/Acceptance of comprehensive report."

An HCP can create a lab procedure for a given office visit. The HCP selects a procedure code, a priority from 1 to 3 (1=most important, 3=not as important), and Lab Technician (listed with his/her specialty and the number of pending lab procedures in his/her priority queue, grouped by priority). The HCP saves the new lab procedure, or cancels the lab procedure creation [E1], [E2]. The status of the lab procedure is marked as in transit.

The prescription report is titled with the patient name. The prescription list includes medication, date prescribed, start date, end date for each prescription, and the name of the doctor who prescribed the medication.

The receiving HCP chosen is not the desired HCP. The sending HCP does not confirm the selection and is prompted to try again.

For Login Failures, the IP Address of the machine, transaction type = 1, and timestamp are recorded.

The user (LHCP) selects a patient from the list of requested reports. At this point, the LHCP can view a prescription list for that patient [S3], sorted by start date (the later date is ranked earlier).

" The LHCP can view of the comprehensive patient report for the specified patient, including the information below.

All patient demographic information (address, phone, etc.), see (UC4) and Data Format 6.1

The entire history of personal health records, see (UC10) and Data Format 6.4

All diagnoses, including those not normally viewable by the requesting LHCP, see (UC11) and Data Format 6.5

All designated HCPs (MIDs and Names), see (UC6)

All allergies, procedures, medications, office visits, and known relatives, see (UC11) and Data Format 6.5, 6.6

All MIDs and names of people that this person is representing, see (UC13) 

All MIDs and names of people that this person is represented by, see (UC13)"

The LHCP or ER enters a MID [E1] and confirms the input [E2].

A patient's DLHCP chooses to add or delete a patient's [E1, E2] personal representative by typing that person's MID [E1, E2].

The health care professional types an invalid medical identification number and is prompted to try again.

The administer is presented with two lists of NDC codes/names. The administrator chooses a drug from each list to record an interaction between the two drugs [E1] The two drugs and a textual description of the possible effects of the interaction are stored.

The patient chosen is not the desired patient. The HCP does not confirm the selection and is prompted to try again.

An administrator enters a LHCP, ER, or public health agent as a user of iTrust Medical Records system, initially only the name and email are provided. A secret key is personally provided to the user, with which the user can reset his/her password. The admin must specify a specialty for a new LHCP (one of: General Physician, Heart Surgeon, OB/GYN, Pediatrician, Surgeon) and for a new LT (one of blood, tissue, or general). The data for personnel can be edited according to Data Format 6.2 (all fields mandatory except for associated MID and Street Address 2) [S6, E1]. The administrator shall be allowed to assign a LHCP to multiple hospitals, and the administrator can choose among only the hospitals provided in the hospital list pull down menu. The hospital ID numbers for a LHCP are stored in the Medical Care Personnel Affiliation database (data format 6.8). The administrator shall be allowed to assign a LT to a single hospital, and the administrator can choose among only the hospitals provided in the hospital list pull down menu. The hospital ID numbers for a LT are stored in the Medical Care Personnel Affiliation database (data format 6.11).

The software tester authenticates himself or herself in the iTrust Medical Records system (UC2). He or she is then presented with the actual operational profile of the operations of the iTrust Medical Records where the use percentage is the % of total transactions for each particular transaction logging type, broken-down by each of the user types [patient, LHCP, UHCP, admin, tester]

A user (an LHCP or patient) chooses to display his/her appointments in the current month on a calendar for the current month. His/her appointments in the current month shall be displayed on the calendar [S3]. The user can select an appointment from the calendar to read the appointment's details [S4].

In the calendar, the date entry with an appointment shall display a label as the appointment type name for the appointment. The date entry including conflicting appointments is highlighted in bold (a conflicting appointment is one that has overlap in its appointment duration period with that of at least another appointment of the same user).

The patient chosen is not the desired patient. The health care professional does not confirm the selection and is prompted to try again.

The patient, UAP, or personal representative enters a glucose level outside the range 0-250. He/she is notified of an error and is prompted to try again.

The administrator selects one drug and is presented with a listing of all drug interactions with that drug. The administrator can select a particular pair of drugs and delete the interaction between the two drugs.

 The patient, UAP, or personal representative enters a systolic blood pressure outside the range 40-240 or a diastolic blood pressure outside the range 40-150. He/she is notified of an error and is prompted to try again.

A LHCP enters an UAP as a user of iTrust Medical Records system according to data format 6.2 (all fields mandatory)

An HCP may upload a photo of the patient as part of the patient's demographic records

A user (a patient) chooses to display his/her appointments in the current month together with his/her office visit dates, prescription dates, and lab procedure dates of the current month on a calendar for the current month. His/her appointments shall be displayed on the calendar [S3]. The user can select an appointment from the calendar to read the appointment's details [S4]. In the calendar, the date entry with an office visit shall display a label as the diagnoses (i.e., ICD-9CM codes) for the office visit. The user can select an office visit from the calendar to read the visit's details [S5]. In the calendar, the date entry with a prescription date (i.e., the date of the office visit the medication was prescribed on) shall display a label for the medications prescribed (i.e., NDC, see Data Format 6.6) in the prescription. The user can select a prescription from the calendar to read the prescription's details [S6]. In the calendar, the date entry with a laboratory procedure (i.e., the entry of the its last status update date) shall display a label as the LOINC code for the laboratory procedure. The user can select a laboratory procedure from the calendar to read the laboratory procedure's details [S7].

The LHCP enters a patient medical identification number (MID) [E1] and confirms his/her input [E2].

The user selects a prescription from the calendar to read its details by clicking the Read Details link beside or below the medication displayed for the prescription, and then the details for the prescription shall be displayed in a new page, including the medications prescribed (i.e., NDC, see Data Format 6.6), date prescribed, start date, end date for each prescription, and the name of the doctor who prescribed the medication.

"A patient has just been diagnosed with a condition and wants to find the LHCPs in the area who have handled that condition. The patient chooses 'My Diagnoses and is presented with a listing of all their own diagnoses, sorted by diagnosis date (more recent first). The patient can select a diagnosis and will be presented with the LHCPs in the patient's living area (based upon the first three numbers of their zip code) who have handled this diagnosis in the last three years. The list is ranked by the quantity of patients the LHCP has treated for that diagnosis (each patient is only counted once regardless of the number of office visits). For each LHCP, the following information is displayed:


Name of LHCP linked to contact information for that LHCP

The quantity of unique patients treated by that LHCP for that diagnosis (each patient is only counted once regardless of the number of office visits)

List of all prescriptions given by that LHCP for that diagnosis

List of all laboratory procedures ordered by that LHCP for that diagnosis

The LCHP's average visit satisfaction

The LHCP's average treatment satisfaction"

The patient chosen is not the desired patient. The HCP does not confirm the selection and is prompted to try again.

The patient can choose to toggle between designating/undesignating any LHCP as being a DLHCP for them.

The LHCP chooses to examine a patient for which the preconditions do not apply (e.g., an adult shouldn't be tested for child diabetes) and the LHCP is prompted that no analysis can occur.

 The user has successfully changed his/her password (UC3, S2). An email informing the user of the password change is sent to the user including the MID but not the password.

The patient types a last name or partial last name, and/or providing the specialty. The patient may optionally enter a zip code (match on first three numbers of zip code), in addition to the name and/or specialty. The LHCP's name, specialty, and address are provided.

The LHCP chooses to view all patients with which he or she has ever had an office visit with. The patients name (clickable to view PHR), address, and date of last office visit. The list is sorted by the date of the last office visit (most recent first).

If there are no patients satisfying the three conditions, an empty list is presented.

A patient or personal health representative may enter or edit their own demographic information including their security question/answer according to data format 6.1. When answer to the security question is typed in, the answer should not appear on the screen (similar to how a password normally appears) and the answer should be confirmed (by the patient or personal health representative) before it is saved. 

The system shall enable the administrator to add a new entry for a hospital, or modify the hospital name in an existing entry. Note that the administrator is not allowed through the system interface to delete an existing entry or modify the hospital ID number in an existing entry.

The user selects a laboratory procedure from the calendar to read its details by clicking the Read Details link beside or below the LOINC code displayed for the laboratory procedure, and then the details for the laboratory procedure shall be displayed in a new page, including laboratory procedure code, status, commentary, results, andoffice visit date when the laboratory procedure was ordered.

The LHCP views a list of requests he/she has made for reports, with the status and pertinent information about the requests.

The user selects an office visit from the calendar to read its details by clicking the Read Details link beside or below the ICD-9CM code (i.e., diagnose) displayed for the visit, and then the details for the visit shall be displayed in a new page, including date of office visit, note text, diagnoses (i.e., ICD-9CM codes), medical procedures performed (i.e., CPT code) , lab procedures ordered (LOINC code, see Data Format 6.11), medications prescribed (i.e., NDC, see Data Format 6.6), immunizations given (i.e., CPT Code, see UC15, S1), and the name of the doctor who prescribed the medication.

An HCP may enter or edit their own demographic information according to data format 6.2 

Through the Personal Health Records page, an LHCP chooses a chronic disease and a patient. The data in the database is analyzed according to the risk factors for the disease to determine if the patient exhibits a certain risk factor. Currently available risk factors for chronic diseases are defined for Diabetes and Type 1 and Type2 and Heart Disease. When the chosen patient satisfies the preconditions of the chosen chronic disease [E1], the LHCP is provided with a warning message if that patient exhibits three or more risk factors. The message will display the risk factors that the patients exhibit.

The HCP types an invalid medical identification number and is prompted to try again.

The LHCP's name, specialty, address, date of office visit, and whether or not the LHCP is a DLHCP for this patient is indicated. The list is sorted by the date of the last office visit (most recent first).

 The status of a laboratory procedure has been updated (UC26, S3). The patient is notified with the following information: the LOINC number and the updated status.

The patient, UAP, or personal representative tries to enter more than ten physiologic data points for one day and is told additional data cannot be entered.

HCP must enter the MID of a patient and then enter or edit demographic information with the exception of the patient's security question/password according to data format 6.1 

The administrator will store (1) hospital Id number for the hospital [E1]; and (2) up to 30 alphanumeric characters giving the name of the hospital

The user selects an appointment from the calendar to read its details by clicking the Read Details link beside or below the appointment type name displayed for the appointment, and then the details for the appointment shall be displayed in a new page, including the appointment type, the appointment date and start time, comment, and the name of either the patient (only for the user being an LHCP) or the LHCP (only for the user being a patient).

The patient list is titled with the HCP's name. The patient list includes the patient's name (i.e., first name and last name), phone number, and contact email address [E1, E2] (so that confirmation calls or emails can be made or sent outside of the iTrust system). The list is sorted based on the ascending alphabetical order of the patients' last names, and then first names. When a chronic special-diagnosis-history patient satisfies all three conditions and has multiple prescriptions satisfying the third condition, the patient is listed in the list only once. The list is a static list with no link on the patient's name, phone number, or contact email address)

The system shall display a default placeholder image for patients who do not have a photograph on file.

The administrator types an invalid hospital ID and is prompted to try again.

The patient may choose to view the list sorted by the role of the accessor relative to the patient (personal health representative, LHCP, UAP, Emergency Responder; any order is fine as long as the list is sorted by role) as well as by date for each role type, most recent access first.

An LHCP selects to view additional information for a patient. The LHCP is presented with a screen upon which he/she can choose a date range. Once the date range is selected, the LHCP can see the patient name; patient phone number; personal representative (name and phone number), if applicable; and the blood pressure, glucose levels, height, weight, and pedometer readings as well as whom reported the data (patient, UAP name, personal representative name) for that date range.

The input is not a valid zip code (see Data Format 6.2). The user is asked to try again.

A UAP can select to report physiologic measurements. He/she is presented with a list of the patients whose at least one physiologic data type is specified to be under monitoring and for whom he/she is allowed to report measurements. He or she can select a patient and then enter data. He or she can report the blood pressure (systolic and diastolic) [E2] and/or glucose levels [E3] for the patient. The input data, a timestamp, and the fact the the status was reported by case manager and their MID are saved. Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the UAP.

 A patient or personal representative for a patient chooses to send a message to an LHCP (no multiple recipients allowed in a single message). The patient/representative is presented with a pull down menu of his/her DLHCP. The patient/representative chooses one of these DLHCP and types the subject (up to 100 characters) and text of a message (up to 1000 characters), and clicks the send button. A row for showing the message subject, the name of the recipient, and the timestamp (which includes both date and time) is then visible in the patient/representatives message outbox. A bolded row for showing the message subject, the name of sender, and the timestamp is then visible in the LHCP's message inbox. A fake email is sent to the LHCP alerting the user that a new message has arrived. After a message is sent, the patient or personal representative is directed to his/her message outbox.

A patient or patient representative wishes to reply to a message. The patient/representative views his or her message inbox. The patient/representative opens the message to which he or she wishes to reply [S5], and then clicks the reply link above the message text. The patient/representative enters the text of the response message (up to 1000 characters) he or she wishes to send, then clicks the send button. A row for showing the message subject (now preceded by RE:), the name of the recipient, and the timestamp is then visible in the patient/representatives message outbox. A bolded row for showing the message subject (now preceded by RE:), the name of the sender, and timestamp is then visible in the LHCPs message inbox. A fake email is sent to the LHCP alerting the LHCP that a new message reply has arrived.

"A chronic special-diagnosis-history patient is an alive patient who has been diagnosed with at least one of the following:

diabetes mellitus [is diagnosed with ICD code beginning with 250],

asthma [is diagnosed with ICD code beginning with 493], or

circulatory-system disease [is diagnosed with an ICD code between 390 and 459 inclusive]."

The system prompts the patient or HCP to correct the format of a required data field because the input of that data field does not match that specified in data format 6.1 or data format 6.2, as appropriate.

By default, the patient is presented with a list sorted by dates, most recent access first.

The administrator types an invalid hospital name and is prompted to try again.

"A user chooses to view physician satisfaction survey results. The user provides a zip code [E1] Or a hospital code and an (optional) physician type (from a pull-down list: see data format 6.2 - general, surgeon, heart specialist, pediatrician, OB/GYN). The patient is provided with the following for each physician of that type that practices in a zip code (based upon the address/zipcode provided in UC2) that match the first three digits of the provided zip code:


Name

Address

Average number of minutes patients wait in waiting room

Average number of minutes patients wait in examination room prior to seeing physician

Average office visit satisfaction

Average satisfaction with treatment/information

Percentage of office visits for which satisfaction information is available"

A patient can select to report physiologic measurements for those whose at least one physiologic data type is specified to be under monitoring andfor whom he/she is a patient representative. He/she is presented with a list of the patients whose at least one physiologic data type is specified to be under monitoring and for which he/she is allowed to report measurements. He or she can select a patient and then enter data. He or she can report the blood pressure (systolic and diastolic) [E2] and/or glucose levels [E3] for the patient. The input data and a timestamp and the fact that the status was reported by patient representative and their MID are saved. Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the patient.

"A patient or personal health representative can answer any of the following questions relative to a previous (in UC9, S1) office visit according to Data Format 6.13.


How many minutes did you wait in the waiting room?

How many minutes did you wait in the examination room before seeing your physician?

How satisfied were you with your office visit?

How satisfied were you with the treatment or information you received?

The answers to the survey are stored."

An LHCP chooses to send a message to a patient/representative (no multiple recipients allowed in a single message). The LHCP enters and confirms the patient/representative's MID [E1, E2]. The LHCP types the subject (up to 100 characters) and the text of a message (up to 1000 characters), and clicks the send button. A row for showing the message subject, the name of the recipient, and the timestamp is then visible in the LHCPs message outbox. A bolded row for showing the message subject, the name of the sender, and the timestamp is then visible in the patient/representatives message inbox, and a fake email is sent to the patient/representative that indicates that he/she has a new message from an LHCP. After a message is sent, the LHCP is directed to to his/her message outbox.

A user (a patient, patient representative, or LHCP) can sort messages in his or her message inbox by either the sender's last name or timestamp (but not both) in either ascending or descending order (where timestamps in descending order would have the most recent first). A user can sort messages in his or her message outbox by the recipient's last name or timestamp (but not both) in either ascending or descending order. To do so, a user selects one option out of the Sort by labeled drop-down box (with options of Sender/Recipient or Timestamp) and selects one option out of the by order of labeled drop-down box (with options of ascending or descending), and then click the Sort button. Note that the sorted order is not saved for later viewing after the message inbox or outbox is reopened again (where the default sorting is always used).

 The LHCP types an invalid MID and is prompted to try again.

A patient whose at least one physiologic data type is specified to be under monitoring chooses to report their physiologic data. He or she can report his or her blood pressure (systolic and diastolic) [E2] and/or glucose levels [E3]. The input data, a timestamp, and the fact that the status is self-reported are saved.

The enterer/editor is presented with the name of the user and determines if it is invalid or not the right person. The enterer/editor is prompted to try again.

A public health agent is presented with a listing of prescription drug-related adverse events for the time period that do not have a status of removed, sorted by NDC. The public health agent can select to see the detail of a specific report. Upon reading the report, the public health agent can choose to send a fake email message to the adverse event reporter to gain more information about the report. The public health agent may also choose to remove an adverse event report (such as based upon communication with the reporter or because the report appears to be bogus) [S3].

 For the patient, the HCP can choose either height or weight to graph. The HCP is presented with a line chart giving the chosen measurements (either height or weight) of the patient spanning the last 3 calendar years of data, averaged by quarters (January-March, April-June, July-September, October-December) [E3].

An LHCP chooses to view the physiologic data monitoring details. The LHCP is presented with a listing of all his or her patients whose at least one physiologic data type is specified to be under monitoring with their blood pressure and glucose levels, recording timestamp, and whom reported the data (patient, UAP name, personal representative name). Patients with no information for the current day are highlighted. Patients with blood pressure or glucose level out of range are highlighted (normal blood pressure: systolic 90-140; diastolic 60-90; normal glucose 70-150). The LHCP can select a patient to obtain additional information about a patient [S4].

The patient chosen is not the desired patient. The LHCP or ER does not confirm the selection and is prompted to try again.

A user (an LHCP or patient/representative) can modify his/her message displaying filter by modifying the following filtering criteria: (1) the sender (i.e., the sender's name is exactly the same as the specified string), (2) the subject (i.e., the subject is exactly the same as the specified string), (3) has the words (i.e., the subject or the message body has the specified substring), (4) doesn't have (i.e., neither the subject nor the message body has the specified substring), (5) time stamp falling into the period defined by the starting date and ending date (inclusive) (the user interface shall provide both the option of typing in a specific date in the date format and the option of selecting a date from a calendar for the current month). Note that a single filter includes values for these five filtering criteria (rather than five filters for these five filtering criteria) and a value could be an empty string, indicating that this criterion has no impact on filtering (i.e., imposing no constraints related to this criterion). The user interface shall be initially populated with the values of the filtering criteria from the previously saved filter. After the user modifies the criteria, the user chooses to click the Cancel button to cancel the modifications of the filter (i.e., repopulate the user interface with the values of the filtering criteria from the previously saved filter), to click the Test Search button to search (i.e., displaying the message inbox [S5] including only the messages satisfying the specified filtering criteria), or to click the Save button to save the modified filter. Each user is associated with only one filter (being saved across login sessions) and applies only this saved filter. The user's associated filter initially has all empty inputs for the filtering criteria before the user modifies it.

A user (a patient, patient representative, or LHCP) wishes to read a message from the message inbox or outbox. The user chooses to open his or her message inbox/outbox. Each row in the message inbox/outbox includes the message subject, the name of either the sender (only for the case of inbox) or recipient (only for the case of outbox), and timestamp. By default, the messages in the message inbox/outbox should be ordered by timestamp, the most recent first. Each row for an unread message in the message inbox is bolded. The user selects a message from the message inbox/outbox to read by clicking the Read link beside the row for the message, and then the message subject, the name of the sender, the name of the the recipient, timestamp, and the message text shall be displayed in a new page. After a message in the message inbox is read (i.e., displayed in a new page), the row for the message in the message inbox is not bolded anymore.

The chosen patient is not the desired patient. The LHCP does not confirm the selection and can try again.

An LHCP or UAP can add and delete patients from his or her monitoring list. A patient is added to the list by the LHCP or UAP typing in the patient's MID [E1] or name. An LHCP can delete a patient from his or her monitoring list by the LHCP typing the the patient's MID [E1]. In both cases, the LHCP is presented the name of the patient and must confirm the add/delete. For each patient from the monitoring list, the LHCP can choose to edit which types of remote monitoring information (blood pressure, glucose levels, height, weight, and pedometer readings) should be submitted by the patient. By default, all types of information are selected for monitoring.

The adverse event report changes to a status of removed. A message of the removal is sent to the adverse event reporter and to the LHCP involved in the report (because the LHCP prescribed the drug or administered the immunization).

The health care personnel enters a MID [E1] of a patient and confirms their selection [E2]. The health care personnel may enter/edit personal health information including editing historical values from Data Format 6.4.1, 6.4.2, 6.4.3, and 6.4.4, immunizations, and office visit information (date, diagnoses, medication, name of attending physician but not notes, laboratory procedures), family history (the MIDs of the patient's mother and father), and Body Mass Index (BMI) [S3]. The HCP can indicate the patient has passed away, providing an appropriate diagnosis code. The HCP can graph height or weight of the patient over the last 3 calendar years [S3].

A public health agent is presented with a listing of immunization-related adverse events for the time period that do not have a status of removed, sorted by CPT code . The public health agent can select to see the detail of a specific report. Upon reading the report, the public health agent can choose to send a fake email message to the adverse event reporter to gain more information about the report. The public health agent may also choose to remove an adverse event report (such as based upon communication with the reporter or because the report appears to be bogus) [S3].

The LHCP types an invalid medical identification number and is prompted to try again.

An LHCP wishes to reply to a message. The LHCP views his or her message inbox. The LHCP opens the message to which he or she wishes to reply [S5], and then clicks the reply link above the message text. The LHCP enters the text of the response message (up to 1000 characters) he or she wishes to send, then clicks the send button. A row for showing the message subject (now preceded by RE:), the name of the recipient, and the timestamp are then visible in the LHCPs message outbox. A bolded row for showing the message subject (now preceded by RE:), the name of sender, and timestamp are then visible in the patient/representatives message inbox. A fake email is sent to the patient/representative alerting the patient/representative that a new message reply has arrived.

An HCP chooses to refer a patient to another receiving HCP through the referral feature on a patient's office visit page (UC11). The sending HCP must select a receiving HCP by either entering the HCP's MID and confirming the selection, or by searching for the HCP by name. The sending HCP is also presented with a text box to include notes about the referral. The sending HCP then chooses a priority from 1-3 (1 is most important, 3 is least important) for the referral. The HCP may send the referral, cancel the referral [E1], or edit the referral [E2]. Upon sending a referral, the patient, sending HCP, and receiving HCP receive a message summarizing the newly created referral information (sending HCP name & specialty, receiving HCP name & specialty, patient name, referral notes, and referral creation timestamp); additionally, the sending and receiving HCP messages include the referral priority.

The administrator will maintain a listing of allowable diagnoses that an LHCP can use. The administrator will store (1) the ICD-9CM code (The International Statistical Classification of Diseases and Related Health Problems (most commonly known by the abbreviation ICD) provides codes to classify diseases and a wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and external causes of injury or disease. NHCS Classification of Diseases, Functioning and Disability) for the diagnosis [E1]; (2) a classification that the diagnosis is either chronic/long-term OR short term; and (3) up to 30 alphanumeric characters giving the name [E1] of the diagnosis.

The patient or personal health representative can see patient personal health information (including historical values), immunizations, and office visit information (date, diagnoses, medication, name of attending physician but not notes, laboratory procedures) for (a) their own records and (b) the records for whom the user is a personal representative. If a patient or personal health representative has not taken an office visit satisfaction survey for an office visit yet, the patient may choose to take the survey for an office visit (if the survey has already been taken, the patient or personal health representative will not have the ability to take the survey or view their previously submitted survey)

The patient chosen is not the desired patient. The LHCP does not confirm the selection and is prompted to try again.

" An alive patient who has not had an office visit for more than one year and who has been diagnosed with

diabetes mellitus [is diagnosed with ICD code beginning with 250]

asthma [is diagnosed with ICD code beginning with 493], or

circulatory-system disease [is diagnosed with an ICD code between 390 and 459 inclusive]"

The patient clicks on the name of the LHCP for an expired prescription, and is presented with the contact information for that LHCP (including First Name Last Name, LHCP Type, Street Address 1, Street Address 2, City, State, Zip Code, Phone, and Contact Email); if any type of contact information is missing or the whole contact information for the LHCP is not available in the database, the corresponding missing types of information are simply shown as blank.

The administrator will maintain [add/update] a listing of allowable drugs that an HCP can use. The administrator will store (1) the National Drug Code (The National Drug Code (NDC) is a universal product identifier used in the United States for drugs intended for human use. National Drug Code Directory)

The lab procedure code is not the intended lab procedure code. The HCP selects a different procedure code.

The administrator will maintain [add/update] a listing of allowable immunizations that an HCP can use. The administrator will store (1) the CPT code (The CPT code set accurately describes medical, surgical, and diagnostic services and is designed to communicate uniform information about medical services and procedures among physicians, coders, patients, accreditation organizations, and payers for administrative, financial, and analytical purposes. About CPT) [E1] and (2) up to 30 alpha characters giving the name [E1] of the immunization.

An HCP chooses to view received referrals. The receiving HCP is presented with a list of referrals sorted by priority (from most important to least important). The receiving HCP then selects a referral to view details and is presented with the name and specialty of the sending HCP, the patient's name, the referral notes, the referral priority, the office visit date with a link to the office visit, and the time the referral was created.

The LHCP types an invalid medical identification number and is prompted to try again.

"The patient or personal health representative can see an abbreviated health history of their siblings, parents, and both sets of grandparents for which MIDs are available in iTrust. They can see diagnoses related to the following [presented as a table with an x if the family member suffered from that diagnosis]:

high blood pressure (Systolic blood pressure over 240 mmHg and/or a diastolic blood pressure over 120 mmHg);

high cholesterol (HDL (good) cholesterol levels under 35 mg/dL (milligrams per deciliter) and/or a triglyceride level over 250 mg/dL);

diabetes [is diagnosed with ICD-9CM code beginning with 250;

cancer [is diagnosed with ICD-9CM code beginning with 199;

heart disease [is diagnosed with ICD=9CM code beginning with 402;

smoking; and

the cause of death if the family member is deceased."

An alive patient under the age of 19 who has not had proper immunizations per the immunization schedule. The catch up schedule is relevant when the patient did not begin the immunizations according to the recommended schedule.

The expired prescription report list is titled with the patient name. The expired prescription list includes medication, date prescribed (i.e., the day of the office visit), start date, end date for each prescription, and the name of the LHCP who prescribed the medication (where the name of the LHCP is linked to contact information for that LHCP). If there are no expired prescriptions, an empty expired prescription list is presented.

An alive patient over 50 years old who has not had a flu shot [CPT codes 90656, 90658, 90660 per http://www.influenza.com/index.cfm?fa=ADDITIONAL_RES_HC_2 during the months Sept - Dec of the last calendar year (or during the months Sept - Dec of the current calendar year if the retrieval time is between Sept - Dec).

A sending HCP views a list of previously sent patient referrals. The HCP may sort the list of referrals by patient name, receiving HCP name, time generated, and/or priority. The HCP chooses a specific referral from the list to view complete details about the referral: patient name, receiving HCP name and specialty, time generated, priority, office visit date, and notes.

The selected Lab Technician is not the intended Lab Technician. The HCP selects a different Lab Technician.

The HCP selects one or more reasons out the nine reasons listed here for the overriding.[E1] The patient is sent a fake email that the HCP has prescribed a medication that he/she is allergic to or that has a known interaction with a drug he/she is taking.

A patient is presented with a listing of all prescription drugs for which he/she has been prescribed and/or has taken in the last 12 months. The patient chooses one or more drug(s) for which to report the adverse event. The patient is then able to write a textual description which describes the symptoms of the adverse event and to save the information. A fake email is sent to the LHCP who prescribed the medication indicating the patient name and MID, drug, and symptoms.

The user may try three times. After three failed attempts with a userid in a given session, disallow attempts to log in via IP address for 15 minutes (see comments in the source code).

The administrator will maintain [add/update] a listing of allowable physical services (including laboratory procedures) that an HCP can use. The administrator will store information of a LOINC code (Logical Observation Identifiers Names and Codes (LOINC) is a database and universal standard for identifying medical laboratory observations. LOINC c/o Medical Informatics) [E1] according to Data Format 6.11.

The comment is empty and the text No Comment (without link) is displayed instead of the Read Comment link.

The HCP enters a MID [E1] or name of a patient and confirms their selection [E2]. The HCP documents the office visit date; hospital location of the office visit, if any, (the default should be the HCP's home location); and notes (numbers, characters, #, ;, ?, -, ', ., :, blankspace and carriage return are all allowed input values) about an office visit. The HCP's medical identification number should also be maintained. Additionally, the HCP can document none, one, or more medications (NDC, see Data Format 6.6) prescribed [S3]; none, one, or more lab procedures that are ordered (LOINC code, see Data Format 6.11)(UC26); none, one, or more diagnoses (via the ICD-9CM code); none, one, or more medical procedures (CPT code) performed; and none, one, or more immunizations given (CPT Code, see UC15, S1) chosen from appropriate pull-down lists. The HCP may also add a patient referral (UC33). All events are logged (UC5, S8).

The drug desired to be prescribed is checked for interactions between other drugs currently taken by the patient. The HCP is notified of possible interactions.

The enterer/editor is presented with the name of the user and determines if it is invalid or not the right person. The enterer/editor is prompted to try again.

A patient is presented with a listing of all immunizations for which he/she has been administered in the last 12 months. The patient chooses the immunization for which to report the adverse event. The patient is then able to write a textual description which describes the symptoms of the adverse event and to save the information. A fake email is sent to the LHCP who administered the immunization indicating the patient name and MID, drug, and symptoms.

If the patient has never stored a security question/answer, the user is asked for the random password assigned on creation of the account.

The user inputs invalid information and is prompted to try again.

The drug desired to be prescribed is checked against the patient's drug allergies. The HCP is notified of drug allergy.

The system prompts the enterer/editor to correct the format of a required data field because the input of that data field does not match that specified in data format 6.4 for patients.

HCPs can return to an office visit and modify or delete the fields of the office visit [date, hospital, notes, prescriptions, laboratory procedures (UC26), referral (UC33), diagnoses, procedures, and/or immunizations]. The event is logged (UC 5, S8) and the HCP is returned in the specific office visit record to verify his or her changes.

<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>
<%@taglib uri='/WEB-INF/cewolf.tld' prefix='cewolf' %>

<%@include file="/authenticate.jsp" %>

<%
	if(validSession) {
		errorMessage = (String) session.getAttribute("errorMessage");
		session.removeAttribute("errorMessage");
	}
	
%>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<title><%=pageTitle %></title>
		<link href="/iTrust/css/main2.css" type="text/css" rel="stylesheet" />
		<link href="/iTrust/css/datepicker.css" type="text/css" rel="stylesheet" />
		<script src="/iTrust/js/DatePicker.js" type="text/javascript"></script>
	<!-- ADDED FOR RICH TEXT -->	<script type="text/javascript" src="/iTrust/ckeditor/ckeditor_basic.js"></script>
	<!-- ADDED FOR RICH TEXT -->	<script src="/iTrust/ckeditor/_samples/sample.js" type="text/javascript"></script>
	<!-- ADDED FOR RICH TEXT --> 	<link href="/iTrust/ckeditor/_samples/sample.css" rel="stylesheet" type="text/css" />
		<script src="/iTrust/js/jquery-1.2.6.js" type="text/javascript"></script>
		<link href="/iTrust/css/facebox/facebox.css" media="screen" rel="stylesheet" type="text/css"/>
		<script src="/iTrust/js/facebox/facebox.js" type="text/javascript"></script>
		
		<script type="text/javascript">
			jQuery(document).ready(function($) {
				$('a[rel*=facebox]').facebox()
			});
			$.facebox.settings.loading_image = '/iTrust/image/facebox/loading.gif';
			$.facebox.settings.close_image   = '/iTrust/image/facebox/closelabel.gif';
		</script>
		<script type="text/javascript">
			<!--
			
			function startup() {
				var h = document.getElementById('m').offsetHeight;
				document.getElementById('l').style.minHeight=h+'px';
				document.getElementById('r').style.minHeight=h+'px';
			}
			-->
		</script>
	</head>
	<body onload="startup()">
		<div class="iTrustHeader">
			<img style="float: left;" src="/iTrust/image/new/title.png" alt="iTrust Logo" />
			<div class="iTrustNav">
				<div style="float: left; width: 20%;">
						<a class="iTrustNavlink" href="/iTrust">Home</a>
						&nbsp;&nbsp;&nbsp;
	<%
				if( validSession ) {
					
					if(    (loggedInMID != null)
						&& (loggedInMID.longValue() != 0L) ) //if no one is logged in
					{
						if(userRole != "tester") { //if it's a tester
	%>					
							<a class="iTrustNavlink"
							   href="/iTrust/auth/<%=userRole %>/information.jsp"
							   rel="facebox">Information</a>
	<%
						} //end tester section
						
	%>
				</div>
				<div style="float: right; width: 20%; text-align: right; margin-right: 20px;">
					<% out.println(userName); %>
					| <a class="iTrustNavlink" href="/iTrust/logout.jsp">Logout</a>
	<%				} //no one is logged in
				}	  //valid session
	%>
				</div>
				<div style="clear: both;">
				</div>
			</div>
		</div>	

		<div class="iTrustMain">
			<div class="iTrustMenu" id="iTrustMenu" style="margin-left: -2px">
				<img id="menuPic" src="/iTrust/image/new/menu.png"  />
				<img src="/iTrust/image/new/menu_top.png"  />
				<div class="iTrustMenuContents" style="margin-top: -4px">
<%						if (  validSession ) {
						if (    (loggedInMID != null)
						     && (loggedInMID.longValue() != 0L)) //someone is logged in
						{
							if (userRole.equals("patient")) {
								%><%@include file="/auth/patient/menu.jsp"%><%
							}
							else if (userRole.equals("uap")) {
								%><%@include file="/auth/uap/menu.jsp"%><%
							}
							else if (userRole.equals("hcp")) {
								%><%@include file="/auth/hcp/menu.jsp"%><%
							}
							else if (userRole.equals("er")) {
								%><%@include file="/auth/er/menu.jsp"%><%
							}
							else if (userRole.equals("pha")) {
								%><%@include file="/auth/pha/menu.jsp"%><%
							}
							else if (userRole.equals("admin")) {
								%><%@include file="/auth/admin/menu.jsp"%><%
							}
							else if (userRole.equals("tester")) {
								%><%@include file="/auth/tester/menu.jsp"%><%
							}
						} //no one is logged in	
						else {
							String uri = request.getRequestURI();
							if( uri.indexOf("privacyPolicy.jsp") >= 0) { //looking at privacy policy, include logout menu.
	%>
								<%@include file="logoutMenu.jsp"%>
	<%
							} else {									//we are actually logged out entirely, show login menu
	%>
								<%@include file="loginMenu.jsp"%>		
	<%
							} //else
						}   //else
					} //if valid session
					else {
	%>
						<%@include file="/logoutMenu.jsp"%>
	<%
					}
%>
				</div>	
				<img src="/iTrust/image/new/menu_bottom.png"  />	
			</div>
			<div class="iTrustPage" style="padding-left: 180px;">
				<div class="leftBorder" id="l"></div>
				<div class="iTrustContent" id="m">
<%
	if(errorMessage != null) {
%>	
					<div style="text-align: center; width: 100%; background-color: black;">
						<span style="color: red; font-size: 28px; font-weight: bold;"><%=errorMessage %></span>
					</div>
<% 
	}
%>
<%@page import="edu.ncsu.csc.itrust.DBUtil"%>

<%
if(!DBUtil.canObtainProductionInstance()){
	response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
}


if(request.getUserPrincipal() != null) {
	long mid = Long.valueOf(request.getUserPrincipal().getName());
	userName = authDAO.getUserName(mid);
}
else
{
	if (null != userRole)
	{
		userRole = null;
		response.sendRedirect("/iTrust/errors/reboot.jsp");
	}
}


if (request.getAuthType() != null) {
			
		if (request.getSession(false) != null) {
			boolean isValidLogin = loginFailureAction.isValidForLogin();
			if(!isValidLogin) {
				session.invalidate();
				return;
			}
			else {
			
				loggedInMID = new Long(Long.valueOf(request.getUserPrincipal().getName()));
				session.setAttribute("loggedInMID", loggedInMID);
			}
		}
}

%>

				</div>
				<div class="rightBorder" id="r"></div>
			</div>
			<div style="clear: both;">
			</div>
		</div>

	
		<div class="iTrustFooter" style="padding-left: 200px;">
			<div style="float: left; width: 48%; margin-left: 25px;">
<%
			if( ! "true".equals(System.getProperty("itrust.production") ) ) { 
%>
				  <a class="iTrustTestNavlink" href="/iTrust/util/andystestutil.jsp">Test Data Generator</a>
				| <a class="iTrustTestNavlink" href="/iTrust/util/transactionLog.jsp">Transaction Log</a>
				| <a class="iTrustTestNavlink" href="/iTrust/util/displayDatabase.jsp">Display Database</a>
				| <a class="iTrustTestNavlink" href="/iTrust/util/blackbox/blackbox.jsp">Black Box Test Plan</a>
				| <a class="iTrustTestNavlink" href="/iTrust/util/showFakeEmails.jsp">Show Fake Emails</a>
<%
			}
%>
			</div>
			<div style="float: right; width: 48%; text-align: right; margin-right: 10px;">
				  <a class="iTrustNavlink" href="mailto:nobody@itrust.com">Contact</a>
				| <a class="iTrustNavlink" href="/iTrust/privacyPolicy.jsp">Privacy Policy</a>
				| <a class="iTrustNavlink" href="http://agile.csc.ncsu.edu/iTrust/">iTrust v10.0</a>
			</div>
			<div style="clear: both;">
			</div>
		</div>

	</body>
</html>

<script type="text/javascript" src="/iTrust/js/ResizeIFrame.js"></script>
<script type="text/javascript" src="/iTrust/js/getUser.js"></script>
<iframe id="getUserFrame" scrolling="none" 
        style="position: absolute; display: none; width: 450px; border: none; height: 150px;" ></iframe>

<%@page import="edu.ncsu.csc.itrust.action.ResetPasswordAction"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.exception.iTrustException"%>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - Reset Password";
%>

<%@include file="/header.jsp"%>

<h1>Reset Password</h1>
<%
	ResetPasswordAction action = new ResetPasswordAction(prodDAO);
	if (action.isMaxedOut(request.getRemoteAddr())) {
		response.sendRedirect("/iTrust/auth/forward?error=Too+many+attempts!");
	}

	long mid = action.checkMID(request.getParameter("mid"));
	String role = null;

	try {
		role = action.checkRole(mid, request.getParameter("role"));
	} catch (iTrustException e) {
%>
<span >User does not exist with this role and mid.</span>
<%
	}
%>

<form action="/iTrust/util/resetPassword.jsp" method="post">
<table>
<%
	if (mid == 0 || role == null) {
%>
	<tr>
		<td colspan=2><b>Please enter your Role and MID</b></td>
	</tr>
	<tr>
		<td>Role:</td>
		<td>
			<select name="role">
				<option value="patient">Patient</option>
				<option value="hcp">HCP</option>
				<option value="uap">UAP</option>
				<option value="er">ER</option>
				<option value="pha">PHA</option>
			</select>
		</td>
	</tr>
	<tr>
		<td>MID:</td>
		<td>
			<input type=TEXT maxlength=10 name="mid">
		</td>
	</tr>
	<tr>
		<td colspan=2 align=center>
			<input type="submit" value="Submit">
		</td>
	</tr>

<%
	} else {
		String answer = action.checkAnswerNull(request
				.getParameter("answer"));
		if (answer == null) {
			try {
%>
	<tr>
		<td colspan=2>
			<b><%=action.getSecurityQuestion(mid)%></b>
		</td>
	</tr>
	<tr>
		<td>Answer:</td>
		<td><input type=password maxlength=50 name="answer"> <input
			type=hidden name="mid" value="<%=mid%>"> <input type=hidden
			name="role" value="<%=role%>"></td>
	</tr>
	<tr>
		<td>New Password:</td>
		<td><input type=password maxlength=20 name="password"></td>
	</tr>
	<tr>
		<td>Confirm:</td>
		<td><input type=password maxlength=20 name="confirmPassword"></td>
	</tr>
	<tr>
		<td colspan=2 align=center><input type="submit" value="Submit"></td>
	</tr>

<%
			} catch (iTrustException e) {
%>
	<tr>
		<td>
			<font color='red'>This user has not set a security question/answer.</font>
		</td>
	</tr>
<%
			}
			
		} else {
			String password = request.getParameter("password");
			String confirmPassword = request.getParameter("confirmPassword");
			String confirm = "";
			try {
				confirm = action.resetPassword(mid, role, answer, 
				                               password, confirmPassword, 
				                               request.getRemoteAddr());
			} catch (FormValidationException e) {
				e.printHTML(pageContext.getOut());
%>
	<tr>
		<td>
			<a href="resetPassword.jsp">
				<h2>Please try again</h2>
			</a>
		</td>
	</tr>
<%
			}
%>
	<tr>
		<td>
			<%=confirm%>
		</td>
	</tr>

<%
		}
	}
%>
</table>
</form>

<%@include file="/footer.jsp" %>


<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.beans.TransactionBean"%>
<html>
<head>
<title>FOR TESTING PURPOSES ONLY</title>
</head>
<body>
<h1>Test Utilities</h1>
<table border=1>
	<tr>
		<th>Date</th>
		<th>ID</th>
		<th>Type</th>
		<th>User MID</th>
		<th>Secondary MID</th>
		<th>Extra Info</th>
	</tr>
	<%
		List<TransactionBean> list = DAOFactory.getProductionInstance().getTransactionDAO().getAllTransactions();
		for (TransactionBean t : list) {
	%>
	<tr>
		<td><%=t.getTimeLogged()%></td>
		<td><%=t.getTransactionID()%></td>
		<td><%=t.getTransactionType().getDescription()%></td>
		<td><%=t.getLoggedInMID()%></td>
		<td><%=t.getSecondaryMID()%></td>
		<td><%=t.getAddedInfo()%></td>
	</tr>
	<%
	}
	%>
</table>
<br /><br />
<h1><a href="/iTrust">Back to iTrust</a></h1>
</body>
</html>

<%@page import="edu.ncsu.csc.itrust.datagenerators.TestDataGenerator"%>
<%@page import="java.lang.reflect.Method"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<html>
<head>
<title>FOR TESTING PURPOSES ONLY</title>
<style type="text/css">
.message{
	border-style: solid;
	border-width: 1px;
	background-color: #AAFFAA;
}
</style>
</head>
<body>
<div align=center>
<h1>Test Utilities</h1>
<%if(System.getProperty("itrust.dev.home")==null){ %> 
<b>You are not configured to use this test utility.</b><br />
To use this, you must add the following line to Tomcat's startup: <br />
-Ditrust.dev.home="&lt;your workspace&gt;\iTrust"<br /><br />
For example, if you're using Eclipse WTP and your project is located at "e:\workspace\iTrust", do the following: <br />
<div style="width:500px; text-align: left">
<ol>
	<li>Under the "Servers" view, double-click on your Tomcat server.</li>
	<li>Click on "Open Launch Configuration"</li>
	<li>Go to the "Arguments" tab</li>
	<li>Under "VM arguments", add the following line of text <b>-Ditrust.dev.home="e:\workspace\iTrust"</b></li>
	<li>Restart your server for the change to take effect</li>	
</ol>
</div>
You should only have to do this once per development location.<%
} else {
%> You specified your project
developement location to be at <b><%=System.getProperty("itrust.dev.home")%></b><br />
<br />

<%
TestDataGenerator gen = new TestDataGenerator(System.getProperty("itrust.dev.home"), DAOFactory.getProductionInstance());
String methodName = request.getParameter("execute");
if (methodName != null) {
	gen.getClass().getMethod(methodName, new Class[]{}).invoke(gen, new Object[]{});
	%><span >Method <%=methodName%> invoked - see console for details</span><%
}%>

<h2>Execute the following test data generators</h2>
<%
for (Method method : gen.getClass().getDeclaredMethods()) {%> 
	<a href="andystestutil.jsp?execute=<%=method.getName()%>"><%=method.getName()%></a><br />
<%
}
}
%>
<br /><br />
<h1><a href="/iTrust">Back to iTrust</a></h1>
</div>
</body>
</html>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@page import="java.io.*"%>
<%@page import="java.util.*"%>
<%@page import="java.util.regex.Pattern" %>
<%@page import="javax.xml.parsers.*" %>
<%@page import="org.xml.sax.*" %>
<%@page import="org.xml.sax.helpers.*" %>
<%@page import="java.text.SimpleDateFormat" %>
<%@page import="java.text.ParseException" %>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<style type="text/css">
		.fancyTable {
			font-family:"Trebuchet MS", Arial, Helvetica, sans-serif;
			width:100%;
			border-collapse:collapse;
		}
		
		.fancyTable td, .fancyTable th {
			font-size:.8em;
			background-color: #FFFFFF;
			border:1px solid #4F708D;
			padding:1px 2px 1px 2px;
		}
		
		.fancyTable th {
			font-size:1em;
			text-align:center;
			padding-top:0px;
			padding-bottom:0px;
			background-color:#4F708D;
			color:#ffffff;
		}
		
		.fancyTable tr.alt td {
			color:#000000;
			background-color:#DDDDFF;
		}
	</style>
</head>
<body style="margin-left:150px;">
<% 
final String path = "http://localhost:8080/iTrust/util/blackbox";
class TestParser {
	class BlackBoxTest
	{
		private String id = "";
		private String dateAdded = "";
		private String dateModified = "";
		private String author = "";
		private String role = "";
		private String useCase = "";
		private String description = "";
		private LinkedList<String> precondition = new LinkedList<String>();
		private LinkedList<String> step = new LinkedList<String>();
		private String expectedResults = "";
		private LinkedList<String> eResult = new LinkedList<String>();
		private String actualResults = "";
		private LinkedList<String> aResult = new LinkedList<String>();
		
		public void setId(String id)
		{
			this.id = id;
		}
		
		public String getId()
		{
			return id;
		}
		
		public void setAuthor(String author)
		{
			this.author = author;
		}
		
		public String getAuthor()
		{
			return author;
		}
		
		public void setRole(String role)
		{
			this.role = role;
		}
		
		public String getRole()
		{
			return role;
		}
		
		public void setUseCase(String uc)
		{
			this.useCase = uc;
		}
		
		public String getUseCase()
		{
			return useCase;
		}
		
		public void setDateAdded(String da)
		{
			dateAdded = da;
		}
		
		public String getDateAdded()
		{
			return dateAdded;
		}
		
		public void setDateModified(String dm)
		{
			dateModified = dm;
		}
		
		public String getDateModified()
		{
			return dateModified;
		}
		
		public String getDescription()
		{
			if(precondition.size() == 0 && step.size() == 0)
			{
				return description;
			}
			String d = "<strong>Preconditions:</strong><br/>";
			for(String p : precondition)
			{
				d = d + "--> " + p + "<br/>";
			}
			d = d + "<br/><strong>STEPS:</strong><br/>";
			for(int i = 1; i < step.size()+1; i++)
			{
				d = d + "\t" + i + ") " + step.get(i-1) + "<br/>";
			}
			return d;
		}
		
		public String getExpectedResults()
		{
			String eR = "";
			for(String e : eResult)
			{
				eR = eR + "--> " + e + "<br/>";
			}
			return eR;
		}
		
		public String getActualResults()
		{
			String aR = "";
			for(String a : aResult)
			{
				aR = aR + "--> " + a + "<br/>";
			}
			return aR;
		}
		
		public void setPrecondition(String p)
		{
			precondition.add(p);
		}
		
		public void setStep(String s)
		{
			step.add(s);
		}
		
		public void setEResult(String e)
		{
			eResult.add(e);
		}
		
		public void setAResult(String a)
		{
			aResult.add(a);
		}
		
		public void setDescription(String d)
		{
			this.description = d;
		}
	}
 
	class SortByTestID implements Comparator<BlackBoxTest> {

	 	public int compare(BlackBoxTest arg0, BlackBoxTest arg1) {
	 		 String x = arg0.getId();
	 		 String y = arg1.getId();
			 return x.compareTo(y);
	 	}
	}


	private LinkedList<BlackBoxTest> bbt = new LinkedList<BlackBoxTest>();
	private LinkedList<String> roles = new LinkedList<String>();
	private BlackBoxTest test;
	private String tempVal = "";
	
	public LinkedList<BlackBoxTest> getTests()
	{
		return bbt;
	}
	
	private void parseDocument() throws Exception{

		//get a factory
		SAXParserFactory spf = SAXParserFactory.newInstance();

			//get a new instance of parser
			SAXParser sp = spf.newSAXParser();


	DefaultHandler handler = new DefaultHandler() {

		public void startElement(String uri, String localName, String qName,
			Attributes attributes) throws SAXException {
			//reset
			tempVal = "";
			if(qName.equalsIgnoreCase("Test")) {
				//create a new instance of employee
				test = new BlackBoxTest();
				test.setId(attributes.getValue("id"));
			}
		}
	
		public void characters(char[] ch, int start, int length) throws SAXException {
			tempVal = new String(ch,start,length);
		}
	
		public void endElement(String uri, String localName,
			String qName) throws SAXException {
	
			if(qName.equalsIgnoreCase("Test")) {
				//add it to the list
				bbt.add(test);
	
			}else if (qName.equalsIgnoreCase("DateAdded")) {
				test.setDateAdded(tempVal);
			}else if (qName.equalsIgnoreCase("DateModified")) {
				test.setDateModified(tempVal);
			}else if (qName.equalsIgnoreCase("Author")) {
				test.setAuthor(tempVal);
			}
			else if (qName.equalsIgnoreCase("Description"))
			{
				test.setDescription(tempVal);
			}
			else if (qName.equalsIgnoreCase("Precondition")) {
				test.setPrecondition(tempVal);
			}
			else if (qName.equalsIgnoreCase("eResult")) {
				test.setEResult(tempVal);
			}
			else if (qName.equalsIgnoreCase("Step")) {
				test.setStep(tempVal);
			}
			else if (qName.equalsIgnoreCase("aResult")) {
				test.setAResult(tempVal);
			}else if (qName.equalsIgnoreCase("Role")) {
				test.setRole(tempVal);
				if(!roles.contains(tempVal))
				{
					roles.add(tempVal);
				}
			}else if (qName.equalsIgnoreCase("UseCase")) {
				test.setUseCase(tempVal);
			}
		}
	};
		//parse the file and also register this class for call backs
		sp.parse(path+"/BlackBoxTestPlan.xml", handler);
	}
	
	private LinkedList<String> getRolesList()
	{
		return roles;
	}

	private LinkedList<BlackBoxTest> getTestsForRole(String r)
	{
		LinkedList<BlackBoxTest> testList = new LinkedList<BlackBoxTest>();
		for(BlackBoxTest b : bbt)
		{
			if(b.getRole().equals(r))
			{
				testList.add(b);
			}
		}
		return testList;
	}
	
	private LinkedList<String> getHTMLOutput(LinkedList<BlackBoxTest> list)
	{
		LinkedList<String> testList = new LinkedList<String>();
		Collections.sort(list, new SortByTestID());
		for(BlackBoxTest b : list)
		{
			String temp = "";
			temp+=		"\n\t\t<td>" + b.getId() + "</td>";
			temp+=		"\n\t\t<td>" + b.getDescription() +"</td>";
			temp+=		"\n\t\t<td>" + b.getExpectedResults() + "</td>";
			temp+=		"\n\t\t<td>" + b.getActualResults() + "</td>";
			temp+=		"\n\t\t<td>" + b.getUseCase() + "</td>";
			temp+=		"\n\t\t<td>" + b.getRole() + "</td>";
			temp+=		"\n\t\t<td>" + b.getDateAdded() + "</td>";
			temp+=		"\n\t\t<td>" + b.getDateModified() + "</td>";
			testList.add(temp);
		}
		return testList;
	}
	
}

TestParser t = new TestParser();
t.parseDocument();
LinkedList<String> rolesList = t.getRolesList();
%>

<%
	for(String role : rolesList)
	{
%>
<div align="left"><p style="font-family:verdana;font-size:1em;"><a name="<%=role%>"><%=role %></p></div>
<table class="fancyTable">
	<tr class="fancyTable">
		<th style="width:10%">Test ID</th>
		<th style="width:30%">Description</th>
		<th style="width:30%">Expected Results</th>
		<th style="width:5%">Actual Results</th>
		<th style="width:5%">Use Case</th>
		<th style="width:5%">Role</th>
		<th style="width:5%">Date Added</th>
		<th style="width:5%">Date Modified</th>									
	</tr>
<%	
		int i = 0;
		LinkedList<String> outputList = t.getHTMLOutput(t.getTestsForRole(role));
		for(String test : outputList)
		{
%>
			<tr valign="top" <%if(i%2 == 0){ %>class="alt" <%} %>>
				<%=test %>
			</tr>	
<% 
			i++;
		}
%>
	</table>
<%
	}
%>



<script>
if (!document.layers)
document.write('<div id="divStayTopLeft" style="position:absolute">')
</script>

<layer id="divStayTopLeft">

<!--EDIT BELOW CODE TO YOUR OWN MENU-->
<table border="1" width="130" cellspacing="0" cellpadding="0">
  <tr>
    <td width="100%" bgcolor="#FFFFCC">
      <p align="center"><b><font size="3">Table of Contents</font></b></td>
  </tr>
  <tr>
    <td width="100%" bgcolor="#FFFFFF">
      <p align="left">
      	   <a href="/iTrust" style="font-size:12px;">< Back to iTrust</a><br/><br/>
<%
	   for(String role : rolesList)
	   {
%>      
	       <a href="<%="#"+role%>" style="font-size:15px;"><%=role %></a><br>
<%
	   }
%>
    </td>
  </tr>
</table>
<!--END OF EDIT-->

</layer>


<script type="text/javascript">

/*
Floating Menu script-  Roy Whittle (http://www.javascript-fx.com/)
Script featured on/available at http://www.dynamicdrive.com/
This notice must stay intact for use
*/

//Enter "frombottom" or "fromtop"
var verticalpos="fromtop"

if (!document.layers)
document.write('</div>')

function JSFX_FloatTopDiv()
{
	var startX = 5,
	startY = 5;
	var ns = (navigator.appName.indexOf("Netscape") != -1);
	var d = document;
	function ml(id)
	{
		var el=d.getElementById?d.getElementById(id):d.all?d.all[id]:d.layers[id];
		if(d.layers)el.style=el;
		el.sP=function(x,y){this.style.left=x;this.style.top=y;};
		el.x = startX;
		if (verticalpos=="fromtop")
		el.y = startY;
		else{
		el.y = ns ? pageYOffset + innerHeight : document.body.scrollTop + document.body.clientHeight;
		el.y -= startY;
		}
		return el;
	}
	window.stayTopLeft=function()
	{
		if (verticalpos=="fromtop"){
		var pY = ns ? pageYOffset : document.body.scrollTop;
		ftlObj.y += (pY + startY - ftlObj.y)/8;
		}
		else{
		var pY = ns ? pageYOffset + innerHeight : document.body.scrollTop + document.body.clientHeight;
		ftlObj.y += (pY - startY - ftlObj.y)/8;
		}
		ftlObj.sP(ftlObj.x, ftlObj.y);
		setTimeout("stayTopLeft()", 10);
	}
	ftlObj = ml("divStayTopLeft");
	stayTopLeft();
}
JSFX_FloatTopDiv();
</script>


</body>
</html>

<%@ page import="java.net.URLEncoder" %>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.action.GetUserNameAction"%>
<%@page import="edu.ncsu.csc.itrust.exception.iTrustException"%>

<html>
<head>
  <title>iTrust - Find User</title>
  <style type="text/css">
.getUserBody {
	background-color: White; 
	border: solid 2px #37609f; 
	margin: 0px;
	color: #37609f;
	white-space: nowrap;
	width: 446px;
	height: 146px;
	overflow: hidden;
}
.getUserTitle {
	width: 100%; 
	text-align: center; 
	background-color:#11213b; 
	color: White; 
	font-weight: bold;
	font-size: 11pt;
	padding: 2px 0px 2px 0px;
}
.getUserTitleClose {
	float: right; 
	display: block; 
	position: absolute; 
	top: 4px;
	left: 410px;  
}
.getUserCloseLink {
	font-size: 12px;
	color: Red;
}
.getUserCloseLink:hover {
	text-decoration: none;
	color: White;
}
.getUserSearchButton {
	color: White; 
	font-weight: bold;
	width: 180px; 
	background-color: #11213b; 
	border: solid 2px #37609f;
}
.getUserSearchButton:hover {
	background-color: #44546e; 
}
.getUserName {
	font-size: 14pt;
	color: Black;
	font-weight: bold;
}
.getUserCorrect {
	border: 1px solid #66ff66; 
	background-color: #eeffee;
	color: #11aa11;
	font-weight: bold;
}
.getUserCorrect:hover {
	border: 1px solid #44ee44;
	background-color: #bbffbb;
}
.getUserIncorrect {
	border: 1px solid #ff6666; 
	background-color: #ffeeee;
	color: #aa1111;
	font-weight: bold;
}
.getUserIncorrect:hover {
	border: 1px solid #ee4444;
	background-color: #ffbbbb;
}
.resultTable tr td {
	padding: 0px 3px 0px 3px;
}
  </style>
</head>
<body class="getUserBody">
<div class="getUserTitle">
	iTrust User Search <div class="getUserTitleClose"><a class="getUserCloseLink" href="javascript:void(0);" onclick="parent.getUserClose();">Close</a></div>
</div>
	<form method="post">
<% 
	String mid = request.getParameter("mid");
	String paramS = request.getParameter("s");
	if(mid != null && mid.trim() != "") {
		try {
				String userName = new GetUserNameAction(DAOFactory.getProductionInstance()).getUserName(mid);
				String action = "";
				if(paramS != null) 
					action = "parent.setUser('" + paramS +"','" + mid + "','" + userName + "');";
				%>
				<table align="center">
					<tr>
						<td style="text-align: center; white-space: nowrap;">
							Found User: <span class="getUserName"><br /><%=userName%></span><br /><br />
							Please confirm that this is the user you wish to select.<br /><br style="line-height: 6px;" />
							<input type="button" name="correct" value="This user is correct" class="getUserCorrect" onclick="<%=action %>" />  							
							<input type="submit" name="incorrect" value="Find another user" class="getUserIncorrect" />&nbsp;&nbsp;&nbsp;
						</td>
					</tr>
				</table>
				<%
			} catch (iTrustException e) {
				response.sendRedirect("getUser.jsp?s=" + paramS + "&error=" + URLEncoder.encode(e.getMessage(),"UTF-8") );
			}
	} else { %>
		<table align="center">
			<tr>
				<td colspan="2" style="text-align: center; padding-bottom: 10px;">
					<b>Please enter a User ID to search for.</b>
				</td>
			</tr>
			<tr>
				<td style="text-align: right; font-weight: bold; color: black;">User ID (MID):</td>
				<td><input name="mid" maxlength="10" type="text" autocomplete="off" /></td>
			</tr>
			<tr>
				<td colspan="2" style="text-align: center; padding-top: 2px;">
					<input type="submit" value="Search for User" class="getUserSearchButton">
				</td>
			</tr>
		<% if(mid == "") { %>
			<tr>
				<td colspan="2" style="text-align: center; font-weight: bold; color: Red;">
					Please enter an MID
				</td>
			</tr>
		<% } else if(request.getParameter("error") != null) { %>
			<tr>
				<td colspan="2" style="text-align: center; font-weight: bold; color: Red;">
					<%=request.getParameter("error") %>
				</td>
			</tr>
		<% } %>
		</table>
  <% }%>		
	</form>
  </body>
</html>
<%@page import="java.sql.*"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<html>
<head>
	<title>Display Database</title>
	<style type="text/css">
		body {
		margin: 4px;
		font-family: Arial;
		font-size: 0.8em;
		}
		.results { 
		 border-collapse: collapse;
		}
		.results tr th {
		 font-size: 0.9em;
		 padding: 0px 5px 0px 5px;
		 background-color: Navy;
		 color: White;
		}
		.results tr td {
		 font-size: 0.8em;
		 padding: 0px 5px 0px 5px;
		}
		.results tr th, .results tr td {
		 border: 1px solid Gray;
		}
	</style>
</head>
<body>
<a href="/iTrust">Back to iTrust</a> - <a href="displayDatabase.jsp">View html format</a>
<h2>FOR TESTING PURPOSES ONLY</h2>
<%
	Connection conn = DAOFactory.getProductionInstance().getConnection();
	ResultSet tableRS = conn.createStatement().executeQuery("show tables");
	while(tableRS.next()){
		String tableName = tableRS.getString(1);
		ResultSet rs = conn.createStatement().executeQuery("SELECT * FROM " + tableName);
		int numCol = rs.getMetaData().getColumnCount();
		%><b>== <%=tableName%> ==</b><br />^<%
		for(int i=1; i<=numCol;i++){
			%><%=rs.getMetaData().getColumnName(i)%>^<%
		}
		%><%
		while(rs.next()){
			%><br />|<%
			for(int i=1;i<=numCol;i++){
				try{
					String data = rs.getString(i);
					if(data!=null && data.equals("")){
						data=" ";
					}
					%><%=data%>|<%
				} catch(SQLException e){
					%>--Error in date, might be empty--|<%
				}
			}
			%><%
		}
		%><br /><br /><%
	}
	conn.close();
%>
</body>
</html>

<%@page import="java.sql.*"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="java.util.LinkedList"%>
<html>
<head>
	<title>Display Database</title>
	<style type="text/css">
		body {
		margin: 4px;
		font-family: Arial;
		font-size: 0.8em;
		}
		.results { 
		 border-collapse: collapse;
		}
		.results tr th {
		 font-size: 0.9em;
		 padding: 0px 5px 0px 5px;
		 background-color: Navy;
		 color: White;
		}
		.results tr td {
		 font-size: 0.8em;
		 padding: 0px 5px 0px 5px;
		}
		.results tr th, .results tr td {
		 border: 1px solid Gray;
		}
	</style>
</head>
<body style="margin-left:150px;">
<a href="/iTrust">Back to iTrust</a> - <a href="displayWikiDatabase.jsp">View wiki format</a>
<h2>FOR TESTING PURPOSES ONLY</h2>
<%
	LinkedList<String> tableList = new LinkedList<String>();

	Connection conn = DAOFactory.getProductionInstance().getConnection();
	ResultSet tableRS = conn.createStatement().executeQuery("show tables");
	while(tableRS.next()){
		String tableName = tableRS.getString(1);
		tableList.add(tableName);
		ResultSet rs = conn.createStatement().executeQuery("SELECT * FROM " + tableName);
		int numCol = rs.getMetaData().getColumnCount();
		%><b><a name="<%=tableName%>"><%=tableName%></b><br /><table class="results"><tr><%
		for(int i=1; i<=numCol;i++){
			%><th><%=rs.getMetaData().getColumnName(i)%></th><%
		}
		%></tr><%
		while(rs.next()){
			%><tr><%
			for(int i=1;i<=numCol;i++){
				try{
					String data = rs.getString(i);
					%><td><%=data%></td><%
				} catch(SQLException e){
					%><td>--Error in date, might be empty--</td><%
				}
			}
			%></tr><%
		}
		%></table><br /><br /><%
	}
	conn.close();
%>

<script>
if (!document.layers)
document.write('<div id="divStayTopLeft" style="position:absolute">')
</script>

<layer id="divStayTopLeft">

<!--EDIT BELOW CODE TO YOUR OWN MENU-->
<table border="1" width="130" cellspacing="0" cellpadding="0">
  <tr>
    <td width="100%" bgcolor="#FFFFCC">
      <p align="center"><b><font size="3">Table of Contents</font></b></td>
  </tr>
  <tr>
    <td width="100%" bgcolor="#FFFFFF">
      <p align="left">
      	   <a href="/iTrust" style="font-size:10px;">< Back to iTrust</a><br/><br/>
<%
	   for(String table : tableList)
	   {
%>      
	       <a href="<%="#"+table %>" style="font-size:10px;"><%=table %></a><br>
<%
	   }
%>
    </td>
  </tr>
</table>
<!--END OF EDIT-->

</layer>


<script type="text/javascript">

/*
Floating Menu script-  Roy Whittle (http://www.javascript-fx.com/)
Script featured on/available at http://www.dynamicdrive.com/
This notice must stay intact for use
*/

//Enter "frombottom" or "fromtop"
var verticalpos="fromtop"

if (!document.layers)
document.write('</div>')

function JSFX_FloatTopDiv()
{
	var startX = 5,
	startY = 5;
	var ns = (navigator.appName.indexOf("Netscape") != -1);
	var d = document;
	function ml(id)
	{
		var el=d.getElementById?d.getElementById(id):d.all?d.all[id]:d.layers[id];
		if(d.layers)el.style=el;
		el.sP=function(x,y){this.style.left=x;this.style.top=y;};
		el.x = startX;
		if (verticalpos=="fromtop")
		el.y = startY;
		else{
		el.y = ns ? pageYOffset + innerHeight : document.body.scrollTop + document.body.clientHeight;
		el.y -= startY;
		}
		return el;
	}
	window.stayTopLeft=function()
	{
		if (verticalpos=="fromtop"){
		var pY = ns ? pageYOffset : document.body.scrollTop;
		ftlObj.y += (pY + startY - ftlObj.y)/8;
		}
		else{
		var pY = ns ? pageYOffset + innerHeight : document.body.scrollTop + document.body.clientHeight;
		ftlObj.y += (pY - startY - ftlObj.y)/8;
		}
		ftlObj.sP(ftlObj.x, ftlObj.y);
		setTimeout("stayTopLeft()", 10);
	}
	ftlObj = ml("divStayTopLeft");
	stayTopLeft();
}
JSFX_FloatTopDiv();
</script>
</body>
</html>


<%@page import="java.sql.*"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO"%>
<%@page import="edu.ncsu.csc.itrust.beans.Email"%>
<%@page import="java.util.List"%>
<html>
<head>
<title>Fake Emails Sent</title>
<style type="text/css">
body {
	margin: 4px;
	font-family: Arial;
	font-size: 0.8em;
}

.results {
	border-collapse: collapse;
}

.results tr th {
	font-size: 0.9em;
	padding: 0px 5px 0px 5px;
	background-color: Navy;
	color: White;
}

.results tr td {
	font-size: 0.8em;
	padding: 0px 5px 0px 5px;
}

.results tr th,.results tr td {
	border: 1px solid Gray;
}
</style>

</head>
<body>
<a href="/iTrust">Back to iTrust</a>
<h2>FOR TESTING PURPOSES ONLY</h2>
<%
List<Email> emails = DAOFactory.getProductionInstance().getFakeEmailDAO().getAllEmails();
%>
<b>Fake Emails</b>
<br />
<table class="results">
	<tr>
		<th>To List</th>
		<th>From</th>
		<th>Subject</th>
		<th>Body</th>
	</tr>
	<%
	for (Email email : emails) {
	%>
	<tr>
		<td><%=email.getToListStr() %></td>
		<td><%=email.getFrom() %></td>
		<td><%=email.getSubject() %></td>
		<td><%=email.getBody() %></td>
	</tr>
	<%
	}
	%>
</table>
<br />
<br />
</body>
</html>

<%@ page isErrorPage="true"%>
<%
if(exception!=null){
	exception.printStackTrace();
	request.getSession().setAttribute("errorMessage",exception.getClass().getSimpleName() + ": "+ exception.getMessage());
}
response.sendRedirect("/iTrust/auth/forwardUser.jsp");
%>
<%@page import="edu.ncsu.csc.itrust.action.ViewPersonnelAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>

<%@page import="java.util.List"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>
<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - View Personnel Details";
%>

<%@include file="/header.jsp"%>

<%
String personnel = request.getParameter("personnel");
int personnelIndex = Integer.parseInt(personnel);
List<PersonnelBean> personnelList = (List<PersonnelBean>) session.getAttribute("personnelList");
PersonnelBean p = personnelList.get(personnelIndex);

ViewPersonnelAction action = new ViewPersonnelAction(prodDAO, loggedInMID.longValue());
%>

<br />
<div align="center">
	<span style="font-weight: bold; font-size: 24px;"><%=p.getFullName()%></span>
</div>
<br />
<div align="center">
	<img src="/iTrust/image/user/<%=p.getMID()%>.png" alt="MID picture">
</div>
<br />
<table class="fTable" align="center">
	<tr>
		<th colspan="2">Personnel Details</th>
	</tr>
	<tr >
		<td class="subHeaderVertical">Specialty:</td>
		<td><%=p.getSpecialty() %></td>
	<tr >
		<td class="subHeaderVertical">Location:</td>
		<td><%=p.getStreetAddress1() +" " + p.getStreetAddress2() + " " + p.getCity() + " " + p.getState() + " " + p.getZip() %></td>
	</tr>
	<tr >
		<td class="subHeaderVertical">Phone:</td>
		<td><%=p.getPhone()%></td>
	</tr>
	<tr >
		<td class="subHeaderVertical">Email:</td>
		<td><%=p.getEmail() %></td>
	</tr>
</table>
<br />


<%@include file="/footer.jsp"%>


<%@include file="/global.jsp" %>
<%@page import="java.util.List" %>
<%@page import="edu.ncsu.csc.itrust.action.SearchUsersAction" %>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean" %>
<%
pageTitle = "iTrust - Please Select a Personnel";
%>

<%@include file="/header.jsp" %>

<h1>Please Select a Personnel</h1>

<%	
String mid = request.getParameter("UID_PERSONNELID");
session.setAttribute("mid", mid);
if (null != mid && !"".equals(mid)) {
	response.sendRedirect(request.getParameter("forward"));
}

String firstName = request.getParameter("FIRST_NAME");
String lastName = request.getParameter("LAST_NAME");
if(firstName == null)
	firstName = "";
if(lastName == null)
	lastName = "";
%>
<table>
<form method="post">
<input type="hidden" name="forward" value="<%=request.getParameter("forward") %>">
	<tr>
		<td><b>Personnel:</b></td>
		<td style="width: 150px; border: 1px solid Gray;">
			<input name="UID_PERSONNELID" value="" type="hidden">
			<input id="NAME_PERSONNELID" name="NAME_PERSONNELID" type="text" value="Select a User" readonly/>
		</td>
		<td>
			<%@include file="/util/getUserFrame.jsp" %>
			<input type="button" onclick="getUser('PERSONNELID');" value="Find User" >
		</td>
	</tr>
	<tr>
		<td align=center colspan=2><input type="submit" value="Select Personnel"></td>
	</tr>
</form>

	<tr> </tr>
	<form id="userSearchForm" action="getPersonnelID.jsp?forward=<%= request.getParameter("forward") %>" method="post">
		<tr>
				<td><b>First Name:</b></td>
				<td style="width: 150px; border: 1px solid Gray;">
					<input name="FIRST_NAME" type="text" value="<%= firstName %>" />
				</td>
		</tr>
		<tr>
				<td><b>Last Name:</b></td>
				<td style="width: 150px; border: 1px solid Gray;">
					<input name="LAST_NAME" type="text" value="<%= lastName %>" />
				</td>
		</tr>
		<tr>
				<td align="center" colspan="2">
					<input type="submit" value="User Search" />
				</td>
		</tr>
	</form>
</table>

<%
	if( (!"".equals(firstName)) || (!"".equals(lastName))){
		SearchUsersAction searchAction = new SearchUsersAction(prodDAO,loggedInMID.longValue());
		out.println("Searching for users named " + firstName + " " + lastName + "<br />");
		List<PersonnelBean> personnel = searchAction.searchForPersonnelWithName(firstName,lastName);
		out.println("Found " + personnel.size() + " Records <br />");
		out.println("<table border='1px'><tr><td width='175px'>MID</td><td width='250px'>First Name</td><td width='250px'>Last Name</td></tr>");
		for(PersonnelBean p : personnel){
%>
<form action="getPersonnelID.jsp?forward=<%= request.getParameter("forward") %>" method="post">
<input type="hidden" name="UID_PERSONNELID" value="<%= p.getMID() %>" />


<%
			out.println("<tr><td><input type='submit' width='100%' value='" + p.getMID() + "' /></form></td><td>" + p.getFirstName() + "</td><td>" + p.getLastName() + "</td></tr>");

		}
		out.println("</table>");
		
	}

%>

<%@include file="/footer.jsp" %>


<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.BeanBuilder"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.action.AddERespAction"%>
<%@page import="edu.ncsu.csc.itrust.enums.Role"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Add ER";
%>

<%@include file="/header.jsp" %>

<%
boolean formIsFilled = (null != request.getParameter("formIsFilled")) && request.getParameter("formIsFilled").equals("true");

if (formIsFilled) {
	//This page is not actually a "page", it just adds a user and forwards.
	PersonnelBean p = new BeanBuilder<PersonnelBean>().build(request.getParameterMap(), new PersonnelBean());
	p.setRole(Role.ER);

	try{
		long newMID = new AddERespAction(prodDAO, loggedInMID.longValue()).add(p);
		session.setAttribute("mid", Long.toString(newMID));
		String fullname;
		String password;
		password = p.getPassword();
		fullname = p.getFullName();
%>
	<div align=center>
		<span class="iTrustMessage">New ER <%=fullname%> succesfully added!</span>
		<br />
		<br />
		<table class="fTable">
			<tr>
				<th colspan=2>New ER Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">MID:</td>
				<td><%=newMID%></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Temporary Password:</td>
				<td><%=password%></td>
			</tr>
		</table>
		<br />Please get this information to <b><%=fullname%></b>! 
		<p>
			<a href = "/iTrust/auth/staff/editPersonnel.jsp">Continue to personnel information.</a>
		</p>
	</div>
<%
		} catch(FormValidationException e){
%>
	<div align=center>
		<span class="iTrustError"><%=e.getMessage() %></span>
	</div>
<%
	}
}
%>

<div align=center>
<p style="width: 50%; text-align:left;">Please enter in the name of the new
Emergency Responder, with a valid email address. If the user does not have an email
address, use the hospital's email address, [insert pre-defined email],
to recover the password.</p>

<form action="addER.jsp" method="post">
<input type="hidden" name="formIsFilled" value="true"><br />
<table class="fTable">
	<tr>
		<th colspan=2>ER Information</th>
	</tr>
	<tr>
		<td class="subHeaderVertical">First name:</td>
		<td><input type="text" name="firstName"></td>
	</tr>
	<tr>
		<td class="subHeaderVertical">Last Name:</td>
		<td><input type="text" name="lastName">
	</tr>
	<tr>
		<td class="subHeaderVertical">Email:</td>
		<td><input type="text" name="email"></td>
	</tr>
</table>
<br />
<input type="submit" style="font-size: 16pt; font-weight: bold;" value="Add personnel">
<br />
</form>
</div>

<%@include file="/footer.jsp" %>

<div class="menu_category">
	<span>Add</span><br />
	<a href="/iTrust/auth/admin/addHCP.jsp">Add HCP</a><br />
	<a href="/iTrust/auth/admin/addER.jsp">Add ER</a><br />
	<a href="/iTrust/auth/admin/addPHA.jsp">Add PHA</a><br />
</div>
<div class="menu_category">
	<span>Edit</span><br />
	<a href="/iTrust/auth/admin/editApptType.jsp">Edit Appointment Types </a><br />
	<a href="/iTrust/auth/admin/hospitalAssignments.jsp">Edit HCP Assignment to Hospital </a><br />
	<a href="/iTrust/auth/admin/editCPTProcedureCodes.jsp">Edit CPT ProcedureCodes </a><br />
	<a href="/iTrust/auth/admin/editNDCodes.jsp">Edit ND Codes </a><br />
	<a href="/iTrust/auth/admin/editICDCodes.jsp">Edit ICD Codes </a><br />
	<a href="/iTrust/auth/admin/editLOINCCodes.jsp">Edit LOINC Codes </a><br />
	<a href="/iTrust/auth/staff/editPersonnel.jsp"> Edit Personnel </a><br />
	<a href="/iTrust/auth/staff/editMyDemographics.jsp"> Edit My Demographics </a><br />
</div>
<div class="menu_category">
	<span>System Reminders</span><br />
	<a href="/iTrust/auth/admin/sendAppointmentReminders.jsp">Send Appointment Reminders</a><br />
	<a href="/iTrust/auth/admin/remindersMessageOutbox.jsp">System Reminder Outbox</a><br />
</div>
<div class="menu_category">
	<span>Other</span><br />
	<a href="/iTrust/auth/admin/hospitalListing.jsp">Manage Hospital Listing </a><br />
	<a href="/iTrust/auth/admin/sessionTimeout.jsp"> Change Global Session Timeout </a><br />
	<a href="/iTrust/auth/surveyResults.jsp">Satisfaction Survey Results</a><br />
</div>
<%@page import="java.net.URLEncoder" %>
<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.beans.DiagnosisBean"%>
<%@page import="edu.ncsu.csc.itrust.action.UpdateICDCodeListAction"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Maintain ICD Codes";
%>

<%@include file="/header.jsp" %>

<%
String headerMessage = "Viewing Current ICD Codes";
	
UpdateICDCodeListAction icdUpdater = new UpdateICDCodeListAction(prodDAO, loggedInMID.longValue());

if (request.getParameter("add") != null || request.getParameter("update") != null) {
	try {
		DiagnosisBean diag = 
			new DiagnosisBean(request.getParameter("code"), request.getParameter("description"), request.getParameter("classification"));
		headerMessage = (request.getParameter("add") != null)?icdUpdater.addICDCode(diag):icdUpdater.updateInformation(diag);
	} catch(FormValidationException e) {
%>
		<div align=center>
			<span class="iTrustError"><%=e.getMessage() %></span>
		</div>
<%
		headerMessage = "Validation Errors";
	}
	
}
String headerColor = (headerMessage.indexOf("Error") > -1) ? "#ffcccc" : "#00CCCC";
%>

<div align=center>
<form name="mainForm" method="post">
<input type="hidden" id="updateID" name="updateID" value="" />
<input type="hidden" id="oldDescrip" name="oldDescrip" value="" />
<script type="text/javascript">
	function fillUpdate(code) {
		document.getElementById("code").value = code;
		document.getElementById("description").value = unescape(document.getElementById("UPD" + code).value);
		if ("yes" == document.getElementById("CLASS"+code).value) {
			document.getElementById("classification").checked = "checked";
		}
		else {
			document.getElementById("classification").checked = "";
		}
		
	}
</script>

<br />

<span class="iTrustMessage"><%=headerMessage %></span>

<br />
<br />

<table class="fTable" align="center">
<tr>
	<th colspan="3">Update ICD Code List</th>
</tr>
<tr class="subHeader">
		<th>Code</th>
		<th>Chronic?</th>
		<th>Description</th>
</tr>
	<tr>
		<td><input type="text" name="code" id="code" size="8" maxlength="8" /></td>
		<td><input type="checkbox" name="classification" id="classification" value="yes" /></td>
		<td><input type="text" name="description" id="description" size="40" maxlength="100" /></td>
	</tr>
</table>
<br />
<input type="submit" name="add" value="Add Code" />
<input type="submit" name="update" value="Update Code" />
<br />
<br />

<table class="fTable" align="center">
	<tr>
		<th colspan="3">Current ICD Codes</th>
	</tr>
	<tr class="subHeader">
		<th>Code</th>
		<th>Chronic?</th>
		<th>Description</th>
	</tr>
<%
	List<DiagnosisBean> codeList = prodDAO.getICDCodesDAO().getAllICDCodes();
	String tempCode = "";
	String tempDescrip = "";
	String tempClass = "";
	String escapedDescrip = "";
	for (DiagnosisBean codeEntry : codeList) {
		tempCode = codeEntry.getICDCode() + "";
		tempDescrip = codeEntry.getDescription();
		tempClass = codeEntry.getClassification();
		escapedDescrip = URLEncoder.encode(tempDescrip, "UTF-8").replaceAll("\\+", "%20");
%>
<tr>
	<td align="center"><%=tempCode%></td>
	<td align="center"><%=tempClass%></td>
	<td align="center">
		<a href="javascript:void(0)" onclick="fillUpdate('<%=tempCode %>')"><%=tempDescrip%></a>
		<input type="hidden" id="UPD<%=tempCode%>" name="UPD<%=tempCode%>" value="<%=escapedDescrip%>" />
		<input type="hidden" id="CLASS<%=tempCode%>" name="CLASS<%=tempCode%>" value="<%=tempClass%>" />
	</td>
</tr>

<% } %>

</table>
</form>
</div>
<br />


<%@include file="/footer.jsp" %>

<%@page import="edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction"%>
<%@page errorPage="/auth/exceptionHandler.jsp" %>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Change Session Timeout";
%>

<%@include file="/header.jsp" %>

<%
	ChangeSessionTimeoutAction action = new ChangeSessionTimeoutAction(prodDAO);
	if("true".equals(request.getParameter("formIsFilled"))){
		try{
			action.changeSessionTimeout(request.getParameter("minutes"));
			%><span>Session Timeout Changed. Changes will take place on re-authentication. </span><%
		} catch(FormValidationException e){
			e.printHTML(pageContext.getOut());
		}
	}
%>
<br /><br />
<form action="sessionTimeout.jsp" method="post">
<input type=hidden name="formIsFilled" value="true">

Change the timeout to  
<input name="minutes" value="<%=action.getSessionTimeout()%>" size="3"> minutes (minimum 1).<br /><br />
<input type=submit value="Change">
</form>
<br /><br />
The global session timeout is the interval of time that an account can remain inactive without having to re-authenticate. 
<br /><br />

<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.ViewMyMessagesAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="java.util.List"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View Reminder Message";
%>

<%@include file="/header.jsp" %>

<%
	ViewMyMessagesAction action = new ViewMyMessagesAction(prodDAO, loggedInMID.longValue());
	MessageBean original = null;

	if (request.getParameter("msg") != null) {
		String msgParameter = request.getParameter("msg");
		int msgIndex = 0;
		try {
			msgIndex = Integer.parseInt(msgParameter);
		} catch (NumberFormatException nfe) {
			response.sendRedirect("remindersMessageOutbox.jsp");
		}
		List<MessageBean> messages = null; 
		if (session.getAttribute("messages") != null) {
			messages = (List<MessageBean>) session.getAttribute("messages");
		} else {
			response.sendRedirect("remindersMessageOutbox.jsp");
		}
		original = (MessageBean)messages.get(msgIndex);
		action.setRead(original);
		session.setAttribute("message", original);
	}
	else {
		response.sendRedirect("messageInbox.jsp");
	}
	
%>
	<div>
		<table width="100%" style="background-color: #DDDDDD;">
			<tr>
				<td><b>To:</b> <%= action.getName(Long.parseLong(original.getSubject().substring(0, original.getSubject().indexOf("::")))) %></td>
			</tr>
			<tr>
				<td><b>Subject:</b> <%= original.getSubject().substring(original.getSubject().indexOf("::")+2) %></td>
			</tr>
			<tr>
				<td><b>Date &amp; Time:</b> <%= original.getSentDate() %></td>
			</tr>
		</table>
	</div>
	
	<table>
		<tr>
			<td colspan="2"><b>Message:</b></td>
		</tr>
		<tr>
			<td colspan="2"><%= original.getBody() %></td>
		</tr>
	</table>


<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>

<%@page import="edu.ncsu.csc.itrust.action.ViewMyMessagesAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Reminders Message Outbox";
%>

<%@include file="/header.jsp" %>

<div align=center>
	<h2>Reminders Message Outbox</h2>
<%
	ViewMyMessagesAction action = new ViewMyMessagesAction(prodDAO, 9000000009L);
	List<MessageBean> messages = null;
	if(request.getParameter("sortby") != null) {
		if(request.getParameter("sortby").equals("name")) {
			if(request.getParameter("sorthow").equals("asce")) {
				messages = action.getAllMyMessagesNameAscending();
			} else {
				messages = action.getAllMyMessagesNameDescending();
			}
		} else if(request.getParameter("sortby").equals("time")) {
			if(request.getParameter("sorthow").equals("asce")) {
				messages = action.getAllMyMessagesTimeAscending();
			} else {
				messages = action.getAllMyMessages();
			}
		}
	}
	else {
		messages = action.getAllMyMessages();
	}
	session.setAttribute("messages", messages);
	if (messages.size() > 0) { %>
	<form method="post" action="remindersMessageOutbox.jsp">	
	<table>
	<tr>
		<td>
			<select name="sortby">
					<option value="time">Sort</option>
					<option value="name">Name</option>
					<option value="time">Time</option>
			</select>
		</td>
		<td>
			<select name="sorthow">
					<option value="desc">Order</option>
					<option value="asce">Ascending</option>
					<option value="desc">Descending</option>
			</select>
		</td>
		<td>
			<input type="submit" value="Sort" />
		</td>
	</tr>
	</table>
	</form>
	<br />
	<table class="fancyTable">
		<tr>
			<th>To</th>
			<th>Subject</th>
			<th>Sent</th>
			<th></th>
		</tr>
<%		int index = 0; %>
<%		for(MessageBean message : messages) { %>
		<tr <%=(message.getRead() == 0)?" style=\"font-weight: bold;\"":"" %>  <%=(index%2 == 1)?"class=\"alt\"":"" %>>
			<td><%= action.getName(Long.parseLong(message.getSubject().substring(0, message.getSubject().indexOf("::")))) %></td>
			<td><%= message.getSubject().substring(message.getSubject().indexOf("::")+2) %></td>
			<td><%= message.getSentDate() %></td>
			<td><a href="viewReminderMessage.jsp?msg=<%= index %>">Read</a></td>
		</tr>
<%			index ++; %>
<%		} %>
	</table>
<%	} else { %>
	<div>
		<i>You have no messages</i>
	</div>
<%	} %>	
	<br />
</div>

<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.net.URLEncoder" %>
<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.*"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.beans.HospitalBean"%>
<%@page import="edu.ncsu.csc.itrust.action.UpdateHospitalListAction"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Maintain Hospital Listing and Assignments";
%>

<%@include file="/header.jsp" %>

<%
	String headerMessage = "Current Hospital Listing";
	
	UpdateHospitalListAction hospUpdater =
		new UpdateHospitalListAction(DAOFactory.getProductionInstance(), loggedInMID);
	
	if (request.getParameter("add") != null || request.getParameter("update") != null) {
		HospitalBean hosp = new BeanBuilder<HospitalBean>().build(request.getParameterMap(), new HospitalBean());
		try {
			headerMessage = (request.getParameter("add") != null)
					? hospUpdater.addHospital(hosp)
					: hospUpdater.updateInformation(hosp);
		} catch(FormValidationException e) {
%>
			<div align=center>
				<span class="iTrustError"><%=e.getMessage() %></span>
			</div>
<%
			headerMessage = "Validation Errors";
		}
	}
	String headerColor = (headerMessage.indexOf("Error") > -1)
			? "#ffcccc"
			: "#00CCCC";
%>

<div align=center>
<form name="mainForm" method="post">
<input type="hidden" id="updateID" name="updateID" value="">
<input type="hidden" id="oldName" name="oldName" value="">
<script type="text/javascript">
	function fillUpdate(id) {
		document.getElementById("hospitalID").value = id;
		document.getElementById("hospitalName").value
			= unescape(document.getElementById("UPD" + id).value);
		document.getElementById("oldDescrip").value
			= unescape(document.getElementById(
					"UPD" + id).value);
	}
</script>

<h3>Hospital Listing</h3>

<span class="iTrustMessage"><%=headerMessage %></span>

<br />
<br />
<table class="fTable" align="center">
	<tr>
		<th colspan="2" >Update Hospital List</th>
	</tr>
	<tr class="subHeader">
		<th>Hospital ID</th>
		<th>Hospital Name</th></tr>
	<tr>
		<td><input type="text" name="hospitalID" id="hospitalID" size="10" maxlength="10" /></td>
		<td><input type="text" name="hospitalName" id="hospitalName"
								size="30" maxlength="100" /></td>
	</tr>
</table>
<br />
<input type="submit" name="add" value="Add Hospital" />
<input type="submit" name="update" value="Update Hospital Information" />
<br />
<br />
<table class="fTable" align="center">
	<tr>
		<th colspan="2">Current Hospitals</th></tr>
	<tr class="subHeader">
		<th>Hospital ID</th>
		<th>Hospital Name</th>
	</tr>
	<%
		List<HospitalBean> hospList =
			DAOFactory.getProductionInstance().getHospitalsDAO().getAllHospitals();
		String tempID = "";
		String tempName = "";
		String escapedName = "";
		for (HospitalBean hospEntry : hospList) {
			tempID = hospEntry.getHospitalID() + "";
			tempName = hospEntry.getHospitalName();
			escapedName = URLEncoder.encode(tempName, "UTF-8").replaceAll("\\+", "%20");
	%>
		<tr>
			<td ><%=tempID %></td>
			<td ><a href="javascript:void(0)" 
					onclick="fillUpdate('<%=tempID %>')"><%=tempName %></a>
				<input type="hidden"
						id="UPD<%=tempID %>"
						name="UPD<%=tempID %>"
						value="<%=escapedName %>">
			</td>
		</tr>
	<% } %>
</table>
</form>
</div>
<br />

<%@include file="/footer.jsp" %>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.beans.ReportRequestBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View All Report Requests";
%>

<%@include file="/header.jsp" %>

<%
PatientDAO patientDAO = prodDAO.getPatientDAO();
PersonnelDAO personnelDAO = prodDAO.getPersonnelDAO();
PersonnelBean personnelb = personnelDAO.getPersonnel(loggedInMID.longValue());

ViewMyReportRequestsAction action = new ViewMyReportRequestsAction(prodDAO, loggedInMID.longValue());
String actionString = request.getParameter("Action");
String idString = request.getParameter("ID");
if (actionString != null && !actionString.equals("")) {
	if (idString != null && !idString.equals("")  && actionString.equals("Approve")) {
		try {
			long ID = Long.parseLong(idString);
			action.approveReportRequest(ID);
%>
	<div align=center>
		<span class="iTrustMessage">Report Request Approved</span>
	</div>
<%
		} catch (Exception e) {
%>
	<div align=center>
		<span class="iTrustError"><%=e.getMessage() %></span>
	</div>
<%
		}
	}
	if (idString != null && !idString.equals("")  && actionString.equals("Confirm")) {
		try {
			long ID = Long.parseLong(idString);
			String comment = request.getParameter("Comment");
			//need validation here - students did it wrong last year and we never fixed it
			action.rejectReportRequest(ID, comment);
%>
	<div align=center>
		<span class="iTrustError">Report Request Rejected</span>
	</div>
<%
		} catch (Exception e) {
%>
	<div align=center>
		<span class="iTrustError"><%=e.getMessage() %></span>
	</div>
<%
		}
	}
}

List<ReportRequestBean> list = action.getAllReportRequests();
%>

<br />

<table align="center" class="fTable">
	<tr>
		<th colspan="10">Report Requests</th>
	</tr>
	<tr class="subHeader">
    		<th>ID</th>
   			<th>Patient</th>
  			<th>Approver</th>
  			<th>Requested Date</th>
  			<th>Approved Date</th>
  			<th>Viewed Date</th>
  			<th>Status</th>
  			<th>Comment</th>
  			<th>Action</th>
  	</tr>
  	<%for (ReportRequestBean bean:list) { 
  		PatientBean patient = patientDAO.getPatient(bean.getPatientMID());
  		PersonnelBean approver = (bean.getApproverMID() == 0L) ? null : personnelDAO.getPersonnel(bean.getApproverMID());
  		%>
			<tr>
				<td ><%=bean.getID()%></td>
				<td ><%=patient.getFullName()%></td>
				<td ><%=(approver == null) ? "" : approver.getFullName()%><!--  --></td>
				<td ><%=bean.getRequestedDateString()%></td>
				<td ><%=bean.getApprovedDateString()%></td>
				<td ><%=bean.getViewedDateString()%></td>
				<td ><%=bean.getStatus()%></td>
				<td ><%=bean.getComment() == null ? "" : bean.getComment()%></td>
				<td ><%if(bean.getStatus().equals(ReportRequestBean.Requested)){ %>
					<a href="viewAllReportRequests.jsp?Action=Approve&ID=<%=bean.getID()%>">Approve</a>
					<a href="viewAllReportRequests.jsp?Action=Reject&ID=<%=bean.getID()%>">Reject</a>
				<%}else{%>&nbsp;<%} %></td>
			</tr>
			<%if (actionString != null && actionString.equals("Reject")) {
				long ID = Long.parseLong(idString);
				if (ID == bean.getID()) {
					%><tr><td colspan=5>Please enter a reason for the rejection and confirm</td>
					<td colspan=4>
					<form action="viewAllReportRequests.jsp" method="post" name="mainForm">
					<input type="hidden" name="Action" value="Confirm"> 
					<input type="hidden" name="ID" value="<%=bean.getID()%>"> 
					<input type="text" name="Comment" size=40>
					<input type="submit" value="Confirm">
					</form>
					</td></tr>
				<%}
			}
		} 
		%>
</table>
<br />


<%@include file="/footer.jsp" %>

<%@page import="java.net.URLEncoder" %>
<%@page import="java.net.URLDecoder" %>
<%@page import="java.util.List"%>

<%@page import="edu.ncsu.csc.itrust.beans.MedicationBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.DrugInteractionBean"%>
<%@page import="edu.ncsu.csc.itrust.action.UpdateNDCodeListAction"%>
<%@page import="edu.ncsu.csc.itrust.action.DrugInteractionAction"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.exception.iTrustException"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Maintain ND Codes";
%>

<%@include file="/header.jsp" %>

<%
	UpdateNDCodeListAction ndUpdater = new UpdateNDCodeListAction(prodDAO, loggedInMID.longValue());
	DrugInteractionAction interactionAction = new DrugInteractionAction(prodDAO, loggedInMID.longValue());
	
	String headerMessage = "Viewing Current ND Codes";
	String code1 = request.getParameter("code1") != null
			? request.getParameter("code1").trim()
			: "";
	String code2 = request.getParameter("code2") != null
			? request.getParameter("code2").trim()
			: "";
	String code = code1 + code2;
	
	if (request.getParameter("add") != null || request.getParameter("update") != null || request.getParameter("delete") != null) {
		try {
			if(request.getParameter("add") != null || request.getParameter("update") != null) {
				MedicationBean med =
					new MedicationBean(code, request.getParameter("description"));
				headerMessage = (request.getParameter("add") != null)
						? ndUpdater.addNDCode(med)
						: ndUpdater.updateInformation(med);
			} else {
				if(request.getParameter("codeToDelete") != null) {
					interactionAction.deleteInteraction(code, request.getParameter("codeToDelete").trim());
					headerMessage = "Interaction deleted successfully";
				} else
					headerMessage = "Interaction does not exist";
			}
		} catch(FormValidationException e) {
%>
			<div align=center>
				<span class="iTrustError"><%=e.getMessage() %></span>
			</div>
<%
			headerMessage = "Validation Errors";
		} catch(iTrustException e) {
%>
			<div align=center>
				<span class="iTrustError"><%=e.getMessage() %></span>
			</div>
<%
			headerMessage = "Validation Errors";
		}
		
	}
			
	String headerColor = (headerMessage.indexOf("Error") > -1)
			? "#ffcccc"
			: "#00CCCC";
%>

<br />
<div align=center>
<form name="mainForm" method="post">
<input type="hidden" id="codeToDelete" name="codeToDelete" value="">
<input type="hidden" id="updateID" name="updateID" value="">
<input type="hidden" id="oldDescrip" name="oldDescrip" value="">
<script type="text/javascript">
	function fillUpdate(code) {
		document.getElementById("code1").value = code.substring(0,5);
		document.getElementById("code2").value = code.substring(5);
		document.getElementById("description").value
			= unescape(document.getElementById("UPD" + code).value);
		document.getElementById("oldDescrip").value
			= unescape(document.getElementById("UPD" + code).value);
		document.getElementById("interactions").innerHTML = "";
		document.getElementById("intDesc").innerHTML = "";
		drugs = document.getElementById("INTDRUG" + code).value.split("\n");
		descs = document.getElementById("INTDESC" + code).value.split("\n");
		for(d in drugs) {
			if(d == drugs.length - 1) break;			
			intLink = document.createElement("a");
			intLink.href = "javascript:void(0)";
			intLink.id = "drugInteraction" + d; 
			
			if(d == 0) {
				addIntDesc(drugs[d], descs[d]);
			}
			
			if(document.all) {
				intLink.attachEvent("onclick", addIntDescIE);
				//Strip newline off end of drug code
				drugs[d] = drugs[d].substring(0, drugs[d].length-1);
			} else {
				intLink.setAttribute("onclick", "addIntDesc('" + drugs[d] + "', '" + descs[d] + "');");
			}

			var intText = drugs[d];	
			if(document.getElementById("UPD" + intText).value != "" && document.getElementById("UPD" + intText).value != "undefined") {
				intText = intText + " " + unescape(document.getElementById("UPD" + drugs[d]).value);
			}
			intText = intText.substring(0,5) + "-" + intText.substring(5);
			
			intLinkText = document.createTextNode(intText);
			intLink.appendChild(intLinkText);
			document.getElementById("interactions").appendChild(intLink);
			document.getElementById("interactions").appendChild(document.createElement('br'));
			
		}
		if(drugs.length <= 1) {
			document.getElementById("interactions").innerHTML = "No Interactions";
			if(document.getElementById("delete").style != null) {
				document.getElementById("delete").style.visibility = "hidden";
			}
		}
			
		
	}

	function addIntDescIE() {
		linkID = event.srcElement.id;
		linkID = linkID.substring(15); //Get number after "drugInteraction"
		linkNumber = eval(linkID);
		addIntDesc(drugs[linkNumber], descs[linkNumber]);
	}

	function addIntDesc(code, desc) {
		document.getElementById("intDesc").innerHTML = desc;
		document.getElementById("delete").style.visibility = ""; 
		document.getElementById("codeToDelete").value = code;
	}
</script>


<span class="iTrustMessage"><%=headerMessage %></span>

<br />
<br />

<table class="fTable" align="center">
	<tr>
		<th colspan="3">Update ND Code List</th>
	</tr>
	<tr class="subHeader">
		<th>Code</th>
		<th>Description</th>
	</tr>
	<tr>
		<td style="padding-right: 10px;">
			<input  type="text"
					id="code1"
					name="code1"
					size="5"
					maxlength="5"
			/>-<input type="text"
					id="code2"
					name="code2"
					size="4"
					maxlength="4"/>
		</td>
		<td>
			<input  type="text"
					id="description"
					name="description"
					size="40"
					maxlength="50" />
		</td>
	</tr>
	<tr class="subHeader">
		<th>Interaction</th>
		<th>Description</th>
	</tr>
	<tr>
		<td style="padding-right: 10px;" id="interactions">

		</td>
		<td>
			<div id="intDesc"></div>
			<div align="center"><input type="submit" value="Delete Interaction" name="delete" id="delete" style="visibility: hidden"/></div>
		</td>	
	</tr>
</table>
<br />
<input type="submit" name="add" value="Add Code" />
<input type="submit" name="update" value="Update Code" />

<br />
<br />

<table class="fTable" align="center">
	<tr>
		<th colspan="2">Current NDCs</th>
	</tr>
	<tr class="subHeader">
		<th>Code</th>
		<th>Description</th>
	</tr>
	<%
		List<MedicationBean> medList = prodDAO.getNDCodesDAO().getAllNDCodes();
		List<DrugInteractionBean> interactionList;
		String tempCode = "";
		String tempDescrip = "";
		String escapedDescrip = "";
		String intDrugsString = "";
		String intDescsString = "";
		
		for (MedicationBean medEntry : medList) {
			tempCode = medEntry.getNDCode();
			tempDescrip = medEntry.getDescription();
			escapedDescrip = URLEncoder.encode(tempDescrip, "UTF-8").replaceAll("\\+", "%20");
			interactionList = interactionAction.getInteractions(tempCode);
			intDrugsString = "";
			intDescsString = "";
			for(DrugInteractionBean b : interactionList) {
				if(tempCode.equals(b.getFirstDrug())) intDrugsString += b.getSecondDrug() + "\n";
				if(tempCode.equals(b.getSecondDrug())) intDrugsString += b.getFirstDrug() + "\n";
				intDescsString += b.getDescription() + "\n";
			}
			//intDrugsString = URLEncoder.encode(intDrugsString, "UTF-8").replaceAll("\\+", "%20");
			//intDescsString = URLEncoder.encode(intDescsString, "UTF-8").replaceAll("\\+", "%20");
	%>
		<tr>
			<td><%=5 > tempCode.length() ? tempCode : tempCode.substring(0, 5)
				%>-<%=5 > tempCode.length() ? "" : tempCode.substring(5) %>
			</td>
			<td><a href="javascript:void(0)"
					onclick="fillUpdate('<%=tempCode %>')"
						><%=tempDescrip %></a>
				<input type="hidden"
						id="UPD<%=tempCode %>"
						name="UPD<%=tempCode %>"
						value="<%=escapedDescrip %>">
				<input type="hidden"
						id="INTDRUG<%=tempCode %>"
						name="INTDRUG<%=tempCode %>"
						value="<%=intDrugsString %>">
				<input type="hidden"
						id="INTDESC<%=tempCode %>"
						name="INTDESC<%=tempCode %>"
						value="<%=intDescsString %>">
			</td>
		</tr>
	<% } %>
</table>
</form>
<br />
<br />
<a href="editNDCInteractions.jsp">Edit Interactions</a>
</div>
<br />

<%@include file="/footer.jsp" %>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.BeanBuilder"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.action.AddHCPAction"%>
<%@page import="edu.ncsu.csc.itrust.enums.Role"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Add HCP";
%>

<%@include file="/header.jsp" %>

<%
	boolean formIsFilled = request.getParameter("formIsFilled") != null
	&& request.getParameter("formIsFilled").equals("true");

	if (formIsFilled) {
		
		//This page is not actually a "page", it just adds a user and forwards.
		PersonnelBean p = new BeanBuilder<PersonnelBean>().build(request.getParameterMap(), new PersonnelBean());
		p.setRole(Role.HCP);
		try{
			long newMID = new AddHCPAction(prodDAO, loggedInMID.longValue()).add(p);
			session.setAttribute("mid", Long.toString(newMID));
			String fullname;
			String password;
			password = p.getPassword();
			fullname = p.getFullName();
%>
	<div align=center>
		<span class="iTrustMessage">New HCP <%=fullname%> succesfully added!</span>
		<br />
		<br />
		<table class="fTable">
			<tr>
				<th colspan=2>New HCP Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">MID:</td>
				<td><%=newMID%></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Temporary Password:</td>
				<td><%=password%></td>
			</tr>
		</table>
		<br />Please get this information to <b><%=fullname%></b>! 
		<p>
			<a href = "/iTrust/auth/staff/editPersonnel.jsp">Continue to personnel information.</a>
		</p>
	</div>
<%
		} catch(FormValidationException e){
%>
	<div align=center>
		<span class="iTrustError"><%=e.getMessage() %></span>
	</div>
<%
		}
	}
%>


<div align=center>
<p style="width: 50%; text-align:left;">Please enter in the name of the new
HCP, with a valid email address. If the user does not have an email
address, use the hospital's email address, [insert pre-defined email],
to recover the password.</p>

<form action="addHCP.jsp" method="post">
<input type="hidden" name="formIsFilled" value="true"><br />
<table class="fTable">
	<tr>
		<th colspan=2>UAP Information</th>
	</tr>
	<tr>
		<td class="subHeaderVertical">First name:</td>
		<td><input type="text" name="firstName"></td>
	</tr>
	<tr>
		<td class="subHeaderVertical">Last Name:</td>
		<td><input type="text" name="lastName">
	</tr>
	<tr>
		<td class="subHeaderVertical">Email:</td>
		<td><input type="text" name="email"></td>
	</tr>
</table>
<br />
<input type="submit" style="font-size: 16pt; font-weight: bold;" value="Add personnel">
<br />
</form>
</div>

<%@include file="/footer.jsp" %>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="edu.ncsu.csc.itrust.HtmlEncoder" %>
<%@page import="edu.ncsu.csc.itrust.beans.HospitalBean"%>
<%@page import="edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction"%>
<%@page import="java.util.List"%>
<%@page import="java.net.URLEncoder" %>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Hospital Staffing Assignments";
%>

<%@include file="/header.jsp" %>

<%
	String pidString = (String)session.getAttribute("mid");
	/* Require a Personnel ID first */

	if (null == pidString || "".equals(pidString)){ 
  	 	response.sendRedirect("../getPersonnelID.jsp?forward=admin/hospitalAssignments.jsp");
 	  	return;
	}
	else {
		//session.removeAttribute("mid");
	}


	
	/* Bad patient ID gets you booted to error page */
	ManageHospitalAssignmentsAction hosAssignManager =
		new ManageHospitalAssignmentsAction(prodDAO,loggedInMID.longValue());
	long pid  = hosAssignManager.checkHCPID(pidString);

	/* Now take care of updating information */
	String action = "";
	if (null != request.getParameter("action"))
	{
		action = request.getParameter("action");
	}
	if (action.equals("assgn"))
	{
		hosAssignManager.assignHCPToHospital(pid + "", request.getParameter("id"));
		%><span >HCP has been assigned. <%=request.getParameter("id") %><br /></span><%
	}
	else if (action.equals("unass"))
	{
		hosAssignManager.removeHCPAssignmentToHospital(pid + "", request.getParameter("id"));
		%><span >HCP has been unassigned. <%=request.getParameter("id") %><br /></span><%
	}
	
	
%>
<br />
<div align=center>
<table>
	<tr>
	<td valign=top>
	<table class="fTable">
		<tr>
			<th colspan=3>Assigned Hospitals</th>
		</tr>
		<tr class="subHeader">
			<th>Hospital ID</th>
			<th>Hospital Name</th>
			<th>Assignment</th>
		</tr>
		<%
		List<HospitalBean> assignedList = hosAssignManager.getAssignedHospitals(pidString);
		String tempID = "";
		String tempName = "";
		String escapedName = "";
		for (HospitalBean assigned : assignedList) {
			tempID = assigned.getHospitalID();
			tempName = assigned.getHospitalName();
			escapedName = URLEncoder.encode(tempName, "UTF-8").replaceAll("\\+", "%20");
		%><tr>
			<td><%=tempID %></td>
			<td><%=HtmlEncoder.encode(tempName) %></td>
			<td><a href="hospitalAssignments.jsp?pid=<%=pidString %>&id=<%=tempID %>&action=unass" >Unassign</a></td>
		</tr>
		<%} %>
	</table>
	</td>
	<td valign=top>
	<table class="fTable">
		<tr>
			<th colspan=3>Available Hospitals</th>
		</tr>
		<tr class="subHeader">
			<th>Hospital ID</th>
			<th>Hospital Name</th>
			<th>Assignment</th>
		</tr>
		<%
		List<HospitalBean> availableList = hosAssignManager.getAvailableHospitals(pidString);
		tempID = "";
		tempName = "";
		escapedName = "";
		
		for (HospitalBean assigned : availableList) {
			tempID = assigned.getHospitalID();
			tempName = assigned.getHospitalName();
			escapedName = URLEncoder.encode(tempName, "UTF-8").replaceAll("\\+", "%20");
		%><tr>
			<td><%=tempID %></td>
			<td><%=HtmlEncoder.encode(tempName) %></td>
			<td><a href="hospitalAssignments.jsp?pid=<%=pidString%>&id=<%=tempID%>&action=assgn">Assign</a></td>
		</tr>
		<%} %>
	</table>
    </td></tr>
</table>
</div>
<br />

<%@include file="/footer.jsp" %>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.BeanBuilder"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.action.AddPHAAction"%>
<%@page import="edu.ncsu.csc.itrust.enums.Role"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Add PHA";
%>

<%@include file="/header.jsp" %>

<%
	boolean formIsFilled = request.getParameter("formIsFilled") != null
	&& request.getParameter("formIsFilled").equals("true");

	if (formIsFilled) {
		
		//This page is not actually a "page", it just adds a user and forwards.
		PersonnelBean p = new BeanBuilder<PersonnelBean>().build(request.getParameterMap(), new PersonnelBean());
		p.setRole(Role.HCP);
		try{
			long newMID = new AddPHAAction(prodDAO, loggedInMID.longValue()).add(p);
			session.setAttribute("mid", Long.toString(newMID));
			String fullname;
			String password;
			password = p.getPassword();
			fullname = p.getFullName();
%>
	<div align=center>
		<span class="iTrustMessage">New PHA <%=fullname%> succesfully added!</span>
		<br />
		<br />
		<table class="fTable">
			<tr>
				<th colspan=2>New PHA Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">MID:</td>
				<td><%=newMID%></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Temporary Password:</td>
				<td><%=password%></td>
			</tr>
		</table>
		<br />Please get this information to <b><%=fullname%></b>! 
		<p>
			<a href = "/iTrust/auth/staff/editPersonnel.jsp">Continue to personnel information.</a>
		</p>
	</div>
<%
		} catch(FormValidationException e){
%>
	<div align=center>
		<span class="iTrustError"><%=e.getMessage() %></span>
	</div>
<%
		}
	}
%>


<div align=center>
<p style="width: 50%; text-align:left;">Please enter in the name of the new
PHA, with a valid email address. If the user does not have an email
address, use the hospital's email address, [insert pre-defined email],
to recover the password.</p>

<form action="addPHA.jsp" method="post">
<input type="hidden" name="formIsFilled" value="true"><br />
<table class="fTable">
	<tr>
		<th colspan=2>PHA- Information</th>
	</tr>
	<tr>
		<td class="subHeaderVertical">First name:</td>
		<td><input type="text" name="firstName"></td>
	</tr>
	<tr>
		<td class="subHeaderVertical">Last Name:</td>
		<td><input type="text" name="lastName">
	</tr>
	<tr>
		<td class="subHeaderVertical">Email:</td>
		<td><input type="text" name="email"></td>
	</tr>
</table>
<br />
<input type="submit" style="font-size: 16pt; font-weight: bold;" value="Add personnel">
<br />
</form>
</div>

<%@include file="/footer.jsp" %>

<%@page import="java.net.URLEncoder" %>
<%@page import="java.net.URLDecoder" %>
<%@page import="java.util.List"%>

<%@page import="edu.ncsu.csc.itrust.action.DrugInteractionAction"%>
<%@page import="edu.ncsu.csc.itrust.exception.iTrustException"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.beans.MedicationBean"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Edit ND Code Interactions";
%>

<%@include file="/header.jsp" %>

<%
	
	String headerMessage = "Select ND Codes with Interaction";
	String drug1 = "";
	String drug2 = "";
	if(request.getParameter("drug1") != null && request.getParameter("drug2") != null) {
		drug1 = request.getParameter("drug1").split(" ")[0];
		drug1 = drug1.replace("-", "");
		drug2 = request.getParameter("drug2").split(" ")[0];
		drug2 = drug2.replace("-", "");
	}
	
	if (request.getParameter("add") != null) {
		try {
			DrugInteractionAction interaction = new DrugInteractionAction(prodDAO, loggedInMID.longValue());
			headerMessage = interaction.reportInteraction(drug1, drug2, request.getParameter("description"));
		} catch(iTrustException e) {
%>
			<div align=center>
				<span class="iTrustError"><%=e.getMessage() %></span>
			</div>
<%
		} catch(FormValidationException e) {
%>
			<div align=center>
				<span class="iTrustError"><%=e.getMessage() %></span>
			</div>
<%
		}
		
	}
			
	String headerColor = (headerMessage.indexOf("Error") > -1)
			? "#ffcccc"
			: "#00CCCC";
%>

<br />
<div align=center>
<form name="mainForm" method="post">
<span class="iTrustMessage"><%=headerMessage %></span>

<br />
<br />


<table cellpadding="10">
<tr><td>
<select name="drug1">
	<%
		List<MedicationBean> medList = prodDAO.getNDCodesDAO().getAllNDCodes();
		String tempCode = "";
		String tempDescrip = "";
		String escapedDescrip = "";
		for (MedicationBean medEntry : medList) {
			tempCode = medEntry.getNDCode();
			tempDescrip = medEntry.getDescription();
			escapedDescrip = URLEncoder.encode(tempDescrip, "UTF-8").replaceAll("\\+", "%20");
	%>

			<option><%=5 > tempCode.length() ? tempCode : tempCode.substring(0, 5)
				%>-<%=5 > tempCode.length() ? "" : tempCode.substring(5) %>
				<%=tempDescrip %>
			</option>

	<% } %>
	
</select></td><td>
<select name="drug2">
	<%
		for (MedicationBean medEntry : medList) {
			tempCode = medEntry.getNDCode();
			tempDescrip = medEntry.getDescription();
			escapedDescrip = URLEncoder.encode(tempDescrip, "UTF-8").replaceAll("\\+", "%20");
	%>

			<option><%=5 > tempCode.length() ? tempCode : tempCode.substring(0, 5)
				%>-<%=5 > tempCode.length() ? "" : tempCode.substring(5) %>
				<%=tempDescrip %>
			</option>

	<% } %>
	
</select>
</td></tr>
</table>
<b>Description: </b><input  type="text"
                                        id="description"
                                        name="description"
                                        size="40"
                                        maxlength="500" />


<br />
<br />
<input type="submit" name="add" value="Add Interaction">
<input type="button" onclick="location.href='/iTrust/auth/admin/editNDCodes.jsp'" value="Back" name="back" id="back"/>
</form>
</div>
<br />

<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.beans.ProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.HtmlEncoder"%>
<%@page import="java.net.URLEncoder" %>
<%@page import="java.util.List"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Maintain CPT Codes";
%>

<%@include file="/header.jsp" %>

<%
	String headerMessage = "Viewing Current CPT Procedure Codes";
	
	UpdateCPTCodeListAction cptUpdater = new UpdateCPTCodeListAction(prodDAO, loggedInMID.longValue());
	String attribute = null;
	if (request.getParameter("add") != null || request.getParameter("update") != null) {
		try {
			if (null != request.getParameter("attribute")) {
				attribute = new String("immunization");
			}
			
			ProcedureBean proc = new ProcedureBean(request.getParameter("code"), request.getParameter("description"), attribute );
			headerMessage = (request.getParameter("add") != null) ? cptUpdater.addCPTCode(proc)	: cptUpdater.updateInformation(proc);
		} 
		catch(FormValidationException e) {
%>
	<div align=center>
		<span class="iTrustError"><%=e.getMessage() %></span>
	</div>
<%
			headerMessage = "Validation Errors";
		}
		
	}
	String headerColor = (headerMessage.indexOf("Error") > -1)
			? "#ffcccc"
			: "#00CCCC";
%>
<script type="text/javascript">

function fillUpdate(code) {
	document.getElementById("code").value = code;
	document.getElementById("description").value = unescape(document.getElementById("UPD" + code).value);
	document.getElementById("oldDescrip").value = unescape(document.getElementById("UPD" + code).value);
	if ("immunization" == document.getElementById("CLASS"+code).value) {
		document.getElementById("attribute").checked = "checked";
	}
	else {
		document.getElementById("attribute").checked = "";
	}
}
</script>

<div align="center">
<br />
<span class="iTrustMessage"><%=headerMessage %></span>
<br />
<br />

<form name="mainForm" action="editCPTProcedureCodes.jsp" method="post">
	<input type="hidden" id="updateID" name="updateID" value="" />
	<input type="hidden" id="oldDescrip" name="oldDescrip" value="" />
<table class="fTable" align="center">
	<tr>
		<td colspan="3">Update CPT Procedure Code List</td>
	</tr>
	<tr class="subHeader">
		<td>Code</td>
		<td>Description</td>
		<td>Immunization?</td>
	</tr>
	<tr>
		<td><input type="text" name="code" id="code" size="5" maxlength="5" /></td>
		<td><input type="text" name="description" id="description" size="60" maxlength="256" /></td>
		<td><input type="checkbox" name="attribute" id="attribute" value="yes"/></td> 
	</tr>
</table>
<input type="submit" name="add" value="Add Code" />
<input type="submit" name="update" value="Update Code" />

<br />
<br />
<table class="fTable" align="center">
	<tr>
		<th colspan="3">Current CPT Procedure Codes</th>
	</tr>
	<tr class="subHeader">
		<td>Code</td>
		<td>Description</td>
		<td>Immunization?</td>
	</tr>
	<%
		List<ProcedureBean> codeList = prodDAO.getCPTCodesDAO().getAllCPTCodes();
		String tempCode = "";
		String tempDescrip = "";
		String escapedDescrip = "";
		String tempClass = "";
		for (ProcedureBean codeEntry : codeList) {
			tempCode = codeEntry.getCPTCode();
			tempDescrip = codeEntry.getDescription();
			tempClass = codeEntry.getAttribute();
			escapedDescrip = URLEncoder.encode(tempDescrip, "UTF-8").replaceAll("\\+", "%20");
	%>
		<tr>
			<td><%=tempCode %></td>
			<td><a href="javascript:void(0)" onclick="fillUpdate('<%=tempCode %>')"><%=HtmlEncoder.encode(tempDescrip)%></a>
				<input type="hidden" id="UPD<%=tempCode %>"	name="UPD<%=tempCode %>" value="<%=escapedDescrip %>" />
				<input type="hidden" id="CLASS<%=tempCode%>" name="CLASS<%=tempCode%>" value="<%=tempClass%>" />		
			</td>
			<td><%=("immunization".equals(codeEntry.getAttribute()))?"Yes":"No"%></td>
		</tr>
	<% } %>
</table>
</form>
</div>
<br />


<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.TransactionDAO"%>
<%@page import="edu.ncsu.csc.itrust.enums.TransactionType"%>
<%@page import="edu.ncsu.csc.itrust.action.SendMessageAction"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyApptsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.ApptBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="java.util.Calendar"%>
<%@page import="java.util.List"%>
<%@page import="java.util.Date"%>
<%@page import="java.text.DateFormat"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="java.sql.Timestamp"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Send Appointment Reminders";
%>

<%@include file="/header.jsp" %>

<%
	String headerMessage = "";
	int messagesSent = -1;
	boolean error = false;
	if(request.getParameter("submit") != null) {
		if(request.getParameter("threshold") != null) {
			int days = 0;
			try {
				days = Integer.parseInt(request.getParameter("threshold"));
			} catch(NumberFormatException e) {
				headerMessage = "Please enter a number into the threshold field.";
				error = true;
			}
			
			SendMessageAction action = new SendMessageAction(prodDAO, 9000000009L);
			MessageBean toSend = new MessageBean();
			DateFormat format = new SimpleDateFormat("hh:mm a, MM-dd-yyyy");
			
			Calendar current = Calendar.getInstance();
			
			Calendar end = Calendar.getInstance();
			end.add(Calendar.DAY_OF_MONTH, days);
			end.set(Calendar.HOUR_OF_DAY, 23);
			end.set(Calendar.MINUTE, 59);
			end.set(Calendar.SECOND, 59);
			
			Calendar subject = Calendar.getInstance();
			
			ViewMyApptsAction apptAction = new ViewMyApptsAction(prodDAO, loggedInMID.longValue());
			
			List<ApptBean> apList = apptAction.getAllAppts();
			
			messagesSent = 0;
			
			for(ApptBean a : apList) {
				if(a.getDate().after(current.getTime()) && a.getDate().before(end.getTime())) {
					toSend.setFrom(9000000009L);
					subject.setTimeInMillis(a.getDate().getTime());
					int difference = subject.get(Calendar.DAY_OF_MONTH)-current.get(Calendar.DAY_OF_MONTH);
					if(subject.get(Calendar.MONTH)>current.get(Calendar.MONTH)) {
						difference = current.getActualMaximum(Calendar.DAY_OF_MONTH)-current.get(Calendar.DAY_OF_MONTH)+subject.get(Calendar.DAY_OF_MONTH);
					}
					toSend.setSubject("Reminder: upcoming appointment in " + difference + " day(s)");
					toSend.setSentDate(new Timestamp(current.getTimeInMillis()));
					toSend.setTo(a.getPatient());
					Date d = new Date(a.getDate().getTime());
					toSend.setBody("You have an appointment on "+ format.format(d) + " with Dr. " + action.getPersonnelName(a.getHcp()) + ".");
					action.sendMessage(toSend);
					toSend.setTo(9000000009L);
					toSend.setSubject(a.getPatient()+"::"+toSend.getSubject());
					action.sendMessage(toSend);
					messagesSent++;
				}
			}
			
			//log the messages
			TransactionDAO transDAO = prodDAO.getTransactionDAO();
			transDAO.logTransaction(TransactionType.SEND_REMINDERS, loggedInMID);
		}
	}
%>

<div align="center">
	<h2>Send Appointment Reminders</h2>
	<%=error?"<span class=\"iTrustMessage\">"+headerMessage+"</span><br /><br />":"" %>
	<%=messagesSent!=-1?"<span class=\"iTrustMessage\">"+messagesSent+" message(s) sent.</span><br /><br />":"" %>
	<form method="post" action="sendAppointmentReminders.jsp">
		<label for="threshold" >Enter reminder threshold:</label>
		<input type="text" name="threshold" id="threshold" /><span> days</span>
		<br />
		<br />
		<input type="submit" name="submit" value="Submit" />
	</form>
</div>

<%@include file="/footer.jsp" %>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Admin Home";
%>

<%@include file="/header.jsp" %>

<div style="text-align: center; height: 300px;">
	<h2>Welcome <%=userName %>!</h2>
</div>

<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.beans.LOINCbean"%>
<%--@page import="edu.ncsu.csc.itrust.action.UpdateLabProcListAction"--%>
<%@page import="edu.ncsu.csc.itrust.action.UpdateLOINCListAction"%> 
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Maintain LOINC Codes";
%>

<%@include file="/header.jsp" %>

<%
	String headerMessage = "Viewing Current LOINC Codes";
	
/*UpdateLabProcListAction icdUpdater =
		new UpdateLabProcListAction(prodDAO, loggedInMID.longValue());*/
UpdateLOINCListAction icdUpdater =
		new UpdateLOINCListAction(prodDAO, loggedInMID.longValue());		
	
	if (request.getParameter("add") != null || request.getParameter("update") != null) {
		try {
			LOINCbean diag =
				new LOINCbean();
				diag.setLabProcedureCode(request.getParameter("code"));
			diag.setComponent(request.getParameter("comp"));
			diag.setKindOfProperty(request.getParameter("kop"));
			diag.setTimeAspect(request.getParameter("time"));
			diag.setSystem(request.getParameter("system"));
			diag.setScaleType(request.getParameter("scale"));
			diag.setMethodType(request.getParameter("method"));
			
			headerMessage = (request.getParameter("add") != null)
					? icdUpdater.add(diag)
					: icdUpdater.updateInformation(diag);
		} catch(FormValidationException e) {
%>
			<div align=center>
				<span class="iTrustError"><%=e.getMessage() %></span>
			</div>
<%
			headerMessage = "Validation Errors";
		}
		
	}
	String headerColor = (headerMessage.indexOf("Error") > -1)
			? "#ffcccc"
			: "#00CCCC";
%>

<div align=center>
<form name="mainForm" method="post">
<input type="hidden" id="updateID" name="updateID" value="">
<input type="hidden" id="oldDescrip" name="oldDescrip" value="">

<script type="text/javascript">
	function fillUpdate(comp) {
		document.getElementById("code").value = comp;
				
	}
	function fillUpdate2(comp) {
		document.getElementById("comp").value = comp;
	}
	function fillUpdate3(comp) {
		document.getElementById("kop").value = comp;
	}
	function fillUpdate4(comp) {
		document.getElementById("time").value = comp;
	}
	function fillUpdate5(comp) {
		document.getElementById("system").value = comp;
	}
	function fillUpdate6(comp) {
		document.getElementById("scale").value = comp;
	}
	function fillUpdate7(comp) {
		document.getElementById("method").value = comp;
					
	}
	
	
</script>

<br />

<span class="iTrustMessage"><%=headerMessage %></span>
<br />

<br />
<table class="fTable" align="center">
	<tr>
		<th colspan="4">Update LOINC Code List</th>
	</tr>
	<tr class="subHeader">
		<th colspan=3 >Code</th>
	</tr>
	<tr>
		<td align="center" colspan=3>
			<input type="text" name="code" id="code" size="7" maxlength="7" />
		</td>
	</tr>
	<tr class="subHeader">
		<th>Component</th>
		<th>Kind Of Property</th>
		<th>Time Aspect</th>
	</tr>
	<tr>
		<td><input type="text" name="comp" id="comp"
								size="40" maxlength="100" /></td>
		<td><input type="text" name="kop" id="kop"
								size="40" maxlength="100" /></td>
		<td><input type="text" name="time" id="time"
								size="40" maxlength="100" /></td>
	</tr>
	<tr class="subHeader">		
		<th>System</th>
		<th>Scale Type</th>
		<th>Method Type</th>
	</tr>
<tr>
		<td><input type="text" name="system" id="system"
								size="40" maxlength="100" /></td>
		<td><input type="text" name="scale" id="scale"
								size="40" maxlength="100" /></td>
		<td><input type="text" name="method" id="method"
								size="40" maxlength="100" /></td>
								
	</tr>
</table>
<span style="font-size:14px;">NOTE: When updating, please enter original information in fields you do not want to change</span>
<br />
<br />
<input type="submit" name="add" value="Add Code" />
<input type="submit" name="update" value="Update Code" />
<br />
<br />

<table class="fTable" align="center">
	<tr>
		<th colspan="7">Current LOINC Codes</th>
	</tr>
	<tr class="subHeader">
		<td>Code</td>
		<td>Component</td>
		<td>Kind Of Property</td>
		<td>Time Aspect</td>
		<td>System</td>
		<td>Scale Type</td>
		<td>Method Type</td>
	</tr>
	<%
		List<LOINCbean> codeList = prodDAO.getLOINCDAO().getAllLOINC();
		String tempCode = "";
		String tempcomp = "";
		String tempkop = "";
		String temptime = "";
		String tempsystem="";
		String tempscale = "";
		String tempmethod="";

		
		for (LOINCbean codeEntry : codeList) {
			tempCode = codeEntry.getLabProcedureCode();
			tempcomp = codeEntry.getComponent();
			tempkop = codeEntry.getKindOfProperty();
			temptime = codeEntry.getTimeAspect();
			tempsystem = codeEntry.getSystem();
			tempscale = codeEntry.getScaleType();
			tempmethod = codeEntry.getMethodType();
			

	%>
		<tr>
			<td ><a href="javascript:void(0)" 
					onclick="fillUpdate('<%=tempCode%>')"><%=tempCode%></a>
			<td ><a href="javascript:void(0)" 
					onclick="fillUpdate2('<%=tempcomp%>')"><%=tempcomp%></a>
			<td ><a href="javascript:void(0)" 
					onclick="fillUpdate3('<%=tempkop%>')"><%=tempkop%></a>
			<td ><a href="javascript:void(0)" 
					onclick="fillUpdate4('<%=temptime%>')"><%=temptime%></a>
			<td ><a href="javascript:void(0)" 
					onclick="fillUpdate5('<%=tempsystem%>')"><%=tempsystem%></a>
			<td nowrap><a href="javascript:void(0)" 
					onclick="fillUpdate6('<%=tempscale%>')"><%=tempscale%></a>
			<td nowrap><a href="javascript:void(0)" 
					onclick="fillUpdate7('<%=tempmethod%>')"><%=tempmethod%></a>
		</tr>
	<% } %>
</table>
</form>
</div>
<br />


<%@include file="/footer.jsp" %>

<%@ page import="java.sql.*, edu.ncsu.csc.itrust.*, edu.ncsu.csc.itrust.users.*, edu.ncsu.csc.itrust.beans.*"  %>
<%@ page import="java.util.*, com.lowagie.text.html.HtmlEncoder" %>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <title>iTrust - Visit Trends</title>
	<%@ include file="/resources/head.jsp" %>
</head>
<body>

<%			

				
			Calendar today=Calendar.getInstance();
			int curMonth=today.get(Calendar.MONTH);
			int curYear=today.get(Calendar.YEAR);
				
			String startMonth = request.getParameter("startMonth");
			String startYear = request.getParameter("startYear");
			String endMonth = request.getParameter("endMonth");
			String endYear = request.getParameter("endYear");
			boolean isPostBack = request.getParameter("action") != null;
			
			String DateEndStr = endYear+"-"+endMonth;
			String DateStartStr = startYear+"-"+startMonth;
			String firstVisit=Records.getEarliestVisit();
if((null == firstVisit) || ("".equals(firstVisit))) {
	out.println("<br /><br />");
	out.println("<h3 style=\"text-align: center;\">There Are NO Visits Registered</h3>");
	out.println("<br /><br />");
}
else {
			String firstMonth=firstVisit.substring(5,7);
			String firstYear=firstVisit.substring(0,4);
			
			String[] months={"January", "February", "March", "April", "May",
							 "June", "July", "August", "September",
							  "October", "November", "December"};
			
%>			

<form method="post" id="formMain">
	<script type="text/javascript" src="Resources/Scripts/DatePicker.js"></script>

	<table align="center">
		<tr>
			<th colspan="2" style="background-color: Silver;">
				Visit Trends
			</th>
		</tr>
		<tr>
			<td colspan="2" style="text-align: center; border: solid 1px Silver;">
				Select a starting and ending month and click GenerateReport.		
			</td>
		</tr>
		<tr style="background-color:#ffcccc">
			<td style="text-align: right;">
				Starting Month:
			</td>
			<td>
				<select name="startMonth">
					<% out.println("<option value="+firstMonth+">"+months[Integer.parseInt(firstMonth)-1]+"</option>"); %>
					<option value="01">January</option>
					<option value="02">February</option>
					<option value="03">March</option>
					<option value="04">April</option>
					<option value="05">May</option>
					<option value="06">June</option>
					<option value="07">July</option>
					<option value="08">August</option>
					<option value="09">September</option>
					<option value="10">October</option>
					<option value="11">November</option>
					<option value="12">December</option>
				</select><br />
				<select name="startYear">
					<% out.println("<option value="+firstYear+">"+firstYear+"</option>"); %>
					<% for (int cnt=curYear;cnt+1>Integer.parseInt(firstYear);cnt--) 
						out.println("<option value="+cnt+">"+cnt+"</option>"); %>
				</select>
			</td>
			<tr style="background-color:#ffcccc">
			<td style="text-align: right;">
				Ending Month:
			</td>
			<td>
				<select name="endMonth">
					<% out.println("<option value="+(curMonth+1)+">"+months[curMonth]+"</option>"); %>
					<option value="01">January</option>
					<option value="02">February</option>
					<option value="03">March</option>
					<option value="04">April</option>
					<option value="05">May</option>
					<option value="06">June</option>
					<option value="07">July</option>
					<option value="08">August</option>
					<option value="09">September</option>
					<option value="10">October</option>
					<option value="11">November</option>
					<option value="12">December</option>
				</select><br />
				<select name="endYear">
					<% out.println("<option value="+curYear+">"+curYear+"</option>"); %>
					<% for (int cnt=curYear-1;cnt+1>Integer.parseInt(firstYear);cnt--) 
						out.println("<option value="+cnt+">"+cnt+"</option>"); %>
				</select>
			</td>
			
					<tr>
			<td align=center colspan=2>
				<input type="submit" name="action" value="Generate Report">
			</td>
		</tr>
		</table>
		
		<% if (startMonth!=null && startYear!=null && endMonth!=null && endYear!=null) {
		  	if (Integer.parseInt(startYear)>Integer.parseInt(endYear) || 
				(Integer.parseInt(startYear)==Integer.parseInt(endYear) && 
				 Integer.parseInt(startMonth)>Integer.parseInt(endMonth))){
		  				%><table align="center" style="background-color: #ffeeee; border: 1px solid #ff6666;">
						<tr><td align=center><b>An Error has occured:</b><br /><br />Start date is after End Date.</td></tr>
					</table><br /><%
		   }
		   else if (Integer.parseInt(endYear)>curYear || 
				(Integer.parseInt(endYear)==curYear && 
				 Integer.parseInt(endMonth)>curMonth+1)){
		  				%><table align="center" style="background-color: #ffeeee; border: 1px solid #ff6666;">
						<tr><td align=center><b>An Error has occured:</b><br /><br />End date is in the future.</td></tr>
					</table><br /><% 
		   }
		   else {
			if (startMonth.length()<2) startMonth="0"+startMonth;
			if (endMonth.length()<2) endMonth="0"+endMonth;
			VisitReport vr=null;
			try {
				vr=new VisitReport(startYear+"-"+startMonth, endYear+"-"+endMonth);
				vr.computeVisits();
			}
			catch (UserDataException e) {
				out.println("<table align=center bgcolor=red><tr><td><font color=white>");
				out.println("<b>An Error has Occured</b>: <br />");
				out.println(e.getErrorMessage());
				out.println("</font></td></tr></table>");
			}
			Vector<Integer> minors=vr.getMinors();
			Vector<Integer> adults=vr.getAdults();			
			
		int mostVisits;
		int leastVisits;
		
		if (minors.elementAt(0) < adults.elementAt(0)) {
			mostVisits=adults.elementAt(0);
			leastVisits=minors.elementAt(0);
		}
		else {
			mostVisits=minors.elementAt(0);
			leastVisits=adults.elementAt(0);
		}
		
		int NUM_DAYS=vr.getNumMonths();
		
		for ( int i = 1; i < NUM_DAYS; i++ )
		{
			if ( minors.elementAt(i) > mostVisits ) mostVisits = minors.elementAt(i);
			if ( minors.elementAt(i) < leastVisits ) leastVisits = minors.elementAt(i);
			if ( adults.elementAt(i) > mostVisits ) mostVisits = adults.elementAt(i);
			if ( adults.elementAt(i) < leastVisits ) leastVisits = adults.elementAt(i);

		}
		
			int GRAPH_WIDTH = 1100;
			int GRAPH_HEIGHT = 500;
			int GRAPH_VALUES = 10;
			if (GRAPH_VALUES>mostVisits) GRAPH_VALUES=mostVisits;
			if (GRAPH_VALUES==0) GRAPH_VALUES=1;
			int VALUE_HEIGHT = GRAPH_HEIGHT / GRAPH_VALUES;
			int DAY_SPACING = GRAPH_WIDTH / (NUM_DAYS*2);
			int DAY_WIDTH = DAY_SPACING / 2;
		
		int valueRange = mostVisits - leastVisits;
		
		// buffer the values
		mostVisits += (int)(valueRange*0.1f);
		leastVisits -= (int)(valueRange*0.1f);
		
		if ( leastVisits < 0 )
			leastVisits = 0;
			
		valueRange = mostVisits - leastVisits;
		
		double valueInc = (double) valueRange / (double) GRAPH_VALUES;
		
		 %>
		<br />
		<table align="center">
		
			<tr>
			
				<td align="right" valign="bottom">
					<i style="font-size:75%"># of visits</i>
				</td>
				<td align="center" valign="top">
					<b>Visits Per Month<br /><br /></b>
				</td>
			
			</tr>
			
			<tr>
			
				<!-- value legend -->
				<td valign="top">
				
					<div style="position: relative">
				
					<%
					int val;
					for ( int i = 0; i <= GRAPH_VALUES; i++ )
					{
						val = (int) (valueInc * i);
						int top = ( GRAPH_VALUES - i ) * VALUE_HEIGHT;
						%>
						
						<div style="position: absolute; text-align: right; width:100%; height: <%=VALUE_HEIGHT%>px; top: <%=top%>px">
							<%=val%>
						</div>
						
						<%
					}
					
					%>
					
					</div>
				
				</td>
				
				<!-- actual graph -->
				<td valign="top" style="font-size: 50%; width: <%=GRAPH_WIDTH%>px; height: <%=GRAPH_HEIGHT%>px">
				<br />
				<div style="position: relative;font-size:1px">
				
				<%
				
				for ( int i = 0; i <= GRAPH_VALUES; i++ )
				{
					int top = ( GRAPH_VALUES - i ) * VALUE_HEIGHT;
					%>
					
					<div style="position: absolute; background-color:#666; width:100%; height:1px; top: <%=top%>px"></div>
					
					<%
				}
				
				for ( int i = 0; i < NUM_DAYS; i++ )
				{
					int left = ( (i*2+1) * DAY_SPACING ) - ( DAY_WIDTH / 2 );
					int height = (int)(GRAPH_HEIGHT * (( minors.elementAt(i) - leastVisits ) / (float)(valueRange)));
					
					if ( height <= 0 )
						height = 1;
					
					int invHeight = GRAPH_HEIGHT - height;
					
					%>
<div style="position:absolute;top:<%=invHeight%>px;left:<%=left%>px;height:<%=height%>px;width:<%=DAY_WIDTH%>px;background-color:#0066FF;border: solid 1px #0099FF; border-right:solid 1px #003366; border-bottom:solid 1px #003366"></div>
					<%
					int left2 = ( (i*2+2) * DAY_SPACING ) - ( DAY_WIDTH / 2 );
					int height2 = (int)(GRAPH_HEIGHT * (( adults.elementAt(i) - leastVisits ) / (float)(valueRange)));
					
					if ( height2 <= 0 )
						height2 = 1;
					
					int invHeight2 = GRAPH_HEIGHT - height2;
					
					%>
<div style="position:absolute;top:<%=invHeight2%>px;left:<%=left2%>px;height:<%=height2%>px;width:<%=DAY_WIDTH%>px;background-color:#CC66FF;border: solid 1px #CC99FF; border-right:solid 1px #CC3366; border-bottom:solid 1px #CC3366"></div>

					<%
				}
				
				%>
				
				</div>
				
				</td>
			
			</tr>
			
			<tr>
			
			<td align="right">
				<br /><br />
				<%= DateStartStr %>
			</td>
			<td align="right">
				<br /><br />
				<%= DateEndStr %>
			</td>
			
			</tr>
		
		</table>
		
		<%
	} // end if ( DayCounts != null )
	}
	
}
	
	%>
		
</form>

    <%@ include file="/resources/footer.jsp" %>
  </body>
</html>

<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>

<%@include file="/global.jsp" %>

<%PersonnelBean personnelb = new PersonnelDAO(prodDAO).getPersonnel(loggedInMID);%>

<div align="center" style="margin-bottom: 30px;">
	<img src="/iTrust/image/user/<%=loggedInMID.longValue() %>.png" alt="MID picture">
</div>

<div align="center">
<table width="165">
	<tr>
		<td>Name: </td>
		<td><%=personnelb.getFullName()%></td>
	</tr>
	<tr>
		<td>Location: </td>
		<td>Somewhere</td>
	</tr>
</table>
</div>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.beans.ApptTypeBean"%>
<%@page import="edu.ncsu.csc.itrust.action.EditApptTypeAction"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.HtmlEncoder"%>
<%@page import="java.net.URLEncoder" %>
<%@page import="java.util.List"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Maintain Appointment Types";
%>

<%@include file="/header.jsp" %>

<%
	String headerMessage = "Viewing Current Appointment Types";
	
	EditApptTypeAction atEditor = new EditApptTypeAction(prodDAO, loggedInMID.longValue());
	if (request.getParameter("add") != null || request.getParameter("update") != null) {
		try {
			if(request.getParameter("name").equals("") || request.getParameter("duration").equals(""))
				headerMessage = "Please fill in all fields.";
			else {
				ApptTypeBean apptType = new ApptTypeBean(request.getParameter("name"), Integer.parseInt(request.getParameter("duration")));
				headerMessage = (request.getParameter("add") != null) ? atEditor.addApptType(apptType) : atEditor.editApptType(apptType);
			}
		} 
		catch(FormValidationException e) {
%>
	<div align=center>
		<span class="iTrustError"><%=e.getMessage() %></span>
	</div>
<%
			headerMessage = "Validation Errors";
		}
		
	}
	String headerColor = (headerMessage.indexOf("Error") > -1)
			? "#ffcccc"
			: "#00CCCC";
%>
<script type="text/javascript">

function fillUpdate(name) {
	document.getElementById("name").value = name;
	document.getElementById("duration").value = unescape(document.getElementById(name).value);
}
</script>

<div align="center">
<br />
<span class="iTrustMessage"><%=headerMessage %></span>
<br />
<br />

<form name="mainForm" action="editApptType.jsp" id="mainForm" method="post">
<table class="fTable" align="center">
	<tr>
		<td colspan="3">Update Appointment Type List</td>
	</tr>
	<tr class="subHeader">
		<td>Name</td>
		<td>Duration</td>
	</tr>
	<tr>
		<td><input type="text" name="name" id="name" size="30" maxlength="30" /></td>
		<td><input type="text" name="duration" id="duration" size="5" maxlength="5" /></td>
	</tr>
</table>
<input type="submit" name="add" id="add" value="Add Type" />
<input type="submit" name="update" id="update" value="Update Type" />

<br />
<br />
<table class="fTable" align="center">
	<tr>
		<th colspan="3">Current Appointment Types</th>
	</tr>
	<tr class="subHeader">
		<td>Name</td>
		<td>Duration</td>
	</tr>
	<%
		List<ApptTypeBean> typeList = prodDAO.getApptTypeDAO().getApptTypes();
		int tempDuration = 0;
		String tempName = "";
		for (ApptTypeBean apptEntry : typeList) {
			tempDuration = apptEntry.getDuration();
			tempName = apptEntry.getName();
	%>
		<tr>
			<td><a href="javascript:void(0)" onclick="fillUpdate('<%=tempName %>')"><%=tempName %></a>
				<input type="hidden" id="<%=tempName%>" name="<%=tempName%>" value="<%=tempDuration%>" />		
			</td>
			<td><%=tempDuration %></td>
		</tr>
	<% } %>
</table>
</form>
</div>
<br />


<%@include file="/footer.jsp" %>

<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction"%>
<%@page import="edu.ncsu.csc.itrust.action.EditRepresentativesAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="java.util.List"%>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - Report Status";
%>

<%@include file="/header.jsp"%>

<%
/* Require a Patient ID first */
long patientMID;
boolean representativeReporting = false;
String reportingFor = (String)request.getParameter("reportingFor");
if(reportingFor == null || 1 > reportingFor.length() || reportingFor.equals("null")) {
	patientMID = loggedInMID.longValue(); //If self-reporting
} else {
	patientMID = Long.parseLong(reportingFor);
	representativeReporting = true;
}


	AddRemoteMonitoringDataAction action = new AddRemoteMonitoringDataAction(
			prodDAO, loggedInMID.longValue(), patientMID);

	/* Update information */
	boolean formIsFilled = request.getParameter("formIsFilled") != null
			&& request.getParameter("formIsFilled").equals("true");
	
	if (formIsFilled) {
		try {
			if (request.getParameter("glucoseLevel") == null || "".equals(request.getParameter("glucoseLevel"))){
				action.addRemoteMonitoringData(Integer.parseInt(request.getParameter("systolicBloodPressure")), 
						Integer.parseInt(request.getParameter("diastolicBloodPressure")));
			} else if (request.getParameter("systolicBloodPressure") == null || "".equals(request.getParameter("systolicBloodPressure"))){
				action.addRemoteMonitoringData(Integer.parseInt(request.getParameter("glucoseLevel")));
			} else {
				action.addRemoteMonitoringData(
						Integer.parseInt(request.getParameter("systolicBloodPressure")),
						Integer.parseInt(request.getParameter("diastolicBloodPressure")),
						Integer.parseInt(request.getParameter("glucoseLevel")));
			}
			
%>
		<div align=center>
			<span class="iTrustMessage">Information Successfully Added</span>
		</div>
<%
		} catch (FormValidationException e) {
			formIsFilled = false;
%>
			<div align=center>
				<span class="iTrustError"><%=e.getMessage() %></span>
			</div>
<%
		} catch(NumberFormatException e) {
			formIsFilled = false;
%>
			<div align=center>
				<span class="iTrustError">Invalid entry: <%=e.getMessage() %>. Please enter a whole number.</span>
			</div>
<%
		}
	}
	if(!formIsFilled) {
%>

<form action="addTelemedicineData.jsp" method="post">
<input type="hidden" name="formIsFilled" value="true">
<input type="hidden" name="reportingFor" value="<%=(String)request.getParameter("reportingFor")%>">
<br />
<table cellspacing=0 align=center cellpadding=0>
	<tr><th>
	<%=(patientMID == loggedInMID.longValue()) ? "Self-Reporting":"Report for " + action.getPatientName(patientMID) %>
	</th></tr>
	<tr>
		<td valign=top>
		<table class="fTable" align=center style="width: 350px;">
			<tr>
				<td class="subHeaderVertical">Systolic Blood Pressure:</td>
				<td><input name="systolicBloodPressure" value="" type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Diastolic Blood Pressure:</td>
				<td><input name="diastolicBloodPressure" value="" type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Glucose Level:</td>
				<td><input name="glucoseLevel" value="" type="text"></td>
			</tr>
			
		</table>
		</td>
		<td width="15px">&nbsp;</td>
		<td valign=top>
		
		</td>
	</tr>
</table>
<br />
<div align="center"><input type="submit" name="action"
	style="font-weight: bold;" value="Report">

<br />
<br />
<br />
<%
		if(!representativeReporting) {
%>
<table class="fTable" align=center>
	<th>Patient Representative Reporting</th>
		<%
			EditRepresentativesAction repsAction = new EditRepresentativesAction(
					prodDAO, 0L, Long.toString(patientMID));
			List<PatientBean> patients = repsAction.getRepresented(patientMID);
			if(patients.size() == 0) {
				%>
				<tr class="subHeader">
					<th>No Patients Represented</th>
				</tr>
				<%
			} else {
				%>
				<tr class="subHeader">
					<th>Patient</th>
				</tr>
				<%
			}
			for(PatientBean p : patients) {
				%>
				<tr><td><a href="#" onclick="javascript:document.getElementsByName('formIsFilled')[0].value='false';document.getElementsByName('reportingFor')[0].value='<%=p.getMID()%>';document.forms[0].submit();"><%=p.getFullName() %></a></td></tr>
				<%
			}
			
		%>
	
</table>
</div>
</form>

	<%
		}
	}
	%>
<br />
<br />

<%@include file="/footer.jsp"%>

<%@page import="edu.ncsu.csc.itrust.beans.OfficeVisitBean"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewOfficeVisitAction"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.beans.DiagnosisBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.ProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PrescriptionBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>
<%@page import="java.util.ArrayList"%>
<%@page import="java.util.List"%>

<%@page errorPage="/auth/exceptionHandler.jsp" %>
<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld" %>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - View Office Visit Details";
%>

<%@include file="/header.jsp"%>
<%
session.removeAttribute("personnelList");

	String ovID = request.getParameter("ovID");
	String repMID = request.getParameter("repMID");
	
	ViewOfficeVisitAction action = null;
	
	if(repMID != null){
		//This constructor checks that the representative is correct
		action = new ViewOfficeVisitAction(prodDAO, loggedInMID.longValue(), repMID, ovID);
	} else{
		action = new ViewOfficeVisitAction(prodDAO, loggedInMID.longValue(),ovID);
	}

	/* (if(request.getParameter() */
	
	OfficeVisitBean ov = action.getOfficeVisit();	
	String hcpName = action.getHCPName(ov.getHcpID());
%>
<br />
<table class="fTable" align="center">
	<tr><th colspan=2>Office Visit Details</th></tr>
	<tr>
		<td  class="subHeader">Date:</td>
		<td><%=ov.getVisitDateStr()%></td>
	</tr>
	<tr>
		<td  class="subHeader">HCP:</td>
<%
		List<PersonnelBean> personnelList = new ArrayList<PersonnelBean>();
		int index = 0;
%>
		<td><a href="/iTrust/auth/viewPersonnel.jsp?personnel=<%=index%>"><%=hcpName%></a></td>
<%
		PersonnelBean personnel = new PersonnelDAO(prodDAO).getPersonnel(ov.getHcpID());
		personnelList.add(personnel);
		index++;
		session.setAttribute("personnelList", personnelList);
%>
	</tr>
	<tr>
		<td  class="subHeader">Notes:</td>
		<td>
			<%= ov.getNotes() %>
		</td>
	</tr>
</table>
<br /><br />
<table class="fTable" align="center" >
	<tr>
		<th colspan="2">Diagnoses</th>
	</tr>
	<tr  class="subHeader">
		<th>ICD Code</th>
		<th>Description</th>
	</tr>
	<% if (ov.getDiagnoses().size() == 0) { %>
	<tr>
		<td colspan="2" >No Diagnoses for this visit</td>
	</tr>
	<% } else { 
		for(DiagnosisBean d : ov.getDiagnoses()) {%>
		<tr>
			<td ><itrust:icd9cm code="<%=d.getICDCode()%>"/></td>
			<td  style="white-space: nowrap;"><%=d.getDescription() %></td>
		</tr>
	   <%} 
  	   }  %>
</table>
<br /><br />
<table class="fTable" align="center" >
	<tr>
		<th colspan="5" style="background-color:silver;">Medications</th>
	</tr>
	<tr class="subHeader">
		<td>NDCode</td>
		<td>Description</td>
		<td>Date of Usage</td>
		<td>Dosage</td>
		<td>Instructions</td>
	</tr>
	<% if (ov.getPrescriptions().size() == 0) { %>
	<tr>
		<td colspan="5" class = "valueCell" align="center">No Medications on record</td>
	</tr>
	<% } else { 
		for(PrescriptionBean m : ov.getPrescriptions()) { %>
		<tr>
			<td class = "valueCell"><%=m.getMedication().getNDCodeFormatted()%></td>
			<td class = "valueCell"><%=m.getMedication().getDescription() %></td>
			<td class = "valueCell"><%=m.getStartDateStr()%> to <%=m.getEndDateStr()%></td>
			<td class = "valueCell"><%=m.getDosage()%>mg</td>
			<td class = "valueCell"><%=m.getInstructions()%></td>
		</tr>
	<%  } 
	  } %>
</table>
<br /><br />
<table class="fTable" align="center" >
	<tr>
		<th colspan="2" style="background-color:silver;">Procedures</th>
	</tr>
	<tr class="subHeader">
		<td>CPT Code</td>
		<td>Description</td>
	</tr>
	<% if (ov.getProcedures().size() == 0) { %>
	<tr>
		<td colspan="2" >No Procedures on record</td>
	</tr>
	<% } else { 
		for(ProcedureBean p : ov.getProcedures()) {%>
		<tr>
			<td ><%=p.getCPTCode() %></td>
			<td ><%=p.getDescription() %></td>
		</tr>
	<%  } 
	   }  %>
</table>
<br />

<%@include file="/footer.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.ReportAdverseEventAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.AdverseEventBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.HCPLinkBean"%>
<%@page import="edu.ncsu.csc.itrust.BeanBuilder"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="java.util.List"%>
<%@page import= "java.util.ArrayList"%>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - Report Adverse Event";
%>

<%@include file="/header.jsp"%>

<%
ReportAdverseEventAction action;


if(request.getParameter("Comment") != (null) && session.getAttribute("HCPMID") == null){
	List<HCPLinkBean> linkList = new ArrayList<HCPLinkBean>();
	linkList = (List<HCPLinkBean>) session.getAttribute("beanlist");
	List<AdverseEventBean> adverseList = new ArrayList<AdverseEventBean>();
	boolean bad = false;
	for(HCPLinkBean lBean : linkList){
		if (lBean.isChecked()){
			action = new ReportAdverseEventAction("" + lBean.getPrescriberMID(), prodDAO, loggedInMID.longValue());
			AdverseEventBean aeBean = new AdverseEventBean();
			aeBean.setMID(""+loggedInMID);
			aeBean.setDescription(request.getParameter("Comment"));
			aeBean.setDrug(""+lBean.getDrug());
			aeBean.setCode(""+lBean.getCode());
			aeBean.setPrescriber("" + lBean.getPrescriberMID());
			adverseList.add(aeBean);
			
			String msg = action.addReport(aeBean);
			
			if(!msg.equals("")){
				bad = true;
				
				%>
			<div align=center>
				<span class="iTrustError"><%=msg %></span>
			</div>
			<%
			}
		}
	}
	action = new ReportAdverseEventAction(prodDAO, loggedInMID.longValue());
	action.sendMails(adverseList);
	if(!bad){
		response.sendRedirect("home.jsp?rep=1");
	}
}

if(request.getParameter("Comment") != (null) && session.getAttribute("HCPMID") != null){
	action = new ReportAdverseEventAction("" + session.getAttribute("HCPMID"), prodDAO, loggedInMID.longValue());
	AdverseEventBean aeBean = new AdverseEventBean();
	aeBean.setMID(""+loggedInMID);
	aeBean.setDescription(request.getParameter("Comment"));
	aeBean.setDrug(""+session.getAttribute("presID"));
	aeBean.setCode(""+session.getAttribute("code"));
	
	//aeBean = new BeanBuilder<AdverseEventBean>().build(request.getParameterMap(), new AdverseEventBean());
	action.addReport(aeBean);
	action.sendMail(aeBean);
	response.sendRedirect("home.jsp?rep=1");
	
}

if(request.getParameter("Comment") == (null) && request.getParameter("HCPMID") != null){
	action = new ReportAdverseEventAction(request.getParameter("HCPMID"), prodDAO, loggedInMID.longValue());
	session.setAttribute("HCPMID", request.getParameter("HCPMID"));
	session.setAttribute("presID", request.getParameter("presID"));
	session.setAttribute("code", request.getParameter("code"));
}

%>
<div align="center">
<form id="mainForm" method="get" action="reportAdverseEvent.jsp">
	<h2>Report an Adverse Event</h2>

	<textarea name="Comment" cols="100" rows="10"></textarea><br />
	<br />
	<input type="submit" value="Save" name="addReport"/>


</form>
</div>

<%@include file="/footer.jsp"%>

<div class="menu_category">
	<span>Edit</span><br>
	<a href="/iTrust/auth/patient/editMyDemographics.jsp">My Demographics</a><br />
</div>
<div class="menu_category">
	<span>View</span><br />
	<a href="/iTrust/auth/patient/viewAccessLog.jsp">Access Log</a><br />
	<a href="/iTrust/auth/patient/calendar.jsp">Full Calendar</a><br />
	<a href="/iTrust/auth/patient/myDiagnoses.jsp">My Diagnoses</a><br />
	<a href="/iTrust/auth/patient/viewVisitedHCPs.jsp">My Providers</a><br />
	<a href="/iTrust/auth/patient/viewMyRecords.jsp">View My Records</a><br />
	<a href="/iTrust/auth/patient/viewPrescriptionRecords.jsp">Prescription Records</a><br />
	<a href="/iTrust/auth/patient/viewExpiredPrescriptionRecords.jsp">My Expired Prescription Reports</a><br />
</div>
<div class="menu_category">
	<span>Appointments</span><br />
	<a href="/iTrust/auth/patient/viewMyAppts.jsp">View My Appointments</a><br />
</div>
<div class="menu_category">
	<span>Messaging</span><br />
	<a href="/iTrust/auth/patient/messageInbox.jsp">Message Inbox</a><br />
	<a href="/iTrust/auth/patient/messageOutbox.jsp">Message Outbox</a><br />
</div>
<div class="menu_category">
	<span>Telemedicine</span><br />
	<a href="/iTrust/auth/patient/addTelemedicineData.jsp">Report Status</a><br />
</div>
<div class="menu_category">
	<span>Other</span><br />
	<a href="/iTrust/auth/surveyResults.jsp">Satisfaction Survey Results</a><br />
	<a href="/iTrust/auth/patient/showEmailHistory.jsp">Show Email History</a><br />
</div>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>
<%@page import="java.util.Date"%>
<%@page import="java.text.DateFormat"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="java.sql.Timestamp"%>
<%@page import="edu.ncsu.csc.itrust.action.EditApptTypeAction"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyApptsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.ApptBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View My Messages";
%>

<%@include file="/header.jsp" %>

<div align=center>
	<h2>My Appointments</h2>
<%
	ViewMyApptsAction action = new ViewMyApptsAction(prodDAO, loggedInMID.longValue());
	EditApptTypeAction types = new EditApptTypeAction(prodDAO, loggedInMID.longValue());
	List<ApptBean> appts = action.getMyAppointments();
	session.setAttribute("appts", appts);
	if (appts.size() > 0) { %>	
	<table class="fancyTable">
		<tr>
			<th>Patient</th>
			<th>Appointment Type</th>
			<th>Appointment Date/Time</th>
			<th>Duration</th>
			<th></th>
		</tr>
<%		 
		boolean conflicts[] = new boolean[appts.size()];
		for(int i=0; i<appts.size(); i++) {
			ApptBean a = appts.get(i);
			long t = a.getDate().getTime();
			long m = types.getDurationByType(a.getApptType()) * 60 * 1000;
			Timestamp time = new Timestamp(t+m);
			for(int j=i+1; j<appts.size(); j++) {
				if(appts.get(j).getDate().before(time)) {
					conflicts[i] = true;
					conflicts[j] = true;
				}
			}
		}
%>
<%		int index = 0;
		for(ApptBean a : appts) { 
			String comment = "";
			if(a.getComment() == null)
				comment = "No Comment";
			else
				comment = "<a href='viewAppt.jsp?apt="+index+"'>Read Comment</a>";
				
			Date d = new Date(a.getDate().getTime());
			DateFormat format = new SimpleDateFormat("MM/dd/yyyy hh:mm a");
			
			String row = "";
			if(conflicts[index])
				row = "<tr style='font-weight: bold;'";
			else
				row = "<tr";
%>
			<%=row+" "+((index%2 == 1)?"class=\"alt\"":"")+">"%>
				<td><%= action.getName(a.getHcp()) %></td>
				<td><%= a.getApptType() %></td>
				<td><%= format.format(d) %></td>
				<td><%= types.getDurationByType(a.getApptType())+" minutes" %></td>
				<td>
					<%=comment %>
				</td>
			</tr>
	<%		index ++; %>
	<%	} %>
	</table>
<%	} else { %>
	<div>
		<i>You have no Appointments</i>
	</div>
<%	} %>	
	<br />
</div>

<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.GenerateCalendarAction"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewOfficeVisitAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.ApptBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.OfficeVisitBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.LabProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="java.util.List"%>
<%@page import="java.sql.Timestamp"%>
<%@page import="java.util.ArrayList"%>
<%@page import="java.util.Hashtable"%>
<%@page import="java.util.Calendar"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Appointment Calendar";
%>

<%@include file="/header.jsp" %>

<%
	GenerateCalendarAction action = new GenerateCalendarAction(prodDAO, loggedInMID.longValue());
	List<ApptBean> send;
	boolean conflicts[];
	Hashtable<Integer, ArrayList<ApptBean>> atable;
	Hashtable<Integer, ArrayList<OfficeVisitBean>> rtable;
	Hashtable<Integer, ArrayList<LabProcedureBean>> ptable;
	
	//Calendar Stuff
	String months[] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
	String weekDays[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
	Calendar cal = Calendar.getInstance();
	int origDay = cal.get(Calendar.DAY_OF_MONTH);
	int origMonth = cal.get(Calendar.MONTH);
	int origYear = cal.get(Calendar.YEAR);
	cal.set(Calendar.DAY_OF_MONTH, 1);
	
	int c_month = cal.get(Calendar.MONTH);
	
	//Change Month from JSP
	if(request.getParameter("c") != null) {
		String cur = request.getParameter("c");
		try {
			c_month = Integer.parseInt(cur);
		} catch (NumberFormatException nfe) {
			response.sendRedirect("calendar.jsp");
		}
	}
	
	int month = c_month;
	if(request.getParameter("m") != null) {
		String m = request.getParameter("m");
		int move = 0;
		try {
			move = Integer.parseInt(m);
		} catch (NumberFormatException nfe) {
			response.sendRedirect("calendar.jsp");
		}
		month = c_month + move;
	}
	//Line to set month directly
	cal.set(Calendar.MONTH, month);
	int thisMonth = cal.get(Calendar.MONTH);
	int thisYear = cal.get(Calendar.YEAR);
	//Get First Day of Month
	cal.set(Calendar.DAY_OF_MONTH, 1);
	int firstDayOfMonth = cal.get(Calendar.DAY_OF_WEEK);
	//Get Last Day and Week of Month
	cal.add(Calendar.MONTH, 1);
    cal.add(Calendar.DAY_OF_MONTH, -1);
	int lastDayOfMonth = cal.get(Calendar.DAY_OF_MONTH);
	int lastWeekOfMonth = cal.get(Calendar.WEEK_OF_MONTH);
	
	//Compile Appointments for this month
	atable = action.getApptsTable(thisMonth, thisYear);
	send = action.getSend();
	conflicts = action.getConflicts();
	
	//Compile Office Visits for this month
	rtable = action.getOfficeVisitsTable(thisMonth, thisYear);
	
	//Compile Lab Procedures for this month
	ptable = action.getLabProceduresTable(thisMonth, thisYear);
	
%>
<div align="center">
<table width="90%">
	<tr>
		<td style="text-align: left;">
			<a href="calendar.jsp?c=<%= month %>&m=-1">Last</a>	
		</td>
		<td style="text-align: center;">
			<h3><%= "Appointments for "+months[thisMonth]+" "+thisYear %></h3>
		</td>
		<td style="text-align: right;">
			<a href="calendar.jsp?c=<%= month %>&m=1">Next</a>
		</td>
	</tr>
</table>
<table id="calendarTable" border="1px" style="clear: both;">
	<%
		out.print("<tr>\n");
		for(String d : weekDays) {
			out.print("<th>"+d+"</th>");
		}
		out.print("</tr>\n");
		int calDay = 1 + Calendar.SUNDAY - firstDayOfMonth;
		int p = 0;
		for(int i=0; i<lastWeekOfMonth; i++) {
			out.print("<tr>\n");
			for(int j=0; j<7; j++) {
				if(calDay == origDay && thisMonth == origMonth && thisYear == origYear)
					out.print("<td class=\"today\"><div class=\"cell\">");
				else
					out.print("<td><div class=\"cell\">");
				if(calDay > 0 && calDay <= lastDayOfMonth) out.print("<div style=\"float: right;\">"+calDay+"</div>");
				else out.print("<div class=\"blankDay\"></div>");
				//Add Appointments to Calendar
				if(atable.containsKey(calDay)) {
					ArrayList<ApptBean> l = atable.get(calDay);
					for(ApptBean b : l) {	
						out.print("<div class=\"calendarEntry "+(conflicts[p]?"conflict":"")+" \">"+b.getApptType()+"<br /><a name=\""+b.getApptType()+"-"+calDay+"\" href=\"viewAppt.jsp?apt="+ p++ +"\" >Read Details</a></div>");
					}
				}
				//Add Office Visits to Calendar
				if(rtable.containsKey(calDay)) {
					ArrayList<OfficeVisitBean> l = rtable.get(calDay);
					for(OfficeVisitBean b : l) {
						OfficeVisitBean ov = new ViewOfficeVisitAction(prodDAO, loggedInMID.longValue(), b.getVisitID()+"").getOfficeVisit();
						String in = (ov.getDiagnoses().size() == 0)?"Office Visit":(ov.getDiagnoses().get(0).getICDCode()+"-"+ov.getDiagnoses().get(0).getDescription());
						out.print("<div class=\"calendarEntry\">"+((ov.getDiagnoses().size() == 0)?"Office Visit":in)+"<br /><a name=\""+in+"-"+calDay+"\" href=\"viewOfficeVisit.jsp?ovID="+ b.getVisitID() +"\" >Read Details</a></div>");
						if(ov.getPrescriptions().size() != 0) {
							String in2 = ov.getPrescriptions().get(0).getMedication().getNDCode()+"-"+ov.getPrescriptions().get(0).getMedication().getDescription();
							out.print("<div class=\"calendarEntry\">"+in2+"<br /><a name=\""+in2+"-"+calDay+"\" href=\"viewPrescriptionInformation.jsp?visitID="+ b.getVisitID() +"&presID="+ ov.getPrescriptions().get(0).getId() +"\" >Read Details</a></div>");
						}
					}
				}
				//Add Lab Procedures to Calendar
				if(ptable.containsKey(calDay)) {
					ArrayList<LabProcedureBean> l = ptable.get(calDay);
					for(LabProcedureBean b : l) {	
						out.print("<div class=\"calendarEntry\">"+b.getLoinc()+"<br /><a name=\""+b.getLoinc()+"-"+calDay+"\" href=\"viewLabProc.jsp?id="+b.getPid()+"\" >Read Details</a></div>");
					}
				}
				calDay++;
				out.print("</div></td>\n");
			}
			out.print("</tr>");
		}
		session.setAttribute("appts", send);
	%>
</table>
<br />
<br />
</div>
<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>

<%@page import="edu.ncsu.csc.itrust.action.ViewMyMessagesAction"%>
<%@page import="edu.ncsu.csc.itrust.action.EditPatientAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>
<%@page import="java.util.ArrayList"%>
<%@page import="java.text.DateFormat"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="java.util.Date"%>
<%@page import="java.util.Calendar"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View My Message ";
%>

<%@include file="/header.jsp" %>

<div align=center>
	<h2>My Messages</h2>
	
<%
	ViewMyMessagesAction action = new ViewMyMessagesAction(prodDAO, loggedInMID.longValue());
	EditPatientAction f_action = new EditPatientAction(prodDAO, loggedInMID.longValue(), loggedInMID.toString());
	PatientDAO dao = new PatientDAO(prodDAO);
	List<MessageBean> messages = null;
	
	//Edit Filter backend
	boolean editing = false;
	String headerMessage = "";
	String[] fields = new String[6];
	if(request.getParameter("edit") != null && request.getParameter("edit").equals("true")) {
		editing = true;
		
		int i;
		for(i=0; i<6; i++) {
			fields[i] = "";
		}
		
		if(request.getParameter("cancel") != null) 
			response.sendRedirect("messageInbox.jsp"); 
		else if(request.getParameter("test") != null || request.getParameter("save") != null) {
			boolean error = false;
			String nf = "";
			nf += request.getParameter("sender").replace(",","")+",";
			nf += request.getParameter("subject").replace(",","")+",";
			nf += request.getParameter("hasWords").replace(",","")+",";
			nf += request.getParameter("notWords").replace(",","")+",";
			nf += request.getParameter("startDate").replace(",","")+",";
			nf += request.getParameter("endDate");
			
			//Validate Filter
			nf = action.validateAndCreateFilter(nf);
			if(nf.startsWith("Error")) {
				error = true;
				headerMessage = nf;
			}
			
			if(!error) {
				if(request.getParameter("test") != null) {
					response.sendRedirect("messageInbox.jsp?edit=true&testFilter="+nf);
				} else if(request.getParameter("save") != null) {
					f_action.editMessageFilter(nf);
					response.sendRedirect("messageInbox.jsp?filter=true"); 
				}
			}
		}
		
		if(request.getParameter("testFilter") != null) {
			String filter = request.getParameter("testFilter");
			String[] f = filter.split(",", -1);
			for(i=0; i<6; i++) {
				try {
					fields[i] = f[i];
				} catch(ArrayIndexOutOfBoundsException e) {
					//do nothing
				}
			}
		} else {
			String filter = dao.getPatient(loggedInMID.longValue()).getMessageFilter();
			if(!filter.equals("")) {
				String[] f = filter.split(",", -1);
				for(i=0; i<6; i++) {
					try {
						fields[i] = f[i];
					} catch(ArrayIndexOutOfBoundsException e) {
						//do nothing
					}
				}
			}
		}
	}
	
	//Sorts messages
	if(request.getParameter("sort") != null) {
		if(request.getParameter("sortby").equals("name")) {
			if(request.getParameter("sorthow").equals("asce")) {
				messages = action.getAllMyMessagesNameAscending();
			} else {
				messages = action.getAllMyMessagesNameDescending();
			}
		} else if(request.getParameter("sortby").equals("time")) {
			if(request.getParameter("sorthow").equals("asce")) {
				messages = action.getAllMyMessagesTimeAscending();
			} else {
				messages = action.getAllMyMessages();
			}
		}
	}
	else {
		messages = action.getAllMyMessages();
	}
	
	//Filters Messages
	boolean is_filtered = false;
	if((request.getParameter("filter") != null && request.getParameter("filter").equals("true")) || request.getParameter("testFilter") != null) {
		String filter = "";
		if(request.getParameter("testFilter") != null) {
			filter = request.getParameter("testFilter");
		} else {
			filter = dao.getPatient(loggedInMID.longValue()).getMessageFilter();
		}
		if(!filter.equals("") && !filter.equals(",,,,,")) {
			List<MessageBean> filtered = action.filterMessages(messages, filter);
			messages = filtered;
			is_filtered = true;
		}
	}
	
	session.setAttribute("messages", messages);
	%>
	
	<%
	
	if(editing) {
		%>
		<div class="filterEdit">
			<div align="center">
				<span style="font-size: 13pt; font-weight: bold;">Edit Message Filter</span>
				<%= headerMessage.equals("") ? "" : "<br /><span class=\"iTrustMessage\">"+headerMessage+"</span><br /><br />" %>
				<form method="post" action="messageInbox.jsp?edit=true">
					<table>
						<tr style="text-align: right;">
							<td>
								<label for="sender">Sender: </label>
								<input type="text" name="sender" id="sender" value="<%=fields[0] %>" />
							</td>
							<td style="padding-left: 10px; padding-right: 10px;">
								<label for="hasWords">Has the words: </label>
								<input type="text" name="hasWords" id="hasWords" value="<%=fields[2] %>" />
							</td>
							<td>
								<label for="startDate">Start Date: </label>
								<input type="text" name="startDate" id="startDate" value="<%=fields[4] %>" />
								<input type="button" value="Select Date" onclick="displayDatePicker('startDate');" />
							</td>
						</tr>
						<tr style="text-align: right;">
							<td>
								<label for="subject">Subject: </label>
								<input type="text" name="subject" id="subject" value="<%=fields[1] %>" />
							</td>
							<td style="padding-left: 10px; padding-right: 10px;">
								<label for="notWords">Does not have the words: </label>
								<input type="text" name="notWords" id="notWords" value="<%=fields[3] %>" />
							</td>
							<td>
								<label for="endDate">End Date: </label>
								<input type="text" name="endDate" id="endDate" value="<%=fields[5] %>" />
								<input type="button" value="Select Date" onclick="displayDatePicker('endDate');" />
							</td>
						</tr>
						<tr style="text-align: center;">
							<td colspan="3">
								<input type="submit" name="test" value="Test Filter" />
								<input type="submit" name="save" value="Save" />
								<input type="submit" name="cancel" value="Cancel" />
							</td>
						</tr>
					</table>
				</form>
			</div>
		</div>
		<br />
		<%
	}
	
	%>
	
	<form method="post" action="messageInbox.jsp<%=is_filtered?"?filter=true":"" %>">	
	<table>
	<tr>
		<td>
			<select name="sortby">
					<option value="time">Sort</option>
					<option value="name">Name</option>
					<option value="time">Time</option>
			</select>
		</td>
		<td>
			<select name="sorthow">
					<option value="desc">Order</option>
					<option value="asce">Ascending</option>
					<option value="desc">Descending</option>
			</select>
		</td>
		<td>
			<input type="submit" name="sort" value="Sort" />
		</td>
	</tr>
	<tr>
		<td><a href="messageInbox.jsp?edit=true" >Edit Filter</a></td>
		<td><a href="messageInbox.jsp?filter=true" >Apply Filter</a></td>
	</tr>
	</table>
	</form>
	<br />
	<%if(messages.size() > 0) { %>
	<table class="fancyTable">
		<tr>
			<th>Sender</th>
			<th>Subject</th>
			<th>Received</th>
			<th></th>
		</tr>
<%		int index = 0; 
		for(MessageBean message : messages) {
		if(message.getRead() == 0) {%>
		<tr style="font-weight: bold;" <%=(index%2 == 1)?"class=\"alt\"":"" %>>
			<td><%= action.getName(message.getFrom()) %></td>
			<td><%= message.getSubject() %></td>
			<td><%= message.getSentDate() %></td>
			<td><a href="viewMessageInbox.jsp?msg=<%= index %>">Read</a></td>
		</tr>
<% 			   } else { %>
		<tr <%=(index%2 == 1)?"class=\"alt\"":"" %>>
			<td><%= action.getName(message.getFrom()) %></td>
			<td><%= message.getSubject() %></td>
			<td><%= message.getSentDate() %></td>
			<td><a href="viewMessageInbox.jsp?msg=<%= index %>">Read</a></td>
		</tr>
<% 			  } %>
<%			index ++; %>
<%		} %>
	</table>
<%	} else { %>
	<div>
		<i>You have no messages</i>
	</div>
<%	} %>	
	<br />
</div>

<%@include file="/footer.jsp" %>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>
<%@page import="java.util.ArrayList"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.HCPVisitBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.OfficeVisitBean"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>
<%@page import="edu.ncsu.csc.itrust.exception.iTrustException"%>

<%@include file="/global.jsp"%>

<%
	pageTitle = "LCHP Information";
%>

<%@include file="/header.jsp"%>

<script type="text/javascript">
	function removeHCP(HCPID,formID) {
		document.getElementById("removeID").value = HCPID;
		document.getElementById(formID).submit();
	}
</script>

<%
int index = Integer.parseInt(request.getParameter("index"));
PersonnelBean myLHCP = ((List<PersonnelBean>) session.getAttribute("personnelList")).get(index);


%>
<div align = center>
<table class="fTable">
<tr><th colspan=2><%=myLHCP.getFullName() %></th></tr>
<tr><td>Specialty:</td><td><%=myLHCP.getSpecialty() == null ? "" : myLHCP.getSpecialty() %></td></tr>
<tr><td>Address:</td><td><%=myLHCP.getStreetAddress1() %> <br> 
						<%=  myLHCP.getStreetAddress2() %> <br>
						<%= myLHCP.getCity().equals("") ? "" : myLHCP.getCity() + "," %> <%= myLHCP.getState() + " " + myLHCP.getZip() %> </td></tr>
<tr><td>Phone:</td><td><%=myLHCP.getPhone().equals("--") ? "" : myLHCP.getPhone() %></td></tr>
<tr><td>Email:</td><td><%=myLHCP.getEmail() %></td></tr>
</table>
</div>

<%@include file="/footer.jsp"%>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean" %>
<%@page import="edu.ncsu.csc.itrust.beans.PrescriptionBean" %>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean" %>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO" %>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - Get My Expired Prescription Reports";
%>

<%@include file="/header.jsp"%>

<%
PatientBean patient = new PatientDAO(prodDAO).getPatient(loggedInMID.longValue()); 

ViewExpiredPrescriptionsAction expAction = new ViewExpiredPrescriptionsAction(prodDAO, loggedInMID.longValue());

List<PersonnelBean> personnelList = prodDAO.getPersonnelDAO().getAllPersonnel();

session.setAttribute("personnelList", personnelList);

%>
<div align="center">
	<br />
	<table class="fTable">
	
	
	
	
	
	<%
		List<PrescriptionBean> prescriptions = expAction.getPrescriptionsForPatient(loggedInMID.longValue());
		if (prescriptions.size() == 0) { 
%>
		<tr>
			<td colspan=4>
				<i>No prescriptions found</i>
			</td>
		</tr>
<%
		} else { 
%>
		<tr>
			<th colspan=4><%= patient.getFullName() %></th>
		</tr>
		<tr class="subHeader">
			<td>ND Code</td>
			<td>Description</td>
			<td>Duration</td>
			<td>Prescribing HCP</td>
		</tr>
<%	
	for (PrescriptionBean prescription : prescriptions) { 
		PersonnelBean doctor = expAction.getPrescribingDoctor(prescription);
%>
		<tr>
			<td ><a href="viewPrescriptionInformation.jsp?visitID=<%=prescription.getVisitID()%>&presID=<%=prescription.getId()%>"><%=prescription.getMedication().getNDCodeFormatted() %></a></td>
			<td ><%=prescription.getMedication().getDescription() %></td>
			<td ><%=prescription.getStartDateStr() %> to <%=prescription.getEndDateStr() %></td>
			<td ><a href=viewLHCP.jsp?index=<%=doctor.getIndexIn(personnelList) %> ><%=doctor.getFullName() %></a></td>
			
			
			
		</tr>
<%			
			}
		}
	
	
%>
	</table>	
	<br />
</div>

<%@include file="/footer.jsp"%>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>

<%@page import="edu.ncsu.csc.itrust.action.ViewMyMessagesAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View My Sent Messages";
%>

<%@include file="/header.jsp" %>

<div align=center>
	<h2>My Sent Messages</h2>
	<a href="/iTrust/auth/patient/sendMessage.jsp">Compose a Message</a><br /><br />
<%
	ViewMyMessagesAction action = new ViewMyMessagesAction(prodDAO, loggedInMID.longValue());
	List<MessageBean> messages = null;
	if(request.getParameter("sortby") != null) {
		if(request.getParameter("sortby").equals("name")) {
			if(request.getParameter("sorthow").equals("asce")) {
				messages = action.getAllMySentMessagesNameAscending();
			} else {
				messages = action.getAllMySentMessagesNameDescending();
			}
		} else if(request.getParameter("sortby").equals("time")) {
			if(request.getParameter("sorthow").equals("asce")) {
				messages = action.getAllMySentMessagesTimeAscending();
			} else {
				messages = action.getAllMySentMessages();
			}
		}
	}
	else {
		messages = action.getAllMySentMessages();
	}
	session.setAttribute("messages", messages);
	if (messages.size() > 0) { %>
	<form method="post" action="messageOutbox.jsp">	
	<table>
	<tr>
		<td>
			<select name="sortby">
					<option value="time">Sort</option>
					<option value="name">Name</option>
					<option value="time">Time</option>
			</select>
		</td>
		<td>
			<select name="sorthow">
					<option value="desc">Order</option>
					<option value="asce">Ascending</option>
					<option value="desc">Descending</option>
			</select>
		</td>
		<td>
			<input type="submit" value="Sort" />
		</td>
	</tr>
	</table>
	</form>
	<br />
	<table class="fancyTable">
		<tr>
			<th>To</th>
			<th>Subject</th>
			<th>Received</th>
			<th></th>
		</tr>
<%		int index = 0; %>
<%		for(MessageBean message : messages) { %>
		<tr <%=(index%2 == 1)?"class=\"alt\"":"" %>>
			<td><%= action.getName(message.getTo()) %></td>
			<td><%= message.getSubject() %></td>
			<td><%= message.getSentDate() %></td>
			<td><a href="viewMessageOutbox.jsp?msg=<%= index %>">Read</a></td>
		</tr>
<%			index ++; %>
<%		} %>
	</table>
<%	} else { %>
	<div>
		<i>You have no messages</i>
	</div>
<%	} %>	
	<br />
</div>

<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.ViewMyMessagesAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="java.util.List"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View Message";
%>

<%@include file="/header.jsp" %>

<%
	ViewMyMessagesAction action = new ViewMyMessagesAction(prodDAO, loggedInMID.longValue());
	MessageBean original = null;

	if (request.getParameter("msg") != null) {
		String msgParameter = request.getParameter("msg");
		int msgIndex = 0;
		try {
			msgIndex = Integer.parseInt(msgParameter);
		} catch (NumberFormatException nfe) {
			response.sendRedirect("messageOutbox.jsp");
		}
		List<MessageBean> messages = null; 
		if (session.getAttribute("messages") != null) {
			messages = (List<MessageBean>) session.getAttribute("messages");
			if(msgIndex > messages.size() || msgIndex < 0) {
				msgIndex = 0;
				response.sendRedirect("oops.jsp");
			}
		} else {
			response.sendRedirect("messageOutbox.jsp");
		}
		original = (MessageBean)messages.get(msgIndex);
		session.setAttribute("message", original);
	}
	else {
		response.sendRedirect("messageOutbox.jsp");
	}
	
%>
	<div>
		<table width="100%" style="background-color: #DDDDDD;">
			<tr>
				<td><b>To:</b> <%= action.getName(original.getTo()) %></td>
			</tr>
			<tr>
				<td><b>Subject:</b> <%= original.getSubject() %></td>
			</tr>
			<tr>
				<td><b>Date &amp; Time:</b> <%= original.getSentDate() %></td>
			</tr>
		</table>
	</div>
	
	<table>
		<tr>
			<td colspan="2"><b>Message:</b></td>
		</tr>
		<tr>
			<td colspan="2"><%= original.getBody() %></td>
		</tr>
		<tr>
			<td colspan="2"><a href="messageOutbox.jsp">Back</a></td>
		</tr>
	</table>


<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.ViewMyMessagesAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="java.util.List"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View Message";
%>

<%@include file="/header.jsp" %>

<%
	ViewMyMessagesAction action = new ViewMyMessagesAction(prodDAO, loggedInMID.longValue());
	MessageBean original = null;

	if (request.getParameter("msg") != null) {
		String msgParameter = request.getParameter("msg");
		int msgIndex = 0;
		try {
			msgIndex = Integer.parseInt(msgParameter);
		} catch (NumberFormatException nfe) {
			response.sendRedirect("messageInbox.jsp");
		}
		List<MessageBean> messages = null; 
		if (session.getAttribute("messages") != null) {
			messages = (List<MessageBean>) session.getAttribute("messages");
			if(msgIndex > messages.size() || msgIndex < 0) {
				msgIndex = 0;
				response.sendRedirect("oops.jsp");
			}
		} else {
			response.sendRedirect("messageInbox.jsp");
		}
		original = (MessageBean)messages.get(msgIndex);
		action.setRead(original);
		session.setAttribute("message", original);
	}
	else {
		response.sendRedirect("messageInbox.jsp");
	}
	
%>
	<div>
		<table width="100%" style="background-color: #DDDDDD;">
			<tr>
				<td><b>From:</b> <%= action.getName(original.getFrom()) %></td>
			</tr>
			<tr>
				<td><b>Subject:</b> <%= original.getSubject() %></td>
			</tr>
			<tr>
				<td><b>Date &amp; Time:</b> <%= original.getSentDate() %></td>
			</tr>
		</table>
	</div>
	
	<table>
		<tr>
			<td colspan="2"><a href="reply.jsp" style="font-size: 18px;">Reply</a></td>
		</tr>
		<tr>
			<td colspan="2"><b>Message:</b></td>
		</tr>
		<tr>
			<td colspan="2"><%= original.getBody() %></td>
		</tr>
	</table>


<%@include file="/footer.jsp" %>

<%@page import="edu.ncsu.csc.itrust.action.ViewMyMessagesAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="java.util.List"%>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - View My Messages";
%>

<%@include file="/header.jsp"%>

<div align="center">
<h2>My Messages</h2>
<%
	ViewMyMessagesAction action = new ViewMyMessagesAction(prodDAO, loggedInMID.longValue());
	List<MessageBean> messages = action.getAllMyMessages();
	session.setAttribute("messages", messages);
	if (messages.size() > 0) { %>
	
	<table class="fTable">
		<tr>
			<th>Sender</th>
			<th>Message</th>
			<th>Received</th>
			<th>&nbsp;</th>
		</tr>
<%		int index = 0; %>
<%		for(MessageBean message : messages) { %>
		<tr>
			<td><%= action.getPersonnelName(message.getFrom()) %></td>
			<td><%= message.getBody() %></td>
			<td><%= message.getSentDate() %></td>
			<td><a href="reply.jsp?msg=<%= index %>">Reply</a></td>
		</tr>
<%			index ++; %>
<%		} %>
	</table>
<%	} else { %>
	<div>
		<i>You have no messages</i>
	</div>
<%	} %>	
	<br /><br />
</div>

<%@include file="/footer.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.SendMessageAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="java.util.List"%>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - Send a Message";
%>

<%@include file="/header.jsp"%>

<%
	SendMessageAction action = new SendMessageAction(prodDAO, loggedInMID.longValue());
	int index;
	int dlhcpIndex = -1;
	int representeeIndex = -1;
	int repDLHCPIndex = -1;
	if (request.getParameter("sendMessage") != null && request.getParameter("sendMessage").equals("Send")) {
		try {
		MessageBean message = new MessageBean();
		message.setFrom(loggedInMID.longValue());
		message.setTo(((PersonnelBean)session.getAttribute("dlhcp")).getMID());
		message.setBody(request.getParameter("messageBody"));
		message.setSubject(request.getParameter("subject"));
		message.setRead(0);
		action.sendMessage(message);
		session.removeAttribute("dlhcp");
		response.sendRedirect("messageOutbox.jsp");
		} catch (FormValidationException e){
			%>
			<div align=center><span class="iTrustError"><%=e.getMessage()%></span></div>
			<%
		}
	}
	
	if (request.getParameter("selectDLHCP") != null && request.getParameter("selectDLHCP").equals("Select")) {
		if (request.getParameter("dlhcp") != null && !request.getParameter("dlhcp").equals("-1")) dlhcpIndex = Integer.parseInt(request.getParameter("dlhcp"));
	} else if (request.getParameter("selectRepDLHCP") != null && request.getParameter("selectRepDLHCP").equals("Select")) {
		if (request.getParameter("representee") != null && !request.getParameter("representee").equals("-1")) representeeIndex = Integer.parseInt(request.getParameter("representee"));
		if (request.getParameter("repDLHCP") != null && !request.getParameter("repDLHCP").equals("-1")) repDLHCPIndex = Integer.parseInt(request.getParameter("repDLHCP"));
	} else if (request.getParameter("selectRep") != null && request.getParameter("selectRep").equals("Select")) {
		if (request.getParameter("representee") != null && !request.getParameter("representee").equals("-1")) representeeIndex = Integer.parseInt(request.getParameter("representee"));
	}
%>
<div align="left">
<form id="mainForm" method="get" action="sendMessage.jsp">
	<h2>Send a Message</h2>
<% if (dlhcpIndex == -1 && representeeIndex == -1) { %>
<%
		List<PersonnelBean> dlhcps = action.getMyDLHCPs();
		List<PatientBean> representees = action.getMyRepresentees();
		session.setAttribute("dlhcps", dlhcps);
		session.setAttribute("representees", representees);
%>
	<h4>To One of My DLHCPs</h4>
<%		if (dlhcps.size() > 0) { %>
	<select name="dlhcp">
		<option value="-1"></option>
<%			index = 0; %>
<%			for(PersonnelBean dlhcp : dlhcps) { %>
		<option value="<%= index %>"><%= dlhcp.getFullName() %></option>
<%				index ++; %>
<%			} %>
	</select>
	<input type="submit" value="Select" name="selectDLHCP"/>
<%		} else { %>
	<i>You haven't declared any HCPs.</i>
<%		} %>
	
	<h4>On Behalf of One of My Representees</h4>
<%		if (representees.size() > 0) { %>
	<select name="representee">
		<option value="-1"></option>
<%			index = 0; %>
<%			for(PatientBean representee : representees) { %>
		<option value="<%= index %>"><%= representee.getFullName() %></option>
<%				index ++; %>
<%			} %>
	</select>
	<input type="submit" value="Select" name="selectRep"/>
<%		} else { %>
	<i>No other patients have declared you as a representative.</i>
<%		} %>
<%	} else if (dlhcpIndex >= 0) { %>
<%
		List<PersonnelBean> dlhcps = (List<PersonnelBean>) session.getAttribute("dlhcps");
		PersonnelBean dlhcp = dlhcps.get(dlhcpIndex);
		session.setAttribute("dlhcp", dlhcp);
%>
	<h4>To <%= dlhcp.getFullName() %></h4>
	<span>Subject: </span><input type="text" name="subject" size="50" /><br /><br />
	<span>Message: </span><br />
	<textarea name="messageBody" cols="100" rows="10"></textarea><br />
	<br />
	<input type="submit" value="Send" name="sendMessage"/>
<%	} else if (repDLHCPIndex >= 0) { %>
<%
		List<PersonnelBean> repDLHCPs = (List<PersonnelBean>) session.getAttribute("repDLHCPs");
		PersonnelBean dlhcp = repDLHCPs.get(repDLHCPIndex);
		session.setAttribute("dlhcp", dlhcp);
		List<PatientBean> representees = (List<PatientBean>) session.getAttribute("representees");
		PatientBean representee = representees.get(representeeIndex);
%>
	<h4>To <%= dlhcp.getFullName() %> on Behalf of <%= representee.getFullName() %></h4>
	<span>Subject: </span><input type="text" name="subject" size="50" /><br /><br />
	<span>Message: </span><br />
	<textarea name="messageBody" cols="100" rows="10"></textarea><br />
	<br />
	<input type="submit" value="Send" name="sendMessage"/>
<%	} else if (representeeIndex >= 0) { %>
<%
		List<PatientBean> representees = (List<PatientBean>) session.getAttribute("representees");
		PatientBean representee = representees.get(representeeIndex);
		List<PersonnelBean> repDLHCPs = action.getDLHCPsFor(representee.getMID());
		session.setAttribute("repDLHCPs", repDLHCPs);
%>
	<h4>To One of <%= representee.getFullName() %>'s DLHCPs</h4>
	<input type="hidden" name="representee" value="<%= representeeIndex %>"/>
<%		if (repDLHCPs.size() > 0) { %>
	<select name="repDLHCP">
		<option value="-1"></option>
<%			index = 0; %>
<%			for(PersonnelBean repDLHCP : repDLHCPs) { %>
		<option value="<%= index %>"><%= repDLHCP.getFullName() %></option>
<%				index ++; %>
<%			} %>
	</select>
	<input type="submit" value="Select" name="selectRepDLHCP"/>
<%		} else { %>
	<i><%= representee.getFullName() %> has not declared any HCPs.</i>
<%		} %>
<%	} %>
</form>
</div>

<%@include file="/footer.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.ViewMyAccessLogAction"%>
<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.beans.TransactionBean"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>
<%@page errorPage="/auth/exceptionHandler.jsp" %>
<%@page import="java.util.ArrayList"%>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - View My Access Log";
%>

<%@include file="/header.jsp"%>

<%
session.removeAttribute("personnelList");

	ViewMyAccessLogAction action = new ViewMyAccessLogAction(DAOFactory.getProductionInstance(), loggedInMID);
	List<TransactionBean> accesses;
	try{
		accesses = action.getAccesses(request.getParameter("startDate"), request.getParameter("endDate"), "role".equals(request.getParameter("sortBy")));
	} catch(FormValidationException e){
		e.printHTML(pageContext.getOut());
		accesses = action.getAccesses(null,null,false);
	}
	
	
%>

<br />
<table class="fTable" align='center'>
	<tr>
		<th><a href="#" onClick="javascript:sortBy('date');">Date</a></th>
		<th>Accessor</th>
		<th><a href = "#" onClick="javascript:sortBy('role');">Role</a></th>
		<th>Description</th>
	</tr>
<%
	boolean hasData = false;
	List<PersonnelBean> personnelList = new ArrayList<PersonnelBean>();
	int index = 0;
	for(TransactionBean t : accesses){ 
		PersonnelBean hcp = new PersonnelDAO(DAOFactory.getProductionInstance()).getPersonnel(t.getLoggedInMID());
		if (hcp != null) {
			hasData = true;

	%>
			<tr>
				<td ><%=t.getTimeLogged()%></td>
				<td ><a href="/iTrust/auth/viewPersonnel.jsp?personnel=<%=index%>"><%=hcp.getFullName()%></a></td>
				<td><%=t.getRole() %></td>
				<td ><%=t.getAddedInfo()%> (<%=t.getTransactionType().getCode()%>)</td>		
			</tr>
	<%
		PersonnelBean personnel = new PersonnelDAO(prodDAO).getPersonnel(t.getLoggedInMID());
		personnelList.add(personnel);
		index++;
		
			}
			else if("Personal Health Representative".equals(t.getRole())) {
		PatientBean p = new PatientDAO(DAOFactory.getProductionInstance()).getPatient(t.getLoggedInMID());
	%>
			<tr>
				<td ><%=t.getTimeLogged()%></td>
				<td ><%=p.getFullName()%></td>
				<td><%=t.getRole()%></td>
				<td ><%=t.getAddedInfo()%> (<%=t.getTransactionType().getCode()%>)</td>		
			</tr>
	<%

		}
	}
	session.setAttribute("personnelList", personnelList);
	if(!hasData) {
%>
	<tr>
		<td colspan=3 align="center">No Data</td>
	</tr>
<%
	}
	
	String startDate = action.getDefaultStart(accesses);
	String endDate = action.getDefaultEnd(accesses);
	if("role".equals(request.getParameter("sortBy"))) {
		startDate = request.getParameter("startDate");
		endDate = request.getParameter("endDate");
	}
%>
</table>
<br />
<br />

<form action="viewAccessLog.jsp" method="post">

<input type="hidden" name="sortBy" value=""></input>

<div align=center>
<table class="fTable" align="center">
	<tr class="subHeader">
		<td>Start Date:</td>
		<td>
			<input name="startDate" value="<%=startDate%>" size="10">
			<input type=button value="Select Date" onclick="displayDatePicker('startDate');">
		</td>
		<td>End Date:</td>
		<td>
			<input name="endDate" value="<%=endDate%>">
			<input type=button value="Select Date" onclick="displayDatePicker('endDate');">
		</td>
	</tr>
</table>
<br />
<input type="submit" name="submit" value="Filter Records">

</div>
</form>

<script type='text/javascript'>
function sortBy(dateOrRole) {
	document.getElementsByName('sortBy')[0].value = dateOrRole;
	document.forms[0].submit.click();
}

</script>

<%@include file="/footer.jsp"%>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>
<%@page import="java.util.ArrayList"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.HCPVisitBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.OfficeVisitBean"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>
<%@page import="edu.ncsu.csc.itrust.exception.iTrustException"%>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - My Providers";
%>

<%@include file="/header.jsp"%>

<script type="text/javascript">
	function removeHCP(HCPID,formID) {
		document.getElementById("removeID").value = HCPID;
		document.getElementById(formID).submit();
	}
</script>

<%
PatientBean patient = new PatientDAO(prodDAO).getPatient(loggedInMID.longValue());
String[] designateHCPs = request.getParameterValues("doctor");
String filterName = request.getParameter("filter_name");
String filterSpecialty = request.getParameter("filter_specialty");
String filterZip = request.getParameter("filter_zip");
String removeID = request.getParameter("removeID");

boolean filtered = false;

ViewVisitedHCPsAction action = new ViewVisitedHCPsAction(DAOFactory.getProductionInstance(),loggedInMID.longValue());
List<HCPVisitBean> hcpVisits = action.getVisitedHCPs();

String confirm = "";
try {
	if (removeID != null && !removeID.equals("")) {
		confirm = action.undeclareHCP(removeID);
	}
	else if (designateHCPs != null && !designateHCPs[0].equals("")) {
		for (String designateHCP : designateHCPs) {
			confirm = action.declareHCP(designateHCP);
		}
	}
}
catch (iTrustException ie) {
%>
<span ><%=ie.getMessage()%></span>
<% 
}
if(!"".equals(confirm)){%><span><%=confirm%></span><%}

List<PersonnelBean> personnel = null;
if (filterName != null && !filterName.equals("")) {
	filtered = true;
	personnel = action.filterHCPList(filterName, filterSpecialty, filterZip);
}
 
%>


<br />

<div align=center>
<% if (!filtered) { %>
	<h3>Provider list for <%=patient.getFullName()%></h3>
	<br />

	<form name="mainForm" id="mainForm" action="viewVisitedHCPs.jsp" method="post" onSubmit="return false;" target="_top">
		<input type="hidden" id="removeID" name="removeID" value="" />

		<table id="hcp_table" class="fTable" style="text-align: center;">
			<tr>
				<th>HCP Name</th>
				<th>Specialty</th>
				<th>Address</th>
				<th>Date of Office Visit</th>
				<th>Designated HCP?</th>
			</tr>

<%
	
	int i = 0; 
	for (HCPVisitBean vb: hcpVisits) { 
%>
			<tr>
				<td><%=vb.getHCPName()%></td>
				<td><%=vb.getHCPSpecialty()%></td>
				<td><%=vb.getHCPAddr()%></td>
				<td><%=vb.getOVDate()%></td>
				<td>
					<input name="doctor" value="<%=vb.getHCPName()%>" 
							type="checkbox"<%=vb.isDesignated()?"checked=\"checked\"":""%> 
							onClick="if(document.getElementsByName('doctor')[<%=i%>].checked) {this.form.submit();} else {removeHCP('<%=vb.getHCPName()%>', 'mainForm');}"/>
				</td>
			</tr> 
<%
		i++;
	}

	
	
%>
			<tr>
				<td colspan="5" style="color: #CC3333; text-align: right; font-weight: bold; font-size: 12px;">
					Select checkbox to update designated HCP
				</td>
			</tr>
		</table>
	</form>
<%
} 
else {
%>

	<form name="filterForm" id="filterForm" action="viewVisitedHCPs.jsp" method="post" onSubmit="return false;" target="_top">
		<table id="filter_hcp_table" class="fTable">
			<tr>
				<th>HCP Name</th>
				<th>Specialty</th>
				<th>Address</th>
				<th>Designated HCP?</th>
			</tr>
<% 
	List<PersonnelBean> added = null;
	if (null != personnel) {
		int i = 0; 
		for (PersonnelBean ele: personnel) {
		
%>
			<tr>
				<td><%=ele.getFullName() %></td>
				<td><%=ele.getSpecialty() == null?"none":ele.getSpecialty()%></td>
				<td><%=new String(ele.getStreetAddress1() +" "+ ele.getStreetAddress2() +" "+ ele.getCity() +", "+ ele.getState() +" "+ ele.getZip()) %></td>
				<td>
					<input name="doctor" value="<%=ele.getFullName()%>" 
							type="checkbox"<%=action.checkDeclared(ele.getMID())?"checked=\"checked\"":""%> 
							onClick="if(document.getElementsByName('doctor')[<%=i%>].checked) {this.form.submit();} else {removeHCP('<%=ele.getFullName()%>','filterForm');}"/>
				</td>
			</tr> 
<%

			i++;
			
		}
	
	
		
	}
%>
			<tr>
				<td colspan="5" style="color: #CC3333; text-align: right; font-weight: bold; font-size: 12px;">
					Select checkbox to update designated HCP
				</td>
			</tr>
		</table>
		
		<input type="hidden" id="removeID" name="removeID" value="" >
	</form>

<%
}
%>
</div>

<br /><br />
<form id="searchForm" action="viewVisitedHCPs.jsp" method="post">
	<div align=center>
	<table class="fTable" style="border: none;" border=0>
		<tr>
			<th colspan=2>Search HCPs</th>
		</tr>
		<tr style="text-align: left;">
			<td class="subHeaderVertical">Last Name:</td>
			<td ><input type="text" name="filter_name" size="30" maxlength="255" ></td>
		</tr>
		<tr style="text-align: left;">
			<td class="subHeaderVertical">Specialty:</td>
			<td ><input type="text" name="filter_specialty" size="30" maxlength="255" ></td>
		</tr>
		<tr style="text-align: left;">
			<td class="subHeaderVertical">Zip Code: </td>
			<td><input type="text" name="filter_zip" size="10" maxlength="10"></td>
		</tr>
	</table>
	<br />
	<input type="submit" name="update_filter" value="Search">
	</div>
</form>


<%@include file="/footer.jsp"%>

<%@page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>

<%@page import="edu.ncsu.csc.itrust.beans.SurveyBean"%>
<%@page import="edu.ncsu.csc.itrust.action.SurveyAction"%>
<%@page import="edu.ncsu.csc.itrust.BeanBuilder"%>
<%@page import="edu.ncsu.csc.itrust.exception.iTrustException"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust"%>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - Patient Survey";
%>

<%@include file="/header.jsp"%>

<%
SurveyAction action = new SurveyAction(prodDAO, loggedInMID.longValue());
SurveyBean surveyBean = null;
long visitID = 0;
//get office visit ID from previous JSP
String visitIDStr = request.getParameter("ovID");
String visitDateStr = request.getParameter("ovDate");


if(visitIDStr != null && !visitIDStr.equals("")) {
	try {
		visitID = Long.parseLong(visitIDStr);

	} catch(Exception e) {
		e.printStackTrace();
	}
}

boolean formIsFilled = request.getParameter("formIsFilled") != null
&& request.getParameter("formIsFilled").equals("true");

if(formIsFilled) {
	surveyBean = new BeanBuilder<SurveyBean>().build(request.getParameterMap(), new SurveyBean());
	surveyBean.setVisitID(visitID);
	
	String waitingMinutes = request.getParameter("waitingMinutesString");
	if (waitingMinutes != null && !waitingMinutes.equals(""))
		surveyBean.setWaitingRoomMinutes(Integer.parseInt(waitingMinutes));
	
	String examMinutes = request.getParameter("examMinutesString");
	if (examMinutes != null && !examMinutes.equals(""))
		surveyBean.setExamRoomMinutes(Integer.parseInt(examMinutes));
	
	//update satisfaction number in bean
	if (request.getParameter("Satradios") != null) {
		if (request.getParameter("Satradios").equals("satRadio5")) {
			surveyBean.setVisitSatisfaction(5);
		} if (request.getParameter("Satradios").equals("satRadio4")) {
			surveyBean.setVisitSatisfaction(4);
		} if (request.getParameter("Satradios").equals("satRadio3")) {
			surveyBean.setVisitSatisfaction(3);
		} if (request.getParameter("Satradios").equals("satRadio2")) {
			surveyBean.setVisitSatisfaction(2);
		} if (request.getParameter("Satradios").equals("satRadio1")) {
			surveyBean.setVisitSatisfaction(1);
		}
	}

    //update treatment number in bean
	if (request.getParameter("Treradios") != null) {
		if (request.getParameter("Treradios").equals("treRadio5")) {
			surveyBean.setTreatmentSatisfaction(5);
		} if (request.getParameter("Treradios").equals("treRadio4")) {
			surveyBean.setTreatmentSatisfaction(4);
		} if (request.getParameter("Treradios").equals("treRadio3")) {
			surveyBean.setTreatmentSatisfaction(3);
		} if (request.getParameter("Treradios").equals("treRadio2")) {
			surveyBean.setTreatmentSatisfaction(2);
		} if (request.getParameter("Treradios").equals("treRadio1")) {
			surveyBean.setTreatmentSatisfaction(1);
		}
	}
    
    try {
    	//add survey data
    	action.addSurvey(surveyBean, visitID);
		response.sendRedirect("viewMyRecords.jsp?message=Survey%20Successfully%20Submitted");
		
     } catch(Exception e) {
    	%><span ><%=e.getMessage()%></span><%
    }
} else{
	if(visitDateStr.contains("<")) throw new iTrustException("Illegal parameter for ovDate.");
}


	
%>
<div id=Header>
<h1>iTrust Patient Survey for Office Visit on <%=visitDateStr %></h1></div>
<div id=Content>

<form action="survey.jsp" method="post" name="mainForm">
<input type="hidden" name="formIsFilled" value="true"> 
<input type="hidden" name="ovID" value="<%=visitIDStr%>">
<h3>How long did you have to wait during your visit?</h3>
<table>
	<tr>
		<td>In the waiting room?</td>
		<td><input type="text" name="waitingMinutesString" maxlength =3 size=3 /> </td>
		<td>1-999 minutes</td>
	</tr>
	
	<tr>
		<td>In the examination room <br />before seeing your physician?</td>
		<td><input type="text" name="examMinutesString" maxlength =3 size=3 /> </td>
		<td>1-999 minutes</td>
	</tr>
</table>

<h3>How satisfied were you with your office visit?</h3>
<table><tr><td>
<tr><td><input align="left" type="radio" name="Satradios" value="satRadio5">
Very Satisfied (5) <br /></td></tr>
<tr><td><input align="left" type="radio" name="Satradios" value="satRadio4">
Satisfied (4) <br /></td></tr>
<tr><td><input align="left" type="radio" name="Satradios" value="satRadio3">
Moderately Satisfied (3) <br /></td></tr>
<tr><td><input align="left" type="radio" name="Satradios" value="satRadio2">
Somewhat Unhappy (2) <br /></td></tr>
<tr><td><input align="left" type="radio" name="Satradios" value="satRadio1">
Very Unhappy (1) <br /></td></tr>
</table>

<h3>How satisfied were you with the treatment or information you received?</h3>
<table><tr><td>
<tr><td><input align="left" type="radio" name="Treradios" value="treRadio5">
Very Satisfied (5) <br /></td></tr>
<tr><td><input align="left" type="radio" name="Treradios" value="treRadio4">
Satisfied (4) <br /></td></tr>
<tr><td><input align="left" type="radio" name="Treradios" value="treRadio3">
Moderately Satisfied (3) <br /></td></tr>
<tr><td><input align="left" type="radio" name="Treradios" value="treRadio2">
Somewhat Unhappy (2) <br /></td></tr>
<tr><td><input align="left" type="radio" name="Treradios" value="treRadio1">
Very Unhappy (1) <br /></td></tr>
</table>
<br />
<br />

<input type="submit" style="font-size: 16pt; font-weight: bold;" value="Submit Survey">
</form>
</div>

<%@include file="/footer.jsp"%>

<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.beans.HCPDiagnosisBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.MedicationBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.LabProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.action.MyDiagnosisAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.DiagnosisBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.LOINCDAO"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PrescriptionBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>
<%@page import="java.util.List"%>
<%@page import="java.util.ArrayList"%>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - My Diagnoses";
%>

<%@include file="/header.jsp"%>

<%
session.removeAttribute("personnelList");
String icdcode = request.getParameter("icd");
LOINCDAO loincDAO = DAOFactory.getProductionInstance().getLOINCDAO();
MyDiagnosisAction action = new MyDiagnosisAction(prodDAO, loggedInMID.longValue());
List<DiagnosisBean> diagnoses = action.getDiagnoses();
%>

<input type="hidden" name="formIsFilled" value="true">
<div align="center">
<h2>Diagnoses</h2>
<table class="fTable">
	<tr>
		<th>Diagnosis</th>
	</tr>
<%for(DiagnosisBean d : diagnoses) { %>
	<tr>
		<td><a href="myDiagnoses.jsp?icd=<%=d.getICDCode()%>"><%=d.getFormattedDescription()%></a></td>
	</tr>
<%} %>
</table>
</div> 
<br />

<%
if (icdcode != null && !icdcode.equals("")) {
	List<HCPDiagnosisBean> hcps = action.getHCPByDiagnosis(icdcode); 
%>
<div align="center">
	<h2>HCPs having experience with diagnosis <%=icdcode %></h2>
	<table class="fTable">
		<tr>
			<th>HCP</th>
			<th>Number of Patients</th>
			<th>List of Prescriptions</th>
			<th>List of Lab Procedures</th>
			<th>Average Office Visit Satisfaction</th>
			<th>Average Treatment Satisfaction</th>
		</tr>
<%
	if(hcps.size() > 0) {
		List<PersonnelBean> personnelList = new ArrayList<PersonnelBean>();
		int index = 0;
		for (HCPDiagnosisBean bean: hcps) {
%>
		<tr>
			<td><a href="/iTrust/auth/viewPersonnel.jsp?personnel=<%=index%>"><%=bean.getHCPName()%></a></td>
			<td><%=bean.getNumPatients()%></td>
			<td><%if (bean.getMedList().isEmpty()) { out.print("(no prescriptions)"); } else { 
					for (PrescriptionBean p: action.getPrescriptionsByHCPAndICD(bean.getHCP(), icdcode)) {%>
						<a href="viewPrescriptionInformation.jsp?visitID=<%=p.getVisitID()%>&presID=<%=p.getId()%>">
							<%=p.getMedication().getNDCode() + " " + p.getMedication().getDescription() + " prescribed"%>
						</a><br/>
					<%}} %></td>
						
			<td><%if (bean.getLabList().isEmpty()) { out.print("(no lab procedures ordered)"); } else { for (LabProcedureBean p: bean.getLabList()) {%><%=p.getLoinc() + " " + loincDAO.getProcedures(p.getLoinc()).get(0).getComponent() + " procedure ordered"%><br/><%}} %></td>
			<td><%=bean.getVisitSatisfaction() %></td>
			<td><%=bean.getTreatmentSatisfaction() %></td>
		</tr>
<%
			PersonnelBean personnel = new PersonnelDAO(prodDAO).getPersonnel(bean.getHCP());
			personnelList.add(personnel);
			index++;
		}
		session.setAttribute("personnelList", personnelList);
	}
	else {
%>
		<tr>
			<td colspan="6" align="center">
				No Data
			</td>
		</tr>
<%
	}
%>
	</table>
</div>
<%
}
%>

<%@include file="/footer.jsp"%>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.Date"%>
<%@page import="java.text.DateFormat"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="edu.ncsu.csc.itrust.action.EditApptTypeAction"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyApptsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.ApptBean"%>
<%@page import="java.util.List"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View Message";
%>

<%@include file="/header.jsp" %>

<%
	ViewMyApptsAction action = new ViewMyApptsAction(prodDAO, loggedInMID.longValue());
	EditApptTypeAction types = new EditApptTypeAction(prodDAO, loggedInMID.longValue());
	ApptBean original = null;

	if (request.getParameter("apt") != null) {
		String aptParameter = request.getParameter("apt");
		int aptIndex = 0;
		try {
			aptIndex = Integer.parseInt(aptParameter);
		} catch (NumberFormatException nfe) {
			response.sendRedirect("viewMyAppts.jsp");
		}
		List<ApptBean> appts = null; 
		if (session.getAttribute("appts") != null) {
			appts = (List<ApptBean>) session.getAttribute("appts");
			if(aptIndex > appts.size() || aptIndex < 0) {
				aptIndex = 0;
				response.sendRedirect("oops.jsp");
			}
		} else {
			response.sendRedirect("viewMyAppts.jsp");
		}
		original = (ApptBean)appts.get(aptIndex);
	}
	else {
		response.sendRedirect("viewMyAppts.jsp");
	}
	
	Date d = new Date(original.getDate().getTime());
	DateFormat format = new SimpleDateFormat("MM/dd/yyyy hh:mm a");
	
%>
	<div>
		<table width="100%" style="background-color: #DDDDDD;">
			<tr>
				<th>Appointment Info</th>
			</tr>
			<tr>
				<td><b>Patient:</b> <%= action.getName(original.getHcp()) %></td>
			</tr>
			<tr>
				<td><b>Type:</b> <%= original.getApptType() %></td>
			</tr>
			<tr>
				<td><b>Date/Time:</b> <%= format.format(d) %></td>
			</tr>
			<tr>
				<td><b>Duration:</b> <%= types.getDurationByType(original.getApptType())+" minutes" %></td>
			</tr>
		</table>
	</div>
	
	<table>
		<tr>
			<td colspan="2"><b>Comments:</b></td>
		</tr>
		<tr>
			<td colspan="2"><%= (original.getComment()== null)?"No Comment":original.getComment() %></td>
		</tr>
	</table>


<%@include file="/footer.jsp" %>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.beans.LabProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyRecordsAction"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View Laboratory Procedures";
%>

<%@include file="/header.jsp" %>

<%
ViewMyRecordsAction action = new ViewMyRecordsAction(prodDAO, loggedInMID.longValue());
List<LabProcedureBean> proc = action.getLabs();
int id = 0;

if(request.getParameter("id") != null) {
	try {
		id = Integer.parseInt(request.getParameter("id"));
	} catch (NumberFormatException nfe) {
		response.sendRedirect("calendar.jsp");
	}
}

LabProcedureBean bean = null;

for(LabProcedureBean b : proc) {
	if(b.getPid() == id) {
		bean = b;
		break;
	}
}

if(bean == null) {
	response.sendRedirect("calendar.jsp");
}
%>

<br />
<table  class="fTable" align=center>
	<tr>
		<th colspan="11">Lab Procedures</th>
	</tr>

	<tr class="subHeader">
  		<td>Lab Code</td>
		<td>Status</td>
		<td>Commentary</td>
		<td>Results</td>
		<td>OfficeVisitID</td>
		<td>Updated Date</td>
  	</tr>
	<tr>
		<td ><%=bean.getLoinc()%></td>
		<td ><%=bean.getStatus()%></td>
		<td ><%=bean.getCommentary()%></td>
		<td ><%=bean.getResults()%></td>
		<td ><%=bean.getOvID()%></td>
		<td ><%=bean.getTimestamp()%></td>
	</tr>
</table>
<br /><br />

<%@include file="/footer.jsp" %>

<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>

<%@page import="edu.ncsu.csc.itrust.beans.Email"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyRecordsAction"%>
<%@page import="java.util.List"%>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Email History";
%>

<%@include file="/header.jsp" %>

<div align="center" style="margin: 10px;">
<%
	ViewMyRecordsAction action = new ViewMyRecordsAction(prodDAO, loggedInMID.longValue());
	List<Email> Emails = action.getEmailHistory();
	%><table class="fTable"><%
	if (Emails.size() != 0){
		%> 
		
			<tr>
			<th> To </th> 
			<th> Subject </th> 
			<th> Body </th>
			<th> Date Sent </th>
			</tr>
		<%
		for (Email email : Emails){
%>
		<tr>
			<td> <%=email.getToListStr()%> </td>
			<td> <%=email.getSubject()%> </td> 
			<td> <%=email.getBody()%> </td>
			<td> <%=email.getTimeAdded() %> </td>
		</tr>
<%}

}
	else{
	%>
	<tr><td> No Emails on Record </td></tr>
	<%} %>
	</table>
</div>

<%@include file="/footer.jsp" %>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="edu.ncsu.csc.itrust.action.EditPrescriptionAction"%>
<%@page import="edu.ncsu.csc.itrust.action.EditOfficeVisitAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.OfficeVisitBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PrescriptionBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Edit Prescription Information";
%>

<%@include file="/header.jsp" %>

<%
PersonnelDAO docs = new PersonnelDAO(prodDAO);
OfficeVisitDAO myDAO = new OfficeVisitDAO(prodDAO);
int id = Integer.parseInt(request.getParameter("presID"));

PrescriptionBean prescription = null;
for (PrescriptionBean pres : myDAO.getPrescriptions(Long.parseLong(request.getParameter("visitID")))) {
	if (pres.getId() == id) {
		prescription = pres;
	}
}
if (prescription == null) {
	%><center><h1>Error: Prescription not found, please try again later.</h1></center><%
} else {
%>
	<table align=center border=1 class="fTable">
		<tr>
			<th colspan=5>Prescription Information</th>
		</tr>
		<tr class="subHeader">
			<td align=center>Perscribing Doctor</td>
			<td align=center>Medication</td>
			<td align=center>Dosage</td>
			<td align=center>Dates</td>
			<td align=center colspan=2>Instructions</td>
		</tr>
		<tr>
			<td align=center"><%=docs.getName(myDAO.getOfficeVisit(Long.parseLong(request.getParameter("visitID"))).getHcpID()) %></td>
			<td align=center><%=prescription.getMedication().getDescription() %> (<%=prescription.getMedication().getNDCode() %>)</td>
			<td align=center><%=prescription.getDosage() %>mg</td>
			<td align=center><%=prescription.getStartDateStr() %> to <%=prescription.getEndDateStr() %></td>
			<td align=center><%=prescription.getInstructions() %></td>
		</tr>
	</table>
	<center>
	<form action="home.jsp" method=get>
	<input type=submit name="Home" value="Home">
	</form>
	</center>
<%}%>
<%@include file="/footer.jsp" %>
<%@page import="edu.ncsu.csc.itrust.beans.OfficeVisitBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.LabProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.TransactionBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.TransactionDAO"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyRecordsAction"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.ReportRequestBean"%>
<%@page import="java.util.Hashtable"%>
<%@page import="java.sql.Timestamp"%>
<%@page import="java.util.Date"%>
<%@page import="java.util.List"%>
<%@page import="java.util.ArrayList"%>
<%@page import="java.util.LinkedList"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Patient Home";
%>

<%@include file="/header.jsp" %>

<%
session.removeAttribute("personnelList");
ViewMyRecordsAction surveyAction = new ViewMyRecordsAction(prodDAO,loggedInMID.longValue());
List <OfficeVisitBean> surList = prodDAO.getOfficeVisitDAO().getOfficeVisitsWithNoSurvey(loggedInMID.longValue());
PatientBean patient = new PatientDAO(prodDAO).getPatient(loggedInMID.longValue());
List<ReportRequestBean> reports = surveyAction.getReportRequests();
ViewMyReportRequestsAction reportAction = new ViewMyReportRequestsAction(prodDAO, loggedInMID.longValue());
LabProcedureDAO lpDAO = new LabProcedureDAO(prodDAO);
List<LabProcedureBean> labProcedures = lpDAO.getLabProceduresForPatientForNextMonth(loggedInMID.longValue());
List<PatientBean> represented = new PatientDAO(prodDAO).getRepresented(loggedInMID.longValue());
TransactionDAO transDAO = new TransactionDAO(prodDAO);
PersonnelDAO personnelDAO = new PersonnelDAO(prodDAO);
// Create an ArrayList and index to hide MIDs from user
List<PersonnelBean> personnelList = new ArrayList<PersonnelBean>();
int personnel_counter = 0;
%>

<%

if(request.getParameter("rep") != null && request.getParameter("rep").equals("1")){
%>
<div align=center>
				<span class="iTrustMessage"><%="Adverse Event Successfully Reported"%></span>
</div>
<%} %>


<div id="Header">
<h1>Welcome <%=prodDAO.getAuthDAO().getUserName(Long.valueOf(request.getUserPrincipal().getName()))%>!</h1>
</div>

<div id="Content" align="left">



<h3>Announcements</h3>
<i>New features in iTrust</i>

<ul>
<li>Very happy or upset about your last office visit? Fill out a survey and let us know!</li>
<li>No more typing in a date! We now have a calendar pop-up that makes setting dates incredibly easy!.</li>
</ul>

<h3>Notifications</h3>


<h4>Surveys that still need to be completed</h4>

<%
if (0 != surList.size()) {
%>
<ul>
<%
	for (OfficeVisitBean ov : surList) {
		if (!surveyAction.isSurveyCompleted(ov.getID())){
%>
			<li><a href="survey.jsp?ovID=<%=ov.getVisitID()%>&ovDate=<%=ov.getVisitDateStr()%>">Complete survey</a> for your office visit on <%=ov.getVisitDateStr()%></li>
<%
		}
	}
%>
</ul>
<%
}
else {
%>
	<i>No Unfinished Surveys</i>
<%
}
%>

<h4>Comprehensive Report History</h4>
<%
if (reports.size() != 0) {
%>
<ul>
<%
	for (ReportRequestBean report : reports) {
%>
		<li><%=reportAction.getLongStatus(report.getID())%></li>
<%
	}
%>
</ul>
<%
} 
else {
%>
	<i>No Report Requests</i>
<%
}
%>

<h4>Lab Procedures Completed in the Last Month</h4>
<span>Lab Procedures for you</span><br />

<%
if (0 != labProcedures.size()) {
%>
	<ul>
<%
	for (LabProcedureBean bean : labProcedures) {
%>
		<li>Lab Procedure <%=bean.getLoinc()%> from Office Visit <a href="viewOfficeVisit.jsp?ovID=<%=bean.getOvID()%>"><%=bean.getOvID()%></a><br />
		Results:
<%
		if (bean.getResults().equals("")) {
%> 
			<i>none</i>
<%
		}
		else {
%>
			<%=bean.getResults()%><%
		}
%>
		</li>
<%
	}
%>
	</ul>
<%
}
else {
%>
	<i>No Recent Lab Procedures</i><br />
<%
}
%>

<span>Lab Procedures for Represented Patients</span><br />
<%
if (0 != represented.size()) {
%>
	<ul>
<%
	for (PatientBean patientBean : represented) {
%>
		<b>Patient <%=patientBean.getFullName()%></b>
<%
		List<LabProcedureBean> labBeans = lpDAO.getLabProceduresForPatientForNextMonth(patientBean.getMID());
		if (0 != labBeans.size()) {
%>
			<ul>
<%
			for (LabProcedureBean bean : labBeans) {
%>
				<li>Lab Procedure <%=bean.getLoinc()%><br /> Results:
<%
				if (bean.getResults().equals("")) {
%> 
					<i>none</i> 
<%
				}
				else {
					out.print(bean.getResults());
				}
%>
				</li>
<%
			}
%>
			</ul>
<%
		}
		else {
%>
			<i>No Recent Lab Procedures</i><br />
<%
		}
	}
%>
	</ul>
<%
}
else {
%>
			<i>No Recent Lab Procedures</i><br />
<%
}
%>


<h4>Access by Undesignated Personnel</h4>
<%


Date today = new Date();
Date earlier = new Date();
earlier.setDate(today.getDate() - 90);

List<TransactionBean> transactions = transDAO.getRecordAccesses(patient.getMID(), earlier, today, false);

if (transactions.size() > 0) {
%>
	<ul>
<%
	Hashtable<Long, LinkedList<String>> ht = new Hashtable<Long, LinkedList<String>>();
	for (TransactionBean transaction : transactions) {
		Timestamp accessTime = transaction.getTimeLogged();
		
		// Begin - remove duplicate entries from the display
		Long mid = new Long(transaction.getLoggedInMID());
		String date = new String(accessTime.getMonth() + "/" + accessTime.getDate());
		
		boolean skip = false;
		if(!ht.containsKey(transaction.getLoggedInMID())) {
			ht.put(mid, new LinkedList<String>());
		}
		
		LinkedList<String> ll = (LinkedList<String>) ht.get(mid);
		if(ll.contains(date)) {
			skip = true;
		}
		else {
			ll.add(date);
		}
		// End - remove duplicate entries from the display
		
		if(!skip) {
%>
		<li><%=authDAO.getUserName(mid.longValue())%> accessed your records on <%=date %></li>
<%
		}
	}
%>
	</ul>

<%
}
else {
%>
	<i>None reported</i>
<%
}
%>
</div>

<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.SendMessageAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="java.util.List"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Reply";
%>

<%@include file="/header.jsp" %>

<%

	SendMessageAction action = new SendMessageAction(prodDAO, loggedInMID);
	MessageBean original = null;
	
	if (session.getAttribute("message") != null) {
		original = (MessageBean)session.getAttribute("message");
		session.setAttribute("original", original);
		session.removeAttribute("message");
	} else if (request.getParameter("messageBody") != null) {
		if (session.getAttribute("original") != null) {
			original = (MessageBean)session.getAttribute("original");
			MessageBean messageNew = new MessageBean();
			messageNew.setBody(request.getParameter("messageBody"));
			messageNew.setFrom(loggedInMID);
			messageNew.setTo(original.getFrom());
			messageNew.setSubject(request.getParameter("subject"));
			messageNew.setRead(0);
			messageNew.setParentMessageId(original.getMessageId());
			action.sendMessage(messageNew);
			response.sendRedirect("messageInbox.jsp");
		} 
	} else {
		response.sendRedirect("messageInbox.jsp");
	}
%>

	<h2>Reply</h2>
	<h4>to a message from <%= action.getPersonnelName(original.getFrom()) %>:</h4>
	<form id="mainForm" method="post" action="reply.jsp">
		<span>Subject: </span><input type="text" name="subject" size="50" value="RE: <%= original.getSubject() %>" /><br /><br />
		<span>Message: </span><br />
		<textarea name="messageBody" cols="100" rows="10"></textarea><br />
		<br />
		<input type="submit" value="Send" name="sendMessage"/>
	</form>
	<br />
	<br />


<%@include file="/footer.jsp" %>

<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>

<%@include file="/global.jsp" %>

<%
PatientBean patient = new PatientDAO(DAOFactory.getProductionInstance()).getPatient(loggedInMID); 
%>

<div align="center" style="margin-bottom: 30px;">
	<img src="/iTrust/image/user/<%=loggedInMID.longValue() %>.png" alt="MID picture">
</div>

<div align="center">
<table>
	<tr>
		<td>Name: </td>
		<td><%=patient.getFullName()%></td>
	</tr>
	<tr>
		<td>Gender: </td>
		<td><%=patient.getGender() %></td>
	</tr>
	<tr>
		<td>Location: </td>
		<td><%=patient.getCity() + ", " + patient.getState()%></td>
	</tr>
	<tr>
		<td>DOB: </td>
		<td><%=patient.getDateOfBirthStr() %></td>
	</tr>
	<tr>
		<td>Blood Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
		<td><%=patient.getBloodType() %> </td>
	</tr>
</table>
</div>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.action.EditPatientAction"%>
<%@page import="edu.ncsu.csc.itrust.BeanBuilder"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.action.SetSecurityQuestionAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.SecurityQA"%>
<%@page import="org.apache.commons.validator.CreditCardValidator"%>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - Edit Patient";
%>

<%@include file="/header.jsp"%>

<%
	/* If the patient id doesn't check out, then kick 'em out to the exception handler */
	EditPatientAction action = new EditPatientAction(prodDAO,
			loggedInMID.longValue(), "" + loggedInMID.longValue());
	SetSecurityQuestionAction saction = new SetSecurityQuestionAction(
			prodDAO, loggedInMID.longValue());
	long pid = action.getPid();

	/* Now take care of updating information */
	boolean formIsFilled = request.getParameter("formIsFilled") != null
			&& request.getParameter("formIsFilled").equals("true");
	PatientBean p;
	SecurityQA s;
	if (formIsFilled) {
		p = new BeanBuilder<PatientBean>().build(request
				.getParameterMap(), new PatientBean());
		s = new BeanBuilder<SecurityQA>().build(request
				.getParameterMap(), new SecurityQA());
		try {
			action.updateInformation(p);
			saction.updateInformation(s);
			
%>
		<div align=center>
			<span class="iTrustMessage">Information Successfully Updated</span>
		</div>
<%
	} catch (FormValidationException e) {
%>
		<div align=center>
			<span class="iTrustError"><%=e.getMessage() %></span>
		</div>
<%
		p = action.getPatient();
		}
	} else {
		p = action.getPatient();
		s = saction.retrieveInformation();
	}
%>

<form action="editMyDemographics.jsp" method="post">
<input type="hidden" name="formIsFilled" value="true"> 
<input type="hidden" name="pid" value="<%=pid%>"> 
<br />
<table cellspacing=0 align=center cellpadding=0>
	<tr>
		<td valign=top>
		<table class="fTable" align=center style="width: 350px;">
			<tr>
				<th colspan=2>Patient Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">First Name:</td>
				<td><input name="firstName" value="<%=p.getFirstName()%>" type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Last Name:</td>
				<td><input name="lastName" value="<%=p.getLastName()%>" type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Email:</td>
				<td><input name="email" value="<%=p.getEmail()%>" type="text">
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Address:</td>
				<td><input name="streetAddress1"
					value="<%=p.getStreetAddress1()%>" type="text"><br />
				<input name="streetAddress2" value="<%=p.getStreetAddress2()%>"
					type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">City:</td>
				<td><input name="city" value="<%=p.getCity()%>" type="text">
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">State:</td>
				<td><itrust:state name="state" value="<%=p.getState()%>" /></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Zip:</td>
				<td><input name="zip1" value="<%=p.getZip1()%>" maxlength="5"
					type="text" size="5"> - <input name="zip2"
					value="<%=p.getZip2()%>" maxlength="4" type="text" size="4">
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Phone:</td>
				<td><input name="phone1" value="<%=p.getPhone1()%>" type="text"
					size="3" maxlength="3"> - <input name="phone2"
					value="<%=p.getPhone2()%>" type="text" size="3" maxlength="3">
				- <input name="phone3" value="<%=p.getPhone3()%>" type="text"
					size="4" maxlength="4"></td>
			</tr>

			<tr>
				<td class="subHeaderVertical">Mother MID:</td>
				<td><input name="MotherMID" value="<%=p.getMotherMID()%>"
					maxlength="10" type="text"></td>
			</tr>

			<tr>
				<td class="subHeaderVertical">Father MID:</td>
				<td><input name="FatherMID" value="<%=p.getFatherMID()%>"
					maxlength="10" type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Credit Card Type:</td>
				<td><select name="creditCardType">
				<option value="">Select:</option>
				<option value="MASTERCARD" <%= p.getCreditCardType().equals("MASTERCARD") ? "selected" : "" %>>Mastercard</option>
				<option value="VISA" <%= p.getCreditCardType().equals("VISA") ? "selected" : "" %>>Visa</option>
				<option value="DISCOVER" <%= p.getCreditCardType().equals("DISCOVER") ? "selected" : "" %>>Discover</option>
				<option value="AMEX" <%= p.getCreditCardType().equals("AMEX") ? "selected" : "" %>>American Express</option>
				</select>
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Credit Card Number:</td>
				<td><input name="creditCardNumber" value="<%=p.getCreditCardNumber()%>"
					maxlength="19" type="text"></td>
			</tr>
		</table>
		</td>
		<td width="15px">&nbsp;</td>
		<td valign=top>
		<table class="fTable" align=center style="width: 350px;">
			<tr>
				<th colspan=2>Insurance Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">Name:</td>
				<td><input name="icName" value="<%=p.getIcName()%>" type="text">
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Address:</td>
				<td><input name="icAddress1" value="<%=p.getIcAddress1()%>"
					type="text"><br />
				<input name="icAddress2" value="<%=p.getIcAddress2()%>" type="text">
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">City:</td>
				<td><input name="icCity" value="<%=p.getIcCity()%>" type="text">
				</td>
			</tr>

			<tr>
				<td class="subHeaderVertical">State:</td>
				<td><itrust:state name="icState" value="<%=p.getIcState()%>" />
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Zip:</td>
				<td><input name="icZip1" value="<%=p.getIcZip1()%>"
					maxlength="5" type="text" size="5"> - <input name="icZip2"
					value="<%=p.getIcZip2()%>" maxlength="4" type="text" size="4">
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Phone:</td>
				<td><input name="icPhone1" value="<%=p.getIcPhone1()%>"
					type="text" size="3" maxlength="3"> - <input
					name="icPhone2" value="<%=p.getIcPhone2()%>" type="text" size="3"
					maxlength="3"> - <input name="icPhone3"
					value="<%=p.getIcPhone3()%>" type="text" size="4" maxlength="4">

				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Insurance ID:</td>
				<td><input name="icID" value="<%=p.getIcID()%>" type="text">
				</td>
			</tr>
		</table>
		</td>
	</tr>
	<tr height="15px">
		<td colspan=3>&nbsp;</td>
	</tr>
	<tr>
		<td valign="top">
		<table class="fTable" align=center style="width: 350px;">
			<tr>
				<th colspan=2>Authentication Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">Security Question:</td>
				<td><input name="question" value="<%=s.getQuestion()%>"
					type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Security Answer:</td>
				<td><input name="answer" value="<%=s.getAnswer()%>"
					type="password"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Confirm Security Answer:</td>
				<td><input name="confirmAnswer" value="<%=s.getAnswer()%>"
					type="password"></td>
			</tr>
		</table>
		</td>
		<td width="15px">&nbsp;</td>
		<td valign="top">
		<table class="fTable" align=center style="width: 350px;">
			<tr>
				<th colspan=2>Emergency Contact</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">Name:</td>
				<td><input name="emergencyName"
					value="<%=p.getEmergencyName()%>" type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Phone:</td>
				<td><input name="emergencyPhone1"
					value="<%=p.getEmergencyPhone1()%>" type="text" size="3"
					maxlength="3"> - <input name="emergencyPhone2"
					value="<%=p.getEmergencyPhone2()%>" type="text" size="3"
					maxlength="3"> - <input name="emergencyPhone3"
					value="<%=p.getEmergencyPhone3()%>" type="text" size="4"
					maxlength="4"></td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<br />
<div align="center"><input type="submit" name="action"
	style="font-size: 16pt; font-weight: bold;" value="Edit Patient Record">
<br />
<br />
Note: in order to set your password, use the "Reset Password" link at
the login page.</div>
</form>

<%@include file="/footer.jsp"%>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean" %>
<%@page import="edu.ncsu.csc.itrust.beans.HCPLinkBean" %>
<%@page import="edu.ncsu.csc.itrust.beans.PrescriptionBean" %>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import= "java.util.ArrayList"%>
<%@page import= "java.util.Date"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO" %>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - Get My Prescription Report";
%>

<%@include file="/header.jsp"%>

<%
List<HCPLinkBean> LinkList = new ArrayList<HCPLinkBean>();
PatientBean patient = new PatientDAO(prodDAO).getPatient(loggedInMID.longValue()); 
ViewPrescriptionRecordsAction action = new ViewPrescriptionRecordsAction(prodDAO,loggedInMID.longValue());
List<PatientBean> representees = action.getRepresentees();
boolean showMine = false;
boolean showOther = false;
boolean adEvent = false;
boolean showAdverseButton = false;
	
	if (request.getParameter("mine") != null && request.getParameter("mine").equals("View Current")) showMine = true;
	if (request.getParameter("other") != null && request.getParameter("other").equals("View")) showOther = true;
	if (request.getParameter("representee") != null && request.getParameter("representee").equals("-1")) showOther = false;
	if (request.getParameter("adevent") != null && request.getParameter("adevent").equals("Report Adverse Events")){
		adEvent = true;
		int check[] = new int[100];
		boolean oneChecked = false;
		for(int i = 0; i<100; i++){
			if (null != request.getParameter("checking"+i) && request.getParameter("checking"+i).toLowerCase().equals("y")) {
				check[i] = 1;
				oneChecked = true;
			}
		}
			
		List<HCPLinkBean> l = (List<HCPLinkBean>) session.getAttribute("beanlist");
		int i = 0;
		for(HCPLinkBean b : l){
			if(check[i] == 1) b.setChecked(true);
			else b.setChecked(false);
			i++;
		}
		session.setAttribute("beanlist", l);
		if(oneChecked){
			response.sendRedirect("reportAdverseEvent.jsp?prescriptions=yes");
		}
		else{%>
		<div align=center>
			<span class="iTrustError"><%="Must report on at least one prescription" %></span>
		</div>
		<% }
	}
	
%>
<div align="center">
	<form action="viewPrescriptionRecords.jsp" method="post">
		<table>
			<tr>
				<td>
					<span style="font-size: 24px; font-weight: bold;">View My Own Prescriptions</span>
				</td>
				<td>
					<input type="submit" name="mine" value="View Current"></input>
				</td>
			</tr>
			<tr>
				<td>
					<span style="font-size: 24px; font-weight: bold;">View Other's Prescriptions</span>
				</td>
			
<%	
		if (representees.size() > 0) { 
%>
				<td>
					<select name="representee">
						<option value="-1"></option>
<%
			int index = 0;
			for (PatientBean representee : representees) { 
%>
						<option value="<%=index %>"><%=representee.getFullName()%></option>
<%
				index ++;
			} 
%>
					</select>
					<input type="submit" name="other" value="View"></input>
				</td>
<%	
		} else { 
%>
				<td>
					<i>You are not anyone's representative</i>
				</td>
<%	
		} 
%>
			</tr>
		</table>
	</form>
	<br />
	<table class="fTable">
	
	
	
	
	
<%
	if (showMine) { 
		List<PrescriptionBean> prescriptions = action.getPrescriptionsForPatient(loggedInMID.longValue());
		if (prescriptions.size() == 0) { 
%>
		<tr>
			<td colspan=4>
				<i>No prescriptions found</i>
			</td>
		</tr>
<%
		} else { 
%>
		<tr>
			<th colspan=5><%= patient.getFullName() %></th>
		</tr>
		<tr class="subHeader">
			<td>ND Code</td>
			<td>Description</td>
			<td>Duration</td>
			<td>Prescribing HCP</td>
			<td>Report Adverse Event (Y/N)</td>
		</tr>
<%			
			int a = 0;
			showAdverseButton = true;
			for (PrescriptionBean prescription : prescriptions) {
				Date date = new Date();
				date.setYear(date.getYear()-1);
				if(prescription.getEndDate().after(date)){
%>
		<tr>
			<td ><a href="viewPrescriptionInformation.jsp?visitID=<%=prescription.getVisitID()%>&presID=<%=prescription.getId()%>"><%=prescription.getMedication().getNDCodeFormatted() %></a></td>
			<td ><%=prescription.getMedication().getDescription() %></td>
			<td ><%=prescription.getStartDateStr() %> to <%=prescription.getEndDateStr() %></td>
			<td ><%=action.getPrescribingDoctor(prescription).getFullName() %></td>
			<% 
				HCPLinkBean HLbean = new HCPLinkBean();
				HLbean.setPrescriberMID(action.getPrescribingDoctor(prescription).getMID());
				HLbean.setDrug(prescription.getMedication().getDescription());
				HLbean.setCode(prescription.getMedication().getNDCode());
				LinkList.add(HLbean);
			%>
			<td>
	<form action="viewPrescriptionRecords.jsp" method="post">
			<input name="checking<%=a%>" type="text" value="N" size="1" maxlength="1"></input></td>
			<%a++;%>
			
		</tr>

	
	
<%			
			}}
		}
	} else if (showOther) {
		PatientBean representee = representees.get(Integer.parseInt(request.getParameter("representee"))); 
%>
		<tr>
			<th colspan=4><%= representee.getFullName() %></th>
		</tr>
<%	
		List<PrescriptionBean> prescriptions = action.getPrescriptionsForPatient(representee.getMID());
		if (prescriptions.size() == 0) { 
%>
		<tr>
			<td colspan=4>
				<i>No prescriptions found</i>
			</td>
		</tr>
<%
		} else { 
%>
		<tr class="subHeader">
			<td>ND Code</td>
			<td>Description</td>
			<td>Duration</td>
			<td>Prescribing HCP</td>
		</tr>
<%			
			for (PrescriptionBean prescription : prescriptions) { 
%>
		<tr>
			<td ><%=prescription.getMedication().getNDCodeFormatted() %></td>
			<td ><%=prescription.getMedication().getDescription() %></td>
			<td ><%=prescription.getStartDateStr() %> to <%=prescription.getEndDateStr() %></td>
			<td ><%= action.getPrescribingDoctor(prescription).getFullName() %></td>
		</tr>
<%
			} 
		}
	} 
%>
	</table>
		
	<br />
	<%
	if (showMine && showAdverseButton) {
		session.setAttribute("beanlist", LinkList);
		%>
		<input type="submit" name="adevent" value="Report Adverse Events"></input>
		</form>
		<%
	} %>
</div>

<%@include file="/footer.jsp"%>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.ArrayList"%>
<%@page import="java.util.List"%>
<%@page import="java.text.DateFormat"%>
<%@page import="java.util.Date"%>
<%@page import="edu.ncsu.csc.itrust.action.EditPHRAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.AllergyBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.FamilyMemberBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.HealthRecord"%>
<%@page import="edu.ncsu.csc.itrust.beans.OfficeVisitBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.ProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyRecordsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.LabProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>


<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - View My Records";
%>

<%@include file="/header.jsp"%>

<%
session.removeAttribute("personnelList");

	String representee = request.getParameter("rep");
	boolean isRepresenting = false;
	if (representee != null && !"".equals(representee)) {
		int representeeIndex = Integer.parseInt(representee);
		List<PatientBean> representees = (List<PatientBean>) session.getAttribute("representees");
		if(representees != null) {
			loggedInMID = new Long("" + representees.get(representeeIndex).getMID());
//			session.removeAttribute("representees");
			isRepresenting = true;
//		loggedInMID = new Long(action.representPatient(representee));
%>
<span >You are currently viewing your representee's records</span><br />
<%
		}
	}
	
	PatientBean patient = new PatientDAO(prodDAO).getPatient(loggedInMID.longValue());
	DateFormat df = DateFormat.getDateInstance();
	ViewMyRecordsAction action = new ViewMyRecordsAction(prodDAO, loggedInMID.longValue());

	patient = action.getPatient();
	List<HealthRecord> records = action.getAllHealthRecords();
	List<OfficeVisitBean> officeVisits = action.getAllOfficeVisits();
	List<FamilyMemberBean> family = action.getFamilyHistory();
	List<AllergyBean> allergies = action.getAllergies();
	List<PatientBean> represented = action.getRepresented();
	List<LabProcedureBean> procs = action.getLabs();
%> 

<%
if (request.getParameter("message") != null) {
%>
	<div class="iTrustMessage" style="font-size: 24px;" align=center>
		<%=request.getParameter("message") %>
	</div>
<%
}
%>
<br />
<table align=center>
	<tr> <td>
	<div style="float:left; margin-right:5px;">
		<table class="fTable" border=1 align="center">
			<tr>
				<th colspan="2" >Patient Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">Name:</td>
				<td ><%=patient.getFullName()%></td>
			</tr>
			<tr>
				<td  class="subHeaderVertical">Address:</td>
				<td >
					<%=patient.getStreetAddress1()%><br />
					<%="".equals(patient.getStreetAddress2()) ? ""
						: patient.getStreetAddress2() + "<br />"%>
					<%=patient.getStreetAddress3()%><br />
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Phone:</td>
				<td ><%=patient.getPhone()%></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Email:</td>
				<td ><%=patient.getEmail()%></td>
			</tr>
			<tr>
				<th colspan="2">
					Insurance Information
				</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">
					Provider Name:
				</td>
				<td ><%=patient.getIcName()%></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Address:</td>
				<td >
					<%=patient.getIcAddress1()%><br />
					<%="".equals(patient.getIcAddress2()) ? "" : patient
						.getIcAddress2()
						+ "<br />"%>
					<%=patient.getIcAddress3()%><br />
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Phone:</td>
				<td ><%=patient.getIcPhone()%></td>
			</tr>
		</table>
	</div>
	<div style="float: left; margin-left: 5px;">
		<table class="fTable" border=1 align="center">
			<tr>
				<th>Office Visits</th>
				<th>Survey</th>
			</tr>
<%
	for (OfficeVisitBean ov : officeVisits) {
%>
			<tr>
				<td >
					<a href="viewOfficeVisit.jsp?ovID=<%=ov.getVisitID()%><%=isRepresenting ? "&repMID=" + loggedInMID.longValue() : "" %>"><%=df.format(ov.getVisitDate())%></a></td>
<%
		if (action.isSurveyCompleted(ov.getVisitID())) {
%>
				<td>&nbsp;</td>
<%
		} else {
%>
				<td >
					<a	href="survey.jsp?ovID=<%=ov.getVisitID()%>&ovDate=<%=df.format(ov.getVisitDate())%>">
						Complete Visit Survey
					</a>
				</td>
<%
		}
	}
%>
			</tr>
			<tr>
				<td>&nbsp;</td>
			</tr>
			<tr>
				<td colspan=2 align=center>
					<a href="viewPrescriptionRecords.jsp?<%=isRepresenting ? "&rep=" + loggedInMID.longValue() : "" %>">
						Get Prescriptions
					</a>
				</td>
			</tr>
		</table>
	</div>
	</td> </tr>
</table>

<br />
<br />
<table class="fTable" align="center" >
	<tr>
		<th colspan="9">
			Family Medical History
		</th>
	</tr>
	<tr class="subHeader">
		<td>Name</td>
		<td>Relation</td>
		<td>High Blood Pressure</td>
		<td>High Cholesterol</td>
		<td>Diabetes</td>
		<td>Cancer</td>
		<td>Heart Disease</td>
		<td>Smoker</td>
		<td>Cause of Death</td>
	</tr>
	<%
		if (family.size() == 0) {
	%>
	<tr>
		<td colspan="9" style="text-align: center;">
			No Relations on record
		</td>
	</tr>
	<%
		} else {
			for (FamilyMemberBean member : family) {
	%>
	<tr>
		<td ><%=member.getFullName()%></td>
		<td ><%=member.getRelation()%></td>
		<td  align=center><%=action.doesFamilyMemberHaveHighBP(member) ? "x"
							: ""%></td>
		<td  align=center><%=action
									.doesFamilyMemberHaveHighCholesterol(member) ? "x"
							: ""%></td>
		<td  align=center><%=action
									.doesFamilyMemberHaveDiabetes(member) ? "x"
							: ""%></td>
		<td  align=center><%=action.doesFamilyMemberHaveCancer(member) ? "x"
							: ""%></td>
		<td  align=center><%=action
									.doesFamilyMemberHaveHeartDisease(member) ? "x"
							: ""%></td>
		<td  align=center><%=action.isFamilyMemberSmoker(member) ? "x"
					: ""%></td>
		<td ><%=action.getFamilyMemberCOD(member)%></td>
	</tr>
	<%
			}
		}
	%>
</table>
<br />
<br />
<table align=center>
	<tr> <td>
	<div style="float:left; margin-right:5px;">
		<table class="fTable" align="center" >
			<tr>
				<th colspan="2">Allergies</th>
			</tr>
			<tr class="subHeader">
				<td>Allergy Description</td>
				<td>First Found</td>
			</tr>

<%
	if (allergies.size() == 0) {
%>
			<tr>
				<td colspan="2" >No Allergies on record</td>
			</tr>
<%
	} else {
		for (AllergyBean allergy : allergies) {
%>
			<tr>
				<td ><%=allergy.getDescription()%></td>
				<td ><%=df.format(allergy.getFirstFound())%></td>
			</tr>
<%
		}
	}
%>
		</table>
	</div>
	
	<div style="float:left; margin-left:5px;">
		<table class="fTable">
			<tr>
				<th> Patients <%=patient.getFirstName()%> Represents </th>
			</tr>
			<tr class="subHeader">
				<td>Patient</td>
			</tr>
<%
	if (represented.size() == 0) {
%>
			<tr>
				<td >
					<%=patient.getFirstName()%> is not representing any patients
				</td>
			</tr>
<%
	} else {
		int index = 0;
		for (PatientBean p : represented) {
%>
			<tr>
				<td >
<%
	if(isRepresenting) {
%>
		<%=p.getFullName()%>
<%
	} else {
%>
		<a href="viewMyRecords.jsp?rep=<%=index%>"><%=p.getFullName()%></a>
<%
	}
%>
					
				</td>
			</tr>
<%
		index++;
		}
		if(!isRepresenting) {
			session.setAttribute("representees", represented);
		}
	}
%>
		</table>
	</div>
	</td></tr>
</table>
<br />
<br />
<table class="fTable" align="center">
	<tr>
		<th colspan="10">
			Basic Health History
		</th>
	</tr>
	<tr class="subHeader" >
		<td>Height</td>
		<td>Weight</td>
		<td>Smokes?</td>
		<td>Blood Pressure</td>
		<td>HDL</td>
		<td>LDL</td>
		<td>Triglycerides</td>
		<td>Total Cholesterol</td>
		<td>Last Recorded</td>
		<td>By Personnel</td>
	</tr>
<%
	if(records.size() > 0) {
		List<PersonnelBean> personnelList = new ArrayList<PersonnelBean>();
		int index = 0;
		for (HealthRecord hr : records) {
%>
	<tr>
		<td ><%=hr.getHeight()%>in</td>
		<td ><%=hr.getWeight()%>lbs</td>
		<td ><%=hr.isSmoker() ? "Y" : "N"%></td>
		<td ><%=hr.getBloodPressure()%> mmHg</td>
		<td ><%=hr.getCholesterolHDL()%> mg/dL</td>
		<td ><%=hr.getCholesterolLDL()%> mg/dL</td>
		<td ><%=hr.getCholesterolTri()%> mg/dL</td>
		<td ><%=hr.getTotalCholesterol()%> mg/dL</td>
		<td ><%=df.format(hr.getDateRecorded())%></td>
		<%
			PersonnelBean personnel = new PersonnelDAO(prodDAO).getPersonnel(hr.getPersonnelID());
			personnelList.add(personnel);
		%>
		<td ><a href="/iTrust/auth/viewPersonnel.jsp?personnel=<%=index%>"><%=personnel.getFullName()%></a></td>
	</tr>
<%
			index++;
		}
		session.setAttribute("personnelList", personnelList);
	}
	else {
%>
		<tr>
			<td colspan=11 align=center>
				No Data
			</td>
		</tr>
<%		
	}
%>
</table>
<br />
<br />
<table class="fTable" align="center">
	<tr>
		<th colspan="11">Lab Procedures</th>
	</tr>
	<tr class="subHeader">
		<td>Patient</td>
		<td>Lab Code</td>
		<td>Status</td>
		<td>Results</td>
		<td>OfficeVisitID</td>
		<td>Commentary</td>
		<td>Updated Date</td>
	</tr>
<%
	if(procs.size() > 0 ) {
		for (LabProcedureBean bean : procs) {
%>
	<tr>
		<td ><%=patient.getFullName()%></td>
		<td ><%=bean.getLoinc()%></td>
		<td ><%=bean.getStatus()%></td>
		<td ><%=bean.getResults()%></td>
		<td ><%=bean.getOvID()%></td>
		<td ><%=bean.getCommentary()%></td>
		<td ><%=df.format(bean.getTimestamp())%></td>

	</tr>
<%
		}
	}
	else {
%>
		<tr>
			<td colspan=11 align=center>
				No Data
			</td>
		</tr>
<%
	}
%>
</table>
<br />
<br />
<table class="fTable" align="center">
	<tr>
		<th colspan="4">Immunizations</th>
	</tr>
	<tr class="subHeader">
  		<td>CPT Code</th>
	 	<td>Description</th>
   		<td>Date Received</th>
   		<td>Adverse Event</th>
  	</tr>
<%
boolean hasNoData = true;
for (OfficeVisitBean ov: officeVisits) {
	List<ProcedureBean> ovProcs = action.getCompleteOfficeVisit(ov.getVisitID()).getProcedures();
	for (ProcedureBean proc: ovProcs) {
		if (null != proc.getAttribute() && proc.getAttribute().equals("immunization")) {
			hasNoData=false;
%>
	<tr>
		<td><%=proc.getCPTCode()%></td>
		<td><%=proc.getDescription() %></td>
		<td><%=proc.getDate() %></td>
		<td>
		<%
			Date date = new Date();
			date.setYear(date.getYear()-1);
			if(proc.getDate().after(date)){
		%>
		<a href="reportAdverseEvent.jsp?presID=<%=proc.getDescription()%>&HCPMID=<%=ov.getHcpID() %>&code=<%=proc.getCPTCode()%>">Report</a>	
	
<%
		}%></td></tr><% }
	}
}
if(hasNoData) {
%>
	<tr>
		<td colspan=4 align=center>
			No Data
		</td>
	</tr>
<%
}
%>
</table>
<br />

<%@include file="/footer.jsp"%>

<div class="menu_category">
	<span>Add</span><br />
	<a href="/iTrust/auth/hcp-uap/addPatient.jsp">Patient</a><br />
	<a href="/iTrust/auth/hcp/addUAP.jsp">UAP</a><br />
</div>
<div class="menu_category">
	<span>Edit</span><br />
	<a href="/iTrust/auth/hcp-uap/editBasicHealth.jsp">Basic Health Information</a><br />
	<a href="/iTrust/auth/staff/editMyDemographics.jsp">My Demographics</a><br />
	<a href="/iTrust/auth/hcp-uap/editPatient.jsp">Patient Information</a><br />
	<a href="/iTrust/auth/hcp-uap/editPHR.jsp">PHR Information</a><br />
	<a href="/iTrust/auth/hcp/editRepresentatives.jsp">Representatives</a><br />
	<a href="/iTrust/auth/staff/editPersonnel.jsp">UAPs</a><br />
</div>
<div class="menu_category">
	<span>Appointments</span><br />
	<a href="/iTrust/auth/hcp/scheduleAppt.jsp">Schedule Appointment</a><br />
	<a href="/iTrust/auth/hcp/viewMyAppts.jsp">View My Appointments</a><br />
</div>
<div class="menu_category">
	<span>Messaging</span><br />
	<a href="/iTrust/auth/hcp/messageInbox.jsp">Message Inbox</a><br />
	<a href="/iTrust/auth/hcp/messageOutbox.jsp">Message Outbox</a><br />
</div>
<div class="menu_category">
	<span>View</span><br />
	<a href="/iTrust/auth/hcp-uap/viewPatientOfficeVisitHistory.jsp">All Patients</a><br />
	<a href="/iTrust/auth/hcp/calendar.jsp">Appointment Calendar</a><br />
	<a href="/iTrust/auth/hcp/LabProcHCP.jsp">Laboratory Procedures</a><br />
	<a href="/iTrust/auth/hcp-uap/viewMyReportRequests.jsp">My Report Requests</a><br />
</div>
<div class="menu_category">
	<span>Report</span><br />
	<a href="/iTrust/auth/hcp-er/emergencyReport.jsp">Emergency Patient Report</a><br />
</div>
<div class="menu_category">
	<span>Telemedicine</span><br />
	<a href="/iTrust/auth/hcp/editPatientList.jsp">Edit Patient List</a><br />
	<a href="/iTrust/auth/hcp/monitorPatients.jsp">Monitor Patients</a><br />
</div>
<div class="menu_category">
	<span>Other</span><br />
	<a href="/iTrust/auth/hcp/hcpConsultation.jsp">Consultations</a><br />
	<a href="/iTrust/auth/hcp-uap/chronicDiseaseRisks.jsp">Chronic Disease Risks</a><br />
	<a href="/iTrust/auth/hcp-uap/documentOfficeVisit.jsp">Document Office Visit</a><br />
	<a href="/iTrust/auth/hcp-uap/showEmailHistory.jsp">Email History</a><br />
	<a href="/iTrust/auth/hcp/visitReminders.jsp">Office Visit Reminders</a><br />
	<a href="/iTrust/auth/surveyResults.jsp">Satisfaction Survey Results</a><br />
	<a href="/iTrust/auth/hcp/viewPrescriptionRenewalNeeds.jsp">Potential Prescription-Renewals</a><br />
</div>


<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>
<%@page import="java.util.Date"%>
<%@page import="java.text.DateFormat"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="java.sql.Timestamp"%>
<%@page import="edu.ncsu.csc.itrust.action.EditApptTypeAction"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyApptsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.ApptBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View My Messages";
%>

<%@include file="/header.jsp" %>

<div align=center>
	<h2>My Appointments</h2>
<%
	ViewMyApptsAction action = new ViewMyApptsAction(prodDAO, loggedInMID.longValue());
	EditApptTypeAction types = new EditApptTypeAction(prodDAO, loggedInMID.longValue());
	List<ApptBean> appts = action.getMyAppointments();
	session.setAttribute("appts", appts);
	if (appts.size() > 0) { %>	
	<table class="fancyTable">
		<tr>
			<th>Patient</th>
			<th>Appointment Type</th>
			<th>Appointment Date/Time</th>
			<th>Duration</th>
			<th></th>
		</tr>
<%		 
		boolean conflicts[] = new boolean[appts.size()];
		for(int i=0; i<appts.size(); i++) {
			ApptBean a = appts.get(i);
			long t = a.getDate().getTime();
			long m = types.getDurationByType(a.getApptType()) * 60 * 1000;
			Timestamp time = new Timestamp(t+m);
			for(int j=i+1; j<appts.size(); j++) {
				if(appts.get(j).getDate().before(time)) {
					conflicts[i] = true;
					conflicts[j] = true;
				}
			}
		}
%>
<%		int index = 0;
		for(ApptBean a : appts) { 
			String comment = "";
			if(a.getComment() == null)
				comment = "No Comment";
			else
				comment = "<a href='viewAppt.jsp?apt="+index+"'>Read Comment</a>";
				
			Date d = new Date(a.getDate().getTime());
			DateFormat format = new SimpleDateFormat("MM/dd/yyyy hh:mm a");
			
			String row = "";
			if(conflicts[index])
				row = "<tr style='font-weight: bold;'";
			else
				row = "<tr";
%>
			<%=row+" "+((index%2 == 1)?"class=\"alt\"":"")+">"%>
				<td><%= action.getName(a.getPatient()) %></td>
				<td><%= a.getApptType() %></td>
				<td><%= format.format(d) %></td>
				<td><%= types.getDurationByType(a.getApptType())+" minutes" %></td>
				<td>
					<%=comment %>
				</td>
			</tr>
	<%		index ++; %>
	<%	} %>
	</table>
<%	} else { %>
	<div>
		<i>You have no Appointments</i>
	</div>
<%	} %>	
	<br />
</div>

<%@include file="/footer.jsp" %>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean" %>
<%@page import="edu.ncsu.csc.itrust.beans.PrescriptionBean" %>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean" %>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO" %>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO" %>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - My Patients with Potential Prescription-Renewal Needs";
%>

<%@include file="/header.jsp"%>

<%
PersonnelBean self = new PersonnelDAO(prodDAO).getPersonnel(loggedInMID); 

ViewPrescriptionRenewalNeedsAction expAction = new ViewPrescriptionRenewalNeedsAction(prodDAO, loggedInMID.longValue());

//List<PersonnelBean> personnelList = prodDAO.getPersonnelDAO().getAllPersonnel();

//session.setAttribute("personnelList", personnelList);

%>
<div align="center">
	<br />
	<table class="fTable">
	
	
	
	
	
	<%
		List<PatientBean> patients = expAction.getRenewalNeedsPatients();

		//patients = new PatientDAO(prodDAO).getAllPatients(); // Temporary test
		if (patients.size() == 0) { 
%>
		<tr>
			<td colspan=4>
				<i>No patients have renewal needs.</i>
			</td>
		</tr>
<%
		} else { 
%>
		<tr>
			<th colspan=4><%= self.getFullName() %></th>
		</tr>
		<tr class="subHeader">
			<td>Patient Name</td>
			<td>Phone Number</td>
			<td>Email Address</td>
		</tr>
<%	
	for (PatientBean patient : patients) { 
		//PersonnelBean doctor = expAction.getPrescribingDoctor(prescription);
%>
		<tr>
			<td ><a href='sendEmailNotification.jsp?mid=<%=patient.getMID()%>'><%=patient.getFullName() %></a></td>
			<td ><%=patient.getPhone() %></td>
			<td ><%=patient.getEmail() %></td>
			
			
			
			
		</tr>
<%			
			}
		}
	
	
%>
	</table>	
	<br />
</div>

<%@include file="/footer.jsp"%>

<%@page errorPage="/auth/exceptionHandler.jsp" %>

<!-- imports -->
<%@page import="edu.ncsu.csc.itrust.action.ReferralManagementAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.ReferralBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>
<%@page import="edu.ncsu.csc.itrust.enums.Role"%>
<%@page import="edu.ncsu.csc.itrust.exception.DBException"%>
<%@page import="java.util.ArrayList"%>
<%@page import="java.util.List"%>

<!-- header -->
<%@include file="/global.jsp" %>
<%pageTitle = "iTrust - HCP Consultations";%>
<%@include file="/header.jsp" %>

<%
String task = request.getParameter("task");
%>


<%if (task == null || task.equalsIgnoreCase("")) {%>
	<center>
		<h1>HCP Consultations</h1>
		<form action='hcpConsultation.jsp' method=post>
			<input type='submit' name='task' value='Send a Consultation'>
			<input type='submit' name='task' value='View Pending Consultations'>
		</form>
	</center>
	<br />
	
	
<%} else if (task.equalsIgnoreCase("Send a Consultation")) {%>
	<%
	// Find all patients associated with this hcp
	PatientDAO patDAO = new PatientDAO(prodDAO);
	List<PatientBean> allPatients = patDAO.getAllPatients();
	List<PatientBean> myPatients = new ArrayList<PatientBean>();
	for (PatientBean pat : allPatients) {
		if (patDAO.checkDeclaredHCP(pat.getMID(), loggedInMID)) {
			myPatients.add(pat);
		}
	}
	
	// Find all hcps who are not this hcp
	PersonnelDAO personnel = new PersonnelDAO(prodDAO);
	List<PersonnelBean> allPersonnel = personnel.getAllPersonnel();
	List<PersonnelBean> allHCPs = new ArrayList<PersonnelBean>();
	for (PersonnelBean per : allPersonnel) {
		if (per.getRole() == Role.HCP && per.getMID() != loggedInMID) {
			allHCPs.add(per);
		}
	}
	%>
	<center>
		<h1>Send a Consultation</h1>
		<form action='hcpConsultation.jsp' method=post>
		<input type='hidden' name='task' value='form'>
		<table>
			<tr>
				<td>Select Patient:</td>
				<td>
					<select size=1 name='patient'>
					<%for (PatientBean pat : myPatients) {%>
						<option value='<%=pat.getMID()%>'><%=pat.getFullName() %></option>
					<%}%>
					</select>
				</td>
			</tr>
			<tr>
				<td>Select HCP</td>
				<td>
					<select size=1 name='hcp'>
					<%for (PersonnelBean per : allHCPs) { %>
						<option value='<%=per.getMID()%>'><%=per.getFullName() %></option>
					<%} %>
					</select>
				</td>
			</tr>
			<tr>
				<td></td>
				<td><input type='submit' value='Select'></td>
			</tr>
		</table>
		</form>
	</center>
	
	
<%} else if (task.equalsIgnoreCase("View Pending Consultations")) {%>
	<%
	ReferralManagementAction refAction = new ReferralManagementAction(prodDAO, loggedInMID);
	List<ReferralBean> refsFromMe = refAction.getReferralsSentFromMe();
	List<ReferralBean> refsToMe = refAction.getReferralsSentToMe();
	PatientDAO patientDAO = new PatientDAO(prodDAO);
	PersonnelDAO personnelDAO = new PersonnelDAO(prodDAO);
	%>
	<center>
		<h1>View Pending Consultations</h1>
	</center>
	<table align=center border=1 class="fTable">
		<tr>
			<th colspan=5>Outgoing Consultations</th>
		</tr>
		<tr class="subHeader">
			<td>Status</td>
			<td>Patient</td>
			<td>Sending Doctor</td>
			<td>Receiving Doctor</td>
			<td>Edit</td>
		</tr>
		<%if (refsFromMe.isEmpty()) {%>
		<tr>
			<td colspan=5><center>No Outgoing Consultation Requests</center></td>
		</tr>
		<%}%>
		<%for (ReferralBean ref : refsFromMe) {%>
			<tr>
				<td>
				<%=
					(ref.getStatus() == ReferralBean.ReferralStatus.Pending) ? 
							("Pending") : 
							( (ref.getStatus() == ReferralBean.ReferralStatus.Finished) ? 
									("Finished") : 
									("Declined"))
				%>
				</td>
				<td><%=patientDAO.getPatient(ref.getPatientID()).getFullName()%> (<%=ref.getPatientID()%>)</td>
				<td><%=personnelDAO.getPersonnel(ref.getSenderID()).getFullName()%> (<%=ref.getSenderID()%>)</td>
				<td><%=personnelDAO.getPersonnel(ref.getReceiverID()).getFullName()%> (<%=ref.getReceiverID()%>)</td>
				<td><a href='hcpConsultation.jsp?task=update&toFrom=from&id=<%=ref.getId()%>'>edit</a></td>
			</tr>
		<%}%>
	</table>
	<br />
	<br />
		<table align=center border=1 class="fTable">
		<tr>
			<th colspan=5>Incoming Consultations</th>
		</tr>
		<tr class="subHeader">
			<td>Status</td>
			<td>Patient</td>
			<td>Sending Doctor</td>
			<td>Receiving Doctor</td>
			<td>Edit</td>
		</tr>
		<%if (refsToMe.isEmpty()) {%>
		<tr>
			<td colspan=5><center>No Incoming Consultation Requests</center></td>
		</tr>
		<%}%>
		<%for (ReferralBean ref : refsToMe) {%>
			<tr>
				<td>
				<%=
					(ref.getStatus() == ReferralBean.ReferralStatus.Pending) ? 
							("Pending") : 
							( (ref.getStatus() == ReferralBean.ReferralStatus.Finished) ? 
									("Finished") : 
									("Declined"))
				%>
				</td>
				<td><%=patientDAO.getPatient(ref.getPatientID()).getFullName()%> (<%=ref.getPatientID()%>)</td>
				<td><%=personnelDAO.getPersonnel(ref.getSenderID()).getFullName()%> (<%=ref.getSenderID()%>)</td>
				<td><%=personnelDAO.getPersonnel(ref.getReceiverID()).getFullName()%> (<%=ref.getReceiverID()%>)</td>
				<td><a href='hcpConsultation.jsp?task=update&toFrom=to&id=<%=ref.getId()%>'>edit</a></td>
			</tr>
		<%}%>
	</table>
	<br />
	
	
<%} else if (task.equalsIgnoreCase("update")) { %>
	<%
	String toFrom = request.getParameter("toFrom");
	String id = request.getParameter("id");
	// Test for parameter errors:
	// 	empty parameters or options
	if (toFrom == null || 
		toFrom.equalsIgnoreCase("") || 
		id == null || 
		id.equalsIgnoreCase("") || 
		!(toFrom.equalsIgnoreCase("to") || toFrom.equalsIgnoreCase("from"))) {%>
		<center>
		<h1>ERROR: Missing important parameters. <a href='hcpConsultation.jsp'>Try Again</a></h1>
		</center>
	<%}
	ReferralManagementAction refAction = new ReferralManagementAction(prodDAO, loggedInMID);
	long rid = Long.parseLong(id);
	List<ReferralBean> referrals = null;
	if (toFrom.equalsIgnoreCase("to")) {
		referrals = refAction.getReferralsSentToMe();
	} else {
		referrals = refAction.getReferralsSentFromMe();
	}
	ReferralBean myRef = null;
	for (ReferralBean ref : referrals) {
		if (ref.getId() == rid) {
			myRef = ref;
			break;
		}
	}
	if (myRef == null) {%>
		<center>
		<h1>ERROR: Referral does not exist. <a href='hcpConsultation.jsp'>Choose another</a></h1>
		</center>
	<%}%>
	<center>
	<h1>Update Consultation Form:</h1><br />
	</center>
	<table border=10 bordercolor=darkred align=center><tr><td>
	<table border='0' width='400'>
		<tr>
			<td>Patient:</td>
			<td><%=(new PatientDAO(prodDAO)).getPatient(myRef.getPatientID()).getFullName()%></td>
		</tr>
		<tr>
			<td>Sending HCP:</td>
			<td><%=(new PersonnelDAO(prodDAO)).getPersonnel(myRef.getSenderID()).getFullName()%></td>
		</tr>
		<tr>
			<td>Receiving HCP:</td>
			<td><%=(new PersonnelDAO(prodDAO)).getPersonnel(myRef.getReceiverID()).getFullName()%></td>
		</tr>
	</table>
	<form action='hcpConsultation.jsp' method=post>
	<input type='hidden' name='task' value='change'>
	<input type='hidden' name='patID' value='<%=myRef.getPatientID()%>'>
	<input type='hidden' name='toID' value='<%=myRef.getReceiverID()%>'>
	<input type='hidden' name='fromID' value='<%=myRef.getSenderID()%>'>
	<input type='hidden' name='refID' value='<%=myRef.getId()%>'>
	<%if (toFrom.equalsIgnoreCase("to")) {%>
	Referral Details:<br />
	<textarea name="refDetails" readonly rows="5" cols="48" style="background-color: lightgrey"><%=myRef.getReferralDetails()%></textarea><br />
	Consultation Details:<br />
	<textarea name="consDetails" rows="5" cols="48"><%=myRef.getConsultationDetails()%></textarea><br />
	<%} else { %>
	Referral Details:<br />
	<textarea name="refDetails" rows="5" cols="48"><%=myRef.getReferralDetails()%></textarea><br />
	Consultation Details:<br />
	<textarea name="consDetails" rows="5" cols="48" readonly style="background-color: lightgrey"><%=myRef.getConsultationDetails()%></textarea><br />
	<%} %>
	<select size=1 name='status'>
		<option <%=(myRef.getStatus() == ReferralBean.ReferralStatus.Pending) ? "selected='selected'" : "" %>>Pending</option>
		<option <%=(myRef.getStatus() == ReferralBean.ReferralStatus.Finished) ? "selected='selected'" : "" %>>Finished</option>
		<option <%=(myRef.getStatus() == ReferralBean.ReferralStatus.Declined) ? "selected='selected'" : "" %>>Declined</option>
	</select>
	</td></tr></table>
	<center>
	<input type='submit' value='Update'>
	</center>
	</form>
	

<%} else if (task.equalsIgnoreCase("change")) {%>
	<%
	try {
		long patID = Long.parseLong(request.getParameter("patID"));
		long toID = Long.parseLong(request.getParameter("toID"));
		long fromID = Long.parseLong(request.getParameter("fromID"));
		long refID = Long.parseLong(request.getParameter("refID"));
		String consDetails = request.getParameter("consDetails");
		String refDetails = request.getParameter("refDetails");
		String status = request.getParameter("status");
		
		ReferralBean myRef = new ReferralBean();
		myRef.setId(refID);
		myRef.setPatientID(patID);
		myRef.setReceiverID(toID);
		myRef.setSenderID(fromID);
		myRef.setConsultationDetails(consDetails);
		myRef.setReferralDetails(refDetails);
		myRef.setStatus(
			status.equalsIgnoreCase("Pending") ? 
					ReferralBean.ReferralStatus.Pending :
					status.equalsIgnoreCase("Finished") ?
							ReferralBean.ReferralStatus.Finished :
							ReferralBean.ReferralStatus.Declined
		);
		
		ReferralManagementAction refAction = new ReferralManagementAction(prodDAO, loggedInMID);
		refAction.updateReferral(myRef);
		%>
		<center>
		<h1>Consultation updated</h1><br />
		</center>
		<table border=10 bordercolor=darkgreen align=center><tr><td>
		<table border='0' width='400'>
			<tr>
				<td>Patient:</td>
				<td><%=(new PatientDAO(prodDAO)).getPatient(myRef.getPatientID()).getFullName()%></td>
			</tr>
			<tr>
				<td>Sending HCP:</td>
				<td><%=(new PersonnelDAO(prodDAO)).getPersonnel(myRef.getSenderID()).getFullName()%></td>
			</tr>
			<tr>
				<td>Receiving HCP:</td>
				<td><%=(new PersonnelDAO(prodDAO)).getPersonnel(myRef.getReceiverID()).getFullName()%></td>
			</tr>
		</table>
		Referral Details:<br />
		<textarea name="refDetails" readonly rows="5" cols="48" style="background-color: lightgrey"><%=myRef.getReferralDetails()%></textarea><br />
		Consultation Details:<br />
		<textarea name="consDetails" readonly rows="5" cols="48" style="background-color: lightgrey"><%=myRef.getConsultationDetails()%></textarea><br />
		</td></tr></table>
		<br />
		
		
		
	<%} catch (Exception e) {%>
		<center>
		<h1>ERROR: Referral couldn't be updated</h1>
		</center>
	<%} %>
	
	
<%} else if (task.equalsIgnoreCase("form")) {%>
	<%
	String patient = request.getParameter("patient");
	String hcp = request.getParameter("hcp");
	PatientBean pat = (new PatientDAO(prodDAO)).getPatient(Long.parseLong(patient));
	PersonnelBean per = (new PersonnelDAO(prodDAO)).getPersonnel(Long.parseLong(hcp));
	%>
	<center>
	<h1>Consultation Form:</h1>
	<form action='hcpConsultation.jsp' method=post>
	<input type='hidden' name='task' value='send'>
	<input type='hidden' name='patient' value='<%=patient%>'>
	<input type='hidden' name='hcp' value='<%=hcp%>'>
	<table border=10 bordercolor=darkred><tr><td>
	<table border='0' width='400'>
		<tr>
			<td>Refer Patient:</td>
			<td><%=pat.getFullName()%> (<%=patient%>)</td>
		</tr>
		<tr>
			<td>To HCP:</td>
			<td><%=per.getFullName()%> (<%=hcp%>)</td>
		</tr>
	</table>
	<textarea name="msg" rows="5" cols="48">Details</textarea><br />
	</td></tr></table>
	<input type='submit' value='Submit'>
	</form>
	</center>
	
	
<%} else if (task.equalsIgnoreCase("send")) {
	String patient = request.getParameter("patient");
	String hcp = request.getParameter("hcp");
	String msg = request.getParameter("msg");
	
	PatientBean pat = (new PatientDAO(prodDAO)).getPatient(Long.parseLong(patient));
	PersonnelBean per = (new PersonnelDAO(prodDAO)).getPersonnel(Long.parseLong(hcp));
	
	ReferralManagementAction refAction = new ReferralManagementAction(prodDAO, loggedInMID);
	
	// Create a new ReferralBean and load all the information into it.
	ReferralBean newRef = new ReferralBean();
	newRef.setReferralDetails(msg);
	newRef.setConsultationDetails("");
	newRef.setPatientID(Long.parseLong(patient));
	newRef.setReceiverID(Long.parseLong(hcp));
	newRef.setSenderID(loggedInMID);
	newRef.setStatus(ReferralBean.ReferralStatus.Pending);
	
	try {
		refAction.sendReferral(newRef);%>
		<center>
		<h1>Thank you, your Consultation Request was sent.</h1>
		<table border=10 bordercolor=darkgreen><tr><td>
		<table border='0' width='400'>
			<tr>
				<td>Refer Patient:</td>
				<td><%=pat.getFullName()%> (<%=patient%>)</td>
			</tr>
			<tr>
				<td>To HCP:</td>
				<td><%=per.getFullName()%> (<%=hcp%>)</td>
			</tr>
		</table>
		<textarea readonly name="msg" rows="5" cols="48" style="background-color: lightgrey"><%=msg %></textarea><br />
		</td></tr></table>
		</center>
		<br />
	<%} catch (DBException e) {%>
		<center><h1>ERROR: The referral couldn't be sent. <%=e.toString() %></h1></center>
	<%}%>
	
	
<%} %>
<%@include file="/footer.jsp" %>
<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.beans.LabProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.action.EditPatientAction"%>
<%@page import="edu.ncsu.csc.itrust.action.LabProcHCPAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View Laboratory Procedures";
%>

<%@include file="/header.jsp" %>

<%
LabProcHCPAction action2 = new LabProcHCPAction(prodDAO, loggedInMID.longValue());
if(request.getParameter("priv")!=null && request.getParameter("priv").equals("yes")){
	action2.changePrivacy(Long.parseLong(request.getParameter("ID")));
}

/* Require a Patient ID first */
String pidString = (String)session.getAttribute("pid");
if (pidString == null || 1 > pidString.length()) {
	response.sendRedirect("/iTrust/auth/getPatientID.jsp?forward=hcp/LabProcHCP.jsp");
   	return;
}
else {
	session.removeAttribute("pid");
}

/* If the patient id doesn't check out, then kick 'em out to the exception handler */
EditPatientAction action = new EditPatientAction(prodDAO,loggedInMID.longValue(),pidString);
long pid = action.getPid();

List<LabProcedureBean> proc = action2.viewProcedures(pid);
%>

<br />
<table  class="fTable">
	<tr>
		<th colspan="11">Lab Procedures</th>
	</tr>

	<tr class="subHeader">
  		<td>Patient</td>
  		<td>Lab Code</td>
  		<td>Rights</td>
		<td>Status</td>
		<td>Commentary</td>
		<td>Results</td>
		<td>OfficeVisitID</td>
		<td>Updated Date</td>
		<td>Edit Office Visit</td>
		<td>Change Privacy</td>
		<td>Action</td>
  	</tr>
<%
	if(proc.size() > 0) {
		for(LabProcedureBean bean : proc){ 
			PatientBean patient = new PatientDAO(prodDAO).getPatient(bean.getPid());
%>
			<tr>
				<td ><%=patient.getFullName()%></td>
				<td ><%=bean.getLoinc()%></td>
				<td ><%=bean.getRights()%></td>
				<td ><%=bean.getStatus()%></td>
				<td ><%=bean.getCommentary()%></td>
				<td ><%=bean.getResults()%></td>
				<td ><%=bean.getOvID()%></td>
				<td ><%=bean.getTimestamp()%></td>
				<td >  <%if(action2.checkAccess(bean.getProcedureID())){%>
					<a href="/iTrust/auth/hcp-uap/editOfficeVisit.jsp?ovID=<%=bean.getOvID()%>">Edit Office Visit</a><br />
				<%} %></td>
				<td >  <%if(action2.checkAccess(bean.getProcedureID())){%>
					<a href="/iTrust/auth/hcp/LabProcHCP.jsp?ID=<%=bean.getProcedureID()%>&priv=yes">Allow/Disallow Viewing</a><br />
				<%} %></td>
				<td > 
					<a href="/iTrust/auth/hcp/UpdateLabProc.jsp?ID=<%=bean.getProcedureID()%>">Update</a><br />
				</td>
				
			</tr>
<%
		}
	}
	else {
%>
	<tr colspan=10>
		<td align=center>
			No Data
		</td>
	</tr>
<%		
	}
%>
</table>
<br /><br />

<%@include file="/footer.jsp" %>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.enums.Role"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.BeanBuilder"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.action.AddUAPAction"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Add UAP";
%>

<%@include file="/header.jsp" %>

<%
	boolean formIsFilled = request.getParameter("formIsFilled") != null
	&& request.getParameter("formIsFilled").equals("true");

	if (formIsFilled) {
		
		//This page is not actually a "page", it just adds a user and forwards.
		PersonnelBean p = new BeanBuilder<PersonnelBean>().build(request.getParameterMap(), new PersonnelBean());
		p.setRole(Role.UAP);
		try{
			long newMID = new AddUAPAction(DAOFactory.getProductionInstance(), loggedInMID).add(p);
			session.setAttribute("mid", Long.toString(newMID));
			String fullname;
			String password;
			password = p.getPassword();
			fullname = p.getFullName();
%>
	<div align=center>
		<span class="iTrustMessage">New UAP <%=fullname%> succesfully added!</span>
		<br />
		<br />
		<table class="fTable">
			<tr>
				<th colspan=2>New UAP Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">MID:</td>
				<td><%=newMID%></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Temporary Password:</td>
				<td><%=password%></td>
			</tr>
		</table>
		<br />Please get this information to <b><%=fullname%></b>! 
		<p>
			<a href = "/iTrust/auth/staff/editPersonnel.jsp">Continue to personnel information.</a>
		</p>
	</div>
<%
		} catch(FormValidationException e){
%>
	<div align=center>
		<span class="iTrustError"><%=e.getMessage() %></span>
	</div>
<%
		}
	}
%>


<div align=center>
<form action="addUAP.jsp" method="post"><input type="hidden"
	name="formIsFilled" value="true"> <br />
<br />
<div style="width: 50%; text-align:left;">Please enter in the name of the new
UAP, with a valid email address. If the user does not have an email
address, use the hospital's email address, [insert pre-defined email],
to recover the password.</div>
<br />
<br />
<table class="fTable">
	<tr>
		<th colspan=2>UAP Information</th>
	</tr>
	<tr>
		<td class="subHeaderVertical">First name:</td>
		<td><input type="text" name="firstName"></td>
	</tr>
	<tr>
		<td class="subHeaderVertical">Last Name:</td>
		<td><input type="text" name="lastName">
	</tr>
	<tr>
		<td class="subHeaderVertical">Email:</td>
		<td><input type="text" name="email"></td>
	</tr>
</table>
<br />
<input type="submit" style="font-size: 16pt; font-weight: bold;" value="Add personnel">
</form>
<br />
</div>

<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.GenerateCalendarAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.ApptBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="java.util.List"%>
<%@page import="java.sql.Timestamp"%>
<%@page import="java.util.ArrayList"%>
<%@page import="java.util.Hashtable"%>
<%@page import="java.util.Calendar"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Appointment Calendar";
%>

<%@include file="/header.jsp" %>

<%
	GenerateCalendarAction action = new GenerateCalendarAction(prodDAO, loggedInMID.longValue());
	List<ApptBean> send;
	boolean conflicts[];
	Hashtable<Integer, ArrayList<ApptBean>> list;
	Calendar a = Calendar.getInstance();
	
	//Calendar Stuff
	String months[] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
	String weekDays[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
	Calendar cal = Calendar.getInstance();
	int origDay = cal.get(Calendar.DAY_OF_MONTH);
	int origMonth = cal.get(Calendar.MONTH);
	int origYear = cal.get(Calendar.YEAR);
	cal.set(Calendar.DAY_OF_MONTH, 1);
	
	int c_month = cal.get(Calendar.MONTH);
	
	//Change Month from JSP
	if(request.getParameter("c") != null) {
		String cur = request.getParameter("c");
		try {
			c_month = Integer.parseInt(cur);
		} catch (NumberFormatException nfe) {
			response.sendRedirect("calendar.jsp");
		}
	}
	
	int month = c_month;
	if(request.getParameter("m") != null) {
		String m = request.getParameter("m");
		int move = 0;
		try {
			move = Integer.parseInt(m);
		} catch (NumberFormatException nfe) {
			response.sendRedirect("calendar.jsp");
		}
		month = c_month + move;
	}
	//Line to set month directly
	cal.set(Calendar.MONTH, month);
	int thisMonth = cal.get(Calendar.MONTH);
	int thisYear = cal.get(Calendar.YEAR);
	//Get First Day of Month
	cal.set(Calendar.DAY_OF_MONTH, 1);
	int firstDayOfMonth = cal.get(Calendar.DAY_OF_WEEK);
	//Get Last Day and Week of Month
	cal.add(Calendar.MONTH, 1);
    cal.add(Calendar.DAY_OF_MONTH, -1);
	int lastDayOfMonth = cal.get(Calendar.DAY_OF_MONTH);
	int lastWeekOfMonth = cal.get(Calendar.WEEK_OF_MONTH);
	
	//Compile Appointments for this month
	list = action.getApptsTable(thisMonth, thisYear);
	send = action.getSend();
	conflicts = action.getConflicts();
	
%>
<div align="center">
<table width="90%">
	<tr>
		<td style="text-align: left;">
			<a href="calendar.jsp?c=<%= month %>&m=-1">Last</a>	
		</td>
		<td style="text-align: center;">
			<h3><%= "Appointments for "+months[thisMonth]+" "+thisYear %></h3>
		</td>
		<td style="text-align: right;">
			<a href="calendar.jsp?c=<%= month %>&m=1">Next</a>
		</td>
	</tr>
</table>
<table id="calendarTable" style="clear: both;">
	<%
		out.print("<tr>\n");
		for(String d : weekDays) {
			out.print("<th>"+d+"</th>");
		}
		out.print("</tr>\n");
		int calDay = 1 + Calendar.SUNDAY - firstDayOfMonth;
		int p = 0;
		for(int i=0; i<lastWeekOfMonth; i++) {
			out.print("<tr>\n");
			for(int j=0; j<7; j++) {
				if(calDay == origDay && thisMonth == origMonth && thisYear == origYear)
					out.print("<td class=\"today\"><div class=\"cell\">");
				else
					out.print("<td><div class=\"cell\">");
				if(calDay > 0 && calDay <= lastDayOfMonth) out.print("<div style=\"float: right;\">"+calDay+"</div>");
				else out.print("<div class=\"blankDay\"></div>");
				if(list.containsKey(calDay)) {
					ArrayList<ApptBean> l = list.get(calDay);
					for(ApptBean b : l) {	
						a.setTimeInMillis(b.getDate().getTime());
						//String t = a.get(Calendar.HOUR)+":"+((a.get(Calendar.MINUTE)<10)? "0"+a.get(Calendar.MINUTE): a.get(Calendar.MINUTE))+" "+((a.get(Calendar.AM_PM) == 0) ? "AM" : "PM");
						out.print("<div class=\"calendarEntry "+(conflicts[p]?"conflict":"")+" \">"+b.getApptType()+"<br /><a name=\""+b.getApptType()+"-"+calDay+"\" style=\"font-size: 12px;\" href=\"viewAppt.jsp?apt="+ p++ +"\" >Read Details</a></div>");
					}
				}
				calDay++;
				out.print("</div></td>\n");
			}
			out.print("</tr>");
		}
		session.setAttribute("appts", send);
	%>
</table>
<br />
<br />
</div>
<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>
<%@page import="java.util.Date"%>
<%@page import="java.sql.Timestamp"%>
<%@page import="java.text.DateFormat"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="edu.ncsu.csc.itrust.beans.ApptBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.ApptTypeBean"%>
<%@page import="edu.ncsu.csc.itrust.action.AddApptAction"%>
<%@page import="edu.ncsu.csc.itrust.action.EditApptTypeAction"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>
<%@page import="edu.ncsu.csc.itrust.exception.iTrustException"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Schedule an Appointment";

String headerMessage = "Please fill out the form properly - comments are optional.";
%>

<%@include file="/header.jsp" %>
<%
	AddApptAction action = new AddApptAction(prodDAO, loggedInMID.longValue());
	EditApptTypeAction types = new EditApptTypeAction(prodDAO, loggedInMID.longValue());
	PatientDAO patientDAO = prodDAO.getPatientDAO();
	
	long patientID = 0L;
	
	if (session.getAttribute("pid") != null) {
		String pidString = (String) session.getAttribute("pid");
		patientID = Long.parseLong(pidString);
		try {
			action.getName(patientID);
		} catch (iTrustException ite) {
			patientID = 0L;
			session.removeAttribute("pid");
		}
	}
	else {
		session.removeAttribute("pid");
	}
	
	if (patientID == 0L) {
		response.sendRedirect("/iTrust/auth/getPatientID.jsp?forward=hcp/scheduleAppt.jsp");
	} else {	
		if (request.getParameter("schedule") != null) {
			if(!request.getParameter("schedDate").equals("")) {	
				ApptBean appt = new ApptBean();
				DateFormat format = new SimpleDateFormat("MM/dd/yyyy hh:mm a");
				Date date = format.parse(request.getParameter("schedDate")+" "+request.getParameter("time1")+":"+request.getParameter("time2")+" "+request.getParameter("time3"));
				appt.setHcp(loggedInMID);
				appt.setPatient(patientID);
				appt.setApptType(request.getParameter("apptType"));
				appt.setDate(new Timestamp(date.getTime()));
				String comment = "";
				if(request.getParameter("comment").equals(""))
					comment = null;
				else 
					comment = request.getParameter("comment");
				appt.setComment(comment);
				try {
				headerMessage = action.addAppt(appt);
				if(headerMessage.startsWith("Success")) {
					session.removeAttribute("pid");
					response.sendRedirect("home.jsp");
				}
		
				} catch (FormValidationException e){
				%>
				<div align=center><span class="iTrustError"><%=e.getMessage()%></span></div>
				<%	
				}
			}
			else 
				headerMessage = "Please input a date for the appointment.";
		}
		
		List<ApptTypeBean> apptTypes = types.getApptTypes();
%>

<div align="left">
	<h2>Schedule an Appointment</h2>
	<h4>with <%= action.getName(patientID) %> (<a href="/iTrust/auth/getPatientID.jsp?forward=hcp/scheduleAppt.jsp">someone else</a>):</h4>
	<span class="iTrustMessage"><%=headerMessage %></span><br /><br />
	<form id="mainForm" method="post" action="scheduleAppt.jsp">
		<span>Appointment Type: </span>
		<select name="apptType">
			<%
				for(ApptTypeBean b : apptTypes) {
					%>
					<option value="<%= b.getName() %>"><%= b.getName() %> - <%= b.getDuration() %> minutes</option>
					<%
				}
			%>
		</select>
		<br /><br />
		<span>Schedule Date: </span><input readonly type="text" name="schedDate" value="" /><input type="button" value="Select Date" onclick="displayDatePicker('schedDate');" /><br /><br />
		<span>Schedule Time: </span>
		<select name="time1">
			<%
				String hour = "";
				for(int i = 1; i <= 12; i++) {
					if(i < 10) hour = "0"+i;
					else hour = i+"";
					%>
						<option value="<%=hour%>"><%=hour%></option>
					<%
				}
			%>
		</select>:<select name="time2">
			<%
				String min = "";
				for(int i = 0; i < 60; i+=5) {
					if(i < 10) min = "0"+i;
					else min = i+"";
					%>
						<option value="<%=min%>"><%=min%></option>
					<%
				}
			%>
		</select>
		<select name="time3"><option value="AM">AM</option><option value="PM">PM</option></select><br /><br />
		<span>Comment: </span><br />
		<textarea name="comment" cols="100" rows="10"></textarea><br />
		<br />
		<input type="submit" value="Schedule" name="schedule"/>
	</form>
	<br />
	<br />
</div>
<%	} %>

<%@include file="/footer.jsp" %>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>

<%@page import="edu.ncsu.csc.itrust.action.ViewMyMessagesAction"%>
<%@page import="edu.ncsu.csc.itrust.action.EditPersonnelAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>
<%@page import="java.util.ArrayList"%>
<%@page import="java.text.DateFormat"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="java.util.Date"%>
<%@page import="java.util.Calendar"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View My Message ";
%>

<%@include file="/header.jsp" %>

<div align=center>
	<h2>My Messages</h2>
	
<%
	ViewMyMessagesAction action = new ViewMyMessagesAction(prodDAO, loggedInMID.longValue());
	EditPersonnelAction f_action = new EditPersonnelAction(prodDAO, loggedInMID.longValue(), loggedInMID.toString());
	PersonnelDAO dao = new PersonnelDAO(prodDAO);
	List<MessageBean> messages = null;
	
	//Edit Filter backend
	boolean editing = false;
	String headerMessage = "";
	String[] fields = new String[6];
	if(request.getParameter("edit") != null && request.getParameter("edit").equals("true")) {
		editing = true;
		
		int i;
		for(i=0; i<6; i++) {
			fields[i] = "";
		}
		
		if(request.getParameter("cancel") != null) 
			response.sendRedirect("messageInbox.jsp"); 
		else if(request.getParameter("test") != null || request.getParameter("save") != null) {
			boolean error = false;
			String nf = "";
			nf += request.getParameter("sender").replace(",","")+",";
			nf += request.getParameter("subject").replace(",","")+",";
			nf += request.getParameter("hasWords").replace(",","")+",";
			nf += request.getParameter("notWords").replace(",","")+",";
			nf += request.getParameter("startDate").replace(",","")+",";
			nf += request.getParameter("endDate");
			
			//Validate Filter
			nf = action.validateAndCreateFilter(nf);
			if(nf.startsWith("Error")) {
				error = true;
				headerMessage = nf;
			}
			
			if(!error) {
				if(request.getParameter("test") != null) {
					response.sendRedirect("messageInbox.jsp?edit=true&testFilter="+nf);
				} else if(request.getParameter("save") != null) {
					f_action.editMessageFilter(nf);
					response.sendRedirect("messageInbox.jsp?filter=true"); 
				}
			}
		}
		
		if(request.getParameter("testFilter") != null) {
			String filter = request.getParameter("testFilter");
			String[] f = filter.split(",", -1);
			for(i=0; i<6; i++) {
				try {
					fields[i] = f[i];
				} catch(ArrayIndexOutOfBoundsException e) {
					//do nothing
				}
			}
		} else {
			String filter = dao.getPersonnel(loggedInMID.longValue()).getMessageFilter();
			if(!filter.equals("")) {
				String[] f = filter.split(",", -1);
				for(i=0; i<6; i++) {
					try {
						fields[i] = f[i];
					} catch(ArrayIndexOutOfBoundsException e) {
						//do nothing
					}
				}
			}
		}
	}
	
	//Sorts messages
	if(request.getParameter("sort") != null) {
		if(request.getParameter("sortby").equals("name")) {
			if(request.getParameter("sorthow").equals("asce")) {
				messages = action.getAllMyMessagesNameAscending();
			} else {
				messages = action.getAllMyMessagesNameDescending();
			}
		} else if(request.getParameter("sortby").equals("time")) {
			if(request.getParameter("sorthow").equals("asce")) {
				messages = action.getAllMyMessagesTimeAscending();
			} else {
				messages = action.getAllMyMessages();
			}
		}
	}
	else {
		messages = action.getAllMyMessages();
	}
	
	//Filters Messages
	boolean is_filtered = false;
	if((request.getParameter("filter") != null && request.getParameter("filter").equals("true")) || request.getParameter("testFilter") != null) {
		String filter = "";
		if(request.getParameter("testFilter") != null) {
			filter = request.getParameter("testFilter");
		} else {
			filter = dao.getPersonnel(loggedInMID.longValue()).getMessageFilter();
		}
		if(!filter.equals("") && !filter.equals(",,,,,")) {
			List<MessageBean> filtered = action.filterMessages(messages, filter);
			messages = filtered;
			is_filtered = true;
		}
	}
	
	session.setAttribute("messages", messages);
	%>
	
	<%
	
	if(editing) {
		%>
		<div class="filterEdit">
			<div align="center">
				<span style="font-size: 13pt; font-weight: bold;">Edit Message Filter</span>
				<%= headerMessage.equals("") ? "" : "<br /><span class=\"iTrustMessage\">"+headerMessage+"</span><br /><br />" %>
				<form method="post" action="messageInbox.jsp?edit=true">
					<table>
						<tr style="text-align: right;">
							<td>
								<label for="sender">Sender: </label>
								<input type="text" name="sender" id="sender" value="<%=fields[0] %>" />
							</td>
							<td style="padding-left: 10px; padding-right: 10px;">
								<label for="hasWords">Has the words: </label>
								<input type="text" name="hasWords" id="hasWords" value="<%=fields[2] %>" />
							</td>
							<td>
								<label for="startDate">Start Date: </label>
								<input type="text" name="startDate" id="startDate" value="<%=fields[4] %>" />
								<input type="button" value="Select Date" onclick="displayDatePicker('startDate');" />
							</td>
						</tr>
						<tr style="text-align: right;">
							<td>
								<label for="subject">Subject: </label>
								<input type="text" name="subject" id="subject" value="<%=fields[1] %>" />
							</td>
							<td style="padding-left: 10px; padding-right: 10px;">
								<label for="notWords">Does not have the words: </label>
								<input type="text" name="notWords" id="notWords" value="<%=fields[3] %>" />
							</td>
							<td>
								<label for="endDate">End Date: </label>
								<input type="text" name="endDate" id="endDate" value="<%=fields[5] %>" />
								<input type="button" value="Select Date" onclick="displayDatePicker('endDate');" />
							</td>
						</tr>
						<tr style="text-align: center;">
							<td colspan="3">
								<input type="submit" name="test" value="Test Filter" />
								<input type="submit" name="save" value="Save" />
								<input type="submit" name="cancel" value="Cancel" />
							</td>
						</tr>
					</table>
				</form>
			</div>
		</div>
		<br />
		<%
	}
	
	%>
	
	<form method="post" action="messageInbox.jsp<%=is_filtered?"?filter=true":"" %>">	
	<table>
	<tr>
		<td>
			<select name="sortby">
					<option value="time">Sort</option>
					<option value="name">Name</option>
					<option value="time">Time</option>
			</select>
		</td>
		<td>
			<select name="sorthow">
					<option value="desc">Order</option>
					<option value="asce">Ascending</option>
					<option value="desc">Descending</option>
			</select>
		</td>
		<td>
			<input type="submit" name="sort" value="Sort" />
		</td>
	</tr>
	<tr>
		<td><a href="messageInbox.jsp?edit=true" >Edit Filter</a></td>
		<td><a href="messageInbox.jsp?filter=true" >Apply Filter</a></td>
	</tr>
	</table>
	</form>
	<br />
	<%if(messages.size() > 0) { %>
	<table class="fancyTable">
		<tr>
			<th>Sender</th>
			<th>Subject</th>
			<th>Received</th>
			<th></th>
		</tr>
<%		int index = 0; 
		for(MessageBean message : messages) {
		if(message.getRead() == 0) {%>
		<tr style="font-weight: bold;" <%=(index%2 == 1)?"class=\"alt\"":"" %>>
			<td><%= action.getName(message.getFrom()) %></td>
			<td><%= message.getSubject() %></td>
			<td><%= message.getSentDate() %></td>
			<td><a href="viewMessageInbox.jsp?msg=<%= index %>">Read</a></td>
		</tr>
<% 			   } else { %>
		<tr <%=(index%2 == 1)?"class=\"alt\"":"" %>>
			<td><%= action.getName(message.getFrom()) %></td>
			<td><%= message.getSubject() %></td>
			<td><%= message.getSentDate() %></td>
			<td><a href="viewMessageInbox.jsp?msg=<%= index %>">Read</a></td>
		</tr>
<% 			  } %>
<%			index ++; %>
<%		} %>
	</table>
<%	} else { %>
	<div>
		<i>You have no messages</i>
	</div>
<%	} %>	
	<br />
</div>

<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>

<%@page import="edu.ncsu.csc.itrust.action.ViewMyMessagesAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View My Sent Messages";
%>

<%@include file="/header.jsp" %>

<div align=center>
	<h2>My Sent Messages</h2>
	<a href="/iTrust/auth/hcp/sendMessage.jsp">Compose a Message</a><br /><br />
<%
	ViewMyMessagesAction action = new ViewMyMessagesAction(prodDAO, loggedInMID.longValue());
	List<MessageBean> messages = null;
	if(request.getParameter("sortby") != null) {
		if(request.getParameter("sortby").equals("name")) {
			if(request.getParameter("sorthow").equals("asce")) {
				messages = action.getAllMySentMessagesNameAscending();
			} else {
				messages = action.getAllMySentMessagesNameDescending();
			}
		} else if(request.getParameter("sortby").equals("time")) {
			if(request.getParameter("sorthow").equals("asce")) {
				messages = action.getAllMySentMessagesTimeAscending();
			} else {
				messages = action.getAllMySentMessages();
			}
		}
	}
	else {
		messages = action.getAllMySentMessages();
	}
	session.setAttribute("messages", messages);
	if (messages.size() > 0) { %>
	<form method="post" action="messageOutbox.jsp">	
	<table>
	<tr>
		<td>
			<select name="sortby">
					<option value="time">Sort</option>
					<option value="name">Name</option>
					<option value="time">Time</option>
			</select>
		</td>
		<td>
			<select name="sorthow">
					<option value="desc">Order</option>
					<option value="asce">Ascending</option>
					<option value="desc">Descending</option>
			</select>
		</td>
		<td>
			<input type="submit" value="Sort" />
		</td>
	</tr>
	</table>
	</form>
	<br />
	<table class="fancyTable">
		<tr>
			<th>To</th>
			<th>Subject</th>
			<th>Sent</th>
			<th></th>
		</tr>
<%		int index = 0; %>
<%		for(MessageBean message : messages) { %>
		<tr <%=(index%2 == 1)?"class=\"alt\"":"" %>>
			<td><%= action.getName(message.getTo()) %></td>
			<td><%= message.getSubject() %></td>
			<td><%= message.getSentDate() %></td>
			<td><a href="viewMessageOutbox.jsp?msg=<%= index %>">Read</a></td>
		</tr>
<%			index ++; %>
<%		} %>
	</table>
<%	} else { %>
	<div>
		<i>You have no messages</i>
	</div>
<%	} %>	
	<br />
</div>

<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.ViewMyMessagesAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="java.util.List"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View Message";
%>

<%@include file="/header.jsp" %>

<%
	ViewMyMessagesAction action = new ViewMyMessagesAction(prodDAO, loggedInMID.longValue());
	MessageBean original = null;

	if (request.getParameter("msg") != null) {
		String msgParameter = request.getParameter("msg");
		int msgIndex = 0;
		try {
			msgIndex = Integer.parseInt(msgParameter);
		} catch (NumberFormatException nfe) {
			response.sendRedirect("messageOutbox.jsp");
		}
		List<MessageBean> messages = null; 
		if (session.getAttribute("messages") != null) {
			messages = (List<MessageBean>) session.getAttribute("messages");
			if(msgIndex > messages.size() || msgIndex < 0) {
				msgIndex = 0;
				response.sendRedirect("oops.jsp");
			}
		} else {
			response.sendRedirect("messageOutbox.jsp");
		}
		original = (MessageBean)messages.get(msgIndex);
		session.setAttribute("message", original);
	}
	else {
		response.sendRedirect("messageOutbox.jsp");
	}
	
%>
	<div>
		<table width="100%" style="background-color: #DDDDDD;">
			<tr>
				<td><b>To:</b> <%= action.getName(original.getTo()) %></td>
			</tr>
			<tr>
				<td><b>Subject:</b> <%= original.getSubject() %></td>
			</tr>
			<tr>
				<td><b>Date &amp; Time:</b> <%= original.getSentDate() %></td>
			</tr>
		</table>
	</div>
	
	<table>
		<tr>
			<td colspan="2"><b>Message:</b></td>
		</tr>
		<tr>
			<td colspan="2"><%= original.getBody() %></td>
		</tr>
		<tr>
			<td colspan="2"><a href="messageOutbox.jsp">Back</a></td>
		</tr>
	</table>


<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.ViewMyMessagesAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="java.util.List"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View Message";
%>

<%@include file="/header.jsp" %>

<%
	ViewMyMessagesAction action = new ViewMyMessagesAction(prodDAO, loggedInMID.longValue());
	MessageBean original = null;

	if (request.getParameter("msg") != null) {
		String msgParameter = request.getParameter("msg");
		int msgIndex = 0;
		try {
			msgIndex = Integer.parseInt(msgParameter);
		} catch (NumberFormatException nfe) {
			response.sendRedirect("messageInbox.jsp");
		}
		List<MessageBean> messages = null; 
		if (session.getAttribute("messages") != null) {
			messages = (List<MessageBean>) session.getAttribute("messages");
			if(msgIndex > messages.size() || msgIndex < 0) {
				msgIndex = 0;
				response.sendRedirect("oops.jsp");
			}
		} else {
			response.sendRedirect("messageInbox.jsp");
		}
		original = (MessageBean)messages.get(msgIndex);
		action.setRead(original);
		session.setAttribute("message", original);
	}
	else {
		response.sendRedirect("messageInbox.jsp");
	}
	
%>
	<div>
		<table width="100%" style="background-color: #DDDDDD;">
			<tr>
				<td><b>From:</b> <%= action.getName(original.getFrom()) %></td>
			</tr>
			<tr>
				<td><b>Subject:</b> <%= original.getSubject() %></td>
			</tr>
			<tr>
				<td><b>Date &amp; Time:</b> <%= original.getSentDate() %></td>
			</tr>
		</table>
	</div>
	
	<table>
		<tr>
			<td colspan="2"><a href="reply.jsp" style="font-size: 18px;">Reply</a></td>
		</tr>
		<tr>
			<td colspan="2"><b>Message:</b></td>
		</tr>
		<tr>
			<td colspan="2"><%= original.getBody() %></td>
		</tr>
	</table>


<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>

<%@page import="edu.ncsu.csc.itrust.action.ViewMyMessagesAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View My Messages";
%>

<%@include file="/header.jsp" %>

<div align=center>
	<h2>My Messages</h2>
<%
	ViewMyMessagesAction action = new ViewMyMessagesAction(prodDAO, loggedInMID.longValue());
	List<MessageBean> messages = action.getAllMyMessages();
	session.setAttribute("messages", messages);
	if (messages.size() > 0) { %>	
	<table class="fTable">
		<tr>
			<th>Sender</th>
			<th>Message</th>
			<th>Received</th>
			<th></th>
		</tr>
<%		int index = 0; %>
<%		for(MessageBean message : messages) { %>
		<tr>
			<td><%= action.getName(message.getFrom()) %></td>
			<td><%= message.getBody() %></td>
			<td><%= message.getSentDate() %></td>
			<td><a href="reply.jsp?msg=<%= index %>">Reply</a></td>
		</tr>
<%			index ++; %>
<%		} %>
	</table>
<%	} else { %>
	<div>
		<i>You have no messages</i>
	</div>
<%	} %>	
	<br />
</div>

<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.SendMessageAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>
<%@page import="edu.ncsu.csc.itrust.exception.iTrustException"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Send a Message";
%>

<%@include file="/header.jsp" %>

<%
	SendMessageAction action = new SendMessageAction(prodDAO, loggedInMID.longValue());
	PatientDAO patientDAO = prodDAO.getPatientDAO();
	
	long patientID = 0L;
	
	if (session.getAttribute("pid") != null) {
		String pidString = (String) session.getAttribute("pid");
		patientID = Long.parseLong(pidString);
		try {
			action.getPatientName(patientID);
		} catch (iTrustException ite) {
			patientID = 0L;
			session.removeAttribute("pid");
		}
	}
	else {
		session.removeAttribute("pid");
	}
	
	if (patientID == 0L) {
		response.sendRedirect("/iTrust/auth/getPatientID.jsp?forward=hcp/sendMessage.jsp");
	} else {	
		if (request.getParameter("messageBody") != null) {
			String body = request.getParameter("messageBody");
			MessageBean message = new MessageBean();
			message.setBody(request.getParameter("messageBody"));
			message.setSubject(request.getParameter("subject"));
			message.setRead(0);
			message.setFrom(loggedInMID);
			message.setTo(patientID);
			try {
			action.sendMessage(message);
			session.removeAttribute("pid");
			response.sendRedirect("messageOutbox.jsp");

			} catch (FormValidationException e){
			%>
			<div align=center><span class="iTrustError"><%=e.getMessage()%></span></div>
			<%	
			}
		}
%>

<div align="left">
	<h2>Send a Message</h2>
	<h4>to <%= action.getPatientName(patientID) %> (<a href="/iTrust/auth/getPatientID.jsp?forward=hcp/sendMessage.jsp">someone else</a>):</h4>
	<form id="mainForm" method="post" action="sendMessage.jsp">
		<span>Subject: </span><input type="text" name="subject" size="50" /><br /><br />
		<span>Message: </span><br />
		<textarea name="messageBody" cols="100" rows="10"></textarea><br />
		<br />
		<input type="submit" value="Send" name="sendMessage"/>
	</form>
	<br />
	<br />
</div>
<%	} %>

<%@include file="/footer.jsp" %>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.EditMonitoringListAction"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Edit Patient List";
%>

<%@include file="/header.jsp" %>

<%
/* Require a Patient ID first */
String pidString = (String)session.getAttribute("pid");
String addOrRemove = "Add";
if (pidString == null || 1 > pidString.length() || "false".equals(request.getParameter("confirmAction"))) {
	session.removeAttribute("pid");
	response.sendRedirect("/iTrust/auth/getPatientID.jsp?forward=hcp/editPatientList.jsp");
   	return;
}
//else {
//	session.removeAttribute("pid");
//}
	
EditMonitoringListAction action = new EditMonitoringListAction(prodDAO,loggedInMID.longValue());
long pid = Long.parseLong(pidString);
String patientName = action.getPatientName(pid);
if (action.isPatientInList(pid)) {
	addOrRemove = "Remove";
}
String confirm = "";
boolean conf_bool = false;

if ("true".equals(request.getParameter("confirmAction"))) {
	if(addOrRemove.equals("Add")) {
		conf_bool = action.addToList(pid);
		if(conf_bool)
			confirm = "Patient " + patientName + " Added";
	} else {
		conf_bool = action.removeFromList(pid);
		if(conf_bool)
			confirm = "Patient " + patientName + " Removed";
	}
	
	session.removeAttribute("pid");
	
}

if (!"".equals(confirm)) {
%>
	<div align=center>
		<span class="iTrustMessage"><%=confirm%></span>
	</div>
<%
} else {
%>

<br />

<form action="editPatientList.jsp" method="post">
	<input type="hidden" name="confirmAction" value="true"></input>
	<input type="submit" value="<%=addOrRemove %> <%=patientName %>">
	<input type="submit" value="Choose Different Patient" onClick="javascript:differentPatient();">
</form>

<script type="text/javascript">

function differentPatient() {
	document.getElementsByName("confirmAction")[0].value="false";
	document.forms[0].submit();
}

</script>

<%
}
%>
<br />
<br />
<br />

<%@include file="/footer.jsp" %>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.action.EditRepresentativesAction"%>
<%@page import="edu.ncsu.csc.itrust.exception.iTrustException" %>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Manage Representatives";
%>

<%@include file="/header.jsp" %>

<br />
<%	
/* Require a Patient ID first */
String pidString = (String)session.getAttribute("pid");
if (pidString == null || 1 > pidString.length()) {
	response.sendRedirect("/iTrust/auth/getPatientID.jsp?forward=hcp/editRepresentatives.jsp");
   	return;
}

EditRepresentativesAction action = null;
List<PatientBean> representees = null;
long pid = 0L;
try {
	action = new EditRepresentativesAction(prodDAO,loggedInMID.longValue(), pidString);
	pid=action.getPid();
	String representee = request.getParameter("UID_repID");
	String confirm = "";
	if(representee!=null && !representee.equals("")){
		confirm = action.addRepresentative(representee);
	}
	String removeId = request.getParameter("removeId");
	if(removeId!=null && !removeId.equals("")){
		confirm = action.removeRepresentative(removeId);
	}

	if(!"".equals(confirm)){
%>
	<div align=center>
		<span class="iTrustMessage"><%=confirm%></span>
	</div>
	<br />
<%
	}
} catch(iTrustException ite) {
%>
	<div align=center>
		<span class="iTrustError"><%=ite.getMessage() %></span>
	</div>
	<br />
<%
} finally {
	representees = action.getRepresented(pid);
}
%>

<form method="post" name="mainForm">
<input type="hidden" name="pid" value="<%=pid %>">
<input type="hidden" id="removeId" name="removeId" value="">
<script type="text/javascript">
	function removeRep(repMID) {
		document.getElementById("removeId").value = repMID;
		document.mainForm.submit();
	}
</script>
<table class="fTable" align="center">
	<tr>
		<th colspan="3">Current Representatives</th>
	</tr>
	<tr class="subHeader">
		<td>Name</td>
		<td style="width: 30px">Action</td>
	</tr>
<%
	if(representees.size() ==0) { 
%>
		<tr><td  colspan="3" style="text-align: center;">No representatives specified</td></tr>
<%
	} 
	else { 
	    for(PatientBean p : representees){
%>
				<tr>		
					<!-- <td ><%=p.getMID() %></td>-->
					<td ><%=p.getFullName()%></td>
					<td ><a href="javascript:removeRep('<%=p.getMID()%>')">Remove</a></td>
				</tr>
<% 
	    }
	}
%>
	<tr><td colspan=2><br></td></tr>
	<tr>
		<td colspan="3">
			<table>
				<tr>
				<td><b>Patient:</b></td>
				<td style="width: 150px; border: 1px solid Gray;">
					<input name="UID_repID" value="" type="hidden">
					<span id="NAME_repID" name="NAME_repID">Not specified</span>
				</td>
				<td>
					<%@include file="/util/getUserFrame.jsp" %>
					<input type="button" onclick="getUser('repID');" value="Find User" >
				</td>
				</tr>
			</table>
		</td>
	</tr>
</table>
<br>
<div align=center>
<input name="action" type="submit" value="Represent this patient">
</div>
</form>

<br /><br /><br />
<itrust:patientNav />

<%@include file="/footer.jsp" %>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO" %>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO" %>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Monitor Patients";
%>

<%@include file="/header.jsp" %>

<%
session.removeAttribute("patientList");

ViewMyRemoteMonitoringListAction action = new ViewMyRemoteMonitoringListAction(prodDAO, loggedInMID.longValue());
List<RemoteMonitoringDataBean> data = action.getPatientsData();
session.setAttribute("patientList", data);

PatientDAO patDAO = prodDAO.getPatientDAO();
PersonnelDAO persDAO = prodDAO.getPersonnelDAO();
%>
<br />

<table class="fTable" align="center">
	<tr>
		<th colspan="6">Patient Data</th>
	</tr>

	<tr class="subHeader">
		<th width="20%">Patient</th>
		<th width="20%">Date</th>
		<th>Systolic Blood Pressure</th>
		<th>Diastolic Blood Pressure</th>
		<th>Glucose Level</th>
		<th>Reporter</th>

	</tr>
	<%
		String highlight = "";
		String reporterName = "";
		int index = 0;
		for (RemoteMonitoringDataBean bean : data) {
			reporterName = "";
			if(bean.getTime() == null) {
				highlight = "#ff6666";
			} else if(((bean.getSystolicBloodPressure() != -1) && (bean.getSystolicBloodPressure() < 90 || bean.getSystolicBloodPressure() > 140))
					|| ((bean.getDiastolicBloodPressure() != -1) && (bean.getDiastolicBloodPressure() < 60 || bean.getDiastolicBloodPressure() > 90))
					|| ((bean.getGlucoseLevel() != -1 ) && (bean.getGlucoseLevel() < 70 || bean.getGlucoseLevel() > 150))) {
				highlight = "#ffff00";
				reporterName = authDAO.getUserName(bean.getReporterMID());
			} else {
				highlight = "";
				reporterName = authDAO.getUserName(bean.getReporterMID());
			}
	%>
	<tr bgcolor="<%=highlight %>">
		<td ><a href="/iTrust/auth/hcp/viewAdditionalInfo.jsp?patient=<%=index%>"><%=action.getPatientName(bean.getPatientMID()) + " (MID " + bean.getPatientMID() + ")"%></a></td>
		<td ><%=bean.getTime() != null ? bean.getTime(): "No Information Provided"%></td>
		<td ><%=(bean.getTime() != null && bean.getSystolicBloodPressure() != -1) ? bean.getSystolicBloodPressure(): ""%></td>
		<td ><%=(bean.getTime() != null && bean.getDiastolicBloodPressure() != -1) ? bean.getDiastolicBloodPressure(): ""%></td>
		<td ><%=(bean.getTime() != null && bean.getGlucoseLevel() != -1) ? bean.getGlucoseLevel(): ""%></td>
		<td><%=reporterName%></td>
	</tr>
	<%
			index++;
		}
	%>
</table>
<br />
<br />

<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.Date"%>
<%@page import="java.text.DateFormat"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="edu.ncsu.csc.itrust.action.EditApptTypeAction"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyApptsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.ApptBean"%>
<%@page import="java.util.List"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View Message";
%>

<%@include file="/header.jsp" %>

<%
	ViewMyApptsAction action = new ViewMyApptsAction(prodDAO, loggedInMID.longValue());
	EditApptTypeAction types = new EditApptTypeAction(prodDAO, loggedInMID.longValue());
	ApptBean original = null;

	if (request.getParameter("apt") != null) {
		String aptParameter = request.getParameter("apt");
		int aptIndex = 0;
		try {
			aptIndex = Integer.parseInt(aptParameter);
		} catch (NumberFormatException nfe) {
			response.sendRedirect("viewMyAppts.jsp");
		}
		List<ApptBean> appts = null; 
		if (session.getAttribute("appts") != null) {
			appts = (List<ApptBean>) session.getAttribute("appts");
			if(aptIndex > appts.size() || aptIndex < 0) {
				aptIndex = 0;
				response.sendRedirect("oops.jsp");
			}
		} else {
			response.sendRedirect("viewMyAppts.jsp");
		}
		original = (ApptBean)appts.get(aptIndex);
	}
	else {
		response.sendRedirect("viewMyAppts.jsp");
	}
	
	Date d = new Date(original.getDate().getTime());
	DateFormat format = new SimpleDateFormat("MM/dd/yyyy hh:mm a");
	
%>
	<div>
		<table width="100%" style="background-color: #DDDDDD;">
			<tr>
				<th>Appointment Info</th>
			</tr>
			<tr>
				<td><b>Patient:</b> <%= action.getName(original.getPatient()) %></td>
			</tr>
			<tr>
				<td><b>Type:</b> <%= original.getApptType() %></td>
			</tr>
			<tr>
				<td><b>Date/Time:</b> <%= format.format(d) %></td>
			</tr>
			<tr>
				<td><b>Duration:</b> <%= types.getDurationByType(original.getApptType())+" minutes" %></td>
			</tr>
		</table>
	</div>
	
	<table>
		<tr>
			<td colspan="2"><b>Comments:</b></td>
		</tr>
		<tr>
			<td colspan="2"><%= (original.getComment()== null)?"No Comment":original.getComment() %></td>
		</tr>
	</table>


<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.action.GetVisitRemindersAction"%>
<%@page import="edu.ncsu.csc.itrust.action.GetVisitRemindersAction.ReminderType"%>
<%@page import="edu.ncsu.csc.itrust.beans.VisitFlag"%>
<%@page import="edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Visit Reminders";
%>

<%@include file="/header.jsp" %>

<%
GetVisitRemindersAction action = new GetVisitRemindersAction(prodDAO, loggedInMID.longValue());
%>
<div align="center">
<h2>Patients Needing Visits</h2>

<form action="visitReminders.jsp" method="post" id="reminderForm">
<input type=hidden id="formIsFilled" value="true" />
<select id="ReminderType" name="ReminderType">
<%
	for (ReminderType rt : ReminderType.values()) {
%>
	<option	<%=rt.getTypeName().equals(request.getParameter("ReminderType")) ? " selected " : " "%> 
		value="<%=rt.getTypeName() %>"><%=rt.getTypeName() %></option>
<%
	}
%>
</select>
<br />
<br />
<input type="submit" id="getReminders" name="getReminders" value="Get Reminders" />
</form>
<br />

<%
if("Get Reminders".equals(request.getParameter("getReminders"))) {
	List<VisitReminderReturnForm> reminders = action.getVisitReminders(ReminderType.getReminderType(request.getParameter("ReminderType")));
	for (VisitReminderReturnForm reminder : reminders) {
%>
		<table class="fTable">
			<tr>
				<th colspan="2">Patient Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">Name:</td>
				<td >
					<a href="sendEmailNotification.jsp?mid=<%=reminder.getPatientID()%>">
					<%=reminder.getFirstName()+" "+reminder.getLastName()%>
					</a>
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Phone Number:</td>
				<td ><%=reminder.getPhoneNumber()%></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Reasons:</td>
				<td>
<%
			for(VisitFlag vf : reminder.getVisitFlags()) {
%>
					<%=vf.getType() %>: &nbsp;&nbsp; <%=vf.getValue() %><br />
<%
			}
%>
			 	</td>
			</tr>
		</table>
		
<!--  This is the original Table format which has the first and last name on separate lines.  In favor of making
	the link to send an email to a patient more friendly I've changed this to the above table which puts both names
	together.
		
		<table class="fTable">
			<tr>
				<th colspan="2">Patient Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">Last Name:</td>
				<td ><a href="sendEmailNotification.jsp?mid=<%=reminder.getPatientID()%>"><%=reminder.getLastName()%></a></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">First Name:</td>
				<td ><%=reminder.getFirstName()%></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Phone Number:</td>
				<td ><%=reminder.getPhoneNumber()%></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Reasons:</td>
				<td>
<%
			for(VisitFlag vf : reminder.getVisitFlags()) {
%>
					<%=vf.getType() %>: &nbsp;&nbsp; <%=vf.getValue() %><br />
<%
			}
%>
			 	</td>
			</tr>
		</table>
-->
		<br />
<%
	} 
}
%>
</div>

<%@include file="/footer.jsp" %>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>
<%@page import="java.util.Date"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO" %>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View Additional Info";
%>

<%@include file="/header.jsp" %>

<%
int patientIndex = 0;
if(request.getParameter("patient") != null){
	String patient = request.getParameter("patient");
	session.setAttribute("patient", patient);
	patientIndex = Integer.parseInt(patient);
}
else{
	String patient = (String) session.getAttribute("patient");
	patientIndex = Integer.parseInt(patient);
}
List<RemoteMonitoringDataBean> patientList = (List<RemoteMonitoringDataBean>) session.getAttribute("patientList");
RemoteMonitoringDataBean rmdb = patientList.get(patientIndex);
PatientDAO patDAO = prodDAO.getPatientDAO();
long patientMID = rmdb.getPatientMID();
PatientBean p = patDAO.getPatient(patientMID);

ViewMyRemoteMonitoringListAction listAction = new ViewMyRemoteMonitoringListAction(prodDAO,loggedInMID.longValue());
String startDate = new SimpleDateFormat("MM/dd/yyyy").format(new Date());
String endDate = new SimpleDateFormat("MM/dd/yyyy").format(new Date());
if("date".equals(request.getParameter("sortBy"))) {
	startDate = request.getParameter("startDate");
	endDate = request.getParameter("endDate");
%>
	<br />
	<table class="fTable" align="center">
		<tr>
			<th colspan="2">Patient Details</th>
		</tr>
		<tr >
			<td class="subHeaderVertical">Name:</td>
			<td><%=p.getFullName()%></td>
		</tr>
		<tr >
			<td class="subHeaderVertical">Phone:</td>
			<td><%=p.getPhone()%></td>
		</tr>
	</table>
	<br />
<%
	List<PatientBean> patientRepresentatives = patDAO.getRepresenting(patientMID);
%>
	<br />
	<table class="fTable" align="center">
		<tr>
			<th colspan="4">Patient's Representatives</th>
		</tr>
<%
	if(patientRepresentatives.isEmpty()){
%>
		<tr>
			<td>This patient has no representatives.</td>
		</tr>
<%
	}
	for(PatientBean pat : patientRepresentatives){
%>
		<tr>
			<td class="subHeaderVertical">Name:</td>
			<td><%=pat.getFullName()%></td>
			<td class="subHeaderVertical">Phone:</td>
			<td><%=pat.getPhone()%></td>
		</tr>
<%
	}
%>
	</table>
	<br />
	<br />
	<table class="fTable" align="center">
		<tr>
			<th colspan="5">Patient Monitoring Statistics</th>
		</tr>
		<tr class="subHeader">
			<th width="20%">Date</th>
			<th>Systolic Blood Pressure</th>
			<th>Diastolic Blood Pressure</th>
			<th>Glucose Level</th>
			<th>Reporter</th>
		</tr>
<%
	List<RemoteMonitoringDataBean> patientStats = listAction.getPatientDataByDate(patientMID, startDate, endDate);
	if(patientStats.isEmpty()){
%>
		<tr bgcolor="#ff6666">
			<td><b>No Information Provided</b></td>
			<td><b>No Information Provided</b></td>
			<td><b>No Information Provided</b></td>
			<td><b>No Information Provided</b></td>
			<td><b>No Information Provided</b></td>
		</tr>
<%
	}
	String highlight = "";
	String reporterName = "";
	for(RemoteMonitoringDataBean stats : patientStats){
		highlight = "";
		int sysBP = stats.getSystolicBloodPressure();
		int diasBP = stats.getDiastolicBloodPressure();
		int gluLvl = stats.getGlucoseLevel();
		
		if(((sysBP != -1) && (sysBP < 90 || sysBP > 140)) || ((diasBP != -1) && (diasBP < 60 || diasBP > 90)) || ((gluLvl != -1) && (gluLvl < 70 || gluLvl > 150))) {
			highlight = "#ffff00";
		}
		
		reporterName = authDAO.getUserName(stats.getReporterMID());		
%>
		<tr bgcolor="<%=highlight%>">
			<td><%=stats.getTime()%></td>
			<td><%=sysBP == -1?"":sysBP%></td>
			<td><%=diasBP == -1?"":diasBP%></td>
			<td><%=gluLvl == -1?"":gluLvl%></td>
			<td><%=reporterName%></td>
		</tr>
<%
	}
%>
	</table>
	<br />
<%
} else{
%>

<form action="viewAdditionalInfo.jsp" id=datebuttons style="display: inline;" method="post">
<input type="hidden" name="sortBy" value="date"></input>
<div align=center>
<table class="fTable" align="center">
	<tr class="subHeader">
		<td>Start Date:</td>
		<td>
			<input name="startDate" value="<%=startDate%>" size="10">
			<input type=button value="Select Date" onclick="displayDatePicker('startDate');">
		</td>
		<td>End Date:</td>
		<td>
			<input name="endDate" value="<%=endDate%>">
			<input type=button value="Select Date" onclick="displayDatePicker('endDate');">
		</td>
	</tr>
</table>
<br />
<input type="submit" name="submit" value="Get Records" onclick="javascript:sortBy();">
</div>
</form>
<%
}
%>

<script type='text/javascript'>
function sortBy() {
	document.getElementsByName('sortBy')[0].value = "date";
	document.forms[0].submit.click();
}
</script>

<%@include file="/footer.jsp"%>
<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust"%>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>
<%@page import="java.util.ArrayList" %>
<%@page import="edu.ncsu.csc.itrust.beans.Email" %>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean" %>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO" %>
<%@page import="edu.ncsu.csc.itrust.EmailUtil" %>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - HCP - send Email Notification";
%>

<%@include file="/header.jsp"%>




<%
PersonnelBean self = new PersonnelDAO(prodDAO).getPersonnel(loggedInMID);

boolean flag;
long mid;
if (request.getParameter("mid") != null && !request.getParameter("mid").equalsIgnoreCase("")) {
	mid = Long.parseLong(request.getParameter("mid"));
	flag = true;
} else {
	flag = false;
	mid = 0;
}

%>

<% 
if (flag) {
	PatientDAO patients = new PatientDAO(prodDAO);
	PatientBean myPatient = patients.getPatient(mid);
%>
<center>
<table border=10 bordercolor=darkred>
<tr><td>

	<form action="sendEmailNotification.jsp" method=post>
	<h3>Send Email Form:</h3>

	<table>
	<tr>
		<td>From: </td>
		<td><%=self.getFullName() %> </td>
	</tr>
	<tr>
		<td>To: </td>
		<td>
			<input type=text name="email" value="<%=myPatient.getEmail() %>"> (<%=myPatient.getFullName() %>)
		</td>
	</tr>
	<tr>
		<td>Subject:</td>
		<td>
			<input type=text value="Reminder" name="subject">
		</td>
	</tr>
	<tr>
		<td colspan=2>
			<textarea name="thetext" rows="15" cols="43">Dear <%=myPatient.getFirstName() %>,</textarea>
		</td>
	</tr>
	</table>
	<br />

	<input type=hidden name="id" value="<%=myPatient.getMID() %>">
	<input type=submit value="Send Email">
	<input type=reset value="Reset">

	</form>

</td></tr>
</table>
</center>
<%
} else {
	if (request.getParameter("email") == null || request.getParameter("email").equals("")) {
		response.sendRedirect("/iTrust/auth/hcp/home.jsp");
	}
	
	String email = request.getParameter("email");
	String subject = request.getParameter("subject");
	String message = request.getParameter("thetext");
	long id = Long.parseLong(request.getParameter("id"));
	
	Email myEmail = new Email();
	
	List<String> toList = new ArrayList<String>();
	toList.add(email);
	myEmail.setToList(toList);
	
	myEmail.setFrom(self.getEmail());
	myEmail.setBody(message);
	myEmail.setSubject(subject);
	
	EmailUtil emailer = new EmailUtil(prodDAO);
	emailer.sendEmail(myEmail);
	
	PatientDAO patients = new PatientDAO(prodDAO);
	PatientBean myPatient = patients.getPatient(id);
%>
<center>
<table border=10 bordercolor=darkgreen>
<tr><td>

	<h3><font color="darkred">Your Email was sent:</font></h3>
	
	<table>
	<tr>
		<td>From: </td>
		<td><%=self.getFullName() %> </td>
	</tr>
	<tr>
		<td>To: </td>
		<td>
			<input type=text readonly value="<%=email %>" style="background-color: lightgrey"> (<%=myPatient.getFullName() %>)
		</td>
	</tr>
	<tr>
		<td>Subject:</td>
		<td>
			<input type=text readonly value="<%= subject %>" style="background-color: lightgrey">
		</td>
	</tr>
	<tr>
		<td colspan=2>
			<textarea readonly name="thetext" rows="15" cols="43" style="background-color: lightgrey"><%=message %></textarea>
		</td>
	</tr>
	</table>
	<br />
	<form action="/iTrust/auth/hcp/home.jsp" method=get>
	<input type=submit value="Home">
	</form>

</td></tr>
</table>	
</center>
<%
}
%>
<%@include file="/footer.jsp" %>
<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.LabProcHCPAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.LabProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Update Lab Procedure";
%>

<%@include file="/header.jsp" %>

<%
	String headerMessage = "";


LabProcedureBean lbean = null;
long requestID = 0L;
String lpid = request.getParameter("ID");

if (lpid != null && !lpid.equals("")) {
	try {
		
		requestID = Long.parseLong(lpid);
		lbean = prodDAO.getLabProcedureDAO().getLabProcedure(requestID);
	} catch (Exception e) {
		e.printStackTrace();
	}
}

	
	LabProcHCPAction action2 = new LabProcHCPAction(prodDAO, loggedInMID.longValue());
	boolean formIsFilled = request.getParameter("formIsFilled") != null
	&& request.getParameter("formIsFilled").equals("true");


	if (formIsFilled) {
		//This page is not actually a "page", it just adds a user and forwards.
		lbean.setStatus(request.getParameter("Status"));
		lbean.setResults(request.getParameter("Results"));
		lbean.setCommentary(request.getParameter("Commentary"));

		try{
		action2.updateProcedure(lbean);%>
		<span>Information Updated Successfully</span>
		<% } catch(FormValidationException e){
			e.printHTML(out);
		}
	}
	
%>


<table  class="fTable">
	<tr>
		<th colspan="11">Lab Procedures</th>
	</tr>

	<tr>

    		<th>Patient</th>
  			<th>Lab Code</th>
   			<th>Rights</th>
	 		<th>Status</th>
  			<th>Commentary</th>
   			<th>Results</th>
 			<th>OfficeVisitID</th>
   			<th>Updated Date</th>

  	</tr>
		<%LabProcedureBean bean = prodDAO.getLabProcedureDAO().getLabProcedure(requestID);
		PatientBean patient = new PatientDAO(prodDAO).getPatient(bean.getPid());%>
			<tr>
				<td ><%=patient.getFullName()%></td>
				<td ><%=bean.getLoinc()%></td>
				<td ><%=bean.getRights()%></td>
				<td ><%=bean.getStatus()%></td>
				<td ><%=bean.getCommentary()%></td>
				<td ><%=bean.getResults()%></td>
				<td ><%=bean.getOvID()%></td>
				<td ><%=bean.getTimestamp()%></td>
				
			</tr>
</table>


<form action="UpdateLabProc.jsp?ID=<%=lpid%>"&message="Updated Laboratory Procedure" method="post"><input type="hidden"
	name="formIsFilled" value="true"> <br />
<br />
<table align="center">
	<tr><td><%=headerMessage %></td></tr>
</table>
<br />
<table>

	<tr>
		<td>Status:</td>
		<td>
		<select name="Status">
		<option value="NOT YET RECEIVED"><%=lbean.Not_Received %></option>
		<option value="PENDING"><%=lbean.Pending %></option>
		<option value="COMPLETED"><%=lbean.Completed %></option>
		</select>
		</td>
	</tr>
	<tr>
		<td>Commentary:</td>
		<td><textarea name="Commentary"></textarea>
	</tr>
	<tr>
		<td>Results:</td>
		<td><textarea name="Results"></textarea></td>
	</tr>
	<tr>
		<td colspan=2 align=center><input type="submit"
			style="font-size: 16pt; font-weight: bold;" value="Update"></td>
	</tr>
</table>
</form>
<br />

<a href="../hcp/LabProcHCP.jsp">Go to View Laboratory Procedures</a>

<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>
<%@page import="edu.ncsu.csc.itrust.beans.LabProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.action.LabProcHCPAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.ReportRequestBean"%>

<%@page import="java.util.List"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - HCP Home";
%>

<%@include file="/header.jsp" %>

<%
ViewMyReportRequestsAction reportAction = new ViewMyReportRequestsAction(DAOFactory.getProductionInstance(), loggedInMID);
List<ReportRequestBean> reports = reportAction.getAllReportRequestsForRequester();
LabProcHCPAction lpAction = new LabProcHCPAction(DAOFactory.getProductionInstance(), loggedInMID);
List<LabProcedureBean> labProcedures = lpAction.getLabProcForNextMonth();

%>

<table cellpadding="1" cellspacing="1">
	<tr>
		<td>
		<h3>Announcements</h3>
		<i>New features in iTrust</i></td>
	</tr>
	<tr>
		<td>
		<ul>
			<li>No more typing in a date! We now have a calendar popup that
			makes entering dates incredibly easy!</li>
		</ul>
		</td>
	</tr>

	<tr>
		<td>
		<h3>Notifications</h3>
		</td>
	</tr>
	<tr>
		<td>
		<h4>Comprehensive Report History</h4>
		</td>
	</tr>

	<tr>
		<td>
		<ul>
<%
	if(reports.size() != 0) {
		for(ReportRequestBean report : reports) {
%>
			<li><%=reportAction.getLongStatus(report.getID())%></li>
<%
		} 
	} else {
%>
		<i>No Report Requests</i>
<%
	}
%>
		</ul>
		</td>
	</tr>

	<tr>
		<td>
		<h4>Lab Procedures Completed in the Last Month</h4>
		</td>
	</tr>
	<tr>
		<td><a href="LabProcHCP.jsp">View All Lab Procedures here</a><br />
		</td>
	</tr>
	<tr>
		<td>
		<ul>
			<%if(labProcedures.size() != 0) {
				for(LabProcedureBean bean : labProcedures) {
					PatientBean patient = new PatientDAO(DAOFactory.getProductionInstance()).getPatient(bean.getPid());%>
			<li>Lab Procedure <%=bean.getLoinc()%> for patient <%=patient.getFullName() %>
			<br />
			Results: 
<%
					if(bean.getResults().equals("")) {
%> 
						<i>none</i> 
<%
					} else {
%>
						<%=bean.getResults()%>
<%
					}
				}
			} else {
%>
				<i>No Recent Lab Procedures</i>
<%
			}
%>
			</li>
		</ul>
		</td>
	</tr>
</table>

<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.SendMessageAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.MessageBean"%>
<%@page import="java.util.List"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Reply";
%>

<%@include file="/header.jsp" %>

<%
	SendMessageAction action = new SendMessageAction(prodDAO, loggedInMID);
	MessageBean original = null;
	
	if (session.getAttribute("message") != null) {
		original = (MessageBean)session.getAttribute("message");
		session.setAttribute("original", original);
		session.removeAttribute("message");
	} else if (request.getParameter("messageBody") != null) {
		if (session.getAttribute("original") != null) {
			original = (MessageBean)session.getAttribute("original");
			MessageBean messageNew = new MessageBean();
			messageNew.setBody(request.getParameter("messageBody"));
			messageNew.setFrom(loggedInMID);
			messageNew.setTo(original.getFrom());
			messageNew.setSubject(request.getParameter("subject"));
			messageNew.setRead(0);
			messageNew.setParentMessageId(original.getMessageId());
			action.sendMessage(messageNew);
			response.sendRedirect("messageInbox.jsp");
		} 
	} else {
		response.sendRedirect("messageInbox.jsp");
	}
	
%>

	<h2>Reply</h2>
	<h4>to a message from <%= action.getPatientName(original.getFrom()) %>:</h4>
	<form id="mainForm" method="post" action="reply.jsp">
		<span>Subject: </span><input type="text" name="subject" size="50" value="RE: <%= original.getSubject() %>" /><br /><br />
		<span>Message: </span><br />
		<textarea name="messageBody" cols="100" rows="10"></textarea><br />
		<br />
		<input type="submit" value="Send" name="sendMessage"/>
	</form>
	<br />
	<br />


<%@include file="/footer.jsp" %>

<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>

<%@include file="/global.jsp" %>

<%PersonnelBean personnelb = new PersonnelDAO(prodDAO).getPersonnel(loggedInMID);%>

<div align="center" style="margin-bottom: 30px;">
	<img src="/iTrust/image/user/<%=loggedInMID.longValue() %>.png" alt="MID picture">
</div>

<div align="center">
<table>
	<tr>
		<td>Name: </td>
		<td><%=personnelb.getFullName()%></td>
	</tr>
	<tr>
		<td>Location: </td>
		<td><%=personnelb.getCity() + ", " + personnelb.getState()%></td>
	</tr>
</table>
</div>
<%@include file="/global.jsp" %>
<%@page import="java.util.List" %>
<%@page import="edu.ncsu.csc.itrust.action.SearchUsersAction" %>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean" %>
<%
pageTitle = "iTrust - Please Select a Patient";
%>

<%@include file="/header.jsp" %>

<%
	String uid_pid = request.getParameter("UID_PATIENTID");
	session.setAttribute("pid", uid_pid);
	if (null != uid_pid && !"".equals(uid_pid)) {
		response.sendRedirect(request.getParameter("forward"));
	}
	
	String firstName = request.getParameter("FIRST_NAME");
	String lastName = request.getParameter("LAST_NAME");
	if(firstName == null)
		firstName = "";
	if(lastName == null)
		lastName = "";
	

%>

<%@include file="/util/getUserFrame.jsp"%>
				

<form id="mainForm" action="getPatientID.jsp" method="post">
	<table>
		<tr>
			<td><b>Patient:</b></td>
			<td style="width: 150px; border: 1px solid Gray;">
				<input name="forward" type="hidden" value="<%=request.getParameter("forward") %>" />
				<input name="UID_PATIENTID" type="hidden" value="" />
				<input name="NAME_PATIENTID" type="text" readonly value="Select a Patient">
				</td>
			<td>
				<input type="button" onclick="getUser('PATIENTID');" value="Find User" />
			</td>
		</tr>
		<tr>
			<td align="center" colspan="2">
				<input type="submit" value="Select Patient" />
			</td>
		</tr>
	</table>
</form>
<table>
	<tr> </tr>
	<form id="userSearchForm" action="getPatientID.jsp?forward=<%= request.getParameter("forward") %>" method="post">
		<tr>
				<td><b>First Name:</b></td>
				<td style="width: 150px; border: 1px solid Gray;">
					<input name="FIRST_NAME" type="text" value="<%= firstName %>" />
				</td>
		</tr>
		<tr>
				<td><b>Last Name:</b></td>
				<td style="width: 150px; border: 1px solid Gray;">
					<input name="LAST_NAME" type="text" value="<%= lastName %>" />
				</td>
		</tr>
		<tr>
				<td align="center" colspan="2">
					<input type="submit" value="User Search" />
				</td>
		</tr>
	</form>
</table>


<%
	if( (!"".equals(firstName)) || (!"".equals(lastName))){
		SearchUsersAction searchAction = new SearchUsersAction(prodDAO,loggedInMID.longValue());
		out.println("Searching for users named " + firstName + " " + lastName + "<br />");
		List<PatientBean> patients = searchAction.searchForPatientsWithName(firstName,lastName);
		out.println("Found " + patients.size() + " Records <br />");
		out.println("<table border='1px'><tr><td width='175px'>MID</td><td width='250px'>First Name</td><td width='250px'>Last Name</td></tr>");
		for(PatientBean p : patients){
%>
<form id="selectPatient<%= String.valueOf(patients.size()) %>" action="getPatientID.jsp?forward=<%= request.getParameter("forward") %>" method="post">
<input type="hidden" name="UID_PATIENTID" value="<%= p.getMID() %>" />


<%
			out.println("<tr><td><input type='submit' width='100%' value='" + p.getMID() + "' /></form></td><td>" + p.getFirstName() + "</td><td>" + p.getLastName() + "</td></tr>");

		}
		out.println("</table>");
		
	}

%>

<%@include file="/footer.jsp" %>

<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>

<%@page import="edu.ncsu.csc.itrust.beans.SurveyResultBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.HospitalBean"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewSurveyResultAction"%>
<%@page import="edu.ncsu.csc.itrust.BeanBuilder"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>
<%@page import="java.util.ArrayList"%>
<%@page import="java.util.List"%>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Survey Results";
loginMessage = "";
session.removeAttribute("personnelList");
%>

<%@include file="/header.jsp" %>

<div align="center">
	<h2>Search HCP Survey Results</h2>
<%
	ViewSurveyResultAction action = new ViewSurveyResultAction(prodDAO, loggedInMID.longValue());
	HospitalsDAO hospitalDAO = new HospitalsDAO(prodDAO);
	List<HospitalBean> hcpHospitals = hospitalDAO.getAllHospitals();
	SurveyResultBean bean = null;
	String zipCode = "";
	String hospitalID = "";
	String specialty = "";
	List<SurveyResultBean> resultList = null;

	boolean formIsFilled = request.getParameter("formIsFilled") != null
			&& request.getParameter("formIsFilled").equals("true");

	if (formIsFilled) {
		bean = new BeanBuilder<SurveyResultBean>().build(request
				.getParameterMap(), new SurveyResultBean());

		try {
			//set data to be sent from input text box and drop down box
			zipCode = request.getParameter("hcpZip");
			hospitalID = request.getParameter("hcpHospitalID");
			specialty = request.getParameter("hcpSpecialty");

			//do not submit if zip is not filled in
			if((!zipCode.equals("") && zipCode != null) && (!hospitalID.equals("") && hospitalID != null)) {
				%><span >Data for both Zip Code and Hospital ID is not allowed.  Please choose either Zip or Hospital ID.</span><%
			}
			else if (!zipCode.equals("") && zipCode != null) {
				bean.setHCPzip(zipCode);
				bean.setHCPspecialty(specialty);
				resultList = action.getSurveyResultsForZip(bean);
			} else if (!hospitalID.equals("") && hospitalID != null) {
				bean.setHCPhospital(hospitalID);
				bean.setHCPspecialty(specialty);
				resultList = action.getSurveyResultsForHospital(bean);
			} else {
				%><span >You must enter either a zip code or a hospital ID.</span><%
			}
		} catch(FormValidationException e){
			e.printHTML(pageContext.getOut());
		}
	}
%>


<form action="surveyResults.jsp" method="post"><input type="hidden" name="formIsFilled" value="true"> <br />
<div style="width: 50%; text-align:left;">
This search allows you to search for a HCP based on a zip code or hospital ID.  To search, you must enter either a zip code OR a hospital ID, but not both.
<br />Note: Search by zip code returns all HCPs that have zip codes with a match of the first 3 digits.
<br />
<br />
</div>
<table>
	<tr>
		<td>Zip Code:</td>
		<td><input type="text" name="hcpZip" maxlength="10" size="10" value="<%=zipCode%>"></td>
		<td> - OR -</td>
		<td>Hospital ID:</td>
		<td><select name="hcpHospitalID">
				<option value="">N/A</option>
				<%for(HospitalBean hos : hcpHospitals) {%>
					<option value="<%=hos.getHospitalID()%>"<%if (hos.getHospitalID().equals(hospitalID)) {%> selected="selected"<%}%>><%=hos.getHospitalID()%></option>
				<%} %>				
			</select>
		</td>
	</tr>
	<tr>
	<td colspan="5" align="center">Specialty (optional):</td>
	</tr>
	<tr>
		<td colspan="5" align="center"><select name="hcpSpecialty">
			<option value="<%=SurveyResultBean.ANY_SPECIALTY %>"<%if (specialty.equals(SurveyResultBean.ANY_SPECIALTY)) {%> selected="selected"<%}%>>-- Any Specialty --</option>
			<option value="<%=SurveyResultBean.GENERAL_SPECIALTY %>"<%if (specialty.equals(SurveyResultBean.GENERAL_SPECIALTY)) {%> selected="selected"<%}%>><%=SurveyResultBean.GENERAL_SPECIALTY%></option>
			<option value="<%=SurveyResultBean.HEART_SPECIALTY %>"<%if (specialty.equals(SurveyResultBean.HEART_SPECIALTY)) {%> selected="selected"<%}%>><%=SurveyResultBean.HEART_SPECIALTY%></option>
			<option value="<%=SurveyResultBean.OBGYN_SPECIALTY %>"<%if (specialty.equals(SurveyResultBean.OBGYN_SPECIALTY)) {%> selected="selected"<%}%>><%=SurveyResultBean.OBGYN_SPECIALTY%></option>
			<option value="<%=SurveyResultBean.PEDIATRICIAN_SPECIALTY %>"<%if (specialty.equals(SurveyResultBean.PEDIATRICIAN_SPECIALTY)) {%> selected="selected"<%}%>><%=SurveyResultBean.PEDIATRICIAN_SPECIALTY%></option>
			<option value="<%=SurveyResultBean.SURGEON_SPECIALTY %>"<%if (specialty.equals(SurveyResultBean.SURGEON_SPECIALTY)) {%> selected="selected"<%}%>><%=SurveyResultBean.SURGEON_SPECIALTY%></option>
			</select>
		</td>
	</tr>
	<tr>
 	<tr>
		<td colspan=5 align=center><input type="submit"
			style="font-size: 16pt; font-weight: bold;" value="Search"></td>
	</tr>
</table>
</form>

<%
	if (resultList != null) {
%>
<br />

<h2>Survey Results</h2>
<%
	if (resultList.size() == 0) {
%>
		<span class="iTrustError">No HCPs were found that meet your search criteria.  Please change your search criteria and search again.
		</span>
<%
	} else {
%>
<table  class="fTable">
	<tr>
		<th colspan="14">LHCP Search Results:</th>

	</tr>
	<tr class="subHeader">
		<th>Doctor's Name</th>
		<th>Address 1</th>
		<th>Address 2</th>
		<th>City</th>
		<th>State</th>
		<th>Zip</th>
		<th>Specialty</th>
		<th>Hospital</th>
		<th>Waiting Room<br />Minutes</th>
		<th>Exam Room<br />Minutes</th>
		<th>Visit<br />Satisfaction</th>
		<th>Treatment<br />Satisfaction</th>
		<th>Percent<br />Results</th>
	</tr>
	<%
		List<PersonnelBean> personnelList = new ArrayList<PersonnelBean>();
		int index = 0;
		for (SurveyResultBean surveyResult : resultList) {
	%>
	<tr>
		<td align=center >
		<a href="/iTrust/auth/viewPersonnel.jsp?personnel=<%=index%>"><%=surveyResult.getHCPFirstName()%> <%=surveyResult.getHCPLastName()%></a></td>
		<td align=center ><%=surveyResult.getHCPaddress1()%></td>
		<td align=center ><%=surveyResult.getHCPaddress2()%></td>
		<td align=center ><%=surveyResult.getHCPcity()%></td>
		<td align=center ><%=surveyResult.getHCPstate()%></td>
		<td align=center ><%=surveyResult.getHCPzip()%></td>
		<td align=center ><%=surveyResult.getHCPspecialty()%></td>
		<td align=center ><%=surveyResult.getHCPhospital()%></td>
		<td align=center ><%=String.format("%.2f", surveyResult.getAvgWaitingRoomMinutes())%></td>
		<td align=center ><%=String.format("%.2f", surveyResult.getAvgExamRoomMinutes())%></td>
		<td align=center ><%=String.format("%.2f", surveyResult.getAvgVisitSatisfaction())%></td>
		<td align=center ><%=String.format("%.2f", surveyResult.getAvgTreatmentSatisfaction())%></td>
		<td align=center ><%=String.format("%.0f", surveyResult.getPercentSatisfactionResults())%>%</td>
	</tr>
<%
		PersonnelBean personnel = new PersonnelDAO(prodDAO).getPersonnel(surveyResult.getHCPMID());
		personnelList.add(personnel);
		index++;
		}
	session.setAttribute("personnelList", personnelList);
%>
</table>
<table>
<tr><td>
<i>The search results show the the averages for each HCP and include:</i> 
<ol><li>Number of minutes patients typically wait in a waiting room
<li>Average number of minutes patients wait in the examination room prior to seeing a physician
<li>Average office visit satisfaction
<li>Average satisfaction with treatment/information
<li>Percent of office visits for which satisfaction information is available</ol>
</td></tr></table>
<% } %>

<% }  %>
 <br />
</div>

<%@include file="/footer.jsp" %>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.beans.DiagnosisBean"%>
<%@page import="edu.ncsu.csc.itrust.action.EmergencyReportAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PrescriptionBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.AllergyBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.ProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO" %>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean" %>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO" %>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO" %>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean" %>
<%@page import="edu.ncsu.csc.itrust.beans.Email" %>
<%@page import="edu.ncsu.csc.itrust.EmailUtil" %>
<%@page import="java.util.List" %>
<%@page import="java.util.ArrayList" %>
<%@page import="java.util.Date" %>
<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - ER Report";

String pidString = null;
boolean print = (null != request.getParameter("print") && request.getParameter("print").equals("true"));

if (!print) {
	/* Require a Patient ID first */
	pidString = (String)session.getAttribute("pid");
	if (null == pidString || 1 > pidString.length()) {
		response.sendRedirect("/iTrust/auth/getPatientID.jsp?forward=hcp-er/emergencyReport.jsp");
		return;
	}
	else {
		session.setAttribute("printPid", pidString);
		session.removeAttribute("pid");
	}
}
else {
	pidString = (String)session.getAttribute("printPid");
	if (null == pidString || 1 > pidString.length()) {
		response.sendRedirect("/iTrust/auth/getPatientID.jsp?forward=hcp-er/emergencyReport.jsp");
		return;
	}
	session.removeAttribute("printPid");
}

/* If the patient id doesn't check out, then kick 'em out to the exception handler */
EmergencyReportAction action = new EmergencyReportAction(prodDAO, loggedInMID.longValue(), pidString);
	
/* Now take care of updating information */
%>

<% if (print) { %>
<%@include file="/print_header.jsp" %>
<%}
else {%>
<%@include file="/header.jsp" %>
<%}%>

<% if (!print) {
	
	// Generate a report to the hcp's of this patient.
	//  TODO: possibly change this to use messages and a different display format on
	//		hcp's home screen.
	ReportRequestDAO makeReport = new ReportRequestDAO(prodDAO);
	PatientDAO patients = new PatientDAO(prodDAO);
	PatientBean patient = patients.getPatient(action.getPid());
	PersonnelDAO hcps = new PersonnelDAO(prodDAO);
	List<PersonnelBean> peeps = hcps.getAllPersonnel();
	List<String> emails = new ArrayList<String>();
	
	for (PersonnelBean p : peeps) {
		if (patients.checkDeclaredHCP(patient.getMID(), p.getMID())) {
			makeReport.addReportRequest(p.getMID(), patient.getMID(), new Date());
			emails.add(p.getEmail());
		}
	}
	
	Email myEmail = new Email();
	myEmail.setBody("Patient " + patient.getFullName() + "'s medical record was viewed by an ER");
	myEmail.setSubject("Patient records viewed");
	myEmail.setToList(emails);
	myEmail.setFrom("noreply@itrust.com");
	
	EmailUtil emailer = new EmailUtil(prodDAO);
	emailer.sendEmail(myEmail);
	
%>
<form action="emergencyReport.jsp" method="post">
	<input type="hidden" name="print" id="print" value="true" />
	<input type="submit" value="Print" />
</form>
<%} %>

<ul>
<li>Name: <%=action.getPatientName()%></li>
<li>Age: <%=action.getPatientAge()%></li>
<li>Gender: <%=action.getPatientGender()%> </li>
<li>Emergency Contact: <%=action.getPatientEmergencyContact() %></li>
<li>Allergies:
<%
if (0 == action.getAllergies().size()) {
%><strong>No allergies on record</strong><%	
}
else {
	%><ul><%
	for ( AllergyBean bean: action.getAllergies()) {
		out.print("<li>" + bean.getDescription() + " " + bean.getFirstFoundStr() + "</li>");
	} 
	%></ul><%
}
%>
</li>
<li>Blood Type: <%=action.getBloodType()%> </li>

<li>Diagnoses: 
<%
if (0 == action.getWarningDiagnoses().size()) {
%><strong>No critical diagnoses on record</strong><%	
}
else {
	%><ul><%
	for(DiagnosisBean bean : action.getWarningDiagnoses()) {
		out.print("<li>" + bean.getICDCode() + " " + bean.getDescription() + "</li>");
	} 
	%></ul><%
}
%>
</li>

<li>Prescriptions: 
<%
if (0 == action.getCurrentPrescriptions().size()) {
%><strong>No current prescriptions on record</strong><%	
}
else {
	%><ul><%
	for(PrescriptionBean bean : action.getCurrentPrescriptions()) {
		out.print("<li>" + bean.getMedication().getNDCode() + " " + bean.getMedication().getDescription() + "</li>");
	} 
	%></ul><%
}
%>
</li>

<li>Immunizations:
<% if (0 == action.getImmunizations().size()) { %>
<strong>no immunizations on record</strong>
<%	
}
else {
%>
<ul>
<%
	for (ProcedureBean bean : action.getImmunizations()) {
		if (null != bean.getAttribute() && bean.getAttribute().equals("immunization"))
			out.print("<li>" + bean.getDescription() + " (" + bean.getCPTCode() +")" + "</li>");
	} 
%>
</ul>
<%
}
%>
</li>

<%@include file="/footer.jsp" %>

<div class="menu_category">
	<span>View</span><br />
	<a href="/iTrust/auth/tester/home.jsp">Operational Profile</a><br />
</div>
<%@page import="edu.ncsu.csc.itrust.enums.TransactionType"%>
<%@page import="edu.ncsu.csc.itrust.beans.OperationalProfile"%>
<%@page import="java.text.NumberFormat"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Tester Home";
%>

<%@include file="/header.jsp" %>

<div style="text-align: center;">
<h1>Operational Profile</h1>
<%
	try {
		OperationalProfile op = prodDAO.getTransactionDAO().getOperationalProfile();
		
		NumberFormat formatter = NumberFormat.getPercentInstance();
		
%>

<table class="fancyTable" align="center" border=1 cellpadding=2 cellspacing=2>
	<tr>
		<th>Operation</th>
		<th colspan=2 >Total</th>
		<th colspan=2 >Patients Only</th>
		<th colspan=2 >Personnel Only</th>
	</tr>
<%
	int i = 1;
	for (TransactionType type : TransactionType.values()) {
%>
	<tr <%= (i++%2 == 0)?" class=\"alt\"":"" %>>
		<td align=left><%=type.getDescription()%></td>
		<td align=center><%=op.getTotalCount().get(type)%></td>
		<td align=center><%=formatter.format((double)op.getTotalCount().get(type) / op.getNumTotalTransactions())%></td>
		<td align=center><%=op.getPatientCount().get(type)%></td>
		<td align=center><%=formatter.format((double)op.getPatientCount().get(type) / op.getNumPatientTransactions())%></td>
		<td align=center><%=op.getPersonnelCount().get(type)%></td>
		<td align=center><%=formatter.format((double)op.getPersonnelCount().get(type) / op.getNumPersonnelTransactions())%></td>
	</tr>
<%
	}
%>
	<tr>
		<td><b>Totals</b></td>
		<td colspan=2 align=center><%=op.getNumTotalTransactions()%></td>
		<td colspan=2 align=center><%=op.getNumPatientTransactions()%></td>
		<td colspan=2 align=center><%=op.getNumPersonnelTransactions()%></td>
	</tr>
</table>

</div>

<%
	} catch (Exception e) {
%>
	<span >Exception Occurred</span>
	<br />
	<%=e.getMessage()%>
<%
e.printStackTrace();
}
%>

<%@include file="/footer.jsp" %>

<%@page import="java.util.List"%>

<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction"%>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - Report Status";
%>

<%@include file="/header.jsp"%>

<%
String switchString = "";
if (request.getParameter("switch") != null) {
	switchString = request.getParameter("switch");
}

String patientString = "";
if (request.getParameter("patient") != null) {
	patientString = request.getParameter("patient");
}

String pidString;
if (switchString.equals("true")) pidString = "";
else if (!patientString.equals("")) {
	int patientIndex = Integer.parseInt(patientString);
	List<Long> patients = (List<Long>) session.getAttribute("patients");
	pidString = "" + patients.get(patientIndex);
	session.removeAttribute("patients");
	session.removeAttribute("patient");
	session.setAttribute("pid", pidString);
}
else pidString = (String)session.getAttribute("pid");

if (pidString == null || 1 > pidString.length()) {
	response.sendRedirect("../uap/getPatientMonitorList.jsp?forward=uap/addTelemedicineData.jsp");
   	return;
}
	AddRemoteMonitoringDataAction action = new AddRemoteMonitoringDataAction(
			prodDAO, loggedInMID.longValue(),Long.parseLong(pidString));

	/* Update information */
	boolean formIsFilled = request.getParameter("formIsFilled") != null
			&& request.getParameter("formIsFilled").equals("true");
	
	if (formIsFilled) {
		try {
			if (request.getParameter("glucoseLevel") == null || "".equals(request.getParameter("glucoseLevel"))){
				action.addRemoteMonitoringData(Integer.parseInt(request.getParameter("systolicBloodPressure")), 
						Integer.parseInt(request.getParameter("diastolicBloodPressure")));
			} else if (request.getParameter("systolicBloodPressure") == null || "".equals(request.getParameter("systolicBloodPressure"))){
				action.addRemoteMonitoringData(Integer.parseInt(request.getParameter("glucoseLevel")));
			} else {
				action.addRemoteMonitoringData(
						Integer.parseInt(request.getParameter("systolicBloodPressure")),
						Integer.parseInt(request.getParameter("diastolicBloodPressure")),
						Integer.parseInt(request.getParameter("glucoseLevel")));
			}
			
%>
		<div align=center>
			<span class="iTrustMessage">Information Successfully Added</span>
		</div>
<%
	session.removeAttribute("pid");
		} catch (FormValidationException e) {
			formIsFilled = false;
%>
			<div align=center>
				<span class="iTrustError"><%=e.getMessage() %></span>
			</div>
<%
		} catch(NumberFormatException e) {
			formIsFilled = false;
%>
			<div align=center>
				<span class="iTrustError">Invalid entry: <%=e.getMessage() %>. Please enter a whole number.</span>
			</div>
<%
		}
	}
	if(!formIsFilled) {
%>

<form action="addTelemedicineData.jsp" method="post">
<input type="hidden" name="formIsFilled" value="true">
<br />
<table cellspacing=0 align=center cellpadding=0>
	<tr>
		<td valign=top>
		<table class="fTable" align=center style="width: 350px;">
			<tr>
				<td class="subHeaderVertical">Systolic Blood Pressure:</td>
				<td><input name="systolicBloodPressure" value="" type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Diastolic Blood Pressure:</td>
				<td><input name="diastolicBloodPressure" value="" type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Glucose Level:</td>
				<td><input name="glucoseLevel" value="" type="text"></td>
			</tr>
			
		</table>
		</td>
		<td width="15px">&nbsp;</td>
		<td valign=top>
		
		</td>
	</tr>
</table>
<br />
<div align="center"><input type="submit" name="action"
	style="font-weight: bold;" value="Report">
	
	<%
	}
	%>
<br />
<br />
</div>
</form>

<%@include file="/footer.jsp"%>

<div class="menu_category">
	<span>Add</span><br />
	<a href="/iTrust/auth/hcp-uap/addPatient.jsp">Add Patient</a>
</div>
<div class="menu_category">
	<span>Edit</span><br />
	<a href="/iTrust/auth/hcp-uap/editPHR.jsp">Edit PHR</a><br />
	<a href="/iTrust/auth/hcp-uap/editBasicHealth.jsp">Edit Basic Health Information</a><br />
	<a href="/iTrust/auth/hcp-uap/editPatient.jsp">Edit Patient</a><br />
	<a href="/iTrust/auth/staff/editMyDemographics.jsp">Edit My Demographics</a>
</div>
<div class="menu_category">
	<span>View</span><br />
	<a href="/iTrust/auth/hcp-uap/viewMyReportRequests.jsp">View My Report Requests</a><br />
	<a href="/iTrust/auth/hcp-uap/LabProcUAP.jsp">View Laboratory Procedures</a><br />
</div>
<div class="menu_category">
	<span>Telemedicine</span><br />
	<a href="/iTrust/auth/hcp-uap/editPatientList.jsp">Edit Patient List</a><br />
	<a href="/iTrust/auth/uap/addTelemedicineData.jsp">Report Status</a><br />
</div>
<div class="menu_category">
	<span>Other</span><br />
	<a href="/iTrust/auth/hcp-uap/documentOfficeVisit.jsp">Document Office Visit</a><br />			
	<a href="/iTrust/auth/hcp-uap/chronicDiseaseRisks.jsp">Chronic Disease Risks</a><br />
	<a href="/iTrust/auth/hcp-uap/showEmailHistory.jsp">Email History</a><br />
	<a href="/iTrust/auth/surveyResults.jsp">Satisfaction Survey Results</a>
</div>
	
<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.ArrayList"%>
<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View Monitored Patients";
%>

<%@include file="/header.jsp" %>

<%
ViewMyRemoteMonitoringListAction action = new ViewMyRemoteMonitoringListAction(prodDAO, loggedInMID.longValue());
List<RemoteMonitoringDataBean> data = action.getPatientDataWithoutLogging();
%>
<br />

<form action="getPatientMonitorList.jsp" method="post" name="myform">
<table class="fTable" align="center">
	<tr>
		<th colspan="3">Patients</th>
	</tr>

	<tr class="subHeader">
		<th>Patient</th>

	</tr>
	<%
		List<Long> patients = new ArrayList<Long>();
		int index = 0;
		for (RemoteMonitoringDataBean bean : data) {
			if (!patients.contains(bean.getPatientMID())){
				patients.add(bean.getPatientMID());
			
	%>
	<tr>
		<td >
			<a href="addTelemedicineData.jsp?patient=<%=index%>">
		
		
			<%=action.getPatientName(bean.getPatientMID())%>	
		
		
			</a>
			</td>
	</tr>
	<%
			index ++;
			}
		}
		session.setAttribute("patients", patients);
	%>
</table>
</form>
<br />
<br />

<%@include file="/footer.jsp" %>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - UAP Home";
%>

<%@include file="/header.jsp" %>

<div style="text-align: center; height: 300px;">
	<h2>Welcome <%=userName %>!</h2>
</div>

<%@include file="/footer.jsp" %>

<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>

<%@include file="/global.jsp" %>

<%PersonnelBean personnelb = new PersonnelDAO(prodDAO).getPersonnel(loggedInMID);%>

<div align="center" style="margin-bottom: 30px;">
	<img src="/iTrust/image/user/<%=loggedInMID.longValue() %>.png" alt="MID picture">
</div>

<div align="center">
<table>
	<tr>
		<td>Name: </td>
		<td><%=personnelb.getFullName()%></td>
	</tr>
	<tr>
		<td>Location: </td>
		<td><%=personnelb.getCity() + ", " + personnelb.getState()%></td>
	</tr>
</table>
</div>
<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.action.EditPersonnelAction"%>
<%@page import="edu.ncsu.csc.itrust.BeanBuilder"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Edit Personnel";
%>

<%@include file="/header.jsp" %>

<%
/* Use session variable with key "pid" */
String pidString = (String)session.getAttribute("mid");
if (null == pidString || 1 > pidString.length()) {
	if (null == (pidString = (String)session.getAttribute("editmid"))) {
		response.sendRedirect("/iTrust/auth/getPersonnelID.jsp?forward=staff/editPersonnel.jsp");
		return;
	}
}
else {
	request.setAttribute("mid", pidString);
	session.removeAttribute("mid");
	session.setAttribute("editmid", pidString);
}
	
/* A bad personnel ID gets you exiled to the exception handler */
EditPersonnelAction personnelEditor = new EditPersonnelAction(prodDAO, loggedInMID.longValue(), pidString);
long pid  = personnelEditor.getPid();
	
/* Now take care of updating information */
boolean formIsFilled = (null != request.getParameter("formIsFilled")) && request.getParameter("formIsFilled").equals("true");
PersonnelBean personnelForm;
if (formIsFilled) {
	personnelForm = new BeanBuilder<PersonnelBean>().build(request.getParameterMap(), new PersonnelBean());
	try {
		personnelEditor.updateInformation(personnelForm);
%>
		<div align=center>
			<span class="iTrustMessage">Information Successfully Updated</span>
		</div>
<%
	} catch(FormValidationException e) {
%>
		<div align=center>
			<span class="iTrustError"><% e.printHTML(pageContext.getOut()); %></span>
		</div>
<%
	personnelForm = prodDAO.getPersonnelDAO().getPersonnel(pid);
	}
}
else {
	personnelForm = prodDAO.getPersonnelDAO().getPersonnel(pid);
}
%>
<br>

<form action="editPersonnel.jsp" method="post">
<input type="hidden" name="formIsFilled" value="true">
<div align=center>
	<table class="fTable" align=center>
	<tr>
		<th colspan=2 >Personnel Information</th>
	</tr>
	<tr>
		<td class="subHeaderVertical">
		  First Name:
		</td><td>
		  <input name="firstName"  value="<%=personnelForm.getFirstName()%>"  type="text">
	      </td></tr>
	      <tr><td class="subHeaderVertical">
		 Last Name:
		</td><td>

		  <input name="lastName"  value="<%=personnelForm.getLastName()%>"  type="text">
	      </td></tr>
	      <tr><td class="subHeaderVertical">
		  Address:
		</td><td>

		  <input name="streetAddress1"  value="<%=personnelForm.getStreetAddress1()%>"  type="text"><br />
		  <input name="streetAddress2"  value="<%=personnelForm.getStreetAddress2()%>"  type="text">
	      </td></tr>
	      <tr ><td class="subHeaderVertical">
		  City:
		</td><td>
		  <input name="city"  value="<%=personnelForm.getCity()%>"  type="text">
	      </td></tr>
	      <tr><td class="subHeaderVertical">

		  State:
		</td><td>
			<itrust:state name="state" value="<%=personnelForm.getState()%>"/>
	      </td></tr>
	      <tr ><td class="subHeaderVertical">
		  Zip:
		</td><td>
		  <input name="zip1" value="<%=personnelForm.getZip1()%>"  maxlength="5" type="text" size="5"> - 
		  <input name="zip2" value="<%=personnelForm.getZip2()%>"  maxlength="4" type="text" size="4">
	      </td></tr>
	      <tr ><td class="subHeaderVertical">

		  Phone:
		</td><td>
		  <input name="phone1"  value="<%=personnelForm.getPhone1()%>"  type="text" size="3" maxlength="3"> -
		  <input name="phone2"  value="<%=personnelForm.getPhone2()%>"  type="text" size="3" maxlength="3"> -
		  <input name="phone3"  value="<%=personnelForm.getPhone3()%>"  type="text" size="4" maxlength="4">
	      </td></tr>
		  <tr>
		  	<td class="subHeaderVertical">Email:</td>
		  	<td><input name="email" value="<%=personnelForm.getEmail()%>" type="text"></td>
		  </tr>
		      
		    </table>
		  </td></tr>
		  <tr>
		  	<td colspan=2>
		  		<br />
		      <input type="submit" name="action" style="font-size: 16pt; font-weight: bold;" value="Edit Personnel Record">
		  	</td>
		  </tr>
      </table>
     </div>
</form>
<div align=center>
	<br />
	<span style="font-size: 14px;">
		Note: in order to set the password for this user, use the "Reset Password" link at the login page.
	</span>
	<br />
</div>

<%@include file="/footer.jsp" %>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.action.EditPersonnelAction"%>
<%@page import="edu.ncsu.csc.itrust.BeanBuilder"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.action.SetSecurityQuestionAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.SecurityQA"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Edit Personnel";
%>

<%@include file="/header.jsp" %>

<%
	/* Require a Personnel ID first */
	String pidString= "" + loggedInMID.longValue();

	/* A bad personnel ID gets you exiled to the exception handler */
	EditPersonnelAction personnelEditor = new EditPersonnelAction(prodDAO,loggedInMID.longValue(), pidString);
	long pid  = personnelEditor.getPid();
	SetSecurityQuestionAction saction = new SetSecurityQuestionAction(prodDAO, loggedInMID.longValue());
	
	/* Now take care of updating information */
	boolean formIsFilled = request.getParameter("formIsFilled")!=null && request.getParameter("formIsFilled").equals("true");
	PersonnelBean personnelForm;
	SecurityQA sbean;
	if(formIsFilled){
		personnelForm = new BeanBuilder<PersonnelBean>().build(request.getParameterMap(),new PersonnelBean());
		sbean = new BeanBuilder<SecurityQA>().build(request.getParameterMap(),new SecurityQA());
		try {
			personnelEditor.updateInformation(personnelForm);
			saction.updateInformation(sbean);
%>
		<div align=center>
			<span class="iTrustMessage">Information Successfully Updated</span>
		</div>
<%
		} catch(FormValidationException e) {
%>
			<div align=center>
				<span class="iTrustError"><%=e.getMessage() %></span>
			</div>
<%
		}
	} else {
		personnelForm = prodDAO.getPersonnelDAO().getPersonnel(pid);
		sbean = saction.retrieveInformation();
	}
%>

<form action="editMyDemographics.jsp" method="post">
<input type="hidden" name="formIsFilled" value="true">
<input type="hidden" name="pid" value="<%=pid%>">
<br />
<div align=center>
	    <table class="fTable" align=center>
	      <tr><th colspan=2 >Personnel Information</th></tr>
	      <tr><td class="subHeaderVertical">
		  First Name:
		</td><td>
		  <input name="firstName"  value="<%=personnelForm.getFirstName()%>"  type="text">
	      </td></tr>
	      <tr ><td class="subHeaderVertical">
		 Last Name:
		</td><td>

		  <input name="lastName"  value="<%=personnelForm.getLastName()%>"  type="text">
	      </td></tr>
	      <tr><td class="subHeaderVertical">
		  Address:
		</td><td>

		  <input name="streetAddress1"  value="<%=personnelForm.getStreetAddress1()%>"  type="text"><br />
		  <input name="streetAddress2"  value="<%=personnelForm.getStreetAddress2()%>"  type="text">
	      </td></tr>
	      <tr ><td class="subHeaderVertical">
		  City:
		</td><td>
		  <input name="city"  value="<%=personnelForm.getCity()%>"  type="text">
	      </td></tr>
	      <tr ><td class="subHeaderVertical">

		  State:
		</td><td>
			<itrust:state name="state" value="<%=personnelForm.getState()%>"/>
	      </td></tr>
	      <tr ><td class="subHeaderVertical">
		  Zip:
		</td><td>
		  <input name="zip1" value="<%=personnelForm.getZip1()%>"  maxlength="5" type="text" size="5"> - 
		  <input name="zip2" value="<%=personnelForm.getZip2()%>"  maxlength="4" type="text" size="4">
	      </td></tr>
	      <tr ><td class="subHeaderVertical">

		  Phone:
		</td><td>
		  <input name="phone1"  value="<%=personnelForm.getPhone1()%>"  type="text" size="3" maxlength="3"> -
		  <input name="phone2"  value="<%=personnelForm.getPhone2()%>"  type="text" size="3" maxlength="3"> -
		  <input name="phone3"  value="<%=personnelForm.getPhone3()%>"  type="text" size="4" maxlength="4">
	      </td></tr>
		      <tr>
			    <th bgcolor=silver colspan=2>Authentication Information</th>
	          </tr>
		      <tr>
		      	<td class="subHeaderVertical">Security Question:</td>
		      	<td><input name="question"  value="<%=sbean.getQuestion()%>"  type="text"></td>
		      </tr>
		      <tr>
		      	<td class="subHeaderVertical">Security Answer:</td>
		      	<td><input name="answer"  value="<%=sbean.getAnswer()%>"  type="password"></td>
		      </tr>
		      <tr>
		      	<td class="subHeaderVertical">Confirm Security Answer:</td>
		      	<td><input name="confirmAnswer"  value="<%=sbean.getAnswer()%>"  type="password"></td>
		      </tr>
		    </table>
		  </td></tr>
		  <tr>
		  	<td colspan=2 align=center>
		  	<br />
      <input type="submit" name="action" style="font-size: 16pt; font-weight: bold;" value="Edit Personnel Record">
		  	</td>
		  </tr>
      </table>
      <br />
</form>
<br />
<div align=center>
Note: in order to set the password for this user, use the "Reset Password" link at the login page.
</div>

<%@include file="/footer.jsp" %>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.ArrayList"%>
<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.beans.ReportRequestBean"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View My Report Requests";
%>

<%@include file="/header.jsp" %>

<%
	PatientDAO patientDAO = new PatientDAO(prodDAO);
	PersonnelDAO personnelDAO = new PersonnelDAO(prodDAO);

ViewMyReportRequestsAction action = new ViewMyReportRequestsAction(prodDAO, loggedInMID.longValue());
String pidString = (String)session.getAttribute("pid");
if (null != pidString && ! "".equals(pidString)) {
	try {
		session.setAttribute("pid", null);
		long patientMID = Long.parseLong(pidString);
		long id = action.addReportRequest(patientMID);
		%><span>Report Request Accepted</span><%
	} catch (Exception e) {
		%><span><%=e.getMessage()%></span><%
	}
}
else {
	session.removeAttribute("pid");
}

List<ReportRequestBean> list = action.getAllReportRequestsForRequester();
%>
<br /><br />
<table class="fTable" align="center">
	<tr>
		<th colspan="10">Report Requests</th>
	</tr>
	<tr class="subHeader">
    		<td>ID</td>
   			<td>Patient</td>
  			<td>Requested Date</td>
  			<td>Viewed Date</td>
  			<td>Status</td>
  			<td>Action</td>
  	</tr>
 <%
 		List<PatientBean> patients = new ArrayList<PatientBean>();
 		PatientBean patient;
 		PersonnelBean personnel;
 		int index = 0;
 		for (ReportRequestBean bean:list) { 
 			patient = patientDAO.getPatient(bean.getPatientMID());
 			patients.add(patient);
 %>
			<tr>
				<td ><%=bean.getID()%></td>
				<td ><%=patient.getFullName()%></td>
				<td ><%=bean.getRequestedDateString()%></td>
				<td ><%=bean.getViewedDateString()%></td>
				<td ><%=bean.getStatus()%></td>
				<td ><a href="viewReport.jsp?patient=<%=index%>&requestID=<%=bean.getID()%>">View</a></td>
			</tr>
<%			index ++;
		} 
		session.setAttribute("patients", patients);
%>
</table>
<br />
<a href="/iTrust/auth/getPatientID.jsp?forward=hcp-uap/viewMyReportRequests.jsp">Add a new Report Request</a>

<%@include file="/footer.jsp" %>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.beans.ReportRequestBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewMyRecordsAction"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewReportAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.OfficeVisitBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.HealthRecord"%>
<%@page import="edu.ncsu.csc.itrust.beans.AllergyBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.FamilyMemberBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.DiagnosisBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.ProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PrescriptionBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.MedicationBean"%>
<%@page import="java.text.NumberFormat" %>
<%@page import="java.text.DecimalFormat" %>
<%@page import="edu.ncsu.csc.itrust.Localization" %>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Comprehensive Patient Report";
%>

<%@include file="/header.jsp" %>

<%
//long loggedInMID = request.getUserPrincipal()==null ? 0L : Long.valueOf(request.getUserPrincipal().getName());

PersonnelDAO personnelDAO = new PersonnelDAO(prodDAO);
ViewMyReportRequestsAction rAction = new ViewMyReportRequestsAction(prodDAO, loggedInMID.longValue());
int patientIndex = Integer.parseInt(request.getParameter("patient"));
List<PatientBean> patients = (List<PatientBean>) session.getAttribute("patients");
//session.removeAttribute("patients");
String pidString = "" + patients.get(patientIndex).getMID();
String rrString = request.getParameter("requestID");
long patientMID;
int requestID;
ReportRequestBean reportRequest;
try {
	if (pidString == null || pidString.equals("")) throw new Exception("Error: patientMID is null");
	if (rrString == null || rrString.equals("")) throw new Exception("Error: requestID is null");
	patientMID = Long.parseLong(pidString);
	requestID = Integer.parseInt(rrString);
	reportRequest = rAction.getReportRequest(requestID);
	rAction.setViewed(requestID);
	reportRequest = rAction.getReportRequest(requestID);

ViewMyRecordsAction action = new ViewMyRecordsAction(prodDAO, patientMID);
ViewReportAction viewAction = new ViewReportAction(prodDAO, loggedInMID.longValue());
PatientBean patient = action.getPatient();
List<OfficeVisitBean> officeVisits = action.getAllOfficeVisits();
List<HealthRecord> records = action.getAllHealthRecords();
List<AllergyBean> allergies = action.getAllergies();
List<PatientBean> represented = action.getRepresented();
List<PatientBean> representing = action.getRepresenting();
List<FamilyMemberBean> family = action.getFamily(); 
List<DiagnosisBean> diagnoses = viewAction.getDiagnoses(patientMID);
List<ProcedureBean> procedures = viewAction.getProcedures(patientMID);
List<PrescriptionBean> prescriptions = viewAction.getPrescriptions(patientMID);
List<PersonnelBean> hcps = viewAction.getDeclaredHCPs(patientMID);

%><h3>Comprehensive Patient Report for <%=patient.getFullName()%></h3>

<div align=center>
<table>
	<tr><td valign=top>
	<table class="fTable">
		<tr>
			<th colspan="2">Patient Information</th>
		</tr>
		<tr>
			<td class="subHeaderVertical">Name:</td>
			<td ><%=patient.getFullName()%></td>
		</tr>
		<tr>
			<td class="subHeaderVertical">Address:</td>
			<td >
			<%=patient.getStreetAddress1()%><br />
			<%= "".equals(patient.getStreetAddress2()) ? "" : patient.getStreetAddress2() + "<br />"%>
			<%=patient.getStreetAddress3()%><br />									  
			</td>
		</tr>
		<tr>
			<td class="subHeaderVertical">Phone:</td>
			<td ><%=patient.getPhone()%></td>
		</tr>
		<tr>
			<td class="subHeaderVertical">Email:</td>
			<td ><%=patient.getEmail()%></td>
		</tr>
	</table>
	</td>
	<td width="15px">&nbsp;</td>
	<td>
	<table class="fTable">
		<tr>
			<th colspan="2">Insurance Information</th>
		</tr>
		<tr>
			<td class="subHeaderVertical">Name (ID):</td>
			<td ><%=patient.getIcName()%> (<%=patient.getIcID()%>)</td>
		</tr>
		<tr>
			<td class="subHeaderVertical">Address:</td>
			<td >
			<%=patient.getIcAddress1()%><br />
			<%="".equals(patient.getIcAddress2()) ? "" : patient.getIcAddress2() + "<br />"%>
			<%=patient.getIcAddress3()%><br />							
			</td>
		</tr>
		<tr>
			<td class="subHeaderVertical">Phone:</td>
			<td ><%=patient.getIcPhone()%></td>
		</tr>
	</table>
	</td></tr>
</table>
<br />
<table class="fTable">
		<tr>
			<th colspan="10">Health Records</th>
		</tr>
	<tr class="subHeader">
		<td>Height</td>
		<td>Weight</td>
		<td>Smokes?</td>
		<td>Blood Pressure</td>
		<td>HDL</td>
		<td>LDL</td>
		<td>Triglycerides</td>
		<td>Total Cholesterol</td>		
		<td>Last Recorded</td>
		<td>By Personnel</td>
	</tr>
<%	
	PersonnelBean personnel;
	for(HealthRecord hr : records) {
		personnel = personnelDAO.getPersonnel(hr.getPersonnelID());
%>
	<tr>
		<td align=center><%=hr.getHeight()%>in</td>
		<td align=center><%=hr.getWeight() %>lbs</td>
		<td align=center><%=hr.isSmoker() ? "Y" : "N" %></td>
		<td align=center><%=hr.getBloodPressure()%> mmHg</td>
		<td align=center><%=hr.getCholesterolHDL()%> mg/dL</td>
		<td align=center><%=hr.getCholesterolLDL()%> mg/dL</td>
		<td align=center><%=hr.getCholesterolTri()%> mg/dL</td>
		<td align=center><%=hr.getTotalCholesterol()%> mg/dL</td>		
		<td align=center><%=hr.getDateRecorded()%></td>
		<td align=center><%=personnel.getFullName()%></td>
	</tr>
	<%}%>
</table>
<br />
<table class="fTable">
		<tr>
			<th colspan=3>Diagnoses</th>
		</tr>
			<tr class="subHeader">
				<td>Visit ID</td>
				<td>ICD Code</td>
				<td>Description</td>
			</tr>
	
			<%if(diagnoses.size()==0){ %>
			<tr>
				<td colspan="2" style="text-align: center;">No diagnoses on record</td>
			</tr>
			<%} else {
				NumberFormat numberFormatter = NumberFormat.getInstance(Localization.instance().getCurrentLocale());
				((DecimalFormat)numberFormatter).setMaximumFractionDigits(2);
				((DecimalFormat)numberFormatter).setMinimumFractionDigits(2);
				for(DiagnosisBean diagnosis : diagnoses){%>
			<tr>
				<td style="text-align: center;"><%=diagnosis.getOvDiagnosisID()%></td>
				<td style="text-align: center;"><%=numberFormatter.format(Float.parseFloat(diagnosis.getICDCode()))%></td>
				<td style="text-align: center;"><%=diagnosis.getDescription()%></td>
			</tr>			
			<%  }
			  } %>
</table>
<br />
<table class="fTable">
		<tr>
			<th colspan="2">Designated HCPs</th>
		</tr>
			<tr class="subHeader">
				<td>HCP Name</td>
			</tr>
	
			<%if(hcps.size()==0){ %>
			<tr>
				<td colspan="2" style="text-align: center;">No designated HCPs on record</td>
			</tr>
			<%} else {
				for(PersonnelBean hcp : hcps){%>
			<tr>
				<td style="text-align: center;"><%=hcp.getFullName()%></td>
			</tr>			
			<%  }
			  } %>
</table>
<br />
<table class="fTable">
		<tr>
			<th colspan="2">Allergies</th>
		</tr>
			<tr class="subHeader">
				<td>Allergy Description</td>
				<td>First Found</td>
			</tr>
	
			<%if(allergies.size()==0){ %>
			<tr>
				<td colspan="2" style="text-align: center;">No Allergies on record</td>
			</tr>
			<%} else {
				for(AllergyBean allergy : allergies){%>
			<tr>
				<td style="text-align: center;"><%=allergy.getDescription()%></td>
				<td style="text-align: center;"><%=allergy.getFirstFoundStr()%></td>
			</tr>			
			<%  }
			  } %>
</table>
<br />
<table class="fTable">
		<tr>
			<th colspan="3">Procedures</th>
		</tr>
			<tr class="subHeader">
				<td>Visit ID</td>
				<td>CPT Code</td>
				<td>Description</td>
			</tr>
	
			<%if(procedures.size()==0){ %>
			<tr>
				<td colspan="2" style="text-align: center;">No procedures on record</td>
			</tr>
			<%} else {
				for(ProcedureBean procedure : procedures){%>
			<tr>
				<td style="text-align: center;"><%=procedure.getOvProcedureID()%></td>
				<td style="text-align: center;"><%=procedure.getCPTCode()%></td>
				<td style="text-align: center;"><%=procedure.getDescription()%></td>
			</tr>			
			<%  }
			  } %>
</table>
<br />
<table class="fTable">
		<tr>
			<th colspan="6">Prescriptions</th>
		</tr>
			<tr class="subHeader">
				<th>Visit ID</th>
				<th>NDCode</th>
				<th>StartDate</th>
				<th>EndDate</th>
				<th>Dosage</th>
				<th>Instructions</th>
			</tr>
	
			<%if(prescriptions.size()==0){ %>
			<tr>
				<td colspan="2" style="text-align: center;">No prescriptions on record</td>
			</tr>
			<%} else {
				for(PrescriptionBean prescription : prescriptions){%>
			<tr>
				<td style="text-align: center;"><%=prescription.getVisitID()%></td>
				<td style="text-align: center;"><%=prescription.getMedication().getNDCode()%></td>
				<td style="text-align: center;"><%=prescription.getStartDateStr()%></td>
				<td style="text-align: center;"><%=prescription.getEndDateStr()%></td>
				<td style="text-align: center;"><%=prescription.getDosage()%></td>
				<td style="text-align: center;"><%=prescription.getInstructions()%></td>
			</tr>			
			<%  }
			  } %>
</table>
<br />
<table class="fTable">
		<tr>
			<th colspan="4">Office Visits</th>
		</tr>
			<tr class="subHeader">
				<th>Visit Date</th>
				<th>HCP</th>
				<th>Hospital ID</th>
				<th>Notes</th>
			</tr>
	
			<%if(officeVisits.size()==0){ %>
			<tr>
				<td colspan="2" style="text-align: center;">No office visits on record</td>
			</tr>
			<%} else {
				for(OfficeVisitBean ov : officeVisits){
					personnel = personnelDAO.getPersonnel(ov.getHcpID());
%>
			<tr>
				<td style="text-align: center;"><%=ov.getVisitDateStr()%></td>
				<td style="text-align: center;"><%=personnel.getFullName()%></td>
				<td style="text-align: center;"><%=ov.getHospitalID()%></td>
				<td style="text-align: center;"><%=ov.getNotes()%></td>
			</tr>	
			<%  }
			  } %>
</table>
<br />
<table class="fTable">
		<tr>
			<th colspan="2">Known Relatives</th>
		</tr>
			<tr class="subHeader">
				<th>Name</th>
				<th>Relation</th>
			</tr>
			<%
			  if(family.size()==0){%>
				<tr>
					<td colspan="3" style="text-align: center;">No Relations on	record</td>
				</tr>
			  <%} else {
				  for(FamilyMemberBean member : family) {%>
			  	<tr>
					<td><%=member.getFullName()%></td>
					<td><%=member.getRelation()%></td>
				</tr>
			  <%  }
				}%>
</table>
<br />
<table class="fTable">
		<tr>
			<th>Patients <%=patient.getFirstName()%> is representing</th>
		</tr>
			<tr class="subHeader">
				<th>Patient</th>
			</tr>
			<%if(represented.size() ==0){ %>
			<tr>
				<td><%=patient.getFirstName()%> is not representing any patients</td>
			</tr>
			<%} else { 
				for(PatientBean p : represented){%>
				<tr>
					<td align=center>
						<%=p.getFullName()%>
					</td>
				</tr>
			 <% }
			  }%>
</table>
<br />
<table class="fTable">
		<tr>
			<th >Patients Representing <%=patient.getFirstName()%></th>
		</tr>
			<tr class="subHeader">
				<th>Patient</th>
			</tr>
			<%if(representing.size() ==0){ %>
			<tr>
				<td><%=patient.getFirstName()%> is not represented by any patients</td>
			</tr>
			<%} else { 
				for(PatientBean p : representing){%>
				<tr>
					<td align=center>
						<%=p.getFullName()%>
					</td>
				</tr>
			 <% }
			  }%>
</table>
<br />
<br />

<%} catch (Exception ex) {
	%><%=ex.getClass()+", " %><%=ex.getCause()+", " %><%=ex.getMessage() %><%
}
%>

<%@include file="/footer.jsp" %>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.EditMonitoringListAction"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Edit Patient List";
%>

<%@include file="/header.jsp" %>

<%
/* Require a Patient ID first */
String pidString = (String)session.getAttribute("pid");
String addOrRemove = "Add";
if (pidString == null || 1 > pidString.length() || "false".equals(request.getParameter("confirmAction"))) {
	session.removeAttribute("pid");
	response.sendRedirect("/iTrust/auth/getPatientID.jsp?forward=hcp-uap/editPatientList.jsp");
   	return;
}
//else {
//	session.removeAttribute("pid");
//}
	
EditMonitoringListAction action = new EditMonitoringListAction(prodDAO,loggedInMID.longValue());
long pid = Long.parseLong(pidString);
String patientName = action.getPatientName(pid);
if (action.isPatientInList(pid)) {
	addOrRemove = "Remove";
}
String confirm = "";
boolean conf_bool = false;

if ("true".equals(request.getParameter("confirmAction"))) {
	if(addOrRemove.equals("Add")) {
		conf_bool = action.addToList(pid);
		if(conf_bool)
			confirm = "Patient " + patientName + " Added";
	} else {
		conf_bool = action.removeFromList(pid);
		if(conf_bool)
			confirm = "Patient " + patientName + " Removed";
	}
	
	session.removeAttribute("pid");
	
}

if (!"".equals(confirm)) {
%>
	<div align=center>
		<span class="iTrustMessage"><%=confirm%></span>
	</div>
<%
} else {
%>

<br />

<form action="editPatientList.jsp" method="post">
	<input type="hidden" name="confirmAction" value="true"></input>
	<input type="submit" value="<%=addOrRemove %> <%=patientName %>">
	<input type="submit" value="Choose Different Patient" onClick="javascript:differentPatient();">
</form>

<script type="text/javascript">

function differentPatient() {
	document.getElementsByName("confirmAction")[0].value="false";
	document.forms[0].submit();
}

</script>

<%
}
%>
<br />
<br />
<br />

<%@include file="/footer.jsp" %>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.ArrayList"%>
<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientVisitBean"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View All Patients";
%>

<%@include file="/header.jsp" %>

<%
ViewPatientOfficeVisitHistoryAction action = new ViewPatientOfficeVisitHistoryAction(prodDAO, loggedInMID.longValue());
List<PatientVisitBean> patientVisits = action.getPatients();
%>
<br />

<form action="viewReport.jsp" method="post" name="myform">
<table class="fTable" align="center">
	<tr>
		<th colspan="3">Past Patients</th>
	</tr>

	<tr class="subHeader">
		<th>Patient</th>
		<th>Address</th>
		<th>Last Visit</th>

	</tr>
	<%
		List<PatientBean> patients = new ArrayList<PatientBean>();
		int index = 0;
		for (PatientVisitBean bean : patientVisits) {
			patients.add(bean.getPatient());
	%>
	<tr>
		<td >
			<a href="editPHR.jsp?patient=<%=index%>">
		
		
			<%=bean.getPatientName()%>	
		
		
			</a>
			</td>
		<td ><%=bean.getAddress1() +" " +bean.getAddress2()%></td>
		<td ><%=bean.getLastOVDateM() +"/" +bean.getLastOVDateD() +"/" +bean.getLastOVDateY()%></td>
	</tr>
	<%
			index ++;
		}
		session.setAttribute("patients", patients);
	%>
</table>
</form>
<br />
<br />

<%@include file="/footer.jsp" %>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction"%>
<%@page import="edu.ncsu.csc.itrust.risk.RiskChecker"%>
<%@page import="edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Risk Factors for Chronic Diseases";
%>

<%@include file="/header.jsp" %>

<%try{
/* Require a Patient ID first */
String pidString = (String)session.getAttribute("pid");
if (pidString == null || 1 > pidString.length()) {
	response.sendRedirect("/iTrust/auth/getPatientID.jsp?forward=hcp-uap/chronicDiseaseRisks.jsp");
   	return;
}
//else {
//	session.removeAttribute("pid");
//}

ChronicDiseaseRiskAction action = new ChronicDiseaseRiskAction(prodDAO, loggedInMID.longValue(), pidString);
long pid = action.getPatientID();
%>

<table class="fTable" align="center">
	<tr>
		<th colspan="2" >Disease Risk Factors</th>
	</tr>
<%
	List<RiskChecker> diseases = action.getDiseasesAtRisk();
	if(diseases.size() > 0) {
		for(RiskChecker disease: diseases) {
%>
    <tr>
    	<td colspan="2" class="subHeaderVertical"><%=disease.getName()%></td>
    </tr>
      <tr>
	      <td style="padding-left: 10px">
<%
			List<PatientRiskFactor> factors = disease.getPatientRiskFactors();
			for(PatientRiskFactor factor : factors) {
%>
		        <%=factor.getDescription()%><br />
<%
			}
%>
	      </td>
      </tr>
<%
		}
	}
}
	catch(Exception e) {
%>
	<tr>
    	<td colspan="2" align=center>No Data</td>
    </tr>
<%
	}
%>
</table>

<br /><br /><br />
<itrust:patientNav thisTitle="Risk Factors" />


<%@include file="/footer.jsp" %>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PrescriptionBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Get Prescription Report";
%>

<%@include file="/header.jsp" %>

<div align=center>
<h1>Prescription Report</h1>
<%
	String pidString = (String)session.getAttribute("pid");
	if (pidString == null || 1 > pidString.length()) {
		response.sendRedirect("/iTrust/auth/getPatientID.jsp?forward=hcp-uap/getPrescriptionReport.jsp");
  		return;
	}
	//else {
	//	session.removeAttribute("pid");
	//}
	
	long pid = Long.parseLong(pidString);
	ViewPrescriptionRecordsAction action = new ViewPrescriptionRecordsAction(DAOFactory.getProductionInstance(), loggedInMID);
	PatientBean patient = action.getPatient(pid);
	List<PrescriptionBean> prescriptions = action.getPrescriptionsForPatient(pid);

	if (prescriptions.size() == 0) { %>
	<i>No prescriptions found</i><br />
	<br />
	<br />
<%		} else { %>
	<table class="fTable">
		<tr>
			<th>ND Code</th>
			<th>Description</th>
			<th>Duration</th>
			<th>Prescribing HCP</th>
		</tr>
<%			for (PrescriptionBean prescription : prescriptions) { %>
		<tr>
			<td ><%=prescription.getMedication().getNDCodeFormatted() %></td>
			<td ><%=prescription.getMedication().getDescription() %></td>
			<td ><%=prescription.getStartDateStr() %> to <%=prescription.getEndDateStr() %></td>
			<td ><%= action.getPrescribingDoctor(prescription).getFullName() %></td>
		</tr>
<%			} %>
	</table>
<%		} %>
</div>
<br />
<br />
<itrust:patientNav thisTitle="Prescriptions"/>


<%@include file="/footer.jsp" %>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.action.EditPatientAction"%>
<%@page import="edu.ncsu.csc.itrust.BeanBuilder"%>
<%@page import="edu.ncsu.csc.itrust.enums.Ethnicity"%>
<%@page import="edu.ncsu.csc.itrust.enums.BloodType"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.enums.Gender"%>
<%@page import="edu.ncsu.csc.itrust.beans.DiagnosisBean"%>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - Edit Patient";
%>

<%@include file="/header.jsp"%>

<%
	/* Require a Patient ID first */
	String pidString = (String) session.getAttribute("pid");
	if (pidString == null || 1 > pidString.length()) {
		pidString = (String) session.getAttribute("editPid");
		if (pidString == null || 1 > pidString.length()) {
			response.sendRedirect("/iTrust/auth/getPatientID.jsp?forward=hcp-uap/editPatient.jsp");
			return;
		}
	}
	else {
		session.removeAttribute("pid");
		session.setAttribute("editPid", pidString);
	}

	/* If the patient id doesn't check out, then kick 'em out to the exception handler */
	EditPatientAction action = new EditPatientAction(prodDAO,
			loggedInMID.longValue(), pidString);

	/* Now take care of updating information */
	boolean formIsFilled = request.getParameter("formIsFilled") != null
			&& request.getParameter("formIsFilled").equals("true");
	PatientBean p;
	if (formIsFilled) {
		p = new BeanBuilder<PatientBean>().build(request
				.getParameterMap(), new PatientBean());
		try {
			action.updateInformation(p);
%>
	<br />
	<div align=center>
		<span class="iTrustMessage">Information Successfully Updated</span>
	</div>
	<br />
<%
	} catch (FormValidationException e) {
%>
	<br />
	<div align=center>
		<span class="iTrustError"><%=e.getMessage() %></span>
	</div>
	<br />
<%
		}
	} else {
		p = action.getPatient();
	}
%>

<form action="editPatient.jsp" method="post"><input type="hidden"
	name="formIsFilled" value="true"> <br />
<table cellspacing=0 align=center cellpadding=0>
	<tr>
		<td valign=top>
		<table class="fTable" align=center style="width: 350px;">
			<tr>
				<th colspan=2>Patient Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">First Name:</td>
				<td><input name="firstName" value="<%=p.getFirstName()%>" type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Last Name:</td>
				<td><input name="lastName" value="<%=p.getLastName()%>" type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Email:</td>
				<td><input name="email" value="<%=p.getEmail()%>" type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Address:</td>
				<td><input name="streetAddress1"
					value="<%=p.getStreetAddress1()%>" type="text"><br />
				<input name="streetAddress2" value="<%=p.getStreetAddress2()%>" type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">City:</td>
				<td><input name="city" value="<%=p.getCity()%>" type="text">
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">State:</td>
				<td><itrust:state name="state" value="<%=p.getState()%>" /></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Zip:</td>
				<td><input name="zip1" value="<%=p.getZip1()%>" maxlength="5"
					type="text" size="5"> - <input name="zip2"
					value="<%=p.getZip2()%>" maxlength="4" type="text" size="4">
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Phone:</td>
				<td><input name="phone1" value="<%=p.getPhone1()%>" type="text"
					size="3" maxlength="3"> - <input name="phone2"
					value="<%=p.getPhone2()%>" type="text" size="3" maxlength="3">
				- <input name="phone3" value="<%=p.getPhone3()%>" type="text"
					size="4" maxlength="4"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Mother MIDs:</td>
				<td><input name="motherMID" value="<%=p.getMotherMID()%>"
					maxlength="10" type="text"></td>
			</tr>

			<tr>
				<td class="subHeaderVertical">Father MID:</td>
				<td><input name="fatherMID" value="<%=p.getFatherMID()%>"
					maxlength="10" type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Credit Card Type:</td>
				<td><select name="creditCardType">
				<option value="">Select:</option>
				<option value="MASTERCARD" <%= p.getCreditCardType().equals("MASTERCARD") ? "selected" : "" %>>Mastercard</option>
				<option value="VISA" <%= p.getCreditCardType().equals("VISA") ? "selected" : "" %>>Visa</option>
				<option value="DISCOVER" <%= p.getCreditCardType().equals("DISCOVER") ? "selected" : "" %>>Discover</option>
				<option value="AMEX" <%= p.getCreditCardType().equals("AMEX") ? "selected" : "" %>>American Express</option>
				</select>
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Credit Card Number:</td>
				<td><input name="creditCardNumber" value="<%=p.getCreditCardNumber()%>"
					maxlength="19" type="text"></td>
			</tr>
		</table>
		<br />
		<table class="fTable" align=center style="width: 350px;">
			<tr>
				<th colspan=2>Insurance Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">Name:</td>
				<td><input name="icName" value="<%=p.getIcName()%>" type="text">
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Address:</td>
				<td><input name="icAddress1" value="<%=p.getIcAddress1()%>"
					type="text"><br />
				<input name="icAddress2" value="<%=p.getIcAddress2()%>" type="text">
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">City:</td>
				<td><input name="icCity" value="<%=p.getIcCity()%>" type="text">
				</td>
			</tr>

			<tr>
				<td class="subHeaderVertical">State:</td>
				<td><itrust:state name="icState" value="<%=p.getIcState()%>" />
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Zip:</td>
				<td><input name="icZip1" value="<%=p.getIcZip1()%>"
					maxlength="5" type="text" size="5"> - <input name="icZip2"
					value="<%=p.getIcZip2()%>" maxlength="4" type="text" size="4">
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Phone:</td>
				<td><input name="icPhone1" value="<%=p.getIcPhone1()%>"
					type="text" size="3" maxlength="3"> - <input
					name="icPhone2" value="<%=p.getIcPhone2()%>" type="text" size="3"
					maxlength="3"> - <input name="icPhone3"
					value="<%=p.getIcPhone3()%>" type="text" size="4" maxlength="4">

				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Insurance ID:</td>
				<td><input name="icID" value="<%=p.getIcID()%>" type="text">
				</td>
			</tr>
		</table>
		</td>
		<td width="15px">&nbsp;</td>
		<td valign=top>
		<table class="fTable" align=center style="width: 350px;">
			<tr>
				<th colspan=2>Emergency Contact</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">Name:</td>
				<td><input name="emergencyName"
					value="<%=p.getEmergencyName()%>" type="text"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Phone:</td>
				<td><input name="emergencyPhone1"
					value="<%=p.getEmergencyPhone1()%>" type="text" size="3"
					maxlength="3"> - <input name="emergencyPhone2"
					value="<%=p.getEmergencyPhone2()%>" type="text" size="3"
					maxlength="3"> - <input name="emergencyPhone3"
					value="<%=p.getEmergencyPhone3()%>" type="text" size="4"
					maxlength="4"></td>
			</tr>
		</table>
		<br />
		<table class="fTable" align=center style="width: 350px;">
			<tr>
				<th colspan=2>Health Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">Ethnicity:</td>
				<td><select name="ethnicityStr">
					<%
						String selected = "";
						for (Ethnicity eth : Ethnicity.values()) {
							selected = (eth.equals(p.getEthnicity())) ? "selected=selected"
									: "";
					%>
					<option value="<%=eth.getName()%>" <%=selected%>><%=eth.getName()%></option>
					<%
						}
					%>
				</select></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Blood Type:</td>
				<td><select name="bloodTypeStr">
					<%
						for (BloodType bt : BloodType.values()) {
							selected = (bt.equals(p.getBloodType())) ? "selected=selected"
									: "";
					%>
					<option value="<%=bt.getName()%>" <%=selected%>><%=bt.getName()%></option>
					<%
						}
					%>
				</select>
			</tr>
			<tr>
				<td class="subHeaderVertical">Gender:</td>
				<td><select name="genderStr">
					<%
						for (Gender g : Gender.values()) {
							selected = (g.equals(p.getGender())) ? "selected=selected" : "";
					%>
					<option value="<%=g.getName()%>" <%=selected%>><%=g.getName()%></option>
					<%
						}
					%>
				</select></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Date Of Birth:</td>
				<td><input type=text name="dateOfBirthStr" maxlength="10"
					size="10" value="<%=p.getDateOfBirthStr()%>"> <input
					type=button value="Select Date"
					onclick="displayDatePicker('dateOfBirthStr');"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Date Of Death:</td>
				<td><input type=text name="dateOfDeathStr" maxlength="10"
					size="10" value="<%=p.getDateOfDeathStr()%>"> <input
					type=button value="Select Date"
					onclick="displayDatePicker('dateOfDeathStr');"></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Cause of Death:</td>
				<td><select name="causeOfDeath" style="font-size: 10">
					<option value="">-- None Selected --</option>
<% 
					for (DiagnosisBean diag : prodDAO.getICDCodesDAO().getAllICDCodes()){
						String select = "";
						if (diag.getICDCode().equals(p.getCauseOfDeath()))
							select = "selected=\"selected\"";
%>
					<option <%=select%> value="<%=diag.getICDCode()%>"><%=diag.getICDCode() %>
					- <jsp:expression>diag.getDescription()</jsp:expression></option>
<%					
			}
%>
				</select></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Topical Notes:</td>
				<td><textarea name="topicalNotes"><%=p.getTopicalNotes()%></textarea>
				</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<br />
<div align=center>
	<input type="submit" name="action"
		style="font-size: 16pt; font-weight: bold;" value="Edit Patient Record"><br /><br />
	<span style="font-size: 14px;">
		Note: in order to set the password for this user, use the "Reset Password" link at the login page.
	</span>
</div>
</form>
<br />
<br />
<itrust:patientNav thisTitle="Demographics" />

<%@include file="/footer.jsp"%>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.action.EditHealthHistoryAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.HealthRecord"%>
<%@page import="edu.ncsu.csc.itrust.BeanBuilder"%>
<%@page import="edu.ncsu.csc.itrust.beans.forms.HealthRecordForm"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Edit Basic Health Record";
%>

<%@include file="/header.jsp" %>

<%
/* Require a Patient ID first */
String pidString = (String)session.getAttribute("pid");
if (pidString == null || 1 > pidString.length()) {
	response.sendRedirect("/iTrust/auth/getPatientID.jsp?forward=hcp-uap/editBasicHealth.jsp");
   	return;
}
//else {
//	session.removeAttribute("pid");
//}
	
EditHealthHistoryAction action = new EditHealthHistoryAction(prodDAO,loggedInMID.longValue(), pidString);
long pid = action.getPid();
String patientName = action.getPatientName();
String confirm = "";
if ("true".equals(request.getParameter("formIsFilled"))) {
	try { 
		confirm = action.addHealthRecord(pid, new BeanBuilder<HealthRecordForm>().build(request.getParameterMap(), new HealthRecordForm()));
	} catch(FormValidationException e){
%>
		<div align=center>
			<span class="iTrustError"><%e.printHTML(pageContext.getOut());%></span>
		</div>
		<br />
<%
	}
}
List<HealthRecord> records = action.getAllHealthRecords(pid);
HealthRecord mostRecent = (records.size() > 0) ? records.get(0) : new HealthRecord(); //for the default values
%>

<script type="text/javascript">
function showAddRow(){
	document.getElementById("addRow").style.display="inline";
	document.getElementById("addRowButton").style.display="none";
	document.forms[0].height.focus();
}
</script>

<%
if (!"".equals(confirm)) {
%>
	<div align=center>
		<span class="iTrustMessage"><%=confirm%></span>
	</div>
<%
}
%>

<br />
<div align=center>
	<table align="center" class="fTable">
		<tr>
			<th colspan="10">Basic Health History</th>
		</tr>
		<tr class = "subHeader">
			<td>Height</td>
			<td>Weight</td>
			<td>Smokes?</td>
			<td>Blood Pressure</td>
			<td>HDL</td>
			<td>LDL</td>
			<td>Triglycerides</td>
			<td>Total Cholesterol</td>
			<td>Last Recorded</td>
			<td>By Personnel</td>
		</tr>
	<%
	for (HealthRecord hr : records) {
	%>
		<tr>
			<td align=center><%=hr.getHeight()%>in</td>
			<td align=center><%=hr.getWeight()%>lbs</td>
			<td align=center><%=hr.isSmoker() ? "Y" : "N"%></td>
			<td align=center><%=hr.getBloodPressure()%> mmHg</td>
			<td align=center><%=hr.getCholesterolHDL()%> mg/dL</td>
			<td align=center><%=hr.getCholesterolLDL()%> mg/dL</td>
			<td align=center><%=hr.getCholesterolTri()%> mg/dL</td>
			<td align=center><%=hr.getTotalCholesterol()%> mg/dL</td>
			<td align=center><%=hr.getDateRecorded()%></td>
<%
		PersonnelBean p = prodDAO.getPersonnelDAO().getPersonnel(hr.getPersonnelID());
%>
			<td align=center><%=p.getFullName()%></td>
		</tr>
	<%
	}
	%>
	</table>
	<br />
	<a href="javascript:showAddRow();" id="addRowButton" style="text-decoration:none;" >
		<input type=button value="Add Record" onClick="showAddRow();"> 
	</a>
</div>
<br />
<div id="addRow" style="display: none;" align=center>
<form action="editBasicHealth.jsp" method="post">
<input type="hidden" name="formIsFilled" value="true">
<table class="fTable" align="center">
	<tr>
		<th colspan="2" style="background-color:silver;">Record Information</th>
	</tr>	
	<tr>
		<td class="subHeader">Height (in.):</td>
		<td ><input name="height"
			value="<%=mostRecent.getHeight()%>" style="width: 50px" type="text"
			maxlength="5"></td>
	</tr>
	<tr>
		<td class="subHeader">Weight (lbs.):</td>
		<td ><input name="weight"
			value="<%=mostRecent.getWeight()%>" style="width: 50px" type="text"
			maxlength="5"></td>
	</tr>
	<tr>
		<td class="subHeader">Smoker?:</td>
		<td ><input type="radio" name="isSmoker"
			value="false" checked /> No <input type="radio" name="isSmoker"
			value="true" /> Yes</td>
	</tr>
	<tr>
		<td class="subHeader">Blood Pressure (mmHg):</td>
		<td >
			<input name="bloodPressureN" value="<%=mostRecent.getBloodPressureN()%>" style="width: 40px" maxlength="3" type="text" /> 
			/ <input name="bloodPressureD" value="<%=mostRecent.getBloodPressureD()%>" style="width: 40px" maxlength="3" type="text" />
		</td>
	</tr>
	<tr>
		<td class="subHeader">Cholesterol (mg/dL):</td>
		<td >
		<table>
			<tr>
				<td style="text-align: right">HDL:</td>
				<td><input name="cholesterolHDL" value="<%=mostRecent.getCholesterolHDL()%>" 
				style="width: 38px" maxlength="3" type="text"></td>
			</tr>
			<tr>
				<td style="text-align: right">LDL:</td>
				<td>
					<input name="cholesterolLDL" value="<%=mostRecent.getCholesterolLDL()%>" style="width: 38px" maxlength="3" type="text">
				</td>
			</tr>
			<tr>
				<td style="text-align: right">Tri:</td>
				<td>
					<input name="cholesterolTri" value="<%=mostRecent.getCholesterolTri()%>" style="width: 38px" maxlength="3" type="text">
			    </td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<br />
<input type="submit" value="Add Record">
</form>
</div>

<br />
<br />
<br />
<itrust:patientNav thisTitle="Basic Health History" />

<%@include file="/footer.jsp" %>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>
<%@page import="java.util.Map"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="java.util.Date"%>

<%@page import="edu.ncsu.csc.itrust.EmailUtil"%>
<%@page import="edu.ncsu.csc.itrust.beans.OfficeVisitBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.LabProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.LOINCbean"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.beans.DiagnosisBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.MedicationBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.ProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.action.EditOfficeVisitAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm"%>
<%@page import="edu.ncsu.csc.itrust.exception.iTrustException"%>
<%@page import="edu.ncsu.csc.itrust.beans.HospitalBean"%>
<%@page import="edu.ncsu.csc.itrust.BeanBuilder"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>
<%@page import="edu.ncsu.csc.itrust.beans.PrescriptionBean"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Document Office Visit";
%>

<%@include file="/header.jsp" %>

<%
	String ovIDString = request.getParameter("ovID");

	String pidString = (String)session.getAttribute("pid");
	if (pidString == null || 1 > pidString.length()) {
		response.sendRedirect("/iTrust/auth/getPatientID.jsp?forward=hcp-uap/editOfficeVisit.jsp?ovID=" + ovIDString);
	   	return;
	}
	//else {
	//	session.removeAttribute("pid");
	//}
	
    EditOfficeVisitAction action = new EditOfficeVisitAction(prodDAO, loggedInMID, pidString, ovIDString);
	long ovID = action.getOvID();
	OfficeVisitBean visit = action.getOfficeVisit();
	String confirm = "";
	String warning = "";
	if (request.getParameter("startDate") != null && request.getParameter("endDate") != null){
		warning = action.hasInteraction(request.getParameter("addMedID"), pidString, request.getParameter("startDate"), request.getParameter("endDate"));
	}
		warning += action.isAllergyOnList(pidString,request.getParameter("addMedID"));
	
	if ("true".equals(request.getParameter("formIsFilled"))) {
		EditOfficeVisitForm form = new BeanBuilder<EditOfficeVisitForm>().build(request.getParameterMap(), new EditOfficeVisitForm());
		if ("".equals(warning) || "true".equals(request.getParameter("checkPresc"))){			
			if ("true".equals(request.getParameter("checkPresc"))){
				form.setAddMedID(request.getParameter("testMed"));
				form.setStartDate(request.getParameter("medStart"));
				form.setDosage(request.getParameter("medDos"));
				form.setEndDate(request.getParameter("medEnd"));
				form.setInstructions(request.getParameter("medInst"));
				String problem = action.hasInteraction(request.getParameter("testMed"), pidString, request.getParameter("medStart"), request.getParameter("medEnd"));
				problem += action.isAllergyOnList(pidString,request.getParameter("testMed"));
				new EmailUtil(prodDAO).sendEmail(action.makeEmailApp(loggedInMID,pidString,problem));
			}
			
			form.setHcpID("" + visit.getHcpID());
			form.setPatientID("" + visit.getPatientID());
			try {
				confirm = action.updateInformation(form);
			}
			catch (FormValidationException e) {
				e.printHTML(pageContext.getOut());
				confirm = "Input not valid";
			}
		}
	}
	OfficeVisitBean ov = action.getOfficeVisit();
	List<HospitalBean> hcpHospitals = action.getHospitals(ov.getHcpID());
	List <LabProcedureBean> lpBeans = action.getLabProcedures(Long.parseLong(pidString), ovID);
%>

<div align=center>
<%
if (!"".equals(confirm)) {
	if (request.getParameter("checkPresc").equals("false")){ %>
		<span class="iTrustMessage">Operation Canceled</span>
	<% } else if ("success".equals(confirm)) { %>
		<span class="iTrustMessage">Information Successfully Updated</span>
<%	}
	else { %>
		<span class="iTrustError"><%=confirm%></span>		
<%	}
}	
%>
</div>


<script type="text/javascript">
	function removeID(type, value) {
		document.getElementById(type).value = value;
		document.forms[0].submit();
	}

	function setVar(){
		var medID = document.getElementById("addMedID");
		var medIDindex = medID.options.selectedIndex;
		var medIDtxt = medID.options[medIDindex].value;
		var medDostxt = document.getElementById("dosage").value;
		var medStarttxt = document.getElementById("startDate").value;
		var medEndtxt = document.getElementById("endDate").value;
		var medInsttxt = document.getElementById("instructions").value;
		document.getElementById("testMed").value = medIDtxt;
		document.getElementById("medDos").value = medDostxt;
		document.getElementById("medStart").value = medStarttxt;
		document.getElementById("medEnd").value = medEndtxt;
		document.getElementById("medInst").value = medInsttxt;
		document.forms[0].submit();
	}

	function presCont(){
		document.getElementById("checkPresc").value = "true";
		document.forms[0].submit();
	}

	function presCanc(){
		var medID = document.getElementById("addMedID");
		var medIDindex = medID.options.selectedIndex;
		var medIDtxt = medID.options[medIDindex].value;
		var medDostxt = document.getElementById("dosage").value;
		var medStarttxt = document.getElementById("startDate").value;
		var medEndtxt = document.getElementById("endDate").value;
		var medInsttxt = document.getElementById("instructions").value;

		document.getElementById("testMed").value = "";
		document.getElementById("medDos").value = "";
		document.getElementById("medStart").value = "";
		document.getElementById("medEnd").value = "";
		document.getElementById("medInst").value = "";
		document.getElementById("checkPresc").value = "false";
		document.forms[0].submit();
	}
	
</script>

<form action="editOfficeVisit.jsp" method="post" id="mainForm">
	<input type="hidden" name="formIsFilled" value="true" />
	<input type="hidden" name="ovID" value="<%=ovID%>" />
	<input type="hidden" id="removeDiagID" name="removeDiagID" value="" />
	<input type="hidden" id="removeMedID" name="removeMedID" value="" />
	<input type="hidden" id="removeProcID" name="removeProcID" value="" />
	<input type="hidden" id="removeImmunizationID" name="removeImmunizationID" value="" />
	<input type="hidden" id="removeLabProcID" name="removeLabProcID" value="" />
	<input type="hidden" id="checkPresc" name="checkPresc" value="" />
	<input type="hidden" id="testMed" name="testMed" value=<%=request.getParameter("testMed") %> />
	<input type="hidden" id="medDos" name="medDos" value=<%=request.getParameter("medDos") %> />
	<input type="hidden" id="medStart" name="medStart" value=<%=request.getParameter("medStart") %> />
	<input type="hidden" id="medEnd" name="medEnd" value=<%=request.getParameter("medEnd") %> />
	<input type="hidden" id="medInst" name="medInst" value=<%=request.getParameter("medInst") %> />

<div align=center>
<table class="fTable" align="center">
	<tr>
		<th colspan="2">Office Visit</th>
	</tr>
	<tr>
		<td class="subHeaderVertical">Patient ID:</td>
		<td><%=prodDAO.getAuthDAO().getUserName(ov.getPatientID())%> </td>
	</tr>
	<tr>
		<td class="subHeaderVertical">Date of Visit:</td>
		<td><input name="visitDate" value="<%=ov.getVisitDateStr()%>" /><input type="button" value="Select Date" onclick="displayDatePicker('visitDate');" /></td>
	</tr>
	<tr>
		<td class="subHeaderVertical">Hospital:</td>
		<td><select name="hospitalID">
				<option value="">N/A</option>
				<%for(HospitalBean hos : hcpHospitals) {%>
					<option value="<%=hos.getHospitalID()%>" 
						<%=hos.getHospitalID().equals(ov.getHospitalID()) ? "selected=selected" : ""%> > 
						<%=hos.getHospitalName()%>
					</option>
				<%} %>				
			</select>
		</td>
	</tr>
	<tr>
		<td class="subHeaderVertical">Notes:</td>
		<td><textarea rows="4" style="width: 100%;" name="notes"><%=ov.getNotes()%></textarea></td>
	</tr>
</table>
<br />
<input type="submit" name="update" id="update" value="Update" >
</div>
<br /><br />
<div align=center>
<table class="fTable" align="center">
	<tr>
		<th colspan="6">Prescriptions</th>
	</tr>
	<tr class="subHeader">
		<td>Medication</td>
		<td>Dosage</td>
		<td>Dates</td>
		<td colspan=2>Instructions</td>
		<td style="width: 60px;">Action</td>
	</tr>
	
	<%if(ov.getPrescriptions().size()==0){ %>
		<tr>
			<td colspan="6" style="text-align: center;">No Prescriptions on record</td>
		</tr>
	<%}else{ %>
		<%for(PrescriptionBean pres : ov.getPrescriptions()){ %>
		<tr>
			<td align=center><a href="./editPrescription.jsp?presID=<%=pres.getId()%>&ovID=<%=ovIDString%>"><%=pres.getMedication().getDescription()%> (<%=pres.getMedication().getNDCode()%>)</a></td>
			<td align=center><%=pres.getDosage()%>mg</td>
			<td align=center><%=pres.getStartDateStr()%> to <%=pres.getEndDateStr()%></td>						
			<td align=center colspan=2><%=pres.getInstructions()%></td>						
			<td align=center><a href="javascript:removeID('removeMedID','<%=pres.getId()%>');">Remove</a></td>
		</tr>
		<%}
	}%>
	<tr>
		<th colspan="6" style="text-align: center;">Add New</th>
	</tr>
	 <tr>
	 	<td align=center>
	 		<select name="addMedID" id="addMedID" style="font-size:10px;">
	 			<option value=""> -- Please Select a Medication -- </option>
	 			<%for(MedicationBean med : prodDAO.getNDCodesDAO().getAllNDCodes()){%>
		 			<option value="<%=med.getNDCode()%>"><%=med.getNDCode()%> - <%=med.getDescription()%></option>
		 						 			
	 			<%}%>
	 		</select>
	 	</td>
	 	<td align=center>
	 		<input type="text" name="dosage" id="dosage" maxlength="6" style="width: 50px;"> mg
	 	</td>
	 	<td align=center colspan=2>
	 		<input type="text" name="startDate" id="startDate" style="width: 80px;" 
	 			onclick="displayDatePicker('startDate');" 
	 			onselect="displayDatePicker('startDate');"
	 			value="<%=new SimpleDateFormat("MM/dd/yyyy").format(new Date())%>"> 
	 		to 
			<input type="text" name="endDate" id="endDate" style="width: 80px;"
				onclick="displayDatePicker('endDate');" 
	 			onselect="displayDatePicker('endDate');"
	 			value="<%=new SimpleDateFormat("MM/dd/yyyy").format(new Date())%>">
	 	</td>
	 	<td align=center>
	 		<input type="text" name="instructions" id="instructions" value="-- Instructions --" maxlength=500>
	 	</td>
	 	<td>
		 	<input type="button" id="addprescription" onclick="setVar()" value="Add Prescription">
	 	</td>
	 </tr>
</table>
<%
if (!("".equals(warning) )){ %>
<br/>
	<div style="background-color:yellow;color:black" align="center"><%=warning %></div>
	<div style="background-color:yellow" align="center"><input type="button" onclick="presCont()" value="Continue" name="continue" id="continue"/>
	<input type="button" onclick="location.href='/iTrust/auth/hcp-uap/editPHR.jsp'" value="Cancel" name="cancel" id="cancel"/>
	</div><BR>
<%}; %>


</div>
<br /><br />
<div align=center>
	<table class="fTable" align="center">
			<tr>
				<th colspan="5">Laboratory Procedures</th>
			</tr>
			<tr class="subHeader">
				<td>LOINC Code</td>
				<td>Status</td>
				<td>Commentary</td>
				<td>Results</td>
				<td style="width: 60px;">Updated Date</td>
			</tr>
			<%if(lpBeans.size()==0){ %>
			<tr>
				<td colspan="5" style="text-align: center;">No Laboratory Procedures on	record</td>
			</tr>
			<%} else { %>
			<%for(LabProcedureBean labproc : lpBeans){ %>
			<tr>
				<td align=center><%=labproc.getLoinc()%></td>
				<td align=center><%=labproc.getStatus()%></td>
				<td align=center><%=labproc.getCommentary()%></td>
				<td align=center><%=labproc.getResults()%></td>
				<td align=center><%=labproc.getTimestamp()%></td>
				<td ><a
					href="javascript:removeID('removeLabProcID','<%=labproc.getProcedureID()%>');">Remove</a></td>
			</tr>
			<%} %>
			<%} %>
			<tr>
				<th colspan="5" style="text-align: center;">New</th>
			</tr>
			<tr>
				<td colspan="5" align="center">
					<select name="addLabProcID"	style="font-size: 10px;">
						<option value="">-- Please Select a Procedure --</option>
							<% for(LOINCbean loinc : prodDAO.getLOINCDAO().getAllLOINC()) { %>
						<option value="<%=loinc.getLabProcedureCode()%>"> <%=loinc.getLabProcedureCode()%>
					 		- <%=loinc.getComponent()%> - <%=loinc.getKindOfProperty()%> - <%=loinc.getTimeAspect()%>
					 		- <%=loinc.getSystem()%> - <%=loinc.getScaleType()%> 
					 		- <%=loinc.getMethodType()%></option>
							<% } %>
					</select>
					<input	type="submit" name="addLP" value="Add Lab Procedure" >
				</td>
			</tr>
		</table>
	</div>
<br /><br />
<div align=center>
	<div style="display: inline-table; margin-right:10px;">
		<table class="fTable" align="center">
			<tr>
				<th colspan="3">Diagnoses</th>
			</tr>
			<tr class="subHeader">
				<td>ICD Code</td>
				<td>Description</td>
				<td style="width: 60px;">Action</td>
			</tr>

			<%if(ov.getDiagnoses().size()==0){ %>
			<tr>
				<td  colspan="3" style="text-align: center;">No Diagnoses on record</td>
			</tr>
			<%} else { 
					for(DiagnosisBean d : ov.getDiagnoses()) { %>
			<tr>
				<td align=center><%=d.getICDCode()%></td>
				<td ><%=d.getDescription()%></td>
				<td ><a
					href="javascript:removeID('removeDiagID','<%=d.getOvDiagnosisID()%>');">Remove</a></td>
			</tr>
			<%		}
				}%>
			<tr>
				<th colspan="3" style="text-align: center;">New</th>
			</tr>
			<tr>
				<td colspan="3" align=center><select name="addDiagID" style="font-size:10">
					<option value="">-- None Selected --</option>
					<%for(DiagnosisBean diag : prodDAO.getICDCodesDAO().getAllICDCodes()) { %>
					<option value="<%=diag.getICDCode()%>"><%=diag.getICDCode()%>
					- <%=diag.getDescription()%></option>
					<%}%>
					</select>
					<input type="submit" value="Add Diagnosis">
				</td>
			</tr>
		</table>
	</div>
	<div style="display: inline-table; margin-right:10px;">
		<table class="fTable" align="center">
			<tr>
				<th colspan="3">Procedures</th>
			</tr>
			<tr class="subHeader">
				<td>CPT Code</td>
				<td>Description</td>
				<td style="width: 60px;">Action</td>
			</tr>
			<% if (0 == ov.getProcedures().size()) { %>
			<tr>
				<td colspan="3" style="text-align: center;">No Procedures on record</td>
			</tr>
			<% } 
			   else { %>
			<% for (ProcedureBean proc : ov.getProcedures()) { 
				if (null == proc.getAttribute() || !proc.getAttribute().equals("immunization")) {%>
			<tr>
				<td align="center"><%=proc.getCPTCode()%></td>
				<td ><%=proc.getDescription()%></td>
				<td ><a href="javascript:removeID('removeProcID','<%=proc.getOvProcedureID()%>');">Remove</a></td>
			</tr>
			<% } } } %>
			<tr>
				<th colspan="3" style="text-align: center;">New</th>
			</tr>
			<tr>
				<td colspan="3" align="center">
					<select name="addProcID" style="font-size: 10px;">
						<option value="">-- Please Select a Procedure --</option>
						<% for (ProcedureBean proc : prodDAO.getCPTCodesDAO().getAllCPTCodes()) {
							if (null == proc.getAttribute() || !proc.getAttribute().equals("immunization")) { %>
						<option value="<%=proc.getCPTCode() %>"><%=proc.getCPTCode() %> - <%=proc.getDescription() %></option>
						<% } } %>
					</select>
					<input type="submit" name="addP" value="Add Procedure" >
				</td>
			</tr>
		</table>
	</div>
	<div style="display: inline-table;">
		<table class="fTable" align="center">
			<tr>
				<th colspan="3">Immunizations</th>
			</tr>
			<tr class="subHeader">
				<td>CPT Code</td>
				<td>Description</td>
				<td style="width: 60px;">Action</td>
			</tr>
			<% if (0 == ov.getProcedures().size()) { %>
			<tr>
				<td colspan="3" style="text-align: center;">No immunizations on record</td>
			</tr>
			<% } 
			   else { %>
			<%	for (ProcedureBean proc : ov.getProcedures()) { 
					if (null != proc.getAttribute() && proc.getAttribute().equals("immunization")) { %>
			<tr>
				<td align="center"><%=proc.getCPTCode()%></td>
				<td ><%=proc.getDescription()%></td>
				<td ><a href="javascript:removeID('removeImmunizationID','<%=proc.getOvProcedureID()%>');">Remove</a></td>
			</tr>
			<% } } } %>
			<tr >
				<th colspan="3" style="text-align: center;">New</th>
			</tr>
			<tr>
				<td colspan="3" align="center">
					<select name="addImmunizationID" style="font-size: 10px;">
						<option value="">-- Please Select a Procedure --</option>
						<% for (ProcedureBean proc : prodDAO.getCPTCodesDAO().getImmunizationCPTCodes()) {%>
							<option value="<%=proc.getCPTCode()%>"><%=proc.getCPTCode()%> - <%=proc.getDescription()%></option>
						<% } %>
					</select>
					<input type="submit" name="addImmu" value="Add Immunization" >
				</td>
			</tr>
		</table>
	</div>
</div>

<br /><br /><br />
<itrust:patientNav />
<br />

</form>

<%@include file="/footer.jsp" %>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.AddPatientAction"%>
<%@page import="edu.ncsu.csc.itrust.BeanBuilder"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Add Patient";
%>

<%@include file="/header.jsp" %>

<%
boolean formIsFilled = request.getParameter("formIsFilled") != null && request.getParameter("formIsFilled").equals("true");
if (formIsFilled) {
	//This page is not actually a "page", it just adds a user and forwards.
	PatientBean p = new BeanBuilder<PatientBean>().build(request.getParameterMap(), new PatientBean());
	try{
		long newMID = new AddPatientAction(prodDAO, loggedInMID.longValue()).addPatient(p);
		session.setAttribute("pid", Long.toString(newMID));
		String fullname;
		String password;
		password = p.getPassword();
		fullname = p.getFullName();
%>
	<div align=center>
		<span class="iTrustMessage">New patient <%=fullname%> successfully added!</span>
		<br />
		<table class="fTable">
			<tr>
				<th colspan=2>New Patient Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">MID:</td>
				<td><%=newMID%></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Temporary Password:</td>
				<td><%=password%></td>
			</tr>
		</table>
		<br />Please get this information to <b><%=fullname%></b>! 
		<p>
			<a href = "/iTrust/auth/hcp-uap/editPatient.jsp">Continue to patient information.</a>
		</p>
	</div>
<%
	} catch(FormValidationException e){
%>
	<div align=center>
		<span class="iTrustError"><%=e.getMessage() %></span>
	</div>
<%
	}
}
%>

<div align=center>
<form action="addPatient.jsp" method="post">
	<input type="hidden" name="formIsFilled" value="true"> <br />
<br />
<div style="width: 50%; text-align:left;">Please enter in the name of the new
patient, with a valid email address. If the user does not have an email
address, use the hospital's email address, [insert pre-defined email],
to recover the password.</div>
<br />
<br />
<table class="fTable">
	<tr>
		<th colspan=2>Patient Information</th>
	</tr>
	<tr>
		<td class="subHeaderVertical">First name:</td>
		<td><input type="text" name="firstName"></td>
	</tr>
	<tr>
		<td class="subHeaderVertical">Last Name:</td>
		<td><input type="text" name="lastName">
	</tr>
	<tr>
		<td class="subHeaderVertical">Email:</td>
		<td><input type="text" name="email"></td>
	</tr>
</table>
<br />
<input type="submit" style="font-size: 16pt; font-weight: bold;" value="Add patient">
</form>
<br />
</div>
<%@include file="/footer.jsp" %>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="edu.ncsu.csc.itrust.action.EditPrescriptionAction"%>
<%@page import="edu.ncsu.csc.itrust.action.EditOfficeVisitAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.OfficeVisitBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.PrescriptionBean"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Edit Prescription Information";
%>

<%@include file="/header.jsp" %>

<%
boolean makeChange = false;
if (request.getParameter("change") != null) {
	if (request.getParameter("change").equalsIgnoreCase("True")) {
		makeChange = true;
		
	}
}

EditPrescriptionAction prescriptionAction = new EditPrescriptionAction(prodDAO);

String ovIDString = request.getParameter("ovID");
String pidString = (String)session.getAttribute("pid");
int presID = Integer.parseInt(request.getParameter("presID"));

EditOfficeVisitAction officeAction = new EditOfficeVisitAction(prodDAO, loggedInMID, pidString, ovIDString);
OfficeVisitBean ov = officeAction.getOfficeVisit();

PrescriptionBean prescription = null;
for (PrescriptionBean pres : ov.getPrescriptions()) {
	if (pres.getId() == presID) {
		prescription = pres;
		break;
	}
}
if (prescription == null) {%>
	<h1>ERROR: prescription not found.</h1>
<%}else{%>
	<%if (!makeChange) { %>
		<%// This portion prints a form to edit the prescription information. %>
		<form action="editPrescription.jsp?ovID=<%=ovIDString%>&presID=<%=presID%>&change=True" method=post>
		<table align=center border=1 class="fTable">
			<tr>
				<th colspan=5>Edit Prescription Instructions</th>
			</tr>
			<tr class="subHeader">
				<td align=center>Medication</td>
				<td align=center>Dosage</td>
				<td align=center>Dates</td>
				<td align=center colspan=2>Instructions</td>
			</tr>
			<tr>
				<td align=center><%=prescription.getMedication().getDescription() %> (<%=prescription.getMedication().getNDCode() %>)</td>
				<td align=center><input type="text" name="dosage" value="<%=prescription.getDosage() %>" size="5">(In mg)</td>
				<td align=center><%=prescription.getStartDateStr() %> to <%=prescription.getEndDateStr() %></td>
				<td align=center><textarea name="instructions" rows="2" cols="20"><%=prescription.getInstructions() %></textarea></td>
			</tr>
		</table>
		<br />
		<center>
		<input type="submit" value="Change">
		<input type="reset" value="Reset">
		</center>
		</form>
		
	<%} else {%>
		<%// This portion prints out the recently edited prescription information and provides a link to the home page.
		try {
			prescription.setDosage(Integer.parseInt(request.getParameter("dosage")));
			prescription.setInstructions(request.getParameter("instructions"));
			prescriptionAction.editPrescription(prescription);
			%> 
			<table align=center border=1 class="fTable">
			<tr>
				<th colspan=5>Prescription Updated!</th>
			</tr>
			<tr class="subHeader">
				<td align=center>Medication</td>
				<td align=center>Dosage</td>
				<td align=center>Dates</td>
				<td align=center colspan=2>Instructions</td>
			</tr>
			<tr>
				<td align=center><%=prescription.getMedication().getDescription() %> (<%=prescription.getMedication().getNDCode() %>)</td>
				<td align=center><%=prescription.getDosage() %>mg</td>
				<td align=center><%=prescription.getStartDateStr() %> to <%=prescription.getEndDateStr() %></td>
				<td align=center><%=prescription.getInstructions() %></td>
			</tr>
			</table>
			<%
		} catch(Exception e) {
			%><center><b>The Prescription could not be edited due to an internal error.<br />Please Try again later.<br /><%=e.toString() %></b></center> <%
		}
		
		%>
	<%}%>
<%}%>
<%@include file="/footer.jsp" %>
<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.beans.LabProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.action.EditPatientAction"%>
<%@page import="edu.ncsu.csc.itrust.action.LabProcUAPAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - View Laboratory Procedures";
%>

<%@include file="/header.jsp" %>

<%
LabProcUAPAction action = new LabProcUAPAction(prodDAO, loggedInMID.longValue());

/* Require a Patient ID first */
String pidString = (String)session.getAttribute("pid");
if (pidString == null || 1 > pidString.length()) {
	response.sendRedirect("/iTrust/auth/getPatientID.jsp?forward=hcp-uap/LabProcUAP.jsp");
   	return;
}
else {
	session.removeAttribute("pid");
}

/* If the patient id doesn't check out, then kick 'em out to the exception handler */
EditPatientAction epaction = new EditPatientAction(prodDAO,loggedInMID.longValue(),pidString);
long pid = epaction.getPid();
		
List<LabProcedureBean> proc = action.viewProcedures(pid);	
%>
<br />
<table class="fTable" align=center>
	<tr>
		<th colspan="11">Laboratory Procedures</th>
	</tr>

	<tr class="subHeader">

    		<th>Patient</th>
  			<th>Lab Code</th>
   			<th>Rights</th>
	 		<th>Status</th>
  			<th>Commentary</th>
   			<th>Results</th>
 			<th>OfficeVisitID</th>
   			<th>Updated Date</th>
   			<th>Action</th>

  	</tr>
		<%for(LabProcedureBean bean : proc){ 
		PatientBean patient = new PatientDAO(prodDAO).getPatient(bean.getPid());%>
			<tr>
				<td ><%=patient.getFullName()%></td>
				<td ><%=bean.getLoinc()%></td>
				<td ><%=bean.getRights()%></td>
				<td ><%=bean.getStatus()%></td>
				<td ><%=bean.getCommentary()%></td>
				<td ><%=bean.getResults()%></td>
				<td ><%=bean.getOvID()%></td>
				<td ><%=bean.getTimestamp()%></td>
				<td >
					<a href="updateLabProc.jsp?ID=<%=bean.getProcedureID()%>">Update</a>
				</td>
				
			</tr>
		<%} %>
</table>
<br /><br />

<%@include file="/footer.jsp" %>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.beans.Email"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewPersonnelAction"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Email History";
%>

<%@include file="/header.jsp" %>

<br />
<div align=center>
<%
	ViewPersonnelAction action = new ViewPersonnelAction(prodDAO, loggedInMID.longValue());
	List<Email> Emails = action.getEmailHistory();
	%><table class="fTable"><%
	if (Emails.size() != 0){
		%> 
		
			<tr>
			<th> To </th> 
			<th> Subject </th> 
			<th> Body </th>
			<th> Date Sent </th>
			</tr>
		<%
		for (Email email : Emails){
%>
		<tr>
			<td > <%=email.getToListStr()%> </td>
			<td > <%=email.getSubject()%> </td> 
			<td > <%=email.getBody()%> </td>
			<td > <%=email.getTimeAdded() %> </td>
		</tr>
<%}

}
	else{
	%>
	<tr><td> No Emails on Record </td></tr>
	<%} %>
	</table>
</div>
<br />

<%@include file="/footer.jsp" %>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@page import="edu.ncsu.csc.itrust.action.LabProcUAPAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.LabProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Update Lab Procedure";
%>

<%@include file="/header.jsp" %>

<%
	String headerMessage = "";


LabProcedureBean lbean = null;
long requestID = 0L;
String lpid = request.getParameter("ID");

if (lpid != null && !lpid.equals("")) {
	try {
		
		requestID = Long.parseLong(lpid);
		lbean = prodDAO.getLabProcedureDAO().getLabProcedure(requestID);
	} catch (Exception e) {
		e.printStackTrace();
	}
}

	
	LabProcUAPAction action2 = new LabProcUAPAction(prodDAO, loggedInMID.longValue());
	boolean formIsFilled = request.getParameter("formIsFilled") != null
	&& request.getParameter("formIsFilled").equals("true");

	
	if (formIsFilled) {
		//This page is not actually a "page", it just adds a user and forwards.
		lbean.setStatus(request.getParameter("Status"));
		lbean.setResults(request.getParameter("Results"));
		lbean.setCommentary(request.getParameter("Commentary"));

		try{
		action2.updateProcedure(lbean);
%>
	<br />
	<div align=center>
		<span class="iTrustMessage">Information Updated Successfully</span>
	</div>
	<br />
<%
	} catch(FormValidationException e){
%>
	<br />
	<div align=center>
		<span class="iTrustError"><%=e.getMessage() %></span>
	</div>
	<br />
<%
		}
	}
	
%>

<%
if (request.getParameter("message") != null) {
	%><span class="iTrustMessage" style="font-size: 16px;"><%=request.getParameter("message") %></span><%
}
%>
<br />
<div align=center>
<table class="fTable">
	<tr>
		<th colspan="11">Laboratory Procedures</th>
	</tr>

	<tr class="subHeader">

    		<th>PatientMID</th>
  			<th>Lab Code</th>
   			<th>Rights</th>
	 		<th>Status</th>
  			<th>Commentary</th>
   			<th>Results</th>
 			<th>OfficeVisitID</th>
   			<th>Updated Date</th>

  	</tr>
		<%LabProcedureBean bean = prodDAO.getLabProcedureDAO().getLabProcedure(requestID);%>
			<tr>
				<td ><%=bean.getPid()%></td>
				<td ><%=bean.getLoinc()%></td>
				<td ><%=bean.getRights()%></td>
				<td ><%=bean.getStatus()%></td>
				<td ><%=bean.getCommentary()%></td>
				<td ><%=bean.getResults()%></td>
				<td ><%=bean.getOvID()%></td>
				<td ><%=bean.getTimestamp()%></td>
				
			</tr>
</table>


<form action="updateLabProc.jsp?ID=<%=lpid%>"&message="Updated Laboratory Procedure" method="post"><input type="hidden"
	name="formIsFilled" value="true"> <br />
<br />
	<%=headerMessage %>
<br />
<table class="fTable">
	<tr>
		<th colspan=2>Update Information</th>
	</tr>
	<tr>
		<td class="subHeaderVertical">Status:</td>
		<td>
		<select name="Status">
		<option value="NOT YET RECEIVED"><%=lbean.Not_Received %></option>
		<option value="PENDING"><%=lbean.Pending %></option>
		<option value="COMPLETED"><%=lbean.Completed %></option>
		</select>
		</td>
	</tr>
	<tr>
		<td class="subHeaderVertical">Commentary:</td>
		<td><textarea name="Commentary"></textarea>
	</tr>
	<tr>
		<td class="subHeaderVertical">Results:</td>
		<td><textarea name="Results"></textarea></td>
	</tr>
</table>
<br />
<input type="submit" style="font-size: 14pt; font-weight: bold;" value="Update">
</div>
</form>
<br />

<%@include file="/footer.jsp" %>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.ArrayList"%>
<%@page import="java.util.Date"%>
<%@page import="java.util.List"%>
<%@page import="java.text.DateFormat"%>

<%@page import="edu.ncsu.csc.itrust.action.EditPHRAction"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.beans.PatientBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.AllergyBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.FamilyMemberBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.HealthRecord"%>
<%@page import="edu.ncsu.csc.itrust.beans.OfficeVisitBean"%>
<%@page import="edu.ncsu.csc.itrust.beans.ProcedureBean"%>
<%@page import="edu.ncsu.csc.itrust.risk.RiskChecker"%>
<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PatientDAO"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Edit Personal Health Record";
%>

<%@include file="/header.jsp" %>

<%
PatientDAO patientDAO = new PatientDAO(prodDAO);
PersonnelDAO personnelDAO = new PersonnelDAO(prodDAO);
PersonnelBean personnelb = personnelDAO.getPersonnel(loggedInMID.longValue());
DateFormat df = DateFormat.getDateInstance();

String switchString = "";
if (request.getParameter("switch") != null) {
	switchString = request.getParameter("switch");
}

String relativeString = "";
if (request.getParameter("relative") != null) {
	relativeString = request.getParameter("relative");
}

String patientString = "";
if (request.getParameter("patient") != null) {
	patientString = request.getParameter("patient");
}

String pidString;
if (switchString.equals("true")) pidString = "";
else if (!relativeString.equals("")) {
	int relativeIndex = Integer.parseInt(relativeString);
	List<PatientBean> relatives = (List<PatientBean>) session.getAttribute("relatives");
	pidString = "" + relatives.get(relativeIndex).getMID();
	session.removeAttribute("relatives");
	session.setAttribute("pid", pidString);
}
else if (!patientString.equals("")) {
	int patientIndex = Integer.parseInt(patientString);
	List<PatientBean> patients = (List<PatientBean>) session.getAttribute("patients");
	pidString = "" + patients.get(patientIndex).getMID();
	session.removeAttribute("patients");
	session.setAttribute("pid", pidString);
}
else pidString = (String)session.getAttribute("pid");

if (pidString == null || 1 > pidString.length()) {
	response.sendRedirect("../getPatientID.jsp?forward=hcp-uap/editPHR.jsp");
   	return;
}
//else {
//	session.removeAttribute("pid");
//}

EditPHRAction action = new EditPHRAction(prodDAO,loggedInMID.longValue(), pidString);
long pid = action.getPid();
String confirm = action.updateAllergies(pid,request.getParameter("description"));

PatientBean patient = action.getPatient();
List<HealthRecord> records = action.getAllHealthRecords();
HealthRecord mostRecent = records.size() > 0 ? records.get(0) : null;
List<OfficeVisitBean> officeVisits = action.getAllOfficeVisits();
List<FamilyMemberBean> family = action.getFamily(); 
%>


<%@page import="edu.ncsu.csc.itrust.exception.NoHealthRecordsException"%><script type="text/javascript">
function showRisks(){
	document.getElementById("risks").style.display="inline";
	document.getElementById("riskButton").style.display="none";
}
</script>

<% if (!"".equals(confirm)) {%>
<span ><%=confirm%></span><br />
<% } %>

<br />
<div align=center>
	<div style="margin-right: 10px; display: inline-table;">
		<table class="fTable" align="center">
			<tr>
				<th colspan="2">Patient Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical">Name:</td>
				<td ><%=patient.getFullName()%></td>
			</tr>
			<tr>
				<td  class="subHeaderVertical">Address:</td>
				<td > <%=patient.getStreetAddress1()%><br />
				     <%="".equals(patient.getStreetAddress2()) ? "" : patient.getStreetAddress2() + "<br />"%>
				     <%=patient.getStreetAddress3()%><br />									  
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Phone:</td>
				<td ><%=patient.getPhone()%></td>
			</tr>
			<tr>
				<td class="subHeaderVertical" >Email:</td>
				<td ><%=patient.getEmail()%></td>
			</tr>
			<tr>
				<th colspan="2">Insurance Information</th>
			</tr>
			<tr>
				<td class="subHeaderVertical" >Provider Name:</td>
				<td ><%=patient.getIcName()%></td>
			</tr>
			<tr>
				<td  class="subHeaderVertical">Address:</td>
				<td > <%=patient.getIcAddress1()%><br />
					<%="".equals(patient.getIcAddress2()) ? "" : patient.getIcAddress2() + "<br />"%>
					<%=patient.getIcAddress3()%><br />							
				</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Phone:</td>
				<td ><%=patient.getIcPhone()%></td>
			</tr>
		</table>
		<br />
		<a href="editPatient.jsp" style="text-decoration: none;">
			<input type=button value="Edit" onClick="location='editPatient.jsp';">
		</a>
	</div>
	<div style="margin-right: 10px; display: inline-table;">
		<table class="fTable" align="center">
			<tr>
				<th colspan="2">Basic Health Records</th>
			</tr>
			<% if (null == mostRecent) { %>
			<tr><td colspan=2>No basic health records are on file for this patient</td></tr>
			<% } else {%>
			<tr>
				<td class="subHeaderVertical">Height:</td>
				<td ><%=mostRecent.getHeight()%>in.</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Weight:</td>
				<td ><%=mostRecent.getWeight()%>lbs.</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Smoker?:</td>
				<td ><%=mostRecent.isSmoker() ? "Yes" : "No"%></td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Blood Pressure:</td>
				<td ><%=mostRecent.getBloodPressureN()%>/<%=mostRecent.getBloodPressureD()%>mmHg</td>
			</tr>
			<tr>
				<td class="subHeaderVertical">Cholesterol:</td>
				<td >
				<table>
					<tr>
						<td style="text-align: right">HDL:</td>
						<td><%=mostRecent.getCholesterolHDL()%> mg/dL</td>
					</tr>
					<tr>
						<td style="text-align: right">LDL:</td>
						<td><%=mostRecent.getCholesterolLDL()%> mg/dL</td>
					</tr>
					<tr>
						<td style="text-align: right">Tri:</td>
						<td><%=mostRecent.getCholesterolTri()%> mg/dL</td>
					</tr>
					<tr>
						<td style="text-align: right">Total:</td>
						<td>
							<span id="totalSpan" style="font-weight: bold; color: #000;"><%=mostRecent.getTotalCholesterol()%> mg/dL</span>
						</td>
					</tr>
				</table>
				</td>
			</tr>
			<% } //closing for "there is a most recent record for this patient" %>
		</table>
		<br />
		<a href="editBasicHealth.jsp" style="text-decoration: none;">
			<input type="button" value="View/Edit History" onClick="location='editBasicHealth.jsp';">
		</a>
	</div>
	<div style="display: inline-table;">
		<table class="fTable" align="center">
			<tr>
				<th>Office Visits</th>
			</tr>
			<tr>
				<td align="center">
					<div style="overflow:auto; height:200px; width:200px;">
					<% for (OfficeVisitBean ov : officeVisits) { %>
						<a href="editOfficeVisit.jsp?ovID=<%=ov.getVisitID()%>"><%=df.format(ov.getVisitDate())%></a><br />
					<% } %>
					</div>
				</td>
			</tr>
		</table>
		<br />
		<a href="getPrescriptionReport.jsp" style="text-decoration: none;" >
			<input type=button value="Get Prescription Report" onClick="location='getPrescriptionReport.jsp';">
		</a>				
	</div>
</div>
<br />

<table class="fTable" align="center" >
	<tr>
		<th colspan="9">Family Medical History</th>
	</tr>
	<tr class="subHeader">
		<td> Name </td>
		<td> Relation </td>
		<td> High Blood Pressure </td>
		<td> High Cholesterol </td>
		<td> Diabetes </td>
		<td> Cancer </td>
		<td> Heart Disease </td>
		<td> Smoker </td>
		<td> Cause of Death </td>
	</tr>
<% if (0 == family.size()) {%>
	<tr>
		<td colspan="9" style="text-align: center;">No Relations on	record</td>
	</tr>
<%	} 
	else {
		List<PatientBean> patientRelatives = new ArrayList<PatientBean>();
		int index = 0;
		for(FamilyMemberBean member : family) {
			patientRelatives.add(patientDAO.getPatient(member.getMid())); 
%>
	<tr>					
		<td class = "valueCell" ><a href="editPHR.jsp?relative=<%=index%>"><%=member.getFullName()%></a></td>
		<td ><%=member.getRelation()%></td>
		<td  align=center><%=action.doesFamilyMemberHaveHighBP(member) ? "x" : ""%></td>
		<td  align=center><%=action.doesFamilyMemberHaveHighCholesterol(member) ? "x" : ""%></td>
		<td  align=center><%=action.doesFamilyMemberHaveDiabetes(member) ? "x" : ""%></td>
		<td  align=center><%=action.doesFamilyMemberHaveCancer(member) ? "x" : ""%></td>
		<td  align=center><%=action.doesFamilyMemberHaveHeartDisease(member) ? "x" : ""%></td>
		<td  align=center><%=action.isFamilyMemberSmoker(member) ? "x" : ""%></td>
		<td ><%=action.getFamilyMemberCOD(member)%></td>
	</tr>
<%			index++;
		}
		session.setAttribute("relatives", patientRelatives);
	} %>
</table>
<br />
<div align=center>
	<div style="margin-right: 10px; display: inline-table;">
		<% List<AllergyBean> allergies = action.getAllergies(); %>
		<table class="fTable" align="center" >
			<tr>
				<th colspan="2">Allergies</th>
			</tr>
			<tr class="subHeader">
				<td>Allergy Description</td>
				<td>First Found</td>
			</tr>
	
			<% if (0 == allergies.size()) { %>
			<tr>
				<td  colspan="2" style="text-align: center;">No Allergies on record</td>
			</tr>
			<% } else {
				for (AllergyBean allergy : allergies) {%>
			<tr>
				<td  style="text-align: center;"><%=allergy.getDescription()%></td>
				<td  style="text-align: center;"><%=df.format(allergy.getFirstFound())%></td>
			</tr>			
			<% } } %>
			<form name="AddAllergy" action="editPHR.jsp" method="post">
			<tr >
				<th colspan="2" style="text-align: center;">New</th>
			</tr>
			<tr>
				<td colspan="2">
					<input type="text" size="30" maxlength="50"	name="description">
					<input type="submit" name="addA" value="Add Allergy">
				</td>
			</tr>
		</table>
	</div>
	<div style="margin-right: 10px; display: inline-table;">
		<table class="fTable" align=center>
			<tr>
				<th colspan=2 style="background-color:silver;">Chronic Disease Risk Factors</th>
			</tr>
			<tr>
				<td align="center">
					<div id="risks" style="display: none;">
						Patient is at risk for the following:<br />
						<% try{
								List<RiskChecker> diseases = action.getDiseasesAtRisk();
								for (RiskChecker disease : diseases) { %>
						  			<span ><%=disease.getName()%></span><br />
							<% }
						   } catch (NoHealthRecordsException e) {
							   %><%=e.getMessage()%><%
						   } %>
						<a style="font-size: 80%" href="chronicDiseaseRisks.jsp">More Information</a>
					</div>
				</td>
			</tr>
		</table>
		<br />
		<div id="riskButton">
			<input type=button value="Show Chronic Diseases Risk Factors" onclick="javascript:showRisks();">
		</div>
	</div>
	<div style="display: inline-table;">
		<table class="fTable" align=center>
			<tr>
				<th colspan="3" style="background-color:silver;">Immunizations</th>
			</tr>
			<tr class="subHeader">
	  			<td>CPT Code</td>
 				<td>Description</td>
  				<td>Date Received</td>
 			</tr>
<%	
		for (OfficeVisitBean ov: officeVisits) { 
			for (ProcedureBean proc:  action.getCompleteOfficeVisit(ov.getVisitID()).getProcedures()) {
				if (null != proc.getAttribute() && proc.getAttribute().equals("immunization")) { 
%>
			<tr>
				<td ><%=proc.getCPTCode() %></td>
				<td ><%=proc.getDescription() %></td>
				<td ><a href="editOfficeVisit.jsp?ovID=<%=ov.getVisitID()%>"><%=proc.getDate() %></a></td>	
			</tr>
<%
				}
			}
		}
%>
		</table>
	</div>
</div>		

<br /><br /><br />
<itrust:patientNav thisTitle="Health Records" />

<%@include file="/footer.jsp" %>

<%@taglib uri="/WEB-INF/tags.tld" prefix="itrust" %>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>
<%@page import="edu.ncsu.csc.itrust.action.AddOfficeVisitAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.OfficeVisitBean"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Document Office Visit";
%>

<%@include file="/header.jsp" %>

<%	
/* Require a Patient ID first */
String pidString = (String)session.getAttribute("pid");
if (pidString == null || 1 > pidString.length()) {
	response.sendRedirect("/iTrust/auth/getPatientID.jsp?forward=hcp-uap/documentOfficeVisit.jsp");
   	return;
}

AddOfficeVisitAction action = new AddOfficeVisitAction(prodDAO, pidString);
long pid = action.getPid();
List<OfficeVisitBean> visits = action.getAllOfficeVisits();
if ("true".equals(request.getParameter("formIsFilled"))) {
	long ovID = action.addEmptyOfficeVisit(loggedInMID.longValue());
	response.sendRedirect("editOfficeVisit.jsp?ovID=" + ovID);
	return;
}
%>

<div align=center>
<form action="documentOfficeVisit.jsp" method="post" id="formMain">

<input type="hidden" name="formIsFilled" value="true" />
<br /><br />
Are you sure you want to document a <em>new</em> office visit for <b><%=action.getUserName()%></b>?<br /><br />
<input style="font-size: 150%; font-weight: bold;" type=submit value="Yes, Document Office Visit">
</form>
<br />
Click on an old office visit to modify:<br />
<%for(OfficeVisitBean ov : visits){ %>
	<a href="editOfficeVisit.jsp?ovID=<%=ov.getID()%>"><%=ov.getVisitDateStr()%></a><br />
<%} %>

<br /><br /><br />
</div>
<itrust:patientNav thisTitle="Document Office Visit" />

<%@include file="/footer.jsp" %>

<div class="menu_category">
	<span>Report</span><br />
	<a href="/iTrust/auth/hcp-er/emergencyReport.jsp">Emergency Patient Report</a>
</div>
<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - ER Home";
%>

<%@include file="/header.jsp" %>

<table cellpadding="1" cellspacing="1">
	<tr>
		<td><h3>Announcements</h3><i>New features in iTrust</i></td>
	</tr>
	<tr>
		<td>
			<ul>
				<li>No more typing in a date! We now have a calendar pop-up that makes setting dates incredibly easy!.</li>
			</ul>
		</td>
	</tr>
	<tr>
		<td><h3>Notifications</h3></td>
	</tr>
</table>

<%@include file="/footer.jsp" %>

<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>

<%@include file="/global.jsp" %>

<%PersonnelBean personnelb = new PersonnelDAO(prodDAO).getPersonnel(loggedInMID);%>

<div align="center" style="margin-bottom: 30px;">
	<img src="/iTrust/image/user/<%=loggedInMID.longValue() %>.png" alt="MID picture">
</div>

<div align="center">
<table>
	<tr>
		<td>Name: </td>
		<td><%=personnelb.getFullName()%></td>
	</tr>
	<tr>
		<td>Location: </td>
		<td><%=personnelb.getCity() + ", " + personnelb.getState()%></td>
	</tr>
</table>
</div>
<div class="menu_category">
	<span>View</span><br />
	<a href="/iTrust/auth/pha/monitorAdverseEvents.jsp">Monitor Adverse Events</a><br />
</div>


<%@page import="java.util.List"%>
<%@page import="java.util.ArrayList"%>
<%@page import="edu.ncsu.csc.itrust.beans.AdverseEventBean"%>


<%@include file="/global.jsp" %>


<head>
<title>Adverse Event Reports By Month</title>
</head>
<body>

<%
List<AdverseEventBean> events = (List<AdverseEventBean>)session.getAttribute("events");
if(events != null) {
	List<AdverseEventBean> thisIdEvents = new ArrayList<AdverseEventBean>();
	String [] monthNames = {"Jan","Feb","Mar","Apr","May","June","July","Aug","Sept",
	                        "Oct","Nov","Dec"};
	for(AdverseEventBean aeBean : events) {
		if(aeBean.getCode().equals(request.getParameter("id")) && (aeBean.getStatus() == null || "".equals(aeBean.getStatus()))) {
			thisIdEvents.add(aeBean);
		}
	}
	if(thisIdEvents.size() > 0) {
		%>
		<b><%=thisIdEvents.get(0).getDrug() + "(" + thisIdEvents.get(0).getCode() %>) Adverse Events By Month</b><br /><br />
		<table width="200" border="0" cellpadding="0" cellspacing="0">
		<%
		int[] heights = new int[thisIdEvents.size()];
		String[] months = new String[thisIdEvents.size()];
		String currentMonth = thisIdEvents.get(0).getDate().substring(0, 7);
		int heightCount = 0;
		int monthCount = 0;
		int maxHeight = 1;
		for(AdverseEventBean aeBean : thisIdEvents) {
			if(!aeBean.getDate().substring(0, 7).equals(currentMonth)) {
				heights[monthCount] = heightCount;
				if(heightCount > maxHeight)
					maxHeight = heightCount;
				heightCount = 0;
				currentMonth = aeBean.getDate().substring(0, 7);
				monthCount++;
			}
			String date = aeBean.getDate().substring(0, 7);
			int month = Integer.parseInt(date.substring(5));
			String monthName = monthNames[month - 1];
			months[monthCount] = monthName + " " + date.substring(0,4);
			heightCount++;
		}
		heights[monthCount] = heightCount;
		if(heightCount > maxHeight)
			maxHeight = heightCount;
		monthCount++;
		
		String currentColor = "#000000";
		for(int i = 0; i < maxHeight; i++) {
		%>
			<tr height="10">
			<td width="18" bgcolor="#FFFFFF" style="text-align: right;"><%=maxHeight - i %></td>
			<td width="2">
				<table border="0" cellpadding="0" cellspacing="0">
				<tr><td width="2" style="border-bottom: 1px solid #AAAAAA; border-right: 2px solid #AAAAAA">&nbsp;</td></tr>
				<tr><td width="2" style="border-top: 1px solid #AAAAAA; border-right: 2px solid #AAAAAA">&nbsp;</td></tr>
				</table>
			</td>
			
		<%
			for(int j = 0; j < monthCount; j++) {
				if(heights[j] >= maxHeight - i) {
					%>
					<td width="15" bgcolor="<%=currentColor %>"></td>
					<%
				} else {
					%>
					<td width="15" bgcolor="#FFFFFF"></td>
					<%
				}
				%>
				<td width="5"></td>
				<%
				if(currentColor.equals("#000000"))
					currentColor = "#CC0000";
				else
					currentColor = "#000000";
			}
			
		%>
			</tr>
		
		<%
		}
		%>
		<tr height="20"><td width="18"></td><td width="2" style="border-top: 2px solid #AAAAAA;">&nbsp;</td>
		<%
		for(int m = 0; m < monthCount; m++) {
			%>
			<td style="border-top: 2px solid #AAAAAA"><%=months[m] %></td>
			<td style="border-top: 2px solid #AAAAAA">&nbsp;</td>
			<%
		}
		%>
		</tr>
		<%
	}
		%>
	
	</table>
<%
}
%>
</body>



<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>
<%@page import="java.util.Date"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="edu.ncsu.csc.itrust.action.MonitorAdverseEventAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.AdverseEventBean"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Monitor Adverse Events";
%>

<%@include file="/header.jsp" %>

<script>
function showBarChart(id) {
	id = id.substring(5, id.indexOf("button"));
	window.open("barchart.jsp?id=" + id, "barchart", "width=300, height=300, resizable=yes");
}
</script>

<%
MonitorAdverseEventAction action = new MonitorAdverseEventAction(prodDAO, loggedInMID.longValue());
List<AdverseEventBean> events = null;
String prescriptionImmunization = "";

if(request.getParameter("prescriptions") != null) {
	try{
		events = action.getReports(true, request.getParameter("startDate"), request.getParameter("endDate"));
		prescriptionImmunization = "Prescription";
	} catch(FormValidationException e){
		%>
		<div align=center>
			<span class="iTrustError"><%=e.getMessage() %></span>
		</div>
		<%
	}
} else if(request.getParameter("immunizations") != null) {
	try{
		events = action.getReports(false, request.getParameter("startDate"), request.getParameter("endDate"));
		prescriptionImmunization = "Immunization";
	} catch(FormValidationException e){
		%>
		<div align=center>
			<span class="iTrustError"><%=e.getMessage() %></span>
		</div>
		<%
	}
}


if(prescriptionImmunization != "") {
	session.setAttribute("events", events);
	session.setAttribute("prescriptionImmunization", prescriptionImmunization);
%>
<form action="adverseEventDetails.jsp" method="post">
<input type="hidden" name="eventNumber" value="" />
	<table class="fTable" align="center">
	<tr class="header">
		<th><%=prescriptionImmunization %></th>
		<th>Reporter</th>
		<th>Date</th>
		<th>Details</th>
		<th><%=prescriptionImmunization %> Reports By Month</th>
	</tr>
		<%
		int i = 0;
		int codeCount = 0;
		String currentCode = "";
		if(events.size() > 0){
			currentCode = events.get(0).getCode();
		} else {
			%>
			<tr><td colspan="5" align="center">No adverse events reported.</td></tr>
			<%
		}
		
		for(AdverseEventBean event: events){

			if(!"removed".equals(event.getStatus())){
				%>
				<tr><td>
				<%
				if(currentCode.equals(event.getCode())) {
					codeCount++;
				} else {
					%>
					<script>
					document.getElementById("chart<%=currentCode %>").rowSpan = <%=codeCount%>;
					</script>
					<%
					codeCount = 1;
					currentCode = event.getCode();
				}
				%>
				
				<%=event.getDrug() %>(<%=event.getCode() %>)</td>
				<% 
				try { 
				%>
					<td><%=action.getName(Long.parseLong(event.getMID())) %></td>
				<%
				} catch(NumberFormatException e) {
					%>
					<td>Invalid Patient ID</td>
					<%
				}
				%>
				<td><%=event.getDate() %></td>
				<td>
				<a href="adverseEventDetails.jsp?eventNumber=<%=i %>">Get Details</a></td>
				<%
				if(codeCount == 1) {
					%>
					<td id="chart<%=currentCode %>" rowspan="1">
					<a href="adverseEventChart.jsp?code=<%=currentCode %>">View Chart</a>
					</td>
					<%
				}
				
				%>
				</tr>
			<%
			}
			i++;
		}
		%>	
	</table>
	<script>
		document.getElementById("chart<%=currentCode %>").rowSpan = "<%=codeCount%>";
	</script>
</form>
	<%
	
} else {

String startDate = new SimpleDateFormat("MM/dd/yyyy").format(new Date());
String endDate = new SimpleDateFormat("MM/dd/yyyy").format(new Date());
%>
<form action="monitorAdverseEvents.jsp" method="post">
<table class="fTable" align="center">
	<tr class="subHeader">
		<td>Start Date:</td>
		<td>
			<input name="startDate" value="<%=startDate%>" size="10">
			<input type=button value="Select Date"">
		</td>
		<td>End Date:</td>
		<td>
			<input name="endDate" value="<%=endDate%>" size = "10">
			<input type=button value="Select Date">
		</td>
	</tr>
</table>
<br />
<br />
<div align="center">
<input type="submit" value="Prescriptions" name="prescriptions" />
<input type="submit" value="Immunizations" name="immunizations" />
</div>
<br />
</form>

<%
}
%>
<%@include file="/footer.jsp" %>

<%@page import="java.util.List"%>
<%@page import="java.util.ArrayList"%>
<%@page import="edu.ncsu.csc.itrust.beans.AdverseEventBean"%>
<%@page import="edu.ncsu.csc.itrust.action.ViewAdverseEventAction"%>
<%@page import="edu.ncsu.csc.itrust.charts.AdverseEventsData"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Adverse Event Chart";
%>

<%@include file="/header.jsp" %>

<%
// New instance of ViewAdverseEventAction class
ViewAdverseEventAction action = new ViewAdverseEventAction(prodDAO);

// Retrieve code identifier from URL
String code = (String)request.getParameter("code");

// Retrieve list of Adverse Event beans with this code, but only ones that have not been removed by the PHA
List<AdverseEventBean> adEvents = action.getUnremovedAdverseEventsByCode(code);

// Get the meaningful descriptive name for the prescription or immunization code
String name = action.getNameForCode(code);
%>

<!-- Use this tag to specify the location of the dataset for the chart -->
<jsp:useBean id="adverseEvents" class="edu.ncsu.csc.itrust.charts.AdverseEventsData"/>

<%
// This calls the class from the useBean tag and initializes the Adverse Event list and pres/immu name
adverseEvents.setAdverseEventsList(adEvents, name);
%>

<!-- The cewolf:chart tage defines attributes related to the chart you wish to generate -->
<cewolf:chart
     id="events"
     title="Adverse Events by Month"
     type="verticalbar"
     xaxislabel="Month"
     yaxislabel="Reported Adverse Events">
	<cewolf:data>
	       <cewolf:producer id="adverseEvents"/>
	</cewolf:data>
</cewolf:chart>

<!-- The cewolf:img tag defines the actual chart in your JSP page -->
<cewolf:img chartid="events" renderer="/charts/" width="600" height="400"/>


<%@include file="/footer.jsp" %>

<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - PHA Home";
%>

<%@include file="/header.jsp" %>

<div style="text-align: center;">
	<h2>Welcome PHA <%=userName %>!</h2>
</div>

<%@include file="/footer.jsp" %>

<%@page import="edu.ncsu.csc.itrust.beans.PersonnelBean"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO"%>

<%@include file="/global.jsp" %>

<%PersonnelBean personnelb = new PersonnelDAO(prodDAO).getPersonnel(loggedInMID);%>

<div align="center" style="margin-bottom: 30px;">
	<img src="/iTrust/image/user/<%=loggedInMID.longValue() %>.png" alt="MID picture">
</div>

<div align="center">
<table>
	<tr>
		<td>Name: </td>
		<td><%=personnelb.getFullName()%></td>
	</tr>
	<tr>
		<td>Location: </td>
		<td><%=personnelb.getCity() + ", " + personnelb.getState()%></td>
	</tr>
</table>
</div>
<%@page errorPage="/auth/exceptionHandler.jsp" %>

<%@page import="java.util.List"%>
<%@page import="java.util.Date"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="edu.ncsu.csc.itrust.action.MonitorAdverseEventAction"%>
<%@page import="edu.ncsu.csc.itrust.beans.AdverseEventBean"%>
<%@page import="edu.ncsu.csc.itrust.exception.FormValidationException"%>
<%@page import="edu.ncsu.csc.itrust.exception.DBException"%>
<%@page import="edu.ncsu.csc.itrust.exception.iTrustException"%>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Adverse Event Details";
%>

<%@include file="/header.jsp" %>

<%
MonitorAdverseEventAction action = new MonitorAdverseEventAction(prodDAO, loggedInMID.longValue());
if(request.getParameter("remove") != null) {
	try {
		action.remove(Integer.parseInt(request.getParameter("id")));
		%>
		<div align=center>
			<span class="iTrustMessage">Report successfully removed</span>
		</div>
		<%
	} catch(DBException e) {
		%>
		<div align=center>
			<span class="iTrustError"><%=e.getMessage()%></span>
		</div>
		<%
	}catch(iTrustException e) {
		%>
		<div align=center>
			<span class="iTrustError"><%=e.getMessage()%></span>
		</div>
		<%
	}
} else if(request.getParameter("moreInfo") != null) {
	try{
	action.sendEmail(Long.parseLong(request.getParameter("patientMID")), "I would like to know more about your experience with this medication");
	%>
	<div align=center>
		<span class="iTrustMessage">Request sent</span>
	</div>
	<%
	} catch(DBException e) {
		%>
		<div align=center>
			<span class="iTrustError"><%=e.getMessage()%></span>
		</div>
		<%
	}
} else {

	List<AdverseEventBean> events = (List<AdverseEventBean>)session.getAttribute("events");
	int num = 0;
	String reporter = "";
	try{
		num = Integer.parseInt(request.getParameter("eventNumber"));
		reporter = action.getName(Long.parseLong(events.get(num).getMID()));
	}catch(NumberFormatException e){
		%>
		<div align=center>
			<span class="iTrustError"><%=e.getMessage() %></span>
		</div>
	<%
	}
	String drug = events.get(num).getDrug() + " (" + events.get(num).getCode() + ")";
	String date = events.get(num).getDate();
	String description = events.get(num).getDescription();
	
	%>
	<form action="adverseEventDetails.jsp">
			<input type="hidden" name="id" value="<%=events.get(num).getId() %>" />
			<input type="hidden" name="patientMID" value="<%=Long.parseLong(events.get(num).getMID()) %>" />
	
			<b>Reporter: </b>
			<div><%=reporter%></div>
		<br />
			<b><%=session.getAttribute("prescriptionImmunization") %>: </b>
			<div><%=drug%></div>
		<br />
			<b>Date: </b>
			<div><%=date%></div>
		<br />
		<b>Description: </b>
		<div style="width:100%;"><%=description%></div>
	<br />
	<br />
	
	<input type="submit" value="Remove Event" name="remove" />
	<input type="submit" value="Request More Information" name="moreInfo" />
	</form>
	
	<%
	session.removeAttribute("events");
	session.removeAttribute("prescriptionImmunization");

}
	%>
<%@include file="/footer.jsp" %>

<%@page language="java" 
        contentType="text/html; charset=ISO-8859-1" 
        pageEncoding="ISO-8859-1"
        errorPage="/logout.jsp"%>
         
<%@page import="edu.ncsu.csc.itrust.enums.TransactionType"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>

<%@page import="edu.ncsu.csc.itrust.DBUtil"%>

<%@include file="/global.jsp" %>
<%@include file="/authenticate.jsp" %>

<%
if(request.getUserPrincipal() != null) {
	long mid = Long.valueOf(request.getUserPrincipal().getName());
	//DAOFactory.getProductionInstance().getTransactionDAO().logTransaction(TransactionType.AUTHENTICATE_USER, mid, 0L, "Authenticated, requesting home page");
	prodDAO.getTransactionDAO()
	       .logTransaction(TransactionType.AUTHENTICATE_USER, mid, 0L, "Authenticated, requesting home page");
	
	if (request.isUserInRole("patient")) {
		response.sendRedirect("patient/home.jsp");
		return;
	} 
	else if (request.isUserInRole("uap")) {
		response.sendRedirect("uap/home.jsp");
		return;	
	}
	else if (request.isUserInRole("hcp")) {
		response.sendRedirect("hcp/home.jsp");
		return;	
	}
	else if (request.isUserInRole("er")) {
		response.sendRedirect("er/home.jsp");
		return;	
	}
	else if (request.isUserInRole("pha")) {
		response.sendRedirect("pha/home.jsp");
		return;
	}
	else if (request.isUserInRole("admin")) {
		response.sendRedirect("admin/home.jsp");
		return;
	}
	else if (request.isUserInRole("tester")) {
		response.sendRedirect("tester/home.jsp"); //operationprofile
		return;
	}
	else if(!validSession) {
		session.invalidate();
		response.sendRedirect("/iTrust/");
	}
	else if (mid == 0)
	{
		session.invalidate();
	}
	else {
		response.sendRedirect("errors/noaccess.jsp");
	}
}

%>

Please visit http://famspam.com/facebox/ or open index.html in your favorite browser.

Need help?  Join our Google Groups mailing list:
  http://groups.google.com/group/facebox/

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<%
response.sendRedirect("auth/forwardUser.jsp");
%>

<%@page errorPage="/auth/exceptionHandler.jsp"%>

<!-- IMPORTS GO HERE -->

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Template";
%>

<%@include file="/header.jsp" %>

<!-- YOUR PAGE GOES HERE -->

<%@include file="/footer.jsp" %>

<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>

<%@include file="/authenticate.jsp" %>

<%
	if(validSession) {
		errorMessage = (String) session.getAttribute("errorMessage");
		session.removeAttribute("errorMessage");
	}
%>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<title><%=pageTitle %></title>
		<link href="/iTrust/css/main.css" type="text/css" rel="stylesheet" />
		<link href="/iTrust/css/datepicker.css" type="text/css" rel="stylesheet" />
		<script src="/iTrust/js/DatePicker.js" type="text/javascript"></script>

		<script src="/iTrust/js/jquery-1.2.6.js" type="text/javascript"></script>
		<link href="/iTrust/css/facebox/facebox.css" media="screen" rel="stylesheet" type="text/css"/>
		<script src="/iTrust/js/facebox/facebox.js" type="text/javascript"></script>
		
		<script type="text/javascript">
			jQuery(document).ready(function($) {
				$('a[rel*=facebox]').facebox()
			});
			$.facebox.settings.loading_image = '/iTrust/image/facebox/loading.gif';
			$.facebox.settings.close_image   = '/iTrust/image/facebox/closelabel.gif';
		</script>
	</head>
	<body>

<%@page import="edu.ncsu.csc.itrust.action.LoginFailureAction"%>
<%@page import="edu.ncsu.csc.itrust.dao.DAOFactory"%>
<%@page import="edu.ncsu.csc.itrust.dao.mysql.AuthDAO"%>

<%
DAOFactory prodDAO = DAOFactory.getProductionInstance(); 
AuthDAO authDAO    = prodDAO.getAuthDAO();
LoginFailureAction loginFailureAction = new LoginFailureAction(prodDAO, request.getRemoteAddr());

String pageTitle    = null;
String loginMessage = null;
String userName     = null; //"Andy Programmer";
String errorMessage = null;

boolean validSession = true;

Long loggedInMID = new Long(0L);
String userRole  = "";
try {
	loggedInMID = (Long) session.getAttribute("loggedInMID");
	userRole    = (String) session.getAttribute("userRole");
	
	if (userRole == null) {
		if (request.isUserInRole("patient")) {
			userRole = "patient";
		}
		else if (request.isUserInRole("uap")) {
			userRole = "uap";
		}
		else if (request.isUserInRole("hcp")) {
			userRole = "hcp";
		}
		else if (request.isUserInRole("er")) {
			userRole = "er";
		}
		else if (request.isUserInRole("admin")) {
			userRole = "admin";
		}
		else if (request.isUserInRole("pha")) {
			userRole = "pha";
		}
		else if (request.isUserInRole("tester")) {
			userRole = "tester";
		}
		session.setAttribute("userRole", userRole);
	}
	
} catch (IllegalStateException ise) {
	validSession = false;
}

%>

<%@taglib prefix="itrust" uri="/WEB-INF/tags.tld"%>
<%@page errorPage="/auth/exceptionHandler.jsp"%>

<%@include file="/global.jsp"%>

<%
	pageTitle = "iTrust - Privacy Policy";
	loginMessage = "";
%>

<%@include file="/header.jsp"%>

<br />
<h3>iTrust Privacy Policy</h3>
Last modified: 11 April 2008
<hr>
<table border=0 cellpadding=5 >
	<tr valign=top>
		<td>
			<h3>Notice/Awareness</h3>
		</td>
		<td>
			This privacy policy complies with the Privacy Rule Standards
			set forth by the United States Department of Health and Human Services
			Office of Civil Rights - HIPPA.
			<p>Please review this privacy policy before using the iTrust
			system. This system was designed to collect and securely store
			Personally Identifiable Health Information (PIHI). Our goal is to
			ensure that we follow the Privacy Rules as stated by the USHHS. These
			privacy rules are in place to protect the privacy of individuals and
			their health care information, while allowing access and dissemination
			to medical professionals who need it to provide care.
			<hr>
		</td>
	</tr>

	<tr valign=top>
		<td>
			<h3>Choice/Consent</h3>
		</td>
		<td>
			The Privacy Rule states that obtaining written permission
			from an individual to collect and use their health information is
			optional. Therefore, it is our policy that we will collect and use
			your PIHI based on the categories and uses below. By using the iTrust
			system, you grant us permission to collect and store your information
			for the treatment and ongoing operations of our health practice. If
			you would prefer not to have your information available in the iTrust
			system, you must indicate so in writing to our offices.
			<p>As stated in the Privacy Rules we are permitted to use your
			PIHI in the following situations without written authorization:
			<ol>
				<li>Disclosure to the individual patient;
				<li>For treatment of sickness and diseases;
				<li>For the collection of payment for services rendered;
				<li>For the ongoing operation of this facility and our medical
				practice;
				<li>To provide an opportunity for the patient to agree or object
				to treatment options;
				<li>In a way that supports other permitted uses;
				<li>In ways that are beneficial to the public interest and
				public health care; and
				<li>In other limited ways for the purposes of research or public
				health.
			</ol>
			We rely on our judgment and generally accepted professional ethics to
			decide whether our actions are consistent with the above stated
			allowable uses. We will obtain written authorization from the patient
			or patient's authorized representative prior to disclosing any PIHI
			that is outside the scope of the above listed categories.
			<hr>
		</td>
	</tr>
	<tr valign=top>
		<td>
			<h3>Integrity/Security</h3>
		</td>
		<td>
			The integrity and security of your PIHI is very important to
			us. We strive to maintain the best security and access policies to
			prevent the accidental or intentional disclosure of information that
			would be in violation of the uses stated above.
			<hr>
		</td>
	</tr>
	<tr valign=top>
		<td>
			<h3>Access/Participation</h3>
		</td>
		<td>
			<p>
			The privacy policy requires us to allow you access to your
			medical records. Please contact the iTrust System Administrator our
			your medical professional if you feel any information is incorrect or
			needs to be changed.
			</p>
		</td>
	</tr>
</table>

<%@include file="/footer.jsp" %>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust - Login";

/* Note: there are better ways of implementing this feature. See the comment in LoginFailureAction */
	LoginFailureAction action = new LoginFailureAction(prodDAO, request.getRemoteAddr());
	
	if("true".equals(request.getParameter("loginError"))) {
		loginMessage = action.recordLoginFailure();
	}
%>

<%@include file="/header.jsp" %>
<%
	if(action.isValidForLogin()) {
%>

<div style="text-align: center; font-size: +2em">
	Welcome to iTrust
</div>

<div style="margin-top: 15px; margin-right: 40px; height: 150px;">
iTrust is a medical application that provides patients with a means to keep up with their medical history and records as well as communicate with their doctors, including selecting which doctors to be their primary caregiver, seeing and sharing satisfaction results, and other tasks.
iTrust is also an interface for medical staff from various locations.  iTrust allows the staff to keep track of their patients through messaging capabilities, scheduling of office visits, diagnoses, prescribing medication, ordering and viewing lab results, among other functions. 
</div>

<%
	} else { 
%>		

		
		You have too many failed logins times in a short span of time.<br />
		Please wait 15 minutes before logging in again.
<%
}
%>
<%@include file="/footer.jsp" %>


<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1" isErrorPage="true"%>

<%
	session.invalidate();
%> 

<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
		<title>Authorization Error</title>
	</head>
	<body>
		<div align=center>
			<h1>iTrust is Down</h1>
			The iTrust system is not available at this time.<br />
			<br />
			<br />
			<span >
				If you are developing on iTrust, you are
				not connecting to the database properly. Check your
				iTrust/WebRoot/META-INF/context.xml, and restart Tomcat to fix this.
			</span> 
			<br />
			<br />
			<a href="/iTrust">Log back in.</a>
		</div>

	</body>
</html>



<%@include file="/global.jsp"%>

<%
pageTitle = "iTrust Login";
%>

<%@include file="/header.jsp"%>

<h2>Oops! Your page wasn't found</h2>
You may have tried to log in after pressing "back" on your browser.<br />

Please feel free to try again.

<%@include file="/footer.jsp"%>

<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1" isErrorPage="true"%>

<%
	session.invalidate();
%> 

<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
		<title>Invalid direct reference to form login page</title>
	</head>
	<body>
		<div align=center>
			<h1>Invalid direct reference to form login page</h1>
			You must have hit back on your browser. Please log back in.<br />

			<a href="/iTrust">Log back in.</a>
		</div>

	</body>
</html>


<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1" isErrorPage="true"%>

<%
	session.invalidate();
%> 

<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
		<title>Server Rebooted</title>
	</head>
	<body>
		<div align=center>
			<h1>Authorization Error!</h1>
			You are not allowed to access this page because your role is invalid.
			For security reasons, you have been logged out.<br />
			<a href="/iTrust">Log back in.</a>
		</div>

	</body>
</html>

<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1" isErrorPage="true"%>

<%
	session.invalidate();
%> 

<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
		<title>Authorization Error</title>
	</head>
	<body>
		<div align=center>
			<h1>Server Reboot!</h1>
			The server has been rebooted and you have lost your credentials.<br />

			<a href="/iTrust">Log back in.</a>
		</div>

	</body>
</html>

<%@include file="/global.jsp" %>

<%
pageTitle = "iTrust Logout";

session.invalidate();
validSession = false;
response.sendRedirect("/iTrust");
%>


<div class="menu_category">
	<span>Actions</span><br />
	<a href="/iTrust/">Log into iTrust</a>
</div>

<div class="menu_category">
	<form method="post" action="/iTrust/j_security_check">
<%
	if(loginMessage != null) {
%>
	<div style="align: center; margin-bottom: 10px;">
		<span class="iTrustError" style="font-size: 16px;"><%=loginMessage%></span>
	</div>
<%
	}
%>
	<span>MID</span><br />
	<input type="text" maxlength="10" name="j_username"><br />
	<span>Password</span><br />
	<input type="password" maxlength="20" name="j_password"><br /><br />
	
	<input type="submit" value="Login"><br /><br />

	<a style="font-size: 80%;" href="/iTrust/util/resetPassword.jsp">Reset Password</a>

	</form>

<%
if( ! "true".equals(System.getProperty("itrust.production") ) ) { 
%>
	<!-- This section is for testing purposes only!! -->
	  <a class="iTrustTestNavlink" href="/iTrust/j_security_check?j_username=1&j_password=pw">Patient 1</a>
	| <a class="iTrustTestNavlink" href="/iTrust/j_security_check?j_username=2&j_password=pw">Patient 2</a><br />
	  <a class="iTrustTestNavlink" href="/iTrust/j_security_check?j_username=9000000000&j_password=pw">HCP</a>
	| <a class="iTrustTestNavlink" href="/iTrust/j_security_check?j_username=8000000009&j_password=uappass1">UAP</a>
	| <a class="iTrustTestNavlink" href="/iTrust/j_security_check?j_username=9000000006&j_password=pw">ER</a><br />
	  <a class="iTrustTestNavlink" href="/iTrust/j_security_check?j_username=7000000001&j_password=pw">PHA</a>
	| <a class="iTrustTestNavlink" href="/iTrust/j_security_check?j_username=9000000001&j_password=pw">Admin</a>
	| <a class="iTrustTestNavlink" href="/iTrust/j_security_check?j_username=9999999999&j_password=pw">Tester</a>
	
<% 
} 
%>
</div>
<script type="text/javascript">
	document.forms[0].j_username.focus();
</script>

package edu.ncsu.csc.itrust;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import edu.ncsu.csc.itrust.dao.DAOFactory;

/**
 * Provides a few database utilties
 * 
 * @author Andy
 * 
 */
public class DBUtil {
	/**
	 * Used to check if we can actually obtain a connection.
	 * 
	 * @return
	 */
	public static boolean canObtainProductionInstance() {
		try {
			DAOFactory.getProductionInstance().getConnection().close();
			return true;
		} catch (SQLException e) {
			System.out.println(e);
			return false;
		}
	}

	/**
	 * Close the prepared statement and the connection in a proper way
	 * 
	 * @param conn
	 * @param ps
	 */
	public static void closeConnection(Connection conn, PreparedStatement ps) {
		try {
			if (ps != null)
				ps.close();
			if (conn != null)
				conn.close();
		} catch (SQLException e) {
			System.err.println("Error closing connections");
			e.printStackTrace();
		}
	}

	/**
	 * Returns the last ID that was generated for an auto-increment column. Please note that this does NOT
	 * cause transaction problems! last_insert_id() returns the last generated ID on a per-connection basis.
	 * See the MySQL documentation at the following location to confirm this:
	 * {@link http://dev.mysql.com/doc/refman/5.0/en/getting-unique-id.html}
	 * 
	 * Don't believe me? see {@link AutoIncrementTest}
	 * 
	 * @param conn
	 * @return last generated id
	 * @throws SQLException
	 */
	public static long getLastInsert(Connection conn) throws SQLException {
		ResultSet rs = conn.createStatement().executeQuery("SELECT LAST_INSERT_ID()");
		rs.next();
		return rs.getLong(1);
	}
}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.AddPatientAction;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * The validator used by {@link AddPatientAction}. Only checks first name, last name, and email
 * 
 * @author Andy
 * 
 */
public class AddPersonnelValidator extends BeanValidator<PersonnelBean> {
	
	/**
	 * The default constructor.
	 */
	public AddPersonnelValidator() {
	}

	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	@Override
	public void validate(PersonnelBean p) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("First name", p.getFirstName(), ValidationFormat.NAME, false));
		errorList.addIfNotNull(checkFormat("Last name", p.getLastName(), ValidationFormat.NAME, false));
		errorList.addIfNotNull(checkFormat("Email", p.getEmail(), ValidationFormat.EMAIL, false));
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}
}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.enums.Gender;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;


/**
 * Abstract class used by all validators that provides utility methods for checking formatting of a particular
 * field. Specify the Bean to be validated
 * 
 * @author Andy
 * 
 * @param <T>
 *            The bean type to be validated
 */
abstract public class BeanValidator<T> {
	abstract public void validate(T bean) throws FormValidationException;
	
	/**
	 * Check the format against the given enum. isNullable will check if the string is empty or a Java null.
	 * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.
	 * 
	 * @param name
	 * @param value
	 * @param format
	 * @param isNullable
	 * @return
	 */
	protected String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {
		 
		String errorMessage = name + ": " + format.getDescription();
		 if (value == null || "".equals(value))
			return isNullable ? "" : errorMessage;
		else if (format.getRegex().matcher(value).matches())
			return "";
		else
			return errorMessage;
	}

	/**
	 * Check a long value against a particular format. isNullable will check if it is empty or a Java null.
	 * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.
	 * 
	 * @param name
	 * @param longValue
	 * @param format
	 * @param isNullable
	 * @return
	 */
	protected String checkFormat(String name, Long longValue, ValidationFormat format, boolean isNullable) {
		String str = "";
		if (longValue != null)
			str = String.valueOf(longValue);
		return checkFormat(name, str, format, isNullable);
	}

	/**
	 * Check the format against the given enum. isNullable will check if it is a Java null. Otherwise, an
	 * error message will be returned. Use this in conjunction with {@link ErrorList}.
	 * 
	 * @param name
	 * @param doubleValue
	 * @param format
	 * @param isNullable
	 * @return
	 */
	protected String checkFormat(String name, Double doubleValue, ValidationFormat format, boolean isNullable) {
		String str = "";
		if (doubleValue != null)
			str = String.valueOf(doubleValue);
		return checkFormat(name, str, format, isNullable);
	}

	/**
	 * Check against the proper gender
	 * 
	 * @param name
	 * @param gen
	 * @param format
	 * @param isNullable
	 * @return
	 */
	protected String checkGender(String name, Gender gen, ValidationFormat format, boolean isNullable) {
		String str = "";
		if (gen != null)
			str = gen.toString();
		return checkFormat(name, str, format, isNullable);
	}

	/**
	 * The that an integer is the proper format, and is in the correct range
	 * 
	 * @param name
	 * @param value
	 * @param lower
	 * @param upper
	 * @param isNullable
	 * @return
	 */
	protected String checkInt(String name, String value, int lower, int upper, boolean isNullable) {
		if (isNullable && (value == null || "".equals(value)))
			return "";
		try {
			int intValue = Integer.valueOf(value);
			if (lower <= intValue && intValue <= upper)
				return "";
		} catch (NumberFormatException e) {
			// just fall through to returning the error message
		}

		return name + " must be an integer in [" + lower + "," + upper + "]";
	}

	/**
	 * Check that a double is in the proper format and is in the correct range
	 * 
	 * @param name
	 * @param value
	 * @param lower
	 * @param upper
	 * @return
	 */
	protected String checkDouble(String name, String value, double lower, double upper) {
		try {
			double doubleValue = Double.valueOf(value);
			if (lower <= doubleValue && doubleValue < upper)
				return "";
		} catch (NumberFormatException e) {
			// just fall through to returning the error message
		}
		return name + " must be a decimal in [" + lower + "," + upper + ")";
	}

	/**
	 * Check that the value fits the "true" or "false"
	 * 
	 * @param name
	 * @param value
	 * @return
	 */
	protected String checkBoolean(String name, String value) {
		if ("true".equals(value) || "false".equals(value))
			return "";
		else
			return name + " must be either 'true' or 'false'";
	}
}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction;
import edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Validator used to validate adding new remote monitoring data in {@link AddRemoteMonitoringDataAction}
 * 
 */
public class RemoteMonitoringDataBeanValidator extends BeanValidator<RemoteMonitoringDataBean> {
	/**
	 * The default constructor.
	 */
	public RemoteMonitoringDataBeanValidator() {
	}
	
	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	@Override
	public void validate(RemoteMonitoringDataBean m) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("Systolic Blood Pressure", "" + m.getSystolicBloodPressure(),
				ValidationFormat.SYSTOLIC_BLOOD_PRESSURE, false));
		errorList.addIfNotNull(checkFormat("Diastolic Blood Pressure", "" + m.getDiastolicBloodPressure(),
				ValidationFormat.DIASTOLIC_BLOOD_PRESSURE, false));
		errorList.addIfNotNull(checkFormat("Glucose Level", "" + m.getGlucoseLevel(),
				ValidationFormat.GLUCOSE_LEVEL, false));
		if (errorList.hasErrors()){
			throw new FormValidationException(errorList);
		}
	}
}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.EditOfficeVisitAction;
import edu.ncsu.csc.itrust.beans.MessageBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Used to validate updating an office visit, by {@link EditOfficeVisitAction}
 * 
 * @author Andy
 * 
 */
public class MessageValidator extends BeanValidator<MessageBean> {

	public MessageValidator() {
	}
	
	public void validate(MessageBean mBean) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("body", mBean.getBody(), ValidationFormat.MESSAGES_BODY, false));
		errorList.addIfNotNull(checkFormat("subject", mBean.getSubject(), ValidationFormat.MESSAGES_SUBJECT, false));
		
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}

}


package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.exception.FormValidationException;
import org.apache.commons.validator.*;


public class MailValidator extends EmailValidator {
	/**
	 * The default constructor.
	 */
	public MailValidator(){
		
	}
	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	public boolean validateEmail(String email) throws FormValidationException {
		MailValidator val = new MailValidator();
	
		return val.isValid(email);
		
	}
	

}
 

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.UpdateNDCodeListAction;
import edu.ncsu.csc.itrust.beans.ProcedureBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Validates an ND code, from {@link UpdateNDCodeListAction}
 * 
 * @author Andy
 * 
 */
public class ProcedureBeanValidator extends BeanValidator<ProcedureBean> {
	/**
	 * The default constructor.
	 */
	public ProcedureBeanValidator() {
	}

	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	@Override
	public void validate(ProcedureBean p) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("CPT Code", p.getCPTCode(), ValidationFormat.CPT, false));
		errorList.addIfNotNull(checkFormat("Description", p.getDescription(),
				ValidationFormat.CPT_CODE_DESCRIPTION, false));
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}

}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.EditHealthHistoryAction;
import edu.ncsu.csc.itrust.beans.forms.HealthRecordForm;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Validator used in adding health information on Basic Health History, {@link EditHealthHistoryAction}
 * 
 * @author Andy
 * 
 */
public class HealthRecordFormValidator extends BeanValidator<HealthRecordForm> {
	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	@Override
	public void validate(HealthRecordForm bean) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkInt("Systolic blood pressure", bean.getBloodPressureN(), 0, 999, false));
		errorList.addIfNotNull(checkInt("Diastolic blood pressure", bean.getBloodPressureD(), 0, 999, false));
		errorList.addIfNotNull(checkInt("Cholesterol HDL", bean.getCholesterolHDL(), 0, 89, false));
		errorList.addIfNotNull(checkInt("Cholesterol LDL", bean.getCholesterolLDL(), 0, 600, false));
		errorList.addIfNotNull(checkInt("Cholesterol Triglycerides", bean.getCholesterolTri(), 100, 600,
				false));
		errorList.addIfNotNull(checkFormat("Height", bean.getHeight(), ValidationFormat.Height, false));
		errorList.addIfNotNull(checkFormat("Weight", bean.getWeight(), ValidationFormat.Weight, false));
		errorList.addIfNotNull(checkBoolean("Smoker", bean.getIsSmoker()));
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}

}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.AdverseEventBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Validates an adverse event bean, from {@link AdverseEventAction}
 * 
 */
public class AdverseEventValidator extends BeanValidator<AdverseEventBean> {
	/**
	 * The default constructor.
	 */
	public AdverseEventValidator() {
	}

	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param d A bean of the type to be validated.
	 */
	@Override
	public void validate(AdverseEventBean b) throws FormValidationException {
		ErrorList errorList = new ErrorList();errorList.addIfNotNull(checkFormat("comment", b.getDescription(), ValidationFormat.ADVERSE_EVENT_COMMENTS,false));
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}
}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.EditPatientAction;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import org.apache.commons.validator.CreditCardValidator;
import java.util.Date;

/**
 * Validates a patient bean, from {@link EditPatientAction}
 * 
 * @author Andy
 * 
 */
public class PatientValidator extends BeanValidator<PatientBean> {
	/**
	 * The default constructor.
	 */
	public PatientValidator() {
	}

	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	@Override
	public void validate(PatientBean p) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("First name", p.getFirstName(), ValidationFormat.NAME, false));
		errorList.addIfNotNull(checkFormat("Last name", p.getLastName(), ValidationFormat.NAME, false));
		errorList.addIfNotNull(checkFormat("Date of Birth", p.getDateOfBirthStr(), ValidationFormat.DATE,
				false));
		errorList.addIfNotNull(checkFormat("Date of Death", p.getDateOfDeathStr(), ValidationFormat.DATE,
				true));
		try {
			if (p.getDateOfDeath() == null && "".equals(p.getDateOfDeathStr())){
				if( p.getDateOfBirth().after(new Date())){
					errorList.addIfNotNull("Birth date cannot be in the future!");
				}
			}
			if (p.getDateOfDeath().before(p.getDateOfBirth()))
				errorList.addIfNotNull("Death date cannot be before birth date!");
			if( p.getDateOfDeath().after(new Date())){
				errorList.addIfNotNull("Death date cannot be in the future!");
			}
			if( p.getDateOfBirth().after(new Date())){
				errorList.addIfNotNull("Birth date cannot be in the future!");
			}
		} catch (NullPointerException e) {
			// ignore this
		}
		
		
		
			
		boolean deathCauseNull = (null == p.getDateOfDeathStr() || p.getDateOfDeathStr().equals(""));
		errorList.addIfNotNull(checkFormat("Cause of Death", p.getCauseOfDeath(), ValidationFormat.ICD9CM,
				deathCauseNull));
		errorList.addIfNotNull(checkFormat("Email", p.getEmail(), ValidationFormat.EMAIL, false));
		errorList.addIfNotNull(checkFormat("Street Address 1", p.getStreetAddress1(),
				ValidationFormat.ADDRESS, false));
		errorList.addIfNotNull(checkFormat("Street Address 2", p.getStreetAddress2(),
				ValidationFormat.ADDRESS, true));
		errorList.addIfNotNull(checkFormat("City", p.getCity(), ValidationFormat.CITY, false));
		errorList.addIfNotNull(checkFormat("State", p.getState(), ValidationFormat.STATE, false));
		errorList.addIfNotNull(checkFormat("Zip Code", p.getZip(), ValidationFormat.ZIPCODE, false));
		errorList
				.addIfNotNull(checkFormat("Phone Number", p.getPhone(), ValidationFormat.PHONE_NUMBER, false));
		errorList.addIfNotNull(checkFormat("Emergency Contact Name", p.getEmergencyName(),
				ValidationFormat.NAME, false));
		errorList.addIfNotNull(checkFormat("Emergency Contact Phone", p.getEmergencyPhone(),
				ValidationFormat.PHONE_NUMBER, false));
		errorList.addIfNotNull(checkFormat("Insurance Company Name", p.getIcName(), ValidationFormat.NAME,
				false));
		errorList.addIfNotNull(checkFormat("Insurance Company Address 1", p.getIcAddress1(),
				ValidationFormat.ADDRESS, false));
		errorList.addIfNotNull(checkFormat("Insurance Company Address 2", p.getIcAddress2(),
				ValidationFormat.ADDRESS, true));
		errorList.addIfNotNull(checkFormat("Insurance Company City", p.getIcCity(), ValidationFormat.CITY,
				false));
		errorList.addIfNotNull(checkFormat("Insurance Company State", p.getIcState(), ValidationFormat.STATE,
				false));
		errorList.addIfNotNull(checkFormat("Insurance Company Zip", p.getIcZip(), ValidationFormat.ZIPCODE,
				false));
		errorList.addIfNotNull(checkFormat("Insurance Company Phone", p.getIcPhone(),
				ValidationFormat.PHONE_NUMBER, false));
		errorList.addIfNotNull(checkFormat("Insurance Company ID", p.getIcID(),
				ValidationFormat.INSURANCE_ID, false));
		errorList.addIfNotNull(checkFormat("Mother MID", p.getMotherMID(), ValidationFormat.MID, true));
		errorList.addIfNotNull(checkFormat("Father MID", p.getFatherMID(), ValidationFormat.MID, true));
		errorList
				.addIfNotNull(checkFormat("Topical Notes", p.getTopicalNotes(), ValidationFormat.NOTES, true));
		
		/* This block was added for Theme 5 by Tyler Arehart */
		
		if (!(p.getCreditCardNumber().equals("") && p.getCreditCardType().equals(""))) {
		
			String s = null;
			CreditCardValidator c;
			int type = -1;
			if (p.getCreditCardType().equals("VISA")) type = CreditCardValidator.VISA;
			if (p.getCreditCardType().equals("MASTERCARD")) type = CreditCardValidator.MASTERCARD;
			if (p.getCreditCardType().equals("DISCOVER")) type = CreditCardValidator.DISCOVER;
			if (p.getCreditCardType().equals("AMEX")) type = CreditCardValidator.AMEX;
			
			if (type != -1) {	
				c = new CreditCardValidator(type);
				if (!c.isValid(p.getCreditCardNumber())) {
					s = "Credit Card Number";
				}
			}
			else {
				s = "Credit Card Type";
			}
			errorList.addIfNotNull(s);
		}
		
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}
}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.ApptTypeBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

public class ApptTypeBeanValidator extends BeanValidator<ApptTypeBean> {

	@Override
	public void validate(ApptTypeBean a) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("Appointment Type Name", a.getName(), ValidationFormat.APPT_TYPE_NAME, false));
		errorList.addIfNotNull(checkFormat("Appointment Type Duration", a.getDuration()+"", ValidationFormat.APPT_TYPE_DURATION, false));
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}

}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.UpdateNDCodeListAction;
import edu.ncsu.csc.itrust.beans.MedicationBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Validates ND code beans, from {@link UpdateNDCodeListAction}
 * 
 * @author Andy
 * 
 */
public class MedicationBeanValidator extends BeanValidator<MedicationBean> {
	/**
	 * The default constructor.
	 */
	public MedicationBeanValidator() {
	}

	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	@Override
	public void validate(MedicationBean m) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("ND Code", m.getNDCode(), ValidationFormat.ND, false));
		errorList.addIfNotNull(checkFormat("Description", m.getDescription(),
				ValidationFormat.ND_CODE_DESCRIPTION, false));
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}
}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Validates an ICD9CM code
 * 
 * @author Andy
 * 
 */
public class DiagnosisBeanValidator extends BeanValidator<DiagnosisBean> {
	/**
	 * The default constructor.
	 */
	public DiagnosisBeanValidator() {
	}

	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	@Override
	public void validate(DiagnosisBean d) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("ICD9CM Code", d.getICDCode(), ValidationFormat.ICD9CM, false));
		errorList.addIfNotNull(checkFormat("Description", d.getDescription(),
				ValidationFormat.ICD_CODE_DESCRIPTION, false));
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}

}


package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.MessageBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;


public class EMailValidator extends BeanValidator<MessageBean>  {
	/**
	 * The default constructor.
	 */
	public EMailValidator(){
		
	}
	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param m A bean of the type to be validated.
	 */
	
	public void validate(MessageBean m) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("body", m.getBody(), ValidationFormat.EMAILS,
				false));

		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}

}
 

package edu.ncsu.csc.itrust.validate;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import edu.ncsu.csc.itrust.action.EditOfficeVisitAction;
import edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Used to validate updating an office visit, by {@link EditOfficeVisitAction}
 * 
 * @author Andy
 * 
 */
public class EditOfficeVisitValidator extends BeanValidator<EditOfficeVisitForm> {
	private boolean validatePrescription = false;

	/**
	 * The default constructor.
	 */
	public EditOfficeVisitValidator() {
	}

	public EditOfficeVisitValidator(boolean validatePrescription) {
		this.validatePrescription = validatePrescription;
	}

	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	@Override
	public void validate(EditOfficeVisitForm form) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("HCP ID", form.getHcpID(), ValidationFormat.MID, false));
		errorList.addIfNotNull(checkFormat("Hospital ID", form.getHospitalID(), ValidationFormat.HOSPITAL_ID,
				true));
		errorList.addIfNotNull(checkFormat("Notes", form.getNotes(), ValidationFormat.NOTES, true));
		errorList.addIfNotNull(checkFormat("Patient ID", form.getPatientID(), ValidationFormat.MID, false));
		errorList.addIfNotNull(checkFormat("Visit Date", form.getVisitDate(), ValidationFormat.DATE, false));
		if (validatePrescription) {
			errorList.addIfNotNull(checkFormat("Start Date", form.getStartDate(), ValidationFormat.DATE,
					false));
			errorList.addIfNotNull(checkFormat("End Date", form.getEndDate(), ValidationFormat.DATE, false));
			errorList.addIfNotNull(checkFormat("Instructions", form.getInstructions(),
					ValidationFormat.NOTES, true));
			errorList.addIfNotNull(checkInt("Dosage", form.getDosage(), 0, 9999, false));
			if ((checkFormat("Start Date", form.getStartDate(), ValidationFormat.DATE, false)) == ""
					&& (checkFormat("End Date", form.getEndDate(), ValidationFormat.DATE, false)) == "") {
				Date sd = null;
				Date ed = null;
				try {
					sd = new SimpleDateFormat("MM/dd/yyyy").parse(form.getStartDate());
					ed = new SimpleDateFormat("MM/dd/yyyy").parse(form.getEndDate());
					String dateError = null;
					if (sd.after(ed)) {
						dateError = "The start date of the prescription must be before the end date.";
					}
					errorList.addIfNotNull(dateError);
				} catch (ParseException e) {
					errorList.addIfNotNull(ValidationFormat.DATE.getDescription());
				}

			}
		}
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}
}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.EditOfficeVisitAction;
import edu.ncsu.csc.itrust.beans.AllergyBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Validator used to validate adding a new allergy in {@link EditOfficeVisitAction}
 * 
 * @author Andy
 * 
 */
public class AllergyBeanValidator extends BeanValidator<AllergyBean> {
	/**
	 * The default constructor.
	 */
	public AllergyBeanValidator() {
	}
	
	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	@Override
	public void validate(AllergyBean m) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("Allergy Description", m.getDescription(),
				ValidationFormat.ALLERGY_DESCRIPTION, false));
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}
}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.ApptBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

public class ApptBeanValidator extends BeanValidator<ApptBean>{

	public void validate(ApptBean bean) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		if(bean.getComment() == null)
			return;
		errorList.addIfNotNull(checkFormat("Appointment Comment", bean.getComment(), ValidationFormat.APPT_COMMENT, false));
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}

}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.AddPatientAction;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * The validator used by {@link AddPatientAction}. Only checks first name, last name, and email
 * 
 * @author Andy
 * 
 */
public class AddPatientValidator extends BeanValidator<PatientBean> {
	/**
	 * The default constructor.
	 */
	public AddPatientValidator() {
	}

	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	@Override
	public void validate(PatientBean p) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("First name", p.getFirstName(), ValidationFormat.NAME, false));
		errorList.addIfNotNull(checkFormat("Last name", p.getLastName(), ValidationFormat.NAME, false));
		errorList.addIfNotNull(checkFormat("Email", p.getEmail(), ValidationFormat.EMAIL, false));
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}
	
}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.SurveyResultBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Validator for zip code that is entered when a user searches for HCP survey results.
 */
public class SurveySearchValidator extends BeanValidator<SurveyResultBean>{

	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	@Override
	public void validate(SurveyResultBean bean) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("Zip Code", bean.getHCPzip(), ValidationFormat.ZIPCODE, false));
		
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}

}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.DrugInteractionBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Validates a drug interaction bean, from {@link DrugInteractionAction}
 * 
 */
public class DrugInteractionValidator extends BeanValidator<DrugInteractionBean> {
	/**
	 * The default constructor.
	 */
	public DrugInteractionValidator() {
	}

	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param d A bean of the type to be validated.
	 */
	@Override
	public void validate(DrugInteractionBean d) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("FirstDrug", d.getFirstDrug(), ValidationFormat.ND,false));
		errorList.addIfNotNull(checkFormat("SecondDrug", d.getSecondDrug(), ValidationFormat.ND,false));
		errorList.addIfNotNull(checkFormat("description", d.getDescription(), ValidationFormat.DRUG_INT_COMMENTS,false));
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}
}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.SetSecurityQuestionAction;
import edu.ncsu.csc.itrust.beans.SecurityQA;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Validates the security question and answer. This doesn't follow the same format as the others because this
 * validator is used for the various states of reset password, {@link SetSecurityQuestionAction}
 * 
 * @author Andy
 * 
 */
public class SecurityQAValidator extends BeanValidator<SecurityQA> {
	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	@Override
	public void validate(SecurityQA bean) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		if (null == bean)
			throw new FormValidationException("Null form");

		if (null == bean.getConfirmAnswer())
			throw new FormValidationException("Confirm answer cannot be empty");

		if (!bean.getAnswer().equals(bean.getConfirmAnswer()))
			throw new FormValidationException("Security answers do not match");

		errorList.addIfNotNull(checkFormat("Security Question", bean.getQuestion(),
				ValidationFormat.QUESTION, false));
		errorList.addIfNotNull(checkFormat("Security Answer", bean.getAnswer(), ValidationFormat.ANSWER,
				false));

		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}

}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

public class LabProcedureValidator {
	
	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	public void validate(LabProcedureBean b) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("LOINC", b.getLoinc(), ValidationFormat.LOINC, false));
		errorList.addIfNotNull(checkFormat("Commentary", b.getCommentary(), ValidationFormat.COMMENTS, true));
		errorList.addIfNotNull(checkFormat("Results", b.getCommentary(), ValidationFormat.COMMENTS, true));
		errorList.addIfNotNull(checkFormat("Status", b.getStatus(), ValidationFormat.LAB_STATUS, false));
		errorList.addIfNotNull(checkFormat("Rights", b.getRights(), ValidationFormat.LAB_RIGHTS, false));
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}

	protected String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {
		String errorMessage = name + ": " + format.getDescription();
		if (value == null || "".equals(value))
			return isNullable ? "" : errorMessage;
		if (format.getRegex().matcher(value).matches())
			return "";
		else
			return errorMessage;
	}
}

package edu.ncsu.csc.itrust.validate;

import java.util.regex.Pattern;

/**
 * Enum with all of the validation formats that fit into a regex.
 * 
 * @author Andy
 * 
 *
 */


public enum ValidationFormat {
	NAME("[\\sa-zA-Z'-]{1,20}", "Up to 20 Letters, space, ' and -"), DATE("[\\d]{2}/[\\d]{2}/[\\d]{4}",
			"MM/DD/YYYY"),
			PHONE_NUMBER("[\\d]{3}-[\\d]{3}-[\\d]{4}", "xxx-xxx-xxxx"),
			MID("[\\d]{1,10}",
			"Between 1 and 10 digits"), ROLE("^(?:admin|hcp|uap|test)$",
			"must be one of {admin, hcp, uap, test}"),
			EMAIL("^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*((\\.[A-Za-z]{2,}){1}$)",
					"Up to 30 alphanumeric characters and symbols . and _ @"), 
	QUESTION("[a-zA-Z0-9?\\-'.\\s]{1,50}", "Up to 50 alphanumeric characters and symbols ?-'."),
	ANSWER("[a-zA-Z0-9\\s]{1,30}", "Up to 30 alphanumeric characters"),
	ADDRESS("[a-zA-Z0-9.\\s]{1,30}", "Up to 30 alphanumeric characters, and ."),
	APPT_COMMENT("[0-9a-zA-Z\\s'\"?!:;\\-._\n\t]{1,1000}", "Between 0 and 1000 alphanumerics with space, and other punctuation"),
	APPT_TYPE_NAME("[a-zA-Z ]{1,30}", "Between 1 and 30 alpha characters and space"),
	APPT_TYPE_DURATION("[0-9]{1,5}", "Between 1 and 5 numberics"),
	CITY("[a-zA-Z\\s]{1,15}", "Up to 15 characters"),
	STATE("[A-Z]{2}", "Two capital letters"),
	ZIPCODE("([0-9]{5})|([0-9]{5}-[0-9]{4})", "xxxxx or xxxxx-xxxx"), // ^[0-9]{5}(?:-[0-9]{4})?$
	BLOODTYPE("((O)|(A)|(B)|(AB))([+-]{1})", "Must be [O,A,B,AB]+/-"), // ^(?:O|A|B|AB)[+-]$
	GENDER("(Male)|(Female)", "Only Male or Female"), // ^(?:Male|Female)$
	NOTES("[a-zA-Z0-9\\s'\"?!:;\\-._\n\t]{1,300}",
			"Up to 300 alphanumeric characters, with space, and other punctuation"),
	MESSAGES_BODY("[a-zA-Z0-9\\s'\"?!:;\\-.,_\n\t()]{1,1000}",
			"Up to 1000 alphanumeric characters, with space, and other punctuation"),
	MESSAGES_SUBJECT("[a-zA-Z0-9\\s'\"?!:;\\-._\n\t()]{1,100}",
			"Up to 100 alphanumeric characters, with space, and other punctuation"),
	PASSWORD("[a-zA-Z0-9]{8,20}", "8-20 alphanumeric characters"),
	INSURANCE_ID("[\\s\\da-zA-Z'-]{1,20}", "Up to 20 letters, digits, space, ' and -"),
	HOSPITAL_ID("[\\d]{1,10}", "Between 1 and 10 digits"),
	HOSPITAL_NAME("[0-9a-zA-Z' .]{1,30}", "Between 1 and 30 alphanumerics, space, ', and ."),
	ND_CODE_DESCRIPTION("[a-zA-Z0-9\\s]{1,100}", "Up to 100 characters, letters, numbers, and a space"),
	DRUG_INT_COMMENTS("[a-zA-Z0-9.\\-',!;:()?\\s]{1,500}", "Up to 500 alphanumeric characters and .-',!;:()?"),
	EMAILS("[a-zA-Z0-9.\\-',!;:()?\\s]{1,500}", "Up to 500 alphanumeric characters and .-',!;:()?"),
	ADVERSE_EVENT_COMMENTS("[a-zA-Z0-9.\\-',!;:()?\\s]{1,2000}", "Up to 2000 alphanumeric characters and .-',!;:()?"),
	ICD_CODE_DESCRIPTION("[a-zA-Z0-9\\s]{1,30}", "Up to 30 characters, letters, numbers, and a space"),
	CPT_CODE_DESCRIPTION("[a-zA-Z0-9\\s]{1,30}", "Up to 30 characters, letters, numbers, and a space"),
	ALLERGY_DESCRIPTION("[a-zA-Z0-9\\s]{1,30}", "Up to 30 characters, letters, numbers, and a space"),
	ICD9CM("([\\d]{1,3})|([\\d]{1,3}\\.[\\d]{0,2})", "xxx.xx"),
	CPT("[\\d]{1,4}[A-Za-z0-9]", "Up to four digit integer plus a letter or digit"),
	Height("[\\d]{0,3}(\\.(\\d){0,1}){0,1}", "Up to 3-digit number + up to 1 decimal place"),
	Weight("[\\d]{0,4}(\\.(\\d){0,1}){0,1}", "Up to 4-digit number + up to 1 decimal place"),
	YEAR("[\\d]{4}", "Must be 4 digits"), 
	GENDERCOD("(Male)|(Female)|(Not Specified)", "Only Male, Female, or All Patients"),
	ND("[\\d]{1,9}", "Up to nine digit integer"),
	LOINC("[\\d]{5}[-]{1}[\\d]{1}", "Must be in format nnnnn-n"),
	LOINC_ITEM("[a-zA-Z0-9\\s]{1,100}", "Up to 100 characters, letters, numbers, and a space"),
	COMMENTS("[a-zA-Z0-9.\\s]{1,500}", "Up to 500 alphanumeric characters"),
	LAB_STATUS("(NOT YET RECEIVED)|(PENDING)|(COMPLETED)", "Only NOT YET RECEIVED, PENDING, or COMPLETED"),
	LAB_RIGHTS("(ALLOWED)|(RESTRICTED)", "Only ALLOWED, or RESTRICTED"),
	SYSTOLIC_BLOOD_PRESSURE("^([4-9][0-9]|1[0-9][0-9]|2[0-3][0-9]|240)$", "Must be between 40 and 240"),
	DIASTOLIC_BLOOD_PRESSURE("^([4-9][0-9]|1[0-4][0-9]|150)$", "Must be between 40 and 150"),
	GLUCOSE_LEVEL("^([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|250)$", "Must be between 0 and 250");
	

	private Pattern regex;
	private String description;

	ValidationFormat(String regex, String errorMessage) {
		this.regex = Pattern.compile(regex);
		this.description = errorMessage;
	}

	public Pattern getRegex() {
		return regex;
	}

	public String getDescription() {
		return description;
	}
}

package edu.ncsu.csc.itrust.validate;


import edu.ncsu.csc.itrust.beans.LOINCbean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;


/**
 * Validator used to validate LOINCbean
 */
public class LOINCBeanValidator extends BeanValidator<LOINCbean> {
	/**
	 * The default constructor.
	 */
	public LOINCBeanValidator() {
	}

	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	@Override
	public void validate(LOINCbean m) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		if(m.getLabProcedureCode()==null || m.getComponent()==null || m.getKindOfProperty()==null){
			throw new FormValidationException("You must have a Lab Procedure Code, Component and Kind Of Property");
		}
		errorList.addIfNotNull(checkFormat("LaboratoryProcedureCode", m.getLabProcedureCode(), ValidationFormat.LOINC, false));
		errorList.addIfNotNull(checkFormat("Component", m.getComponent(), ValidationFormat.LOINC_ITEM, false));
		errorList.addIfNotNull(checkFormat("KindOfProperty", m.getKindOfProperty(), ValidationFormat.LOINC_ITEM, false));
		errorList.addIfNotNull(checkFormat("TimeAspect", m.getTimeAspect(), ValidationFormat.LOINC_ITEM, true));
		errorList.addIfNotNull(checkFormat("System", m.getSystem(), ValidationFormat.LOINC_ITEM, true));
		errorList.addIfNotNull(checkFormat("ScaleType",m.getScaleType(), ValidationFormat.LOINC_ITEM, true));
		errorList.addIfNotNull(checkFormat("MethodType", m.getMethodType(), ValidationFormat.LOINC_ITEM, true));

		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}
}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.UpdateHospitalListAction;
import edu.ncsu.csc.itrust.beans.HospitalBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Validates the input for hospital beans, {@link UpdateHospitalListAction}
 * 
 * @author Andy
 * 
 */
public class HospitalBeanValidator extends BeanValidator<HospitalBean> {
	/**
	 * The default constructor.
	 */
	public HospitalBeanValidator() {
	}

	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	@Override
	public void validate(HospitalBean h) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("Hospital ID", h.getHospitalID(), ValidationFormat.HOSPITAL_ID,
				false));
		errorList.addIfNotNull(checkFormat("Hospital Name", h.getHospitalName(),
				ValidationFormat.HOSPITAL_NAME, false));
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}

}

package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.EditPersonnelAction;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Validates a personnel bean, from {@link EditPersonnelAction}
 * 
 * @author Andy
 * 
 */
public class PersonnelValidator extends BeanValidator<PersonnelBean> {
	/**
	 * The default constructor.
	 */
	public PersonnelValidator() {
	}

	/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
	@Override
	public void validate(PersonnelBean p) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		errorList.addIfNotNull(checkFormat("First name", p.getFirstName(), ValidationFormat.NAME, false));
		errorList.addIfNotNull(checkFormat("Last name", p.getLastName(), ValidationFormat.NAME, false));
		errorList.addIfNotNull(checkFormat("Street Address 1", p.getStreetAddress1(),
				ValidationFormat.ADDRESS, false));
		errorList.addIfNotNull(checkFormat("Street Address 2", p.getStreetAddress2(),
				ValidationFormat.ADDRESS, true));
		errorList.addIfNotNull(checkFormat("City", p.getCity(), ValidationFormat.CITY, false));
		errorList.addIfNotNull(checkFormat("State", p.getState(), ValidationFormat.STATE, false));
		errorList.addIfNotNull(checkFormat("Zip Code", p.getZip(), ValidationFormat.ZIPCODE, false));
		errorList
				.addIfNotNull(checkFormat("Phone Number", p.getPhone(), ValidationFormat.PHONE_NUMBER, false));
		errorList
		.addIfNotNull(checkFormat("Email", p.getEmail(), ValidationFormat.EMAIL, true));
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}

}

package edu.ncsu.csc.itrust;

import java.util.HashMap;
import java.util.Map;

/**
 * Provides a utility method that converts the "Map" from the JSP container to a type-checked hashmap
 * 
 * @author Andy
 * 
 */
public class ParameterUtil {
	/**
	 * Provides a utility method that converts the "Map" from the JSP container to a type-checked hashmap
	 * @param params Map to convert
	 * @return converted Map
	 */
	@SuppressWarnings("unchecked")
	public static HashMap<String, String> convertMap(Map params) {
		HashMap<String, String> myMap = new HashMap<String, String>();
		for (Object key : params.keySet()) {
			String[] value = ((String[]) params.get(key));
			if (value != null)
				myMap.put(key.toString(), value[0]);
			else
				myMap.put(key.toString(), null);
		}
		return myMap;
	}
}

package edu.ncsu.csc.itrust.enums;

/**
 * All possible ethnicities represented in iTrust.
 */
public enum Ethnicity {
	Caucasian("Caucasian"), AfricanAmerican("African American"), Hispanic("Hispanic"), AmericanIndian(
			"American Indian"), Asian("Asian"), NotSpecified("Not Specified");
	private String name;

	private Ethnicity(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

	@Override
	public String toString() {
		return getName();
	}

	public static Ethnicity parse(String input) {
		for (Ethnicity ethnicity : Ethnicity.values()) {
			if (ethnicity.name.equals(input))
				return ethnicity;
		}
		return NotSpecified;
	}
}

package edu.ncsu.csc.itrust.enums;

/**
 * All possible blood types
 * 
 * @author Andy
 * 
 */
public enum BloodType {
	APos("A+"), ANeg("A-"), BPos("B+"), BNeg("B-"), ABPos("AB+"), ABNeg("AB-"), OPos("O+"), ONeg("O-"), NS(
			"N/S");
	private String name;

	private BloodType(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

	@Override
	public String toString() {
		return getName();
	}

	public static BloodType parse(String bloodTypeStr) {
		for (BloodType type : BloodType.values()) {
			if (type.getName().equals(bloodTypeStr)) {
				return type;
			}
		}
		return NS;
	}
}

package edu.ncsu.csc.itrust.enums;

/**
 * Male or Female.  Not specified is provided as well, for incomplete forms or patient's discretion.
 */
public enum Gender {
	Male("Male"), Female("Female"), NotSpecified("Not Specified");
	private String name;

	private Gender(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

	@Override
	public String toString() {
		return getName();
	}

	public static Gender parse(String input) {
		for (Gender gender : Gender.values()) {
			if (gender.name.equals(input))
				return gender;
		}
		return NotSpecified;
	}
}

package edu.ncsu.csc.itrust.enums;

/**
 * All of the possible transaction types, in no particular order, used in producing the operational profile.
 */
public enum TransactionType {
	ENTER_EDIT_DEMOGRAPHICS(1, "Enter/Edit patient/personnel demographics"),
	DECLARE_HCP(2, "View HCP / Change designation"),
	ALLOW_DISALLOW_ACCESS(3, "Allow/Disallow access to patient diagnosis"),
	VIEW_ACCESS_LOG(4, "View patient's record access log"),
	VIEW_RECORDS(5, "View patient's medical records"),
	AUTHENTICATE_USER(6, "Authenticate user"),
	ENTER_EDIT_PHR(7, "Enter/Edit Personal Health Information"),
	DOCUMENT_OFFICE_VISIT(8, "Document an office visit"),
	CREATE_DISABLE_PATIENT_HCP(9, "Create or disable a patient or hcp"),
	MANAGE_DIAGNOSIS_CODE(10, "Manage ICD9CM diagnosis codes"),
	REQUEST_BIOSURVEILLANCE(11, "Request biosurveillance"),
	MANAGE_PROCEDURE_CODE(12, "Manage CPT Procedure Codes"),
	MANAGE_DRUG_CODE(13, "Manage ND Drug Codes"),
	IDENTIFY_RISK_FACTORS(14, "Identify risk factors for chronic diseases"),
	CAUSE_OF_DEATH(15, "Examine cause-of-death trends"),
	DECLARE_REPRESENTATIVE(16, "Declare Personal Health Representative"),
	PATIENT_REMINDERS(17, "Proactively determine necessary patient care"),
	MAINTAIN_HOSPITALS(18, "Maintain hospital listing"),
	VIEW_PRESCRIPTION_REPORT(19, "View prescription report"),
	VIEW_HOSPITAL_STATS(20, "View hospital statistics"),
	VIEW_COMPREHENSIVE_RECORD(21, "View comprehensive patient report"),
	VIEW_EMERGENCY_REPORT(22, "View emergency patient report"),
	COMPREHENSIVE_REPORT_REQUEST(28, "Comprehensive patient report"),
	VIEW_LAB_PROCEDURE(29, "View lab procedure"),
	ENTER_EDIT_LAB_PROCEDURE(30, "Enter/Edit lab procedure"),
	MANAGE_LOINC(31, "Enter/Edit LOINC Code"),
	ADD_PATIENT_SURVEY(32, "Added Patient Survey"),
	View_HCP_SURVEY_RESULTS(33, "View HCP survey results"),
	VIEW_PATIENT_LIST(34, "View Patient List"),
	FIND_HCPS_WITH_EXP(35, "Find LHCPs with experience with a diagnosis"),
	VIEW_HEALTH_RECORDS(36, "View Patient Health Records"),
	VIEW_OFFICE_VISIT(37, "View Office Visit"),
	ADD_PRESCRIPTION(38, "Add Prescription"),
	UPDATE_OFFICE_VISIT(39, "Update an Office Visit"),
	SEND_MESSAGE(40, "Send a Message"),
	VIEW_RENEWAL_NEEDS_PATIENTS(41, "View renewal needs patients"),
	SEND_REFERRAL(42, "Refer patient to hcp"),
	CREATE_DISABLE_ER(43, "Create/disable emergency responder"),
	TELEMEDICINE_MONITORING(45, "Telemedicine monitoring"),
	CREATE_DISABLE_PHA(47, "Create/disable public health agent"),
	DRUG_INTERACTION(48, "Drug Interaction"),
	ADVERSE_EVENT(49, "Adverse Event Report"),
	LOGIN_FAILURE(50, "Login Failure"),
	UPDATE_APPT_TYPE(51, "Update an Appointment Type"),
	ADD_APPT_TYPE(52, "Add an Appointment Type"),
	ADD_APPT(53, "Appointment Added"),
	SEND_REMINDERS(54, "Reminders Sent");


	
	// S1, S3, S5, S7, S8, S14, S16, S19, S21, S22.
	public static final String patientViewableStr = "1,3,5,7,8,14,16,19,21,22,30,39,45";
	public static final int[] patientViewable = { 1, 3, 5, 7, 8, 14, 16, 19, 21, 22, 30, 39, 45 };

	private TransactionType(int code, String description) {
		this.code = code;
		this.description = description;
	}

	private int code;
	private String description;

	public int getCode() {
		return code;
	}

	public String getDescription() {
		return description;
	}

	public static TransactionType parse(int code) {

		for (TransactionType type : TransactionType.values()) {
			if (type.code == code)
				return type;
		}
		throw new IllegalArgumentException("No transaction type exists for code " + code);
	}
}

package edu.ncsu.csc.itrust.enums;

/**
 * The iTrust user roles: Patient, ER, HCP, UAP, PHA, Administrator and Tester.
 * Consult the requirements for the contextual meanings of these individual choices.
 */
public enum Role {
	PATIENT("patient", "Patients"), 
	ER("er", "Personnel"), 
	HCP("hcp", "Personnel"), 
	UAP("uap", "Personnel"), 
	ADMIN("admin", "Personnel"),
	PHA("pha", "Personnel"),
	TESTER("tester", "");
	
	private String userRolesString;
	private String dbTable;

	Role(String userRolesString, String dbTable) {
		this.userRolesString = userRolesString;
		this.dbTable = dbTable;
	}

	public String getDBTable() {
		return dbTable;
	}

	public String getUserRolesString() {
		return userRolesString;
	}

	public static Role parse(String str) {
		for (Role role : values()) {
			if (role.userRolesString.equals(str))
				return role;
		}
		throw new IllegalArgumentException("Role " + str + " does not exist");
	}
}

package edu.ncsu.csc.itrust.enums;

/**
 * All of our wonderful states.
 * 
 * @author Andy
 * 
 */
public enum State {
	AL("Alabama"), AK("Alaska"), AZ("Arizona"), AR("Arkansas"), CA("California"), CO("Colorado"), CT(
			"Connecticut"), DE("Delaware"), DC("District of Columbia"), FL("Florida"), GA("Georgia"), HI(
			"Hawaii"), ID("Idaho"), IL("Illinois"), IN("Indiana"), IA("Iowa"), KS("Kansas"), KY("Kentucky"), LA(
			"Louisiana"), ME("Maine"), MD("Maryland"), MA("Massachusetts"), MI("Michigan"), MN("Minnesota"), MS(
			"Mississippi"), MO("Missouri"), MT("Montana"), NE("Nebraska"), NV("Nevada"), NH("New Hampshire"), NJ(
			"New Jersey"), NM("New Mexico"), NY("New York"), NC("North Carolina"), ND("North Dakota"), OH(
			"Ohio"), OK("Oklahoma"), OR("Oregon"), PA("Pennsylvania"), RI("Rhode Island"), SC(
			"South Carolina"), SD("South Dakota"), TN("Tennessee"), TX("Texas"), UT("Utah"), VT("Vermont"), VA(
			"Virginia"), WA("Washington"), WV("West Virginia"), WI("Wisconsin"), WY("Wyoming");
	private String name;

	private State(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public String getAbbrev() {
		return toString();
	}

	// Just to show that this is intentional
	@Override
	public String toString() {
		return super.toString();
	}

	public static State parse(String state) {
		State[] values = State.values();
		for (State myState : values) {
			if (myState.getName().equals(state) || myState.getAbbrev().equals(state))
				return myState;
		}
		return State.NC;
	}
}

package edu.ncsu.csc.itrust.enums;

/**
 * Every prescription that should be alerted for emergency reports - in the future, this should be abstracted
 * out to a database table so it can be changed at runtime.
 * 
 * @author Andy
 * 
 */
public enum PrescriptionAlerts {
	Tetracycline("Tetracycline", "009042407"), Prioglitazone("Prioglitazone", "647641512");

	private String name;
	private String NDCode;

	private PrescriptionAlerts(String rName, String rNDCode) {
		this.name = rName;
		this.NDCode = rNDCode;
	}

	public String getName() {
		return name;
	}

	public String getNDCode() {
		return this.NDCode;
	}

	public static boolean isAlert(String code) {
		for (PrescriptionAlerts thisone : values()) {
			if (thisone.getNDCode().equals(code))
				return true;
		}
		return false;
	}
}

package edu.ncsu.csc.itrust.dao;

import java.sql.Connection;
import java.sql.SQLException;

/**
 * Used by DAOFactory to abstract away different ways of getting our JDBC connection
 * 
 * @author Andy
 * 
 */
public interface IConnectionDriver {
	public Connection getConnection() throws SQLException;
}

package edu.ncsu.csc.itrust.dao;

import java.sql.Connection;
import java.sql.SQLException;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

/**
 * Produces the JDBC connection from Tomcat's JDBC connection pool (defined in context.xml). Produces and
 * exception when running the unit tests because they're not being run through Tomcat.
 * 
 * @author Andy
 * 
 */
public class ProductionConnectionDriver implements IConnectionDriver {
	public Connection getConnection() throws SQLException {
		try {
			return ((DataSource) (((Context) new InitialContext().lookup("java:comp/env")))
					.lookup("jdbc/itrust")).getConnection();
		} catch (NamingException e) {
			throw new SQLException(("Context Lookup Naming Exception: " + e.getMessage()));
		}
	}
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.ApptBean;
import edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;

public class ApptDAO {
	private DAOFactory factory;
	private ApptBeanLoader abloader;
	
	public ApptDAO(DAOFactory factory) {
		this.factory = factory;
		this.abloader = new ApptBeanLoader();
	}
	
	public List<ApptBean> getApptsFor(long mid) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		conn = factory.getConnection();
		
		if(mid >= (long) 999999999){
			ps = conn.prepareStatement("SELECT * FROM appointment WHERE doctor_id=? ORDER BY sched_date;");
		}
		else {
			ps = conn.prepareStatement("SELECT * FROM appointment WHERE patient_id=? ORDER BY sched_date;");
		}
		
		ps.setLong(1, mid);
		
		ResultSet rs = ps.executeQuery();
		List<ApptBean> abList = this.abloader.loadList(rs);
		DBUtil.closeConnection(conn, ps);
		return abList;
	}
	
	public List<ApptBean> getAllAppts() throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		conn = factory.getConnection();
		
		ps = conn.prepareStatement("SELECT * FROM appointment;");
		
		ResultSet rs = ps.executeQuery();
		List<ApptBean> abList = this.abloader.loadList(rs);
		DBUtil.closeConnection(conn, ps);
		return abList;
	}
	
	public void scheduleAppt(ApptBean appt) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		conn = factory.getConnection();
		
		ps = conn.prepareStatement(
				"INSERT INTO appointment (appt_type, patient_id, doctor_id, sched_date, comment) "
			  + "VALUES (?, ?, ?, ?, ?)");
		ps = this.abloader.loadParameters(ps, appt);
		
		ps.executeUpdate();
		
		DBUtil.closeConnection(conn, ps);
	}
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.FamilyMemberBean;
import edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Used for queries related to families.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class FamilyDAO {
	private DAOFactory factory;
	private FamilyBeanLoader familyBeanLoader;

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public FamilyDAO(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Return the information of the mother and father of this patient
	 * 
	 * @param pid -
	 *            this patient
	 * @return
	 * @throws DBException
	 */
	public List<FamilyMemberBean> getParents(long pid) throws DBException {
		return getFamilyMembers(pid, "Parent",
				"SELECT p2.FirstName AS FirstName, p2.LastName AS LastName, p2.MID as MID "
						+ "FROM Patients p1, Patients p2 "
						+ "WHERE p1.MID=? AND (p1.MotherMID=p2.MID OR p1.FatherMID=p2.MID)", false);
	}

	/**
	 * Return a list of patients who share at least one parent (and that parent is not '0') with this patient
	 * 
	 * @param pid -
	 *            this patient
	 * @return A java.util.list of FamilyMemberBeans.
	 * @throws DBException
	 */
	public List<FamilyMemberBean> getSiblings(long pid) throws DBException {
		return getFamilyMembers(pid, "Sibling",
				"SELECT p2.FirstName AS FirstName, p2.LastName AS LastName, p2.MID as MID "
						+ "FROM Patients p1, Patients p2 " + "WHERE p1.MID=? AND p1.MID<>p2.MID "
						+ "AND( (p1.MotherMID=p2.MotherMID AND p2.MotherMID<>0)"
						+ "  OR (p1.FatherMID=p2.FatherMID AND p1.FatherMID<>0))", false);
	}

	/**
	 * Return a list of patients whose mother or father is this patient
	 * 
	 * @param pid -
	 *            this patient
	 * @return A java.util.List of FamilyMemberBeans.
	 * @throws DBException
	 */
	public List<FamilyMemberBean> getChildren(long pid) throws DBException {
		return getFamilyMembers(pid, "Child", "SELECT FirstName, LastName, MID FROM Patients "
				+ "WHERE MotherMID=? or FatherMID=?", true);
	}

	/**
	 * Private helper method (since all three are alike)
	 * 
	 * @param pid
	 * @param relation
	 * @param query
	 * @param secondParam -
	 *            add the pid as the second parameter (the 3rd query was a little different)
	 * 
	 * @return A java.util.List of FamilyMemberBeans.
	 * @throws DBException
	 */
	private List<FamilyMemberBean> getFamilyMembers(long pid, String relation, String query,
			boolean secondParam) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		familyBeanLoader = new FamilyBeanLoader(relation);
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement(query);
			ps.setLong(1, pid);
			if (secondParam)
				ps.setLong(2, pid);
			ResultSet rs = ps.executeQuery();
			return familyBeanLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.HealthRecord;
import edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Used for all health records where a whole history is kept.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class HealthRecordsDAO {
	private HealthRecordsBeanLoader loader = new HealthRecordsBeanLoader();
	private DAOFactory factory;

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public HealthRecordsDAO(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Returns a list of all health records for a particular patient
	 * 
	 * @param mid The MID of the patient to look up.
	 * @return A java.util.List of HealthRecords.
	 * @throws DBException
	 */
	public List<HealthRecord> getAllHealthRecords(long mid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM PersonalHealthInformation "
					+ "WHERE PatientID=? ORDER BY ASOFDATE DESC");
			ps.setLong(1, mid);
			ResultSet rs;
			rs = ps.executeQuery();
			return loader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Adds a health record for a particular patient
	 * 
	 * @param record The HealthRecord object to insert.
	 * @return A boolean indicating whether the insert was successful.
	 * @throws DBException
	 */
	public boolean add(HealthRecord record) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO PersonalHealthInformation(PatientID,Height,Weight,"
					+ "Smoker,BloodPressureN,BloodPressureD,CholesterolHDL,CholesterolLDL,CholesterolTri,"
					+ "HCPID) VALUES(?,?,?,?,?,?,?,?,?,?)");
			loader.loadParameters(ps, record);
			int numInserted = ps.executeUpdate();
			return (numInserted == 1);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * AccessDAO is for all queries related to authorization.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * 
 * @author Andy
 * 
 */
public class AccessDAO {
	private DAOFactory factory;

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public AccessDAO(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Returns the number of minutes it would take for a session to time out. This is done by effectively
	 * using the database table as a hash table. If a row in GlobalVariables does not exist, one is inserted
	 * with the default value '20'.
	 * 
	 * @return An int for the number of minutes.
	 * @throws DBException
	 */
	public int getSessionTimeoutMins() throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT Value FROM GlobalVariables WHERE Name='Timeout'");
			ResultSet rs = ps.executeQuery();
			if (rs.next())
				return rs.getInt("Value");
			else {
				insertDefaultTimeout(conn, 20);
				return 20;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Sets the number of minutes it would take for a session to timeout.
	 * 
	 * @param mins An int specifying the number of minutes
	 * @throws DBException
	 */
	public void setSessionTimeoutMins(int mins) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE GlobalVariables SET Value=? WHERE Name='Timeout'");
			ps.setInt(1, mins);
			int numUpdated = ps.executeUpdate();
			if (numUpdated == 0) // no value in the table
				insertDefaultTimeout(conn, mins);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	private void insertDefaultTimeout(Connection conn, int mins) throws SQLException {
		PreparedStatement ps = null;
		ps = conn.prepareStatement("INSERT INTO GlobalVariables(Name,Value) VALUES ('Timeout', ?)");
		ps.setInt(1, mins);
		ps.executeUpdate();
	}
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.LOINCbean;
import edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * Logical Observation Identifiers Names and Codes (LOINC) is a database and universal
 *  standard for identifying medical laboratory observations. 
 *  
 * @see http://loinc.org/
 * @author Ben Smith
 */
public class LOINCDAO {
	private DAOFactory factory;
	private LOINCBeanLoader LOINCLoader;

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public LOINCDAO(DAOFactory factory) {
		this.factory = factory;
		LOINCLoader = new LOINCBeanLoader();
	}
	
	/**
	 * Adds a LOINC
	 * 
	 * @param hosp The LOINCbean representing the new code to be added.
	 * @throws DBException
	 * @throws iTrustException
	 */
	public void addLOINC(LOINCbean hosp) throws DBException, iTrustException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO LOINC (LaboratoryProcedureCode, Component, KindOfProperty, TimeAspect, System, ScaleType, MethodType) " + "VALUES (?,?,?,?,?,?,?)");
			ps.setString(1, hosp.getLabProcedureCode());
			ps.setString(2, hosp.getComponent());
			ps.setString(3, hosp.getKindOfProperty());
			ps.setString(4, hosp.getTimeAspect());
			ps.setString(5, hosp.getSystem());
			ps.setString(6, hosp.getScaleType());
			ps.setString(7, hosp.getMethodType());
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			if (1062 == e.getErrorCode())
				throw new iTrustException("Error: LOINC already exists.");
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}	

	/**
	 * Returns all LOINCs associated with LaboratoryProcedureCode
	 * 
	 * @param visitID The code of the Laboratory Procedure Code as a String.
	 * @return A java.util.List of LOINCBeans matching the Laboratory Procedure Code.
	 * @throws DBException
	 */
	public List<LOINCbean> getProcedures(String visitID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("Select * From LOINC Where LaboratoryProcedureCode = ? ");
			ps.setString(1, visitID);
			ResultSet rs = ps.executeQuery();
			return LOINCLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	
	/**
	 * Updates the information in LOINC.
	 * 
	 * @param ov
	 * @throws DBException
	 */
	public int update(LOINCbean ov) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE LOINC SET Component=?, KindOfProperty=?, TimeAspect=?, System=?, ScaleType=?, MethodType=? WHERE LaboratoryProcedureCode=?");
			ps.setString(1, ov.getComponent());
			ps.setString(2, ov.getKindOfProperty());
			ps.setString(3, ov.getTimeAspect());
			ps.setString(4, ov.getSystem());
			ps.setString(5, ov.getScaleType());
			ps.setString(6, ov.getMethodType());
			ps.setString(7, ov.getLabProcedureCode());
			return ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Returns all LOINCs as a list.
	 * 
	 * @return A java.util.List of LOINCbeans.
	 * @throws DBException
	 */
	public List<LOINCbean> getAllLOINC() throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
			try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM LOINC");
			ResultSet rs = ps.executeQuery();
			return LOINCLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}


}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class FakeEmailDAO {
	private DAOFactory factory;
	private EmailBeanLoader emailBeanLoader = new EmailBeanLoader();

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public FakeEmailDAO(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Return all emails that have been "sent" (inserted into the database)
	 * 
	 * @return A java.util.List of Email objects representing fake e-mails.
	 * @throws DBException
	 */
	public List<Email> getAllEmails() throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM FakeEmail ORDER BY AddedDate DESC");
			ResultSet rs = ps.executeQuery();
			return emailBeanLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Return all emails that a person has sent
	 * 
	 * @param email The "From" email address as a string.
	 * @return A java.util.List of fake emails.
	 * @throws DBException
	 */
	public List<Email> getEmailsByPerson(String email) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM FakeEmail WHERE ToAddr LIKE ? ORDER BY AddedDate DESC");
			ps.setString(1, "%" + email + "%");
			ResultSet rs = ps.executeQuery();
			return emailBeanLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * "Send" an email, which just inserts it into the database.
	 * 
	 * @param email The Email object to insert.
	 * @throws DBException
	 */
	public void sendEmailRecord(Email email) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO FakeEmail (ToAddr, FromAddr, Subject, Body) "
					+ "VALUES (?,?,?,?)");
			emailBeanLoader.loadParameters(ps, email);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns a list of emails that have the given string as a substring of the body
	 * @param string The string to search within the body.
	 * @return A java.util.List of fake emails.
	 * @throws DBException 
	 */
	public List<Email> getEmailWithBody(String bodySubstring) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM FakeEmail WHERE Instr(Body,?)>0 ORDER BY AddedDate DESC");
			ps.setString(1, bodySubstring);
			ResultSet rs = ps.executeQuery();
			return emailBeanLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.RandomPassword;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * AuthDAO is for anything that has to do with authentication. Most methods access the users table.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class AuthDAO {
	public static final long LOGIN_TIMEOUT = 15 * 60 * 1000;// 15 min
	private DAOFactory factory;

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public AuthDAO(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Add a particular user to the system. Does not add user-specific information (e.g. Patient or HCP).
	 * Initially sets security question to a random set of characters, so that nobody should be able to guess
	 * its value.
	 * 
	 * @param mid The user's MID as a Long.
	 * @param role The role of the user as a Role enum {@link Role}
	 * @param password The password for the new user.
	 * @return A string representing the newly added randomly-generated password. 
	 * @throws DBException
	 */
	public String addUser(Long mid, Role role, String password) throws DBException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			conn = factory.getConnection();
			pstmt = conn
					.prepareStatement("INSERT INTO Users (MID, PASSWORD, ROLE, sQuestion, sAnswer) VALUES (?,?,?,?,?)");
			pstmt.setLong(1, mid);
			pstmt.setString(2, password);
			pstmt.setString(3, role.toString());
			pstmt.setString(4, "Enter the random password given in your account email");
			String pwd = RandomPassword.getRandomPassword();
			pstmt.setString(5, pwd);
			pstmt.executeUpdate();
			return pwd;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, pstmt);
		}
	}

	/**
	 * Reset the security question and answer for a particular user
	 * 
	 * @param question The security question as a string.
	 * @param answer The security answer as a string.
	 * @param mid The MID of the user as a long.
	 * @throws DBException
	 */
	public void setSecurityQuestionAnswer(String question, String answer, long mid) throws DBException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			conn = factory.getConnection();
			pstmt = conn.prepareStatement("UPDATE Users SET sQuestion = ?, sAnswer = ? WHERE MID = ?");
			pstmt.setString(1, question);
			pstmt.setString(2, answer);
			pstmt.setLong(3, mid);
			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, pstmt);
		}
	}

	/**
	 * Returns the user name of a user from just the MID
	 * 
	 * @param mid The MID of the user to get the name of.
	 * @return The user's name as a String.
	 * @throws DBException
	 * @throws iTrustException
	 */
	public String getUserName(long mid) throws DBException, iTrustException {
		Role role = getUserRole(mid);
		switch (role) {
			case HCP:
			case PHA:
			case ADMIN:
			case UAP:
			case ER:
				return factory.getPersonnelDAO().getName(mid);
			case PATIENT:
				return factory.getPatientDAO().getName(mid);
			case TESTER:
				return String.valueOf(mid);
			default:
				throw new iTrustException("Role " + role + " not supported");
		}
	}

	/**
	 * Returns the role of a particular MID
	 * 
	 * @param mid The MID of the user to look up.
	 * @return The {@link Role} of the user as an enum.
	 * @throws DBException
	 * @throws iTrustException
	 */
	public Role getUserRole(long mid) throws DBException, iTrustException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			conn = factory.getConnection();
			pstmt = conn.prepareStatement("SELECT role FROM Users WHERE MID=?");
			pstmt.setLong(1, mid);
			ResultSet rs;
			rs = pstmt.executeQuery();
			if (rs.next()) {
				return Role.parse(rs.getString("role"));
			} else {
				throw new iTrustException("User does not exist");
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, pstmt);
		}
	}

	/**
	 * Change the password of a particular user
	 * 
	 * @param mid The MID of the user whose password we are changing.
	 * @param password The new password.
	 * @throws DBException
	 */
	public void resetPassword(long mid, String password) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE Users SET password=? WHERE MID=?");
			ps.setString(1, password);
			ps.setLong(2, mid);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Return the security question for a particular user.
	 * 
	 * @param mid The MID of the user we are looking up.
	 * @return The security question of the user we are looking up.
	 * @throws iTrustException
	 */
	public String getSecurityQuestion(long mid) throws iTrustException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT sQuestion FROM Users WHERE MID=?");
			ps.setLong(1, mid);
			ResultSet r = ps.executeQuery();
			if (r.next())
				return r.getString("sQuestion");
			else
				throw new iTrustException("No security question set for MID: " + mid);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Return the security answer of a particular user
	 * 
	 * @param mid The MID of the user we are looking up.
	 * @return The security answer as a String.
	 * @throws iTrustException
	 */
	public String getSecurityAnswer(long mid) throws iTrustException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT sAnswer FROM Users WHERE MID=?");
			ps.setLong(1, mid);
			ResultSet r = ps.executeQuery();
			if (r.next())
				return r.getString("sAnswer");
			else
				throw new iTrustException("No security answer set for MID " + mid);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Record a login failure, which blacklists the ipAddress. Uses the database table like a hash table where
	 * the key is the user's IP address. If the user's IP address is not in the table, a row with "1" is
	 * added.
	 * 
	 * @param ipAddr The IP address of the user as a String.
	 * @throws DBException
	 */
	public void recordLoginFailure(String ipAddr) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn
					.prepareStatement("UPDATE LoginFailures SET FailureCount=FailureCount+1, lastFailure=CURRENT_TIMESTAMP WHERE IPAddress=?");
					//.prepareStatement("INSERT INTO LoginFailures VALUES(?,?,?)");
			ps.setString(1, ipAddr);
			//ps.setInt(2, failures);
			//ps.setDate(3, Calendar.getInstance().getTime());
			int numUpdated = ps.executeUpdate();
			if (numUpdated == 0) // if there wasn't an empty row to begin with
				insertLoginFailureRow(ipAddr, 1, conn);// now they have a row AND a strike against
			// 'em
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Record a reset password failure, which blacklists the ipAddress. Uses the database table like a hash
	 * table where the key is the user's IP address. If the user's IP address is not in the table, a row with
	 * "1" is added.
	 * 
	 * @param ipAddr The IP address of the user as a String.
	 * @throws DBException
	 */
	public void recordResetPasswordFailure(String ipAddr) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn
					.prepareStatement("UPDATE ResetPasswordFailures SET failurecount=failurecount+1 WHERE ipaddress=?");
			ps.setString(1, ipAddr);
			int numUpdated = ps.executeUpdate();
			if (numUpdated == 0) // if there wasn't an empty row to begin with
				insertResetPasswordRow(ipAddr, 1, conn);// now they have a row AND a strike against
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Return the number of failures from resetting a password, given an IP address.
	 * 
	 * @param ipAddr An IP address for the associated attempt as a String.
	 * @return An int representing the number of failures.
	 * @throws DBException
	 */
	public int getResetPasswordFailures(String ipAddr) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM ResetPasswordFailures WHERE IPADDRESS=?");
			ps.setString(1, ipAddr);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				// if we're more than X minutes out, clear the failure count
				if (System.currentTimeMillis() - rs.getTimestamp("lastFailure").getTime() > LOGIN_TIMEOUT) {
					updateResetFailuresToZero(ipAddr, conn);
					return 0;
				} else {
					return rs.getInt("failureCount");
				}
			} else {
				insertResetPasswordRow(ipAddr, 0, conn);
				return 0;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Return the number of failures from login failures a password, given an IP address.
	 * 
	 * @param ipAddr The IP address for this attempt as a String.
	 * @return An int representing the number of failures which have occured.
	 * @throws DBException
	 */
	public int getLoginFailures(String ipAddr) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM LoginFailures WHERE IPADDRESS=?");
			ps.setString(1, ipAddr);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				// if we're more than X minutes out, clear the failure count
				if (System.currentTimeMillis() - rs.getTimestamp("lastFailure").getTime() > LOGIN_TIMEOUT) {
					updateFailuresToZero(ipAddr, conn);
					return 0;
				} else {
					return rs.getInt("failureCount");
				}
			} else {
				insertLoginFailureRow(ipAddr, 0, conn);
				return 0;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	private void insertLoginFailureRow(String ipAddr, int failureCount, Connection conn) throws DBException,
			SQLException {
		PreparedStatement ps = conn
				.prepareStatement("INSERT INTO LoginFailures(IPAddress, failureCount) VALUES(?,?)");
		ps.setString(1, ipAddr);
		ps.setInt(2, failureCount);
		ps.executeUpdate();
	}

	private void insertResetPasswordRow(String ipAddr, int failureCount, Connection conn) throws DBException,
			SQLException {
		PreparedStatement ps = conn
				.prepareStatement("INSERT INTO ResetPasswordFailures(IPAddress, failureCount) VALUES(?,?)");
		ps.setString(1, ipAddr);
		ps.setInt(2, failureCount);
		ps.executeUpdate();
	}

	private void updateFailuresToZero(String ipAddr, Connection conn) throws DBException, SQLException {
		PreparedStatement ps = conn
				.prepareStatement("UPDATE LoginFailures SET failureCount=0 WHERE IPAddress=?");
		ps.setString(1, ipAddr);
		ps.executeUpdate();
	}
	
	public void resetLoginFailuresToZero(String ipAddr) throws DBException, SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		try{
			conn = factory.getConnection();
			ps = conn
					.prepareStatement("UPDATE LoginFailures SET failureCount=0 WHERE IPAddress=?");
			ps.setString(1, ipAddr);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	private void updateResetFailuresToZero(String ipAddr, Connection conn) throws DBException, SQLException {
		PreparedStatement ps = conn
				.prepareStatement("UPDATE ResetPasswordFailures SET failureCount=0 WHERE IPAddress=?");
		ps.setString(1, ipAddr);
		ps.executeUpdate();
	}

	/**
	 * Check that a user actually exists.
	 * 
	 * @param mid
	 * @return
	 * @throws DBException
	 */
	public boolean checkUserExists(long mid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM Users WHERE MID=?");
			ps.setLong(1, mid);
			ResultSet rs = ps.executeQuery();
			return rs.next();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.ReportRequestBean;
import edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Used for handling data related to report requests.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 */
public class ReportRequestDAO {
	private DAOFactory factory;
	private ReportRequestBeanLoader loader;

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public ReportRequestDAO(DAOFactory factory) {
		this.factory = factory;
		loader = new ReportRequestBeanLoader();
	}
	
	/**
	 * Returns a full bean describing a given report request.
	 * 
	 * @param id The unique ID of the bean in the database.
	 * @return The bean describing this report request.
	 * @throws DBException
	 */
	public ReportRequestBean getReportRequest(long id) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			if (id == 0L) throw new SQLException("ID cannot be null");
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM ReportRequests WHERE ID = ?");
			ps.setLong(1, id);
			ResultSet rs = ps.executeQuery();
			rs.next();
			return loader.loadSingle(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Returns all report requests associated with a given requester.
	 * 
	 * @param mid The MID of the personnel in question.
	 * @return A java.util.List of report requests.
	 * @throws DBException
	 */
	public List<ReportRequestBean> getAllReportRequestsForRequester(long mid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;

		try {
			if (mid == 0L) throw new SQLException("RequesterMID cannot be null");
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM ReportRequests WHERE RequesterMID = ?");
			ps.setLong(1, mid);
			ResultSet rs = ps.executeQuery();
			return loader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns all of the report requests associated with a specific patient.
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of report requests.
	 * @throws DBException
	 */
	public List<ReportRequestBean> getAllReportRequestsForPatient(long pid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;

		try {
			if (pid == 0L) throw new SQLException("PatientMID cannot be null");
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM ReportRequests WHERE PatientMID = ?");
			ps.setLong(1, pid);
			ResultSet rs = ps.executeQuery();
			return loader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
//	/**
//	 * Returns every report request in the database.
//	 * @return A java.util.List of report requests.
//	 * @throws DBException
//	 */
//	public List<ReportRequestBean> getAllReportRequests() throws DBException {
//		Connection conn = null;
//		PreparedStatement ps = null;
//
//		try {
//			conn = factory.getConnection();
//			ps = conn.prepareStatement("SELECT * FROM ReportRequests");
//			ResultSet rs = ps.executeQuery();
//			return loader.loadList(rs);
//		} catch (SQLException e) {
//			e.printStackTrace();
//			throw new DBException(e);
//		} finally {
//			DBUtil.closeConnection(conn, ps);
//		}
//	}
	
	/**
	 * Adds a request for a report.
	 * 
	 * @param requesterMID The MID of the requester.
	 * @param patientMID The MID of the patient in question.
	 * @param date The date the request was made.
	 * @return A long of the unique ID of the report request.
	 * @throws DBException
	 */
	public long addReportRequest(long requesterMID, long patientMID, Date date) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			if (requesterMID == 0L) throw new SQLException("RequesterMID cannot be null");
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO ReportRequests (ID, RequesterMID, PatientMID, RequestedDate, Status) VALUES (null,?,?,?,'Requested')");
			ps.setLong(1, requesterMID);
			ps.setLong(2, patientMID);
			ps.setTimestamp(3, new java.sql.Timestamp(date.getTime()));
			ps.executeUpdate();
			return DBUtil.getLastInsert(conn);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
//	/**
//	 * Sets the status of a request to 'Approved'
//	 * 
//	 * @param ID The unique ID of the report.
//	 * @param approverMID The MID of the person approving the request.
//	 * @param date The date the approval was made.
//	 * @throws DBException
//	 */
//	public void approveReportRequest(long ID, long approverMID, Date date) throws DBException {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		try {
//			if (ID == 0L) throw new SQLException("ID cannot be null");
//			conn = factory.getConnection();
//			ps = conn.prepareStatement("UPDATE ReportRequests set ApproverMID = ?, ApprovedDate = ?, Status = 'Approved' where ID = ?");
//			ps.setLong(1, approverMID);
//			ps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));
//			ps.setLong(3, ID);
//			ps.executeUpdate();
//		} catch (SQLException e) {
//			e.printStackTrace();
//			throw new DBException(e);
//		} finally {
//			DBUtil.closeConnection(conn, ps);
//		}
//	}
//
//	/**
//	 * Sets the status of a report request to 'Rejected'
//	 * 
//	 * @param ID The unique ID of the request in question.
//	 * @param approverMID The MID of the rejecter in question.
//	 * @param date The date the rejection was made.
//	 * @param comment A comment describing why the request was rejected.
//	 * @throws DBException
//	 */
//	public void rejectReportRequest(long ID, long approverMID, Date date, String comment) throws DBException {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		try {
//			if (ID == 0L) throw new SQLException("ID cannot be null");
//			conn = factory.getConnection();
//			ps = conn.prepareStatement("UPDATE ReportRequests set ApproverMID = ?, ApprovedDate = ?, Status = 'Rejected', comment = ? where ID = ?");
//			ps.setLong(1, approverMID);
//			ps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));
//			ps.setString(3, comment);
//			ps.setLong(4, ID);
//			ps.executeUpdate();
//		} catch (SQLException e) {
//			e.printStackTrace();
//			throw new DBException(e);
//		} finally {
//			DBUtil.closeConnection(conn, ps);
//		}
//	}
	
	/**
	 * Sets the status of a report request to 'Viewed'
	 * 
	 * @param ID The unique ID of the request in question.
	 * @param date The date the request was viewed.
	 * @throws DBException
	 */
	public void setViewed(long ID, Date date) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			if (ID == 0L) throw new SQLException("ID cannot be null");
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE ReportRequests set ViewedDate = ?, Status = 'Viewed' where ID = ?");
			ps.setTimestamp(1, new java.sql.Timestamp(date.getTime()));
			ps.setLong(2, ID);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
		
	}

}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.DrugInteractionBean;
import edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Used for managing drug interactions.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm
 * @author Andy
 * 
 */
public class DrugInteractionDAO {
	private DAOFactory factory;
	private DrugInteractionBeanLoader interactionLoader;
	
	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public DrugInteractionDAO(DAOFactory factory) {
		this.factory = factory;
		interactionLoader = new DrugInteractionBeanLoader();
	}
	
	/**
	 * Returns a list of all drug interactions for the input drug name
	 * 
	 * @return A java.util.List of DrugInteractionBeans.
	 * @throws DBException
	 */
	public List<DrugInteractionBean> getInteractions(String drugCode) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM druginteractions WHERE FirstDrug = ? OR SecondDrug = ?");
			ps.setString(1, drugCode);
			ps.setString(2, drugCode);
			ResultSet rs = ps.executeQuery();
			return interactionLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Adds a new drug interaction, returns whether or not the addition was successful. If the code already exists, an
	 * iTrustException is thrown.
	 * 
	 * @param firstDrug  The name of the first drug in an interaction.
	 * @param secondDrug  The name of the second drug in an interaction.
	 * @param description  Explanation of the drug interaction.
	 * @return A boolean indicating success or failure.
	 * @throws DBException
	 * @throws iTrustException
	 */
	public boolean reportInteraction(String firstDrug, String secondDrug, String description) throws DBException, iTrustException {
		if(firstDrug.equals(secondDrug)) throw new iTrustException("Drug cannot interact with itself.");
		
		List<DrugInteractionBean> currentIntsDrug2 = getInteractions(secondDrug);
		for(DrugInteractionBean dib : currentIntsDrug2){
			if(dib.getSecondDrug().equals(firstDrug)){
				throw new iTrustException("Error: Interaction between these drugs already exists.");
			}
		}
		
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO druginteractions (FirstDrug, SecondDrug, Description) " + "VALUES (?,?,?)");
			ps.setString(1, firstDrug);
			ps.setString(2, secondDrug);
			ps.setString(3, description);
			return (1 == ps.executeUpdate());
		} catch (SQLException e) {
			e.printStackTrace();
			if (1062 == e.getErrorCode())
				throw new iTrustException("Error: Interaction between these drugs already exists.");
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Remove an interaction from the database
	 * 
	 * @param firstDrug  The name of the first patient
	 * @param secondDrug  The name of the second patient
	 * @return true if removed successfully, false if not in list
	 */
	public boolean deleteInteraction(String firstDrug,String secondDrug) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("DELETE FROM druginteractions WHERE (FirstDrug = ? OR SecondDrug = ?) AND (FirstDrug = ? OR SecondDrug = ?)");
			ps.setString(1, firstDrug);
			ps.setString(2, firstDrug);
			ps.setString(3, secondDrug);
			ps.setString(4, secondDrug);
			if(ps.executeUpdate() == 0)
				return false;
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Date;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.OperationalProfile;
import edu.ncsu.csc.itrust.beans.TransactionBean;
import edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader;
import edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Used for the logging mechanism.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class TransactionDAO {
	private DAOFactory factory;
	private TransactionBeanLoader loader = new TransactionBeanLoader();
	private OperationalProfileLoader operationalProfileLoader = new OperationalProfileLoader();

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public TransactionDAO(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Returns the whole transaction log
	 * 
	 * @return
	 * @throws DBException
	 */
	public List<TransactionBean> getAllTransactions() throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM TransactionLog ORDER BY timeLogged DESC");
			ResultSet rs = ps.executeQuery();
			return loader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Log a transaction, just giving it the person who is logged in and the type
	 * 
	 * @param type The {@link TransactionType} enum representing the type this transaction is.
	 * @param loggedInMID The MID of the user who is logged in.
	 * @throws DBException
	 */
	public void logTransaction(TransactionType type, long loggedInMID) throws DBException {
		logTransaction(type, loggedInMID, 0L, "");
	}

	/**
	 * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on
	 * the transaction type.
	 * 
	 * @param type The {@link TransactionType} enum representing the type this transaction is.
	 * @param loggedInMID The MID of the user who is logged in.
	 * @param secondaryMID Typically, the MID of the user who is being acted upon.
	 * @param addedInfo A note about a subtransaction, or specifics of this transaction (for posterity).
	 * @throws DBException
	 */
	public void logTransaction(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo)
			throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO TransactionLog(loggedInMID, secondaryMID, "
					+ "transactionCode, addedInfo) VALUES(?,?,?,?)");
			ps.setLong(1, loggedInMID);
			ps.setLong(2, secondaryMID);
			ps.setInt(3, type.getCode());
			ps.setString(4, addedInfo);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Return a list of all transactions in which an HCP accessed the given patient's record
	 * 
	 * @param patientID The MID of the patient in question.
	 * @return A java.util.List of transactions.
	 * @throws DBException
	 */
	public List<TransactionBean> getAllRecordAccesses(long patientID, boolean getByRole) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;

		try {
			conn = factory.getConnection();
			ps = conn
					.prepareStatement("SELECT * FROM TransactionLog WHERE secondaryMID=? AND transactionCode "
							+ "IN(" + TransactionType.patientViewableStr + ") ORDER BY timeLogged DESC");
			ps.setLong(1, patientID);
			ResultSet rs = ps.executeQuery();
			List<TransactionBean> tbList = loader.loadList(rs);

			tbList = addAndSortRoles(tbList, patientID, getByRole);
			
			return tbList;
			
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * The Most Thorough Fetch 
	 * @param loggedInRole Role of loggedIn
	 * @param secondaryRole Role of secondary
	 * @param begin Beginning of date range
	 * @param end End of date range
	 * @param type Type of transaction
	 * @return
	 * @throws DBException
	 */
	public List<TransactionBean> getTransactionsFor(String loggedInRole, String secondaryRole, Date begin, Date end, TransactionType type) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;

		try {
			conn = factory.getConnection();
			
			
			
			if(loggedInRole.compareTo("any") == 0) {
				loggedInRole = "*";
			}
			if(secondaryRole.compareTo("any") == 0) {
				secondaryRole = "*";
			}
			
			ps = conn
					.prepareStatement("SELECT * FROM TransactionLog, Users  WHERE (MID=loggedInMID OR MID=secondaryMID) AND (Role=? OR Role=?) "
							+ " AND transactionCode=? AND timeLogged >= ? AND timeLogged <= ?" + " ORDER BY timeLogged DESC");
			ps.setString(1, loggedInRole);
			ps.setString(2, secondaryRole);
			ps.setInt(3, type.getCode());
			ps.setDate(4, begin);
			ps.setDate(5, end);
			ResultSet rs = ps.executeQuery();
			List<TransactionBean> tbList = loader.loadList(rs);

			//tbList = addAndSortRoles(tbList, patientID, getByRole);
			
			return tbList;
			
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Return a list of all transactions in which an HCP accessed the given patient's record, within the dates
	 * 
	 * @param patientID The MID of the patient in question.
	 * @param lower The starting date as a java.util.Date
	 * @param upper The ending date as a java.util.Date
	 * @return A java.util.List of transactions.
	 * @throws DBException
	 */
	public List<TransactionBean> getRecordAccesses(long patientID, java.util.Date lower, java.util.Date upper, boolean getByRole) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn
					.prepareStatement("SELECT * FROM TransactionLog WHERE secondaryMID=? AND transactionCode IN ("
							+ TransactionType.patientViewableStr
							+ ") "
							+ "AND timeLogged >= ? AND timeLogged <= ? ORDER BY timeLogged DESC");
			ps.setLong(1, patientID);
			ps.setTimestamp(2, new Timestamp(lower.getTime()));
			// add 1 day's worth to include the upper
			ps.setTimestamp(3, new Timestamp(upper.getTime() + 1000L * 60L * 60 * 24L));
			ResultSet rs = ps.executeQuery();
			List<TransactionBean> tbList = loader.loadList(rs);

			tbList = addAndSortRoles(tbList, patientID, getByRole);
			
			return tbList;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns the operation profile
	 * 
	 * @return The OperationalProfile as a bean.
	 * @throws DBException
	 */
	public OperationalProfile getOperationalProfile() throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT TransactionCode, count(transactionID) as TotalCount, "
					+ "count(if(loggedInMID<9000000000, transactionID, null)) as PatientCount, "
					+ "count(if(loggedInMID>=9000000000, transactionID, null)) as PersonnelCount "
					+ "FROM TransactionLog GROUP BY transactionCode ORDER BY transactionCode ASC");
			ResultSet rs = ps.executeQuery();
			return operationalProfileLoader.loadSingle(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * 
	 * @param tbList
	 * @param patientID
	 * @param sortByRole
	 * @return
	 * @throws DBException
	 */
	private List<TransactionBean> addAndSortRoles(List<TransactionBean> tbList, long patientID, boolean sortByRole) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		
		try {
			conn = factory.getConnection();
			
			for(TransactionBean t : tbList) {
				
				ps = conn
						.prepareStatement("SELECT Role FROM Users WHERE MID=?");
				ps.setLong(1, t.getLoggedInMID());
				ResultSet rs = ps.executeQuery();
				String role = "";
				if(rs.next())
					role = rs.getString("Role");
				if(role.equals("er"))
					role = "Emergency Responder";
				else if(role.equals("uap"))
					role = "UAP";
				else if(role.equals("hcp")) {
					role = "LHCP";
					ps = conn
							.prepareStatement("SELECT PatientID FROM DeclaredHCP WHERE HCPID=?");
					ps.setLong(1, t.getLoggedInMID());
					ResultSet rs2 = ps.executeQuery();
					while(rs2.next()) {
						if (rs2.getLong("PatientID") == patientID){
							role = "DLHCP";
							break;
						}
					}
				}
				else if(role.equals("patient")){
					role = "Patient";
					ps = conn
							.prepareStatement("SELECT representeeMID FROM Representatives WHERE representerMID=?");
					ps.setLong(1, t.getLoggedInMID());
					ResultSet rs2 = ps.executeQuery();
					while(rs2.next()) {
						if (rs2.getLong("representeeMID") == patientID){
							role = "Personal Health Representative";
							break;
						}
					}
				}
					
				t.setRole(role);
				
			}
			
			if(sortByRole){
				TransactionBean[] array = new TransactionBean[tbList.size()];
				array[0] = tbList.get(0);
				TransactionBean t;
				for(int i = 1; i < tbList.size(); i++) {
					t = tbList.get(i);
					String role = t.getRole();
					int j = 0;
					while(array[j] != null && role.compareToIgnoreCase(array[j].getRole()) >= 0)
						j++;
					for(int k = i; k > j; k--) {
						array[k] = array[k-1];
					}
					array[j] = t;
				}
				int size = tbList.size();
				for(int i = 0; i < size; i++)
					tbList.set(i, array[i]);
				
			}
		
			return tbList;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Used for managing all ICD codes.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * The International Statistical Classification of Diseases and Related Health Problems 
 * (most commonly known by the abbreviation ICD) provides codes to classify diseases and a 
 * wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and 
 * external causes of injury or disease. 
 * 
 * @see http://www.cdc.gov/nchs/icd9.htm
 * @author Andy
 * 
 */
public class ICDCodesDAO {
	private DAOFactory factory;
	private DiagnosisBeanLoader diagnosisLoader = new DiagnosisBeanLoader();

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public ICDCodesDAO(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Returns all ICD9CM codes sorted by code
	 * 
	 * @return java.util.List of DiagnosisBeans
	 * @throws DBException
	 */
	public List<DiagnosisBean> getAllICDCodes() throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM ICDCodes ORDER BY CODE");
			ResultSet rs = ps.executeQuery();
			return diagnosisLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns a particular description for a given code
	 * 
	 * @param code The String representation of the code.
	 * @return A DiagnosisBean of the code.
	 * @throws DBException
	 */
	public DiagnosisBean getICDCode(String code) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM ICDCodes WHERE Code = ?");
			ps.setString(1, code);
			ResultSet rs = ps.executeQuery();
			if (rs.next())
				return diagnosisLoader.loadSingle(rs);
			return null;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Adds an ICD9CM code. Returns whether or not the change was made.
	 * 
	 * @param diag The DiagnosisBean representing the changes.
	 * @return A boolean indicating success.
	 * @throws DBException
	 * @throws iTrustException
	 */
	public boolean addICDCode(DiagnosisBean diag) throws DBException, iTrustException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO ICDCodes (Code, Description, Chronic) " + "VALUES (?,?,?)");
			ps.setString(1, diag.getICDCode());
			ps.setString(2, diag.getDescription());
			ps.setString(3, diag.getClassification());
			return (1 == ps.executeUpdate());
		} catch (SQLException e) {
			e.printStackTrace();
			if (1062 == e.getErrorCode())
				throw new iTrustException("Error: Code already exists.");
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Changes a the description of a particular code.
	 * 
	 * @param diag A DiagnosisBean representing the changes.
	 * @return A boolean indicating the number of updated rows.
	 * @throws DBException
	 */
	public int updateCode(DiagnosisBean diag) throws DBException {
		int rows;
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE ICDCodes SET Description = ?, Chronic = ? WHERE Code = ?");
			ps.setString(1, diag.getDescription());
			ps.setString(2, diag.getClassification());
			ps.setString(3, diag.getICDCode());
			rows = ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
		return rows;
	}

}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.MedicationBean;
import edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Used for managing the ND Codes.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * The National Drug Code (NDC) is a universal product identifier used in the
 * United States for drugs intended for human use.
 * 
 * @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm
 * @author Andy
 * 
 */
public class NDCodesDAO {
	private DAOFactory factory;
	private MedicationBeanLoader medicationLoader = new MedicationBeanLoader();

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public NDCodesDAO(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Returns a list of all ND codes
	 * 
	 * @return A java.util.List of MedicationBeans.
	 * @throws DBException
	 */
	public List<MedicationBean> getAllNDCodes() throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM NDCodes ORDER BY CODE");
			ResultSet rs = ps.executeQuery();
			return medicationLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns a particular description for a given code.
	 * 
	 * @param code The ND code to be looked up.
	 * @return A bean representing the Medication that was looked up.
	 * @throws DBException
	 */
	public MedicationBean getNDCode(String code) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM NDCodes WHERE Code = ?");
			ps.setString(1, code);
			ResultSet rs = ps.executeQuery();
			if (rs.next())
				return medicationLoader.loadSingle(rs);
			return null;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Adds a new ND code, returns whether or not the change was made. If the code already exists, an
	 * iTrustException is thrown.
	 * 
	 * @param med The medication bean to be added.
	 * @return A boolean indicating success or failure.
	 * @throws DBException
	 * @throws iTrustException
	 */
	public boolean addNDCode(MedicationBean med) throws DBException, iTrustException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO NDCodes (Code, Description) " + "VALUES (?,?)");
			ps.setString(1, med.getNDCode());
			ps.setString(2, med.getDescription());
			return (1 == ps.executeUpdate());
		} catch (SQLException e) {
			e.printStackTrace();
			if (1062 == e.getErrorCode())
				throw new iTrustException("Error: Code already exists.");
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Updates a particular code's description
	 * 
	 * @param med A bean representing the particular medication to be updated.
	 * @return An int representing the number of updated rows.
	 * @throws DBException
	 */
	public int updateCode(MedicationBean med) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE NDCodes SET Description = ? " + "WHERE Code = ?");
			ps.setString(1, med.getDescription());
			ps.setString(2, med.getNDCode());
			return ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.AllergyBean;
import edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class AllergyDAO {
	private DAOFactory factory;
	private AllergyBeanLoader allergyBeanLoader = new AllergyBeanLoader();

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public AllergyDAO(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Returns a list of patient's allergies.
	 * @param pid A long for the MID of the patient we are looking up.
	 * @return A java.util.List of AllergyBeans associated with this patient.
	 * @throws DBException
	 */
	public List<AllergyBean> getAllergies(long pid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM Allergies WHERE PatientID=? ORDER BY FirstFound DESC");
			ps.setLong(1, pid);
			ResultSet rs = ps.executeQuery();
			return allergyBeanLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Adds an allergy to this patient's list.
	 * @param pid The MID of the patient whose allergy we are adding.
	 * @param description The name of the allergen.
	 * @throws DBException
	 */
	public void addAllergy(long pid, String description) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO Allergies(PatientID, Description) VALUES (?,?)");
			ps.setLong(1, pid);
			ps.setString(2, description);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.MessageBean;
import edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Used for the logging mechanism.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class MessageDAO {
	private DAOFactory factory;
	private MessageBeanLoader mbLoader;

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public MessageDAO(DAOFactory factory) {
		this.factory = factory;
		this.mbLoader = new MessageBeanLoader();
	}

	/**
	 * Gets all the messages for a certain user MID.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
	
	public List<MessageBean> getMessagesFor(long mid) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;

		conn = factory.getConnection();
		ps = conn.prepareStatement("SELECT * FROM message WHERE to_id = ? ORDER BY sent_date DESC");
		ps.setLong(1, mid);
		ResultSet rs = ps.executeQuery();

		List<MessageBean> mbList = this.mbLoader.loadList(rs);

		DBUtil.closeConnection(conn, ps);

		return mbList;
	}

	/**
	 * Gets all the messages for a certain user MID sorted by ascending time.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
	public List<MessageBean> getMessagesTimeAscending(long mid) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;

		conn = factory.getConnection();
		ps = conn.prepareStatement("SELECT * FROM message WHERE to_id = ? ORDER BY sent_date ASC");
		ps.setLong(1, mid);
		ResultSet rs = ps.executeQuery();

		List<MessageBean> mbList = this.mbLoader.loadList(rs);

		DBUtil.closeConnection(conn, ps);

		return mbList;
	}
	
	/**
	 * Gets all the messages for a certain user MID sorted by name ascending.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
	public List<MessageBean> getMessagesNameAscending(long mid) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs;

		conn = factory.getConnection();
		if(mid >= (long) 999999999){
			ps = conn.prepareStatement("SELECT message.* FROM message, patients WHERE message.from_id=patients.mid AND message.to_id=? ORDER BY patients.lastName ASC, patients.firstName ASC, message.sent_date ASC");
			ps.setLong(1, mid);
			rs = ps.executeQuery();
		}
		else{
			ps = conn.prepareStatement("SELECT message.* FROM message, personnel WHERE message.from_id=personnel.mid AND message.to_id=? ORDER BY personnel.lastName ASC, personnel.firstName ASC, message.sent_date ASC");
			ps.setLong(1, mid);
			rs = ps.executeQuery();
		}

		List<MessageBean> mbList = this.mbLoader.loadList(rs);

		DBUtil.closeConnection(conn, ps);

		return mbList;
	}
	
	/**
	 * Gets all the messages for a certain user MID sorted by name descending.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
	public List<MessageBean> getMessagesNameDescending(long mid) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs;

		conn = factory.getConnection();
		if(mid >= (long) 999999999){
			ps = conn.prepareStatement("SELECT message.* FROM message, patients WHERE message.from_id=patients.mid AND message.to_id=? ORDER BY patients.lastName DESC, patients.firstName DESC, message.sent_date DESC");
			ps.setLong(1, mid);
			rs = ps.executeQuery();
		}
		else{
			ps = conn.prepareStatement("SELECT message.* FROM message, personnel WHERE message.from_id=personnel.mid AND message.to_id=? ORDER BY personnel.lastName DESC, personnel.firstName DESC, message.sent_date DESC");
			ps.setLong(1, mid);
			rs = ps.executeQuery();
		}

		List<MessageBean> mbList = this.mbLoader.loadList(rs);

		DBUtil.closeConnection(conn, ps);

		return mbList;
	}
	
	/**
	 * Gets all the messages from a certain user MID.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
	
	public List<MessageBean> getMessagesFrom(long mid) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;

		conn = factory.getConnection();
		ps = conn.prepareStatement("SELECT * FROM message WHERE from_id = ? ORDER BY sent_date DESC");
		ps.setLong(1, mid);
		ResultSet rs = ps.executeQuery();

		List<MessageBean> mbList = this.mbLoader.loadList(rs);

		DBUtil.closeConnection(conn, ps);

		return mbList;
	}
	
	/**
	 * Gets all the messages for a certain user MID sorted by ascending time.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
	public List<MessageBean> getMessagesFromTimeAscending(long mid) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;

		conn = factory.getConnection();
		ps = conn.prepareStatement("SELECT * FROM message WHERE from_id = ? ORDER BY sent_date ASC");
		ps.setLong(1, mid);
		ResultSet rs = ps.executeQuery();

		List<MessageBean> mbList = this.mbLoader.loadList(rs);

		DBUtil.closeConnection(conn, ps);

		return mbList;
	}
	
	/**
	 * Gets all the messages for a certain user MID sorted by name ascending.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
	public List<MessageBean> getMessagesFromNameAscending(long mid) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs;

		conn = factory.getConnection();
		if(mid >= (long) 999999999){
			ps = conn.prepareStatement("SELECT message.* FROM message, patients WHERE message.to_id=patients.mid AND message.from_id=? ORDER BY patients.lastName ASC, patients.firstName ASC, message.sent_date ASC");
			ps.setLong(1, mid);
			rs = ps.executeQuery();
		}
		else{
			ps = conn.prepareStatement("SELECT message.* FROM message, personnel WHERE message.to_id=personnel.mid AND message.from_id=? ORDER BY personnel.lastName ASC, personnel.firstName ASC, message.sent_date ASC");
			ps.setLong(1, mid);
			rs = ps.executeQuery();
		}

		List<MessageBean> mbList = this.mbLoader.loadList(rs);

		DBUtil.closeConnection(conn, ps);

		return mbList;
	}
	
	/**
	 * Gets all the messages for a certain user MID sorted by name descending.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
	public List<MessageBean> getMessagesFromNameDescending(long mid) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs;

		conn = factory.getConnection();
		if(mid >= (long) 999999999){
			ps = conn.prepareStatement("SELECT message.* FROM message, patients WHERE message.to_id=patients.mid AND message.from_id=? ORDER BY patients.lastName DESC, patients.firstName DESC, message.sent_date DESC");
			ps.setLong(1, mid);
			rs = ps.executeQuery();
		}
		else{
			ps = conn.prepareStatement("SELECT message.* FROM message, personnel WHERE message.to_id=personnel.mid AND message.from_id=? ORDER BY personnel.lastName DESC, personnel.firstName DESC, message.sent_date DESC");
			ps.setLong(1, mid);
			rs = ps.executeQuery();
		}

		List<MessageBean> mbList = this.mbLoader.loadList(rs);

		DBUtil.closeConnection(conn, ps);

		return mbList;
	}

	/**
	 * Adds a message to the database.
	 * @param mBean A bean representing the message to be added.
	 * @throws SQLException
	 */
	public void addMessage(MessageBean mBean) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;

		conn = factory.getConnection();
		if (mBean.getParentMessageId() == 0L) {
			ps = conn.prepareStatement(
					"INSERT INTO message (from_id, to_id, sent_date, message, subject, been_read) "
				  + "VALUES (?, ?, NOW(), ?, ?, ?)");
			this.mbLoader.loadParameters(ps, mBean);
		} else {
			ps = conn.prepareStatement(
					"INSERT INTO message (from_id, to_id, sent_date, message, subject, been_read, parent_msg_id) "
				  + "  VALUES (?, ?, NOW(), ?, ?, ?, ?)");
			this.mbLoader.loadParameters(ps, mBean);
		}

		ps.executeUpdate();

		DBUtil.closeConnection(conn, ps);
	}
	
	public void updateRead(MessageBean mBean) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE message SET been_read=1 WHERE message_id=?");
			ps.setLong(1, mBean.getMessageId());
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
}
package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.ReferralBean;
import edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Used to update referrals, and fetch lists of referrals sent to and
 * from HCPs.
 *
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 */
public class ReferralDAO {
	private DAOFactory factory;
	private ReferralBeanLoader referralLoader;

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public ReferralDAO(DAOFactory factory) {
		this.factory = factory;
		referralLoader = new ReferralBeanLoader();
	}

	

	/**
	 * Gets a list of all referrals sent from an HCP
	 * @param mid The HCP's mid.
	 * @return The list of the referrals they sent.
	 * @throws DBException
	 */
	public List<ReferralBean> getReferralsSentFrom(long mid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM referrals WHERE SenderID = ?");
			ps.setLong(1, mid);
			ResultSet rs = ps.executeQuery();
			
			
			return referralLoader.loadList(rs);
			
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	
	/**
	 * Gets a list of all referrals sent to an HCP
	 * @param mid The HCP's mid.
	 * @return The list of the referrals sent to them.
	 * @throws DBException
	 */
	public List<ReferralBean> getReferralsSentTo(long mid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM referrals WHERE ReceiverID = ?");
			ps.setLong(1, mid);
			ResultSet rs = ps.executeQuery();
			
			
			return referralLoader.loadList(rs);
			
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}


	/**
	 * Updates a given referral in the database.
	 * @param r The referral to update.
	 * @throws DBException
	 */
	public void editReferral(ReferralBean r) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE referrals SET PatientID=?,SenderID=?,ReceiverID=?,"
					+ "ReferralDetails=?,ConsultationDetails=?,Status=?  WHERE ID=?");
			referralLoader.loadParameters(ps, r);
			ps.setLong(7, r.getId());
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Adds a given referral to the database.
	 * @param r The referral to add.
	 * @throws DBException
	 */
	public void addReferral(ReferralBean r) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO referrals (PatientID,SenderID,ReceiverID,"
					+ "ReferralDetails,ConsultationDetails,Status)  "
					+ "VALUES (?,?,?,?,?,?)");
			referralLoader.loadParameters(ps, r);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.ProcedureBean;
import edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Used for managing CPT codes.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * The CPT code set accurately describes medical, surgical, and diagnostic services 
 * and is designed to communicate uniform information about medical services and procedures 
 * among physicians, coders, patients, accreditation organizations, and payers for administrative, 
 * financial, and analytical purposes.
 *
 * @see http://www.ama-assn.org/ama/pub/physician-resources/solutions-managing-your-practice/coding-billing-insurance/cpt/about-cpt.shtml
 * @author Andy
 * 
 */
public class CPTCodesDAO {
	private DAOFactory factory;
	private ProcedureBeanLoader procedureBeanLoader = new ProcedureBeanLoader();

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public CPTCodesDAO(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Returns a list of all CPT codes.
	 * 
	 * @return A java.util.List of ProcedureBeans for the CPT codes.
	 * @throws DBException
	 */
	public List<ProcedureBean> getAllCPTCodes() throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM CPTCodes ORDER BY CODE");
			ResultSet rs = ps.executeQuery();
			return procedureBeanLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Returns a list of all CPT codes.
	 * 
	 * @return A java.util.List of all Immunization-related CPT codes.
	 * @throws DBException
	 */
	public List<ProcedureBean> getImmunizationCPTCodes() throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("select * from cptcodes where attribute='immunization' order by code");
			ResultSet rs = ps.executeQuery();
			return procedureBeanLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns a particular procedure description for a code.
	 * 
	 * @param code The string representation of the code.
	 * @return The textual description of the code.
	 * @throws DBException
	 */
	public ProcedureBean getCPTCode(String code) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM CPTCodes WHERE Code = ?");
			ps.setString(1, code);
			ResultSet rs = ps.executeQuery();
			if (rs.next())
				return procedureBeanLoader.loadSingle(rs);
			return null;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Adds a new CPT code, returns that it was added successfully
	 * 
	 * @param proc A ProcedureBean representing the new code information.
	 * @return A boolean for whether the operation was successful.
	 * @throws DBException
	 * @throws iTrustException
	 */
	public boolean addCPTCode(ProcedureBean proc) throws DBException, iTrustException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO CPTCodes (Code, Description, Attribute) " + "VALUES (?,?,?)");
			ps.setString(1, proc.getCPTCode());
			ps.setString(2, proc.getDescription());
			ps.setString(3, proc.getAttribute());
			return (1 == ps.executeUpdate());
		} catch (SQLException e) {
			e.printStackTrace();
			if (1062 == e.getErrorCode())
				throw new iTrustException("Error: Code already exists.");
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Change the procedure description for a particular CPT code
	 * 
	 * @param proc A ProcedureBean representing the new code information.
	 * @return A boolean for whether the operation was successful.
	 * @throws DBException
	 */
	public int updateCode(ProcedureBean proc) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE CPTCodes SET Description = ?, Attribute = ? WHERE Code = ?");
			ps.setString(1, proc.getDescription());
			ps.setString(2, proc.getAttribute());
			ps.setString(3, proc.getCPTCode());
			return ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.DateUtil;
import edu.ncsu.csc.itrust.beans.VisitFlag;
import edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm;
import edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Used for queries related to patient reminders
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class VisitRemindersDAO {
	private DAOFactory factory;

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public VisitRemindersDAO(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Returns a list of patients associated with a given HCP.
	 * 
	 * @param hcpid The MID of the HCP in question.
	 * @return A java.util.List of Visit Reminder Forms.
	 */
	public List<VisitReminderReturnForm> getPatients(long hcpid) throws DBException {
		
	
		VisitReminderReturnForm temp;
		VisitReminderReturnFormLoader loader = new VisitReminderReturnFormLoader();
		List<VisitReminderReturnForm> patients = new ArrayList<VisitReminderReturnForm>();
		
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement(
					  "SELECT DISTINCT" 
					+ "       ? as hid, "
					+ "       dhcp.patientid, "
					+ "       p.lastName, "
					+ "       p.firstName, "
					+ "       p.phone1, "
					+ "       p.phone2, "
					+ "       p.phone3 "
					+ "  FROM "
					+ "       Patients p, "
					+ "       declaredhcp dhcp "
					+ " WHERE "
					+ "		dhcp.hcpid = ? "
					+ " AND "
					+ "     p.MID = dhcp.patientid "
					+ " AND "
					+ "		p.dateofdeath is null "
					+ " AND "
					+ "     p.dateofbirth > DATE_SUB(CURDATE(), INTERVAL 19 YEAR) "
					);

			ps.setLong(1, hcpid);
			ps.setLong(2, hcpid);
			rs = ps.executeQuery();

			while (rs.next()) {
				temp = loader.loadSingle(rs);
				patients.add(temp);
			}

		}
		catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} 
		finally {
			DBUtil.closeConnection(conn, ps);
		}
		return patients;
	}


	/**
	 * Returns a list of patients who need a visit for this HCP. This means:
	 * 
	 * Alive patient, no office visit for > 1 yr, diagnosed: - Diabetes: 250.xx - Asthma: 493.xx -
	 * Circulatory-System Disease: [ 390.00 , 459.99 ]
	 * 
	 * @param hcpid The MID of the HCP in question.
	 * @return A java.util.List of visit reminders.
	 */
	public List<VisitReminderReturnForm> getDiagnosedVisitNeeders(long hcpid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement(
					  "SELECT DISTINCT" 
					+ "       ? as hid, "
					+ "       ov.PatientID, "
					+ "       p.lastName, "
					+ "       p.firstName, "
					+ "       p.phone1, "
					+ "       p.phone2, "
					+ "       p.phone3, "
					+ "       ovd.ICDCode, "
					+ "       ov.visitDate "
					+ "  FROM "
					+ "       Patients p, "
					+ "       OfficeVisits ov, "
					+ "       OVDiagnosis ovd "
					+ " WHERE "
					+ "       p.MID = ov.PatientID "
					+ "   AND "
					+ "       ov.ID = ovd.VisitID "
					+ "   AND "
					+ "       p.DateOfDeath is null "
					+ "   AND "
					+ "       ov.visitDate <= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) "
					+ "   AND "
					+ "       ( "
					+ "            ovd.ICDCode BETWEEN ? AND ? " //250.00 AND 250.99
					+ "         OR "
					+ "            ovd.ICDCode BETWEEN ? AND ? " //390.00 AND 459.99
					+ "         OR "
					+ "            ovd.ICDCode BETWEEN ? AND ? " //493.00 AND 493.99
					+ "        )"
					+ "GROUP BY "
					+ "       p.MID "
					+ "ORDER BY "
					+ " p.lastName, p.firstName, ov.PatientID ");

			ps.setLong(1, hcpid);
			
			ps.setFloat(2, 250.0f);
			ps.setFloat(3, 250.99f);
				
			ps.setFloat(4, 390.0f);
			ps.setFloat(5, 459.99f);
				
			ps.setFloat(6, 493.0f);
			ps.setFloat(7, 493.99f);
			
			rs = ps.executeQuery();
			List<VisitReminderReturnForm> patients = new ArrayList<VisitReminderReturnForm>();
			VisitReminderReturnForm temp;
			VisitReminderReturnFormLoader loader = new VisitReminderReturnFormLoader();
			while (rs.next()) {
				temp = loader.loadSingle(rs);
				temp.addVisitFlag(new VisitFlag(VisitFlag.DIAGNOSED, rs.getString(8)));
				temp.addVisitFlag(new VisitFlag(VisitFlag.LAST_VISIT, rs.getString(9)));
				patients.add(temp);
			}
			return patients;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns a list of old people who need a flu shot
	 * 
	 * CURRENT SPEC: Alive patient, over 50 years old, no flu shot - 90656, 90658, 90660 a) during the months
	 * 09 - 12 of current calendar year if in 09 - 12 b) during the months 09 - 12 of last calendar year if
	 * not in 09 - 12
	 * 
	 * Determines current date and calls one of two private methods these methods return different sets of
	 * people - a: people who haven't had a flu shot yet this year and need one - b: people who missed last
	 * year's flu shot and need a check-up
	 * 
	 * @return A java.util.List of Visit Reminder Forms.
	 * @param hcpid The MID of the HCP in question.
	 * @param patientBirthday The birthday of the patient in question.
	 * @throws DBException
	 */
	public List<VisitReminderReturnForm> getFluShotDelinquents(long hcpid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;

		/*
		 * Fall 2007 Bug Fix: Use the correct range for a zero-based calendar (eg January is 0)
		 * 
		 */
		boolean thisYear = DateUtil.currentlyInMonthRange(8, 11);

		String flagType = thisYear ? VisitFlag.MISSING_MEDICATION : VisitFlag.MISSED_MEDICATION;

		java.sql.Date september = new java.sql.Date(0l), december = new java.sql.Date(0l);
		DateUtil.setSQLMonthRange(september, 8, thisYear ? 0 : 1, december, 11, thisYear ? 0 : 1);

		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT DISTINCT "
					+ "? as hid, ov.patientid, p.lastname, p.firstname, " + "p.phone1, p.phone2, p.phone3 "
					+ "FROM OfficeVisits ov, Patients p " + "WHERE ov.patientid=p.mid "
					+ "AND p.dateofdeath IS NULL "
					+ "AND p.dateofbirth < DATE_SUB(CURDATE(), INTERVAL 50 YEAR) " + "AND patientid NOT IN "
					+ "(SELECT patientid FROM OfficeVisits ov, OVMedication om " + "WHERE ov.id=om.visitid "
					+ "AND NDCode IN (90656, 90658, 90660) " + "AND ((StartDate BETWEEN ? AND ?) "
					+ "OR (EndDate BETWEEN ? AND ?))) " + "ORDER BY lastname, firstname, ov.patientid");
			ps.setLong(1, hcpid);
			ps.setDate(2, september);
			ps.setDate(3, december);
			ps.setDate(4, september);
			ps.setDate(5, december);
			rs = ps.executeQuery();
			List<VisitReminderReturnForm> patients = new ArrayList<VisitReminderReturnForm>();
			VisitReminderReturnForm temp;
			VisitReminderReturnFormLoader loader = new VisitReminderReturnFormLoader();
			while (rs.next()) {
				temp = loader.loadSingle(rs);
				temp.addVisitFlag(new VisitFlag(flagType, "Flu Shot"));
				patients.add(temp);
			}
			return patients;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}	
}
package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.SurveyResultBean;
import edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * A DAO for handling all Survey results.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 */
public class SurveyResultDAO {
	private DAOFactory factory;
	private SurveyResultBeanLoader loader;
	
	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public SurveyResultDAO(DAOFactory factory) {
		this.factory = factory;
		this.loader = new SurveyResultBeanLoader();
	}
	
	/**
	 * Returns all the survey results in the database that correspond to a particular zip code.
	 * 
	 * @param zip The zipcode we are interested in as a String.
	 * @param specialty The specialty we are interested in as a String.
	 * @return A java.util.List of SurveyResultBeans.
	 * @throws DBException
	 */
	public List<SurveyResultBean> getSurveyResultsForZip(String zip, String specialty) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;

		StringBuffer sql = new StringBuffer();
		sql.append("select p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, p.specialty, ");
		sql.append("'na' hospitalID, ");
		sql.append("avg(s.WaitingRoomMinutes) AvgWaitingRoomMinutes, ");
		sql.append("avg(s.ExamRoomMinutes) AvgExamRoomMinutes, ");
		sql.append("avg(s.VisitSatisfaction) AvgVisitSatisfaction, ");
		sql.append("avg(s.TreatmentSatisfaction) AvgTreatmentSatisfation, ");
		sql.append("count(*) / ");
		sql.append("	(select count(*) from personnel p1, officevisits v1 ");
		sql.append("	 where v1.hcpid = p1.mid ");
		sql.append("	 and substr(p1.zip,1,3) = ? ");
		sql.append("	 and p1.mid = p.mid) * 100 PercentSatisfactionResults ");
		sql.append("from ovsurvey s, personnel p, officevisits v ");
		sql.append("where s.visitid = v.id ");
		sql.append("and v.hcpid = p.mid ");
		sql.append("and substr(p.zip,1,3) = ? ");
		if (!specialty.equals(SurveyResultBean.ANY_SPECIALTY))
			sql.append("and specialty = ?");
		sql.append("group by p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, hospitalID ");
		if (!specialty.equals(SurveyResultBean.ANY_SPECIALTY))
			sql.append(", p.specialty ");
		sql.append("order by p.mid ");
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement(sql.toString());
			ps.setString(1, zip.substring(0, 3));
			ps.setString(2, zip.substring(0, 3));
			if (!specialty.equals(SurveyResultBean.ANY_SPECIALTY))
				ps.setString(3, specialty);
			return loader.loadList(ps.executeQuery());

		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Returns all the survey data associated with a given hospital and a certain specialty.
	 * 
	 * @param hospitalID The unique ID of the iTrust hospital we are querying about.
	 * @param specialty A string representing the specialty we are interested in.
	 * @return A java.util.List of SurveyResultBeans.
	 * @throws DBException
	 */
	public List<SurveyResultBean> getSurveyResultsForHospital(String hospitalID, String specialty) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;

		StringBuffer sql = new StringBuffer();
		sql.append("select p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, p.specialty, ");
		sql.append("h.hosid hospitalID, ");
		sql.append("avg(s.WaitingRoomMinutes) AvgWaitingRoomMinutes, ");
		sql.append("avg(s.ExamRoomMinutes) AvgExamRoomMinutes, ");
		sql.append("avg(s.VisitSatisfaction) AvgVisitSatisfaction, ");
		sql.append("avg(s.TreatmentSatisfaction) AvgTreatmentSatisfation, ");
		sql.append("count(*) / ");
		sql.append("	(select count(*) from personnel p1, officevisits v1, HCPAssignedHos h1 ");
		sql.append("	 where v1.hcpid = p1.mid ");
		sql.append("	 and v1.hcpid = h1.hcpid ");
		sql.append("	 and h1.hosid = ? ");
		sql.append("	 and p1.mid = p.mid) * 100 PercentSatisfactionResults ");
		sql.append("from ovsurvey s, personnel p, officevisits v, HCPAssignedHos h ");
		sql.append("where s.visitid = v.id ");
		sql.append("and v.hcpid = p.mid ");
		sql.append("and v.hcpid = h.hcpid ");
		sql.append("and h.hosid = ? ");
		if (!specialty.equals(SurveyResultBean.ANY_SPECIALTY))
			sql.append("and p.specialty = ?");
		sql.append("group by p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, hospitalID ");
		if (!specialty.equals(SurveyResultBean.ANY_SPECIALTY))
			sql.append(", p.specialty ");
		sql.append("order by p.mid ");
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement(sql.toString());
			ps.setString(1, hospitalID);
			ps.setString(2, hospitalID);
			if (!specialty.equals(SurveyResultBean.ANY_SPECIALTY)) {
				ps.setString(3, specialty);
			}
			return loader.loadList(ps.executeQuery());

		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
		
	}
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * A DAO for managing lab procedure codes. Database Access Object. All info coming into a DAO is already validated. 
 * Just worry about DB stuff here. Note that all DAOs need to have a DAOFactory with which to access other 
 * DAOs and to get connections. Also, every DAO must have a constructor with a DAOFactory as a parameter.
 */
public class LabProcedureDAO {
	private DAOFactory factory;
	private LabProcedureBeanLoader labProcedureLoader;

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public LabProcedureDAO(DAOFactory factory) {
		this.factory = factory;
		labProcedureLoader = new LabProcedureBeanLoader();
	}
	
	/**
	 * Get a list of the lab procedures associated with a given patient.
	 * @param id The MID of the patient as a long.
	 * @return A java.util.List of LabProcedureBeans
	 * @throws DBException
	 */
	public List<LabProcedureBean> getLabProceduresForPatient(long id) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;

		try {
			if (id == 0L) throw new SQLException("PatientMID cannot be null");
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM LabProcedure WHERE PatientMID = ? AND Rights = ? ORDER BY UpdatedDate DESC");
			ps.setLong(1, id);
			ps.setString(2, LabProcedureBean.Allow);
			ResultSet rs = ps.executeQuery();
			return labProcedureLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Gets all the lab procedures for a given patient that occur within the next month.
	 * @param id The MID of the patient as a long.
	 * @return A java.util.List of LabProcedureBeans.
	 * @throws DBException
	 */
	public List<LabProcedureBean> getLabProceduresForPatientForNextMonth(long id) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;

		try {
			if (id == 0L) throw new SQLException("PatientMID cannot be null");
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM LabProcedure WHERE PatientMID = ? AND Rights = ? AND Status = ? AND (DateDiff(SYSDATE(),UpdatedDate) <= 30) ORDER BY UpdatedDate DESC");
			ps.setLong(1, id);
			ps.setString(2, LabProcedureBean.Allow);
			ps.setString(3, LabProcedureBean.Completed);
			ResultSet rs = ps.executeQuery();
			return labProcedureLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Gets an individual lab procedure.
	 * @param id The ID of the lab procedure.
	 * @return A LabProcedureBean representing the procedure.
	 * @throws DBException
	 */
	public LabProcedureBean getLabProcedure(long id) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM LabProcedure WHERE LaboratoryProcedureID = ?");
			ps.setLong(1, id);
			ResultSet rs = ps.executeQuery();
			rs.next();
			return labProcedureLoader.loadSingle(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	/**
	 * Gets all procedures for Patient
	 * @param mid patient id
	 * @return A java.util.List of LabProcedureBeans.
	 * @throws DBException
	 */
	public List<LabProcedureBean> getAllLabProceduresDate(long mid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;

		try {
			if (mid == 0L) throw new SQLException("PatientMID cannot be null");
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM LabProcedure WHERE PatientMID = ? ORDER BY UpdatedDate DESC");
			ps.setLong(1, mid);
			ResultSet rs = ps.executeQuery();
			return labProcedureLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	/**
	 * This gets all the procedures for a particular patient on a particular office visit
	 * @param mid The MID of the patient.
	 * @param ovid The Office Visit ID.
	 * @return A java.util.List of LabProcedureBeans.
	 * @throws DBException
	 */
	public List<LabProcedureBean> getAllLabProceduresForDocOV(long mid, long ovid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;

		try {
			if (mid == 0L) throw new SQLException("PatientMID cannot be null");
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM LabProcedure WHERE PatientMID = ? AND OfficeVisitID = ? ORDER BY UpdatedDate DESC");
			ps.setLong(1, mid);
			ps.setLong(2, ovid);
			ResultSet rs = ps.executeQuery();
			return labProcedureLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * This gets all the procedures for a particular patient on a particular office visit
	 * @param mid The MID of the patient.
	 * @param ovid The Office Visit ID.
	 * @return A java.util.List of LabProcedureBeans
	 * @throws DBException
	 */
	public List<LabProcedureBean> getAllLabProceduresForDocOV(long ovid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;

		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM LabProcedure WHERE OfficeVisitID = ? ");
			ps.setLong(1, ovid);
			ResultSet rs = ps.executeQuery();
			return labProcedureLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Gets all lab procedures, period.
	 * @return A java.util.List of LabProcedureBeans.
	 * @throws DBException
	 */
	public List<LabProcedureBean> getAllLabProcedures() throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;

		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM LabProcedure ORDER BY UpdatedDate ASC");
			ResultSet rs = ps.executeQuery();
			return labProcedureLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Gets the lab procedures for a given LHCP that occur within the next month.
	 * @param ovid The Office Visit ID conducted by the LHCP in question.
	 * @return A java.util.List of LabProcedureBeans.
	 * @throws DBException
	 */
	public List<LabProcedureBean> getLabProceduresForLHCPForNextMonth(long ovid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			if (ovid == 0L) throw new SQLException("OfficeVisitID cannot be null");
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM LabProcedure WHERE OfficeVisitID = ? AND Status = ? AND (DateDiff(SYSDATE(),UpdatedDate) <= 30) ORDER BY UpdatedDate DESC");
			ps.setLong(1, ovid);
			ps.setString(2, LabProcedureBean.Completed);
			ResultSet rs = ps.executeQuery();
			return labProcedureLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Inserts a lab procedure into the database.
	 * @param b The LabProcedureBean to be inserted.
	 * @return A long containing the ID of the newly inserted lab procedure bean.
	 * @throws DBException
	 */
	public long addLabProcedure(LabProcedureBean b) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			if (b.getPid() == 0L) throw new SQLException("PatientMID cannot be null");
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO LabProcedure (PatientMID, LaboratoryProcedureCode, Status, Commentary, Results, OfficeVisitID, Rights) VALUES (?,?,?,?,?,?,?)");
			ps.setLong(1, b.getPid());
			ps.setString(2, b.getLoinc());
			ps.setString(3, b.getStatus());
			ps.setString(4, b.getCommentary());
			ps.setString(5, b.getResults());
			ps.setLong(6, b.getOvID());
			ps.setString(7, b.getRights());
			ps.executeUpdate();
			return DBUtil.getLastInsert(conn);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Updates an existing lab procedure.
	 * @param b The LabProcedureBean representing the procedure to be updated.
	 * @throws DBException
	 */
	public void updateLabProcedure(LabProcedureBean b) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			if (b.getPid() == 0L) throw new SQLException("PatientMID cannot be null");
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE LabProcedure SET Status = ?, Commentary = ?, Results = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?");
			ps.setString(1, b.getStatus());
			ps.setString(2, b.getCommentary());
			ps.setString(3, b.getResults());
			ps.setTimestamp(4, new java.sql.Timestamp(System.currentTimeMillis()));
			ps.setLong(5, b.getProcedureID());
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Gets all the lab procedures that correspond to a particular LOINC.
	 * @param id The LOINC in question.
	 * @return A java.util.List of LabProcedureBeans.
	 * @throws DBException
	 */
	public List<LabProcedureBean> getAllLabProceduresLOINC(long id) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;

		try {
			if (id == 0L) throw new SQLException("PatientMID cannot be null");
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM LabProcedure WHERE PatientMID = ? ORDER BY LaboratoryProcedureCode ASC");
			ps.setLong(1, id);
			ResultSet rs = ps.executeQuery();
			return labProcedureLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Updates the rights of a user on a given lab procedure.
	 * @param b The LabProcedureBean in question.
	 * @throws DBException
	 */
	public void updateRights(LabProcedureBean b) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			if (b.getPid() == 0L) throw new SQLException("PatientMID cannot be null");
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE LabProcedure SET Rights = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?");
			ps.setString(1, b.getRights());
			ps.setTimestamp(2, new java.sql.Timestamp(System.currentTimeMillis()));
			ps.setLong(3, b.getProcedureID());
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}



}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.util.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;
import edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Used for the keeping track of remote monitoring data.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 */
public class RemoteMonitoringDAO {
	private DAOFactory factory;
	private RemoteMonitoringDataBeanLoader loader = new RemoteMonitoringDataBeanLoader();

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public RemoteMonitoringDAO(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Returns patient data for a given HCP
	 * 
	 * @return
	 * @throws DBException
	 */
	public List<RemoteMonitoringDataBean> getPatientsData(long loggedInMID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM RemoteMonitoringLists WHERE HCPMID=? ORDER BY PatientMID");
			ps.setLong(1, loggedInMID);
			ResultSet patientRS = ps.executeQuery();
			ps = conn.prepareStatement("SELECT * FROM RemoteMonitoringData WHERE timelogged >= CURRENT_DATE ORDER BY PatientID, timeLogged DESC");
			ResultSet dataRS = ps.executeQuery();
			
			List<String> patientList = new ArrayList<String>();
			while(patientRS.next()) {
				patientList.add(patientRS.getLong("PatientMID") + "");
			}
			List<RemoteMonitoringDataBean> dataList = loader.loadList(dataRS);			
			
			int i, j;
			//Go through all patients and remove any that aren't monitored by this HCP
			for(i = 0; i < dataList.size(); i++) {
				if(!patientList.contains(dataList.get(i).getPatientMID() + "")) {
					dataList.remove(i);
					i--;
				}
			}
			
			//Add values in patient list with no data for today to list.
			boolean itsThere;
			for(i = 0; i < patientList.size(); i++) {
				itsThere = false;
				for(j = 0; j < dataList.size(); j++) {
					if((dataList.get(j).getPatientMID() + "").equals(patientList.get(i))) {
						itsThere = true;
						break;
					}
				}
				if(!itsThere) {
					dataList.add(new RemoteMonitoringDataBean(Long.parseLong(patientList.get(i))));
				}
			}
			
			return dataList;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	public List<RemoteMonitoringDataBean> getPatientDataByDate(long patientMID, Date lower, Date upper) throws DBException{
		Connection conn = null;
		PreparedStatement ps = null;
		try{
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM remotemonitoringdata WHERE PatientID=? AND timeLogged >= ? AND timeLogged <= ? ORDER BY timeLogged DESC");
			ps.setLong(1, patientMID);
			ps.setTimestamp(2, new Timestamp(lower.getTime()));
			// add 1 day's worth to include the upper
			ps.setTimestamp(3, new Timestamp(upper.getTime() + 1000L * 60L * 60 * 24L));
			ResultSet rs = ps.executeQuery();
			List<RemoteMonitoringDataBean> dataList = loader.loadList(rs);
			return dataList;
		}catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Store data for a given patient in the RemoteMonitoringData table
	 * 
	 * @param patientMID The MID of the patient
	 * @param systolicBloodPressure The systolic blood pressure of the patient
	 * @param diastolicBloodPressure The diastolic blood pressure of the patient
	 * @param glucoseLevel The glucose level of the patient
	 * @param reporterRole  The role of the person that reported these monitoring stats
	 * @param reporterMID  The MID of the person that reported these monitoring stats
	 * @throws DBException
	 */
	public void storePatientData(long patientMID, int systolicBloodPressure, int diastolicBloodPressure, int glucoseLevel, String reporterRole, long reporterMID)
			throws DBException, iTrustException {
		if(getNumberOfDailyEntries(patientMID) >= 10)
			throw new iTrustException("Patient entries for today cannot exceed 10.");
		
		if(reporterRole.equals("patient representative"))
			validatePR(reporterMID, patientMID);
		
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO RemoteMonitoringData(PatientID, systolicBloodPressure, "
					+ "diastolicBloodPressure, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?,?,?)");
			ps.setLong(1, patientMID);
			ps.setLong(2, systolicBloodPressure);
			ps.setInt(3, diastolicBloodPressure);
			ps.setInt(4, glucoseLevel);
			ps.setString(5, reporterRole);
			ps.setLong(6, reporterMID);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Store data for a given patient in the RemoteMonitoringData table
	 * 
	 * @param patientMID The MID of the patient
	 * @param systolicBloodPressure The systolic blood pressure of the patient
	 * @param diastolicBloodPressure The diastolic blood pressure of the patient
	 * @param glucoseLevel The glucose level of the patient
	 * @param reporterRole  The role of the person that reported these monitoring stats
	 * @param reporterMID  The MID of the person that reported these monitoring stats
	 * @throws DBException
	 */
	public void storePatientData(long patientMID, int glucoseLevel, String reporterRole, long reporterMID)
			throws DBException, iTrustException {
		if(getNumberOfDailyEntries(patientMID) >= 10)
			throw new iTrustException("Patient entries for today cannot exceed 10.");
		
		if(reporterRole.equals("patient representative"))
			validatePR(reporterMID, patientMID);
		
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO RemoteMonitoringData(PatientID, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?)");
			ps.setLong(1, patientMID);
			ps.setInt(2, glucoseLevel);
			ps.setString(3, reporterRole);
			ps.setLong(4, reporterMID);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Store data for a given patient in the RemoteMonitoringData table
	 * 
	 * @param patientMID The MID of the patient
	 * @param systolicBloodPressure The systolic blood pressure of the patient
	 * @param diastolicBloodPressure The diastolic blood pressure of the patient
	 * @param glucoseLevel The glucose level of the patient
	 * @param reporterRole  The role of the person that reported these monitoring stats
	 * @param reporterMID  The MID of the person that reported these monitoring stats
	 * @throws DBException
	 */
	public void storePatientData(long patientMID, int systolicBloodPressure, int diastolicBloodPressure, String reporterRole, long reporterMID)
			throws DBException, iTrustException {
		if(getNumberOfDailyEntries(patientMID) >= 10)
			throw new iTrustException("Patient entries for today cannot exceed 10.");
		
		if(reporterRole.equals("patient representative"))
			validatePR(reporterMID, patientMID);
		
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO RemoteMonitoringData(PatientID, systolicBloodPressure, "
					+ "diastolicBloodPressure, ReporterRole, ReporterID) VALUES(?,?,?,?,?)");
			ps.setLong(1, patientMID);
			ps.setLong(2, systolicBloodPressure);
			ps.setInt(3, diastolicBloodPressure);
			ps.setString(4, reporterRole);
			ps.setLong(5, reporterMID);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Private method to get the number of entries for a certain patientID for today.
	 * @param patientMID
	 * @return the number of entries
	 * @throws DBException
	 */
	private int getNumberOfDailyEntries(long patientMID) throws DBException{
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM RemoteMonitoringData WHERE PatientID=? AND DATE(timeLogged)=CURRENT_DATE");
			ps.setLong(1, patientMID);
			ResultSet rs = ps.executeQuery();
			List<RemoteMonitoringDataBean> patients = loader.loadList(rs);
			return patients.size();
			
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	public void validatePR(long representativeMID, long patientMID)
			throws iTrustException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM Representatives WHERE RepresenterMID=? AND RepresenteeMID=?");
			ps.setLong(1, representativeMID);
			ps.setLong(2, patientMID);
			ResultSet rs = ps.executeQuery();
			if(!rs.next()) //no rows
				throw new iTrustException("Representer is not valid for patient " + patientMID);
			
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Add a patient to the list of HCPs' monitoring lists of Patients
	 * 
	 * @param patientMID The MID of the patient
	 * @param HCPMID The MID of the HCP
	 * @return true if added successfully, false if already in list
	 */
	public boolean addPatientToList(long patientMID, long HCPMID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM RemoteMonitoringLists WHERE PatientMID = ? AND HCPMID = ?");
			ps.setLong(1, patientMID);
			ps.setLong(2, HCPMID);
			ResultSet rs = ps.executeQuery();
			if(rs.next())
				return false;
			ps = conn.prepareStatement("INSERT INTO RemoteMonitoringLists(PatientMID, HCPMID) VALUES(?,?)");
			ps.setLong(1, patientMID);
			ps.setLong(2, HCPMID);
			ps.executeUpdate();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Remove a patient from the list of HCPs' monitoring lists of Patients
	 * 
	 * @param patientMID The MID of the patient
	 * @param HCPMID The MID of the HCP
	 * @return true if removed successfully, false if not in list
	 */
	public boolean removePatientFromList(long patientMID, long HCPMID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			/*ps = conn.prepareStatement("SELECT * FROM RemoteMonitoringList WHERE PatientMID = ? AND HCPMID = ?");
			ps.setLong(1, patientMID);
			ps.setLong(2, HCPMID);
			ResultSet rs = ps.executeQuery();
			if(!rs.next())
				return false;*/
			ps = conn.prepareStatement("DELETE FROM RemoteMonitoringLists WHERE PatientMID = ? AND HCPMID = ?");
			ps.setLong(1, patientMID);
			ps.setLong(2, HCPMID);
			if(ps.executeUpdate() == 0)
				return false;
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.HospitalBean;
import edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Used for managing hospitals
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class HospitalsDAO {
	private DAOFactory factory;
	private HospitalBeanLoader hospitalLoader = new HospitalBeanLoader();

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public HospitalsDAO(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Returns a list of all hospitals sorted alphabetically
	 * 
	 * @return A java.util.List of HospitalBeans.
	 * @throws DBException
	 */
	public List<HospitalBean> getAllHospitals() throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM Hospitals ORDER BY HospitalName");
			ResultSet rs = ps.executeQuery();
			return hospitalLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns a particular hospital given its ID
	 * 
	 * @param id The String ID of the hospital.
	 * @return A HospitalBean representing this hospital.
	 * @throws DBException
	 */
	public HospitalBean getHospital(String id) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM Hospitals WHERE HospitalID = ?");
			ps.setString(1, id);
			ResultSet rs = ps.executeQuery();
			if (rs.next())
				return hospitalLoader.loadSingle(rs);
			return null;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Adds a hospital
	 * 
	 * @param hosp The HospitalBean object to insert.
	 * @return A boolean indicating whether the insertion was successful.
	 * @throws DBException
	 * @throws iTrustException
	 */
	public boolean addHospital(HospitalBean hosp) throws DBException, iTrustException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO Hospitals (HospitalID, HospitalName) " + "VALUES (?,?)");
			ps.setString(1, hosp.getHospitalID());
			ps.setString(2, hosp.getHospitalName());
			return (1 == ps.executeUpdate());
		} catch (SQLException e) {
			e.printStackTrace();
			if (1062 == e.getErrorCode())
				throw new iTrustException("Error: Hospital already exists.");
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Updates a particular hospital's description. Returns the number of rows affected (should be 1)
	 * 
	 * @param hosp The HospitalBean to update.
	 * @return An int indicating the number of affected rows.
	 * @throws DBException
	 */
	public int updateHospital(HospitalBean hosp) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE Hospitals SET HospitalName = ? " + "WHERE HospitalID = ?");
			ps.setString(1, hosp.getHospitalName());
			ps.setString(2, hosp.getHospitalID());
			return ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Assign an HCP to a hospital. If they have already been assigned to that hospital, then an
	 * iTrustException is thrown.
	 * 
	 * @param hcpID The HCP's MID to assign to the hospital.
	 * @param hospitalID The ID of the hospital to assign them to.
	 * @return A boolean indicating whether the assignment was a success.
	 * @throws DBException
	 * @throws iTrustException
	 */
	public boolean assignHospital(long hcpID, String hospitalID) throws DBException, iTrustException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO HCPAssignedHos (HCPID, HosID) VALUES (?,?)");
			ps.setLong(1, hcpID);
			ps.setString(2, hospitalID);
			return (1 == ps.executeUpdate());
		} catch (SQLException e) {
			if (1062 == e.getErrorCode())
				throw new iTrustException("HCP " + hcpID + " already assigned to hospital " + hospitalID);
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Unassigns an HCP to a hospital. Returns whether or not any changes were made
	 * 
	 * @param hcpID The MID of the HCP to remove.
	 * @param hospitalID The ID of the hospital being removed from.
	 * @return A boolean indicating success.
	 * @throws DBException
	 */
	public boolean removeHospitalAssignment(long hcpID, String hospitalID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("DELETE FROM HCPAssignedHos WHERE HCPID = ? AND HosID = ?");
			ps.setLong(1, hcpID);
			ps.setString(2, hospitalID);
			return (1 == ps.executeUpdate());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Removes all hospital assignments for a particular HCP. Returns the number of rows affected.
	 * 
	 * @param hcpID The MID of the HCP.
	 * @return An int representing the number of hospital assignments removed.
	 * @throws DBException
	 */
	public int removeAllHospitalAssignmentsFrom(long hcpID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("DELETE FROM HCPAssignedHos WHERE HCPID = ?");
			ps.setLong(1, hcpID);
			return ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.beans.PrescriptionReportBean;
import edu.ncsu.csc.itrust.beans.ProcedureBean;
import edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader;
import edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader;
import edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader;
import edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader;
import edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Used for doing tasks related to office visits. Use this for linking diagnoses to office visits, and similar
 * tasks.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class OfficeVisitDAO {
	private DAOFactory factory;
	private OfficeVisitLoader officeVisitLoader = new OfficeVisitLoader();
	private DiagnosisBeanLoader diagnosisLoader = new DiagnosisBeanLoader(true);
	private PrescriptionBeanLoader prescriptionLoader = new PrescriptionBeanLoader();
	private PrescriptionReportBeanLoader prescriptionReportBeanLoader = new PrescriptionReportBeanLoader();
	private ProcedureBeanLoader procedureBeanLoader = new ProcedureBeanLoader(true);

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public OfficeVisitDAO(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Adds an visit and return its ID
	 * 
	 * @param ov The OfficeVisitBean to be added.
	 * @return A long indicating the unique ID for the office visit.
	 * @throws DBException
	 */
	public long add(OfficeVisitBean ov) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn
					.prepareStatement("INSERT INTO OfficeVisits (VisitDate, Notes, HCPID, PatientID, HospitalID) VALUES (?,?,?,?,?)");
			setValues(ps, ov);
			ps.executeUpdate();
			return DBUtil.getLastInsert(conn);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	private void setValues(PreparedStatement ps, OfficeVisitBean ov) throws SQLException {
		ps.setDate(1, new java.sql.Date(ov.getVisitDate().getTime()));
		ps.setString(2, ov.getNotes());
		ps.setLong(3, ov.getHcpID());
		ps.setLong(4, ov.getPatientID());
		ps.setString(5, ov.getHospitalID());
	}

	/**
	 * Updates the information in a particular office visit.
	 * 
	 * @param ov The Office Visit bean representing the changes.
	 * @throws DBException
	 */
	public void update(OfficeVisitBean ov) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE OfficeVisits SET VisitDate=?, Notes=?, HCPID=?, "
					+ "PatientID=?, HospitalID=? WHERE ID=?");
			setValues(ps, ov);
			ps.setLong(6, ov.getID());
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns a particular office visit given an ID
	 * 
	 * @param visitID The unique ID of the office visit.
	 * @return An OfficeVisitBean with the specifics for that office visit.
	 * @throws DBException
	 */
	public OfficeVisitBean getOfficeVisit(long visitID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("Select * From OfficeVisits Where ID = ?");
			ps.setLong(1, visitID);
			ResultSet rs = ps.executeQuery();
			if (rs.next())
				return loadFullOfficeVist(rs, visitID);
			else
				return null;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	private OfficeVisitBean loadFullOfficeVist(ResultSet rs, long visitID) throws SQLException, DBException {
		OfficeVisitBean ov = new OfficeVisitBean(visitID);
		ov.setVisitDateStr(new SimpleDateFormat("MM/dd/yyyy").format(new Date(rs.getDate("VisitDate")
				.getTime())));
		ov.setHcpID(rs.getLong("HCPID"));
		ov.setNotes(rs.getString("notes"));
		ov.setPatientID(rs.getLong("PatientID"));
		ov.setHospitalID(rs.getString("HospitalID"));
		ov.setDiagnoses(getDiagnoses(visitID));
		ov.setPrescriptions(getPrescriptions(visitID));
		ov.setProcedures(getProcedures(visitID));

		return ov;
	}

	/**
	 * Returns all of the procedures associated with the given office visit
	 * 
	 * @param visitID The unique ID of the office visit.
	 * @return A java.util.List of procedures.
	 * @throws DBException
	 */
	public List<ProcedureBean> getProcedures(long visitID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		List<ProcedureBean> procs;
		
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("select * from ovprocedure ovp, officevisits ov, cptcodes cpt where ov.id=? and ovp.visitid=? and cpt.code=ovp.cptcode");
			ps.setLong(1, visitID);
			ps.setLong(2, visitID);
			ResultSet rs = ps.executeQuery();
			procs = procedureBeanLoader.loadList(rs);
		} 
		catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} 
		finally {
			DBUtil.closeConnection(conn, ps);
		}
		
		return procs;
	}

	
	/**
	 * Returns all of the prescriptions associated with the given office visit
	 * 
	 * @param visitID The ID of the office visit.
	 * @return A java.util.List of prescriptions.
	 * @throws DBException
	 */
	public List<PrescriptionBean> getPrescriptions(long visitID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("Select * From OVMedication,NDCodes Where OVMedication.VisitID = ? "
					+ "AND NDCodes.Code=OVMedication.NDCode");
			ps.setLong(1, visitID);
			ResultSet rs = ps.executeQuery();
			return prescriptionLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns all of the diagnoses associated with the given office visit
	 * 
	 * @param visitID The unique ID of the office visit.
	 * @return A java.util.List of diagnoses.
	 * @throws DBException
	 */
	public List<DiagnosisBean> getDiagnoses(long visitID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("Select * From OVDiagnosis,ICDCodes Where OVDiagnosis.VisitID = ? "
					+ "AND ICDCodes.Code=OVDiagnosis.ICDCode");
			ps.setLong(1, visitID);
			ResultSet rs = ps.executeQuery();
			return diagnosisLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Adds the given CPT codes to the given office visit
	 * 
	 * @param cptCode
	 * @param visitID
	 * @return
	 * @throws DBException
	 */
	public long addProcedureToOfficeVisit (String cptCode, long visitID, String hcpid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO OVProcedure (CPTCode,VisitID,HCPID) VALUES (?,?,?)");
			ps.setString(1, cptCode);
			ps.setLong(2, visitID);
			ps.setString(3, hcpid);
			ps.executeUpdate();
			return DBUtil.getLastInsert(conn);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Removes the given procedure from its office visit
	 * 
	 * @param ovProcedureID The unique ID of the office visit procedure.
	 * @throws DBException
	 */
	public void removeProcedureFromOfficeVisit(long ovProcedureID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("DELETE FROM OVProcedure WHERE ID=? ");
			ps.setLong(1, ovProcedureID);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Adds a prescription bean to the database.
	 * @param pres The prescription bean to be added.
	 * @return The unique ID of the newly added bean.
	 * @throws DBException
	 */
	public long addPrescription(PrescriptionBean pres) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn
					.prepareStatement("INSERT INTO OVMedication (VisitID,NDCode,StartDate,EndDate,Dosage,Instructions) VALUES (?,?,?,?,?,?)");
			prescriptionLoader.loadParameters(ps, pres);
			ps.executeUpdate();
			return DBUtil.getLastInsert(conn);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	
	/**
	 * Edits an existing prescription bean.
	 * 
	 * @param pres The newly updated prescription bean.
	 * @return A long indicating the ID of the newly updated prescription bean.
	 * @throws DBException
	 */
	public long editPrescription(PrescriptionBean pres) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			//ps = conn.prepareStatement("UPDATE OVMedication (VisitID,NDCode,StartDate,EndDate,Dosage,Instructions) VALUES (?,?,?,?,?,?)");
			String statement = "UPDATE OVMedication " +
				"SET VisitID=?, NDCode=?, StartDate=?, EndDate=?, Dosage=?, Instructions=? " +
				"WHERE ID=?";
			ps = conn.prepareStatement(statement);
			prescriptionLoader.loadParameters(ps, pres);
			ps.setLong(7, pres.getId());
			ps.executeUpdate();
			return DBUtil.getLastInsert(conn);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Removes the given medication from its office visit
	 * 
	 * @param ovMedicationID The unique ID of the medication to be removed.
	 * @throws DBException
	 */
	public void removePrescription(long ovMedicationID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("DELETE FROM OVMedication WHERE ID=? ");
			ps.setLong(1, ovMedicationID);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Adds the given CPT codes to the given office visit
	 * @param icd A double representing the ICD code to be added.
	 * @param visitID The ID of the office visit we are adding the code to.
	 * @return A long for the new ICD code's ID.
	 * @throws DBException
	 */
	public long addDiagnosisToOfficeVisit(double icd, long visitID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO OVDiagnosis (ICDCode,VisitID) VALUES (?,?)");
			ps.setDouble(1, icd);
			ps.setLong(2, visitID);
			ps.executeUpdate();
			return DBUtil.getLastInsert(conn);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	

	/**
	 * Removes a particular diagnosis from its office visit
	 * 
	 * @param ovDiagnosisID The ID for the office visit diagnosis to be removed. 
	 * @throws DBException
	 */
	public void removeDiagnosisFromOfficeVisit(long ovDiagnosisID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("DELETE FROM OVDiagnosis WHERE ID=? ");
			ps.setLong(1, ovDiagnosisID);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Adds a LOINCCode to an office visit.
	 * 
	 * @param LOINCCode A string of the code being added.
	 * @param visitID The ID of the office visit the code is being added to.
	 * @param pid The patient's MID associated with this transaction.
	 * @return The unique ID of the code that was added.
	 * @throws DBException
	 */
	public long addLabProcedureToOfficeVisit(String LOINCCode, long visitID, long pid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO LabProcedure (LaboratoryProcedureCode,OfficeVisitID," +
					"Commentary, Results, PatientMID, Status, Rights) VALUES (?,?,?,?,?,?,?)");
			ps.setString(1, LOINCCode);
			ps.setLong(2, visitID);
			ps.setString(3, "");
			ps.setString(4, "");
			ps.setLong(5, pid);
			ps.setString(6, LabProcedureBean.Not_Received);
			ps.setString(7, "ALLOWED");
			ps.executeUpdate();
			return DBUtil.getLastInsert(conn);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Removes a given lab procedure.
	 * 
	 * @param labProcedureID The unique ID of the lab procedure.
	 * @throws DBException
	 */
	public void removeLabProcedureFromOfficeVisit(long labProcedureID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("DELETE FROM LabProcedure WHERE LaboratoryProcedureID=?");
			ps.setLong(1, labProcedureID);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Returns whether or not an office visit actually exists
	 * 
	 * @param ovID The ID of the office visit to be checked.
	 * @param pid The MID of the patient associated with this transaction.
	 * @return A boolean indicating its existence.
	 * @throws DBException
	 */
	public boolean checkOfficeVisitExists(long ovID, long pid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM OfficeVisits WHERE ID=? AND PatientID=?");
			ps.setLong(1, ovID);
			ps.setLong(2, pid);
			ResultSet rs = ps.executeQuery();
			return rs.next();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns a list of all office visits for a given patient
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of OfficeVisitBeans.
	 * @throws DBException
	 */
	public List<OfficeVisitBean> getAllOfficeVisits(long pid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn
					.prepareStatement("SELECT * FROM OfficeVisits WHERE PatientID=? ORDER BY VisitDate DESC");
			ps.setLong(1, pid);
			ResultSet rs = ps.executeQuery();
			return officeVisitLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Returns a list of all office visits for a given patient
	 * 
	 * @param mid The MID of the LHCP you are looking up.
	 * @return A java.util.List of Office Visits.
	 * @throws DBException
	 */
	public List<OfficeVisitBean> getAllOfficeVisitsForLHCP(long mid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			if (mid == 0L) throw new SQLException("HCPID cannot be null");
			conn = factory.getConnection();
			ps = conn
					.prepareStatement("SELECT * FROM OfficeVisits WHERE HCPID=? ORDER BY VisitDate DESC");
			ps.setLong(1, mid);
			ResultSet rs = ps.executeQuery();
			return officeVisitLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns a list of all office visits for a given patient
	 * 
	 * @param pid The MID of the patient.
	 * @return A java.util.List of Office Visits.
	 * @throws DBException
	 */
	public List<OfficeVisitBean> getOfficeVisitsWithNoSurvey(long pid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn
					.prepareStatement("SELECT * FROM OfficeVisits where id not in (select visitid from OVSurvey) and PatientID = ? ORDER BY VisitDate DESC");
			ps.setLong(1, pid);
			ResultSet rs = ps.executeQuery();
			return officeVisitLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns a list of information related to prescription reports given all of the office visits and the
	 * patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the
	 * disambiguation is for security reasons).
	 * 
	 * @param ovIDs A java.util.List of Longs for the office visits.
	 * @param patientID A long representing the MID of the patient in question.
	 * @return A java.util.List of prescription reports.
	 * @throws DBException
	 */
	public List<PrescriptionReportBean> getPrescriptionReportsByDate(long patientID, String startDate, String endDate)
			throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM NDCodes, OVMedication, OfficeVisits "
					+ "WHERE NDCodes.Code=OVMedication.NDCode AND OVMedication.VisitID=OfficeVisits.ID "
					+ "AND PatientID=? AND ((DATE(?) < OVMedication.EndDate AND DATE(?) > OVMedication.StartDate)"
					+ "OR (DATE(?) > OVMedication.StartDate  AND DATE(?) < OVMedication.EndDate ) OR "
					+ "(DATE(?) <= OVMedication.StartDate AND DATE(?) >= OVMedication.StartDate)) "
					+ "ORDER BY VisitDate DESC");
			ps.setLong(1, patientID);
			ps.setString(2, startDate);
			ps.setString(3, startDate);
			ps.setString(4, endDate);
			ps.setString(5, endDate);
			ps.setString(6, startDate);
			ps.setString(7, endDate);
			ResultSet rs = ps.executeQuery();
			return prescriptionReportBeanLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns a list of information related to prescription reports given all of the office visits and the
	 * patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the
	 * disambiguation is for security reasons).
	 * 
	 * @param ovIDs A java.util.List of Longs for the office visits.
	 * @param patientID A long representing the MID of the patient in question.
	 * @return A java.util.List of prescription reports.
	 * @throws DBException
	 */
	public List<PrescriptionReportBean> getPrescriptionReports(List<Long> ovIDs, long patientID)
			throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			String preps = buildPreps(ovIDs.size());
			ps = conn.prepareStatement("SELECT * FROM NDCodes, OVMedication, OfficeVisits "
					+ "WHERE NDCodes.Code=OVMedication.NDCode AND OVMedication.VisitID=OfficeVisits.ID "
					+ "AND PatientID=? AND VisitID IN(" + preps + ") ORDER BY VisitDate DESC");
			ps.setLong(1, patientID);
			prepareOVIDs(ps, ovIDs);
			ResultSet rs = ps.executeQuery();
			return prescriptionReportBeanLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	private void prepareOVIDs(PreparedStatement ps, List<Long> ovIDs) throws SQLException {
		for (int i = 0; i < ovIDs.size(); i++) {
			ps.setLong(i + 2, ovIDs.get(i));
		}
	}

	private String buildPreps(int size) {
		String prep = "";
		for (int i = 0; i < size; i++) {
			prep += "?,";
		}
		if (prep.length() > 0)
			return prep.substring(0, prep.length() - 1);
		else
			return prep;
	}
	
	/**
	 * Returns a list of all office visits at a given hospital
	 * @param hospitalID the id of the hospital
	 * @return a list of the OfficeVisitBeans that hold the office visits
	 * @throws DBException in the event of a database error
	 */
	public List<OfficeVisitBean> getOfficeVisitsFromHospital(String hospitalID) throws DBException{
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM officevisits WHERE hospitalID = ? ORDER BY ID DESC");
			ps.setString(1, hospitalID);
			ResultSet rs = ps.executeQuery();
			return officeVisitLoader.loadList(rs);
		} catch (SQLException e){
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
		
	}
	
	/**
	 * Gets all office visits corresponding to a particular ICD diagnosis.
	 * 
	 * @param icdcode A string represnting the ICD diagnosis to look up.
	 * @return A java.util.List of Office visits.
	 * @throws DBException
	 */
	public List<OfficeVisitBean> getAllOfficeVisitsForDiagnosis(String icdcode) throws DBException {
		
		List<DiagnosisBean> diags = null;
		List<OfficeVisitBean> ovs = new ArrayList<OfficeVisitBean>();
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs= null;
		
		try {
			if (icdcode == null) 
				throw new SQLException("icdcode cannot be null");
			
			conn = factory.getConnection();
			
			ps = conn.prepareStatement("SELECT * FROM ovdiagnosis ovd, icdcodes icd WHERE ovd.ICDCode=? and icd.Code=?");
			ps.setString(1, icdcode);
			ps.setString(2, icdcode);
			rs = ps.executeQuery();
			diags = diagnosisLoader.loadList(rs);
			rs.close();
			ps.close();
			ps = null;
			rs = null;
			
			for (DiagnosisBean bean: diags) {
				ps = conn.prepareStatement("SELECT * FROM officevisits ov WHERE ov.ID=?");
				ps.setInt(1, (int)bean.getVisitID());
				rs = ps.executeQuery();
				
				if (rs.next()) {
					ovs.add(loadFullOfficeVist(rs, bean.getVisitID()));
				}
				rs.close();
				ps.close();
			}
			
			return ovs;
		
		}
		catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}	
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.HospitalBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader;
import edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.enums.Role;


/**
 * Used for managing information related to personnel: HCPs, UAPs, Admins
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class PersonnelDAO {
	private DAOFactory factory;
	private PersonnelLoader personnelLoader;
	private HospitalBeanLoader hospitalBeanLoader;

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public PersonnelDAO(DAOFactory factory) {
		this.factory = factory;
		personnelLoader = new PersonnelLoader();
		hospitalBeanLoader = new HospitalBeanLoader();
	}

	/**
	 * Returns the name for a given MID
	 * 
	 * @param mid The MID of the personnel in question.
	 * @return A String representing the name of the personnel.
	 * @throws iTrustException
	 * @throws DBException
	 */
	public String getName(long mid) throws iTrustException, DBException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			conn = factory.getConnection();
			pstmt = conn.prepareStatement("SELECT firstName, lastName FROM Personnel WHERE MID=?");
			pstmt.setLong(1, mid);
			ResultSet rs;

			rs = pstmt.executeQuery();
			if (rs.next()) {
				return rs.getString("firstName") + " " + rs.getString("lastName");
			} else {
				throw new iTrustException("User does not exist");
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, pstmt);
		}
	}

	/**
	 * Adds an empty personnel, and returns the MID.
	 * 
	 * @return A long indicating the new MID.
	 * @param role A {@link Role} enum indicating the personnel's specific role.
	 * @throws DBException
	 * @throws iTrustException
	 */
	public long addEmptyPersonnel(Role role) throws DBException, iTrustException {
		Connection conn = null;
		PreparedStatement ps = null;
		long newID;

		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO Personnel(Role) VALUES(?)");
			ps.setString(1, role.name());
			ps.executeUpdate();
			newID = DBUtil.getLastInsert(conn);
			return newID;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Retrieves a PersonnelBean with all of the specific information for a given employee.
	 * 
	 * @param mid The MID of the personnel in question.
	 * @return A PersonnelBean representing the employee.
	 * @throws DBException
	 */
	public PersonnelBean getPersonnel(long mid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM Personnel WHERE MID = ?");
			ps.setLong(1, mid);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				return personnelLoader.loadSingle(rs);
			} else
				return null;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Updates the demographics for a personnel.
	 * 
	 * @param p The personnel bean with the updated information.
	 * @throws DBException
	 */
	public void editPersonnel(PersonnelBean p) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE Personnel SET AMID=?,firstName=?,lastName=?,"
					+ "phone1=?,phone2=?,phone3=?, address1=?,address2=?,city=?, state=?, zip=?, zip1=?, zip2=?, email=?, MessageFilter=?"
					+ " WHERE MID=?");
			personnelLoader.loadParameters(ps, p);
			ps.setLong(16, p.getMID());
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Indicates whether a certain personnel is in the database.
	 * 
	 * @param pid The MID of the personnel in question.
	 * @return A boolean indicating whether this personnel exists.
	 * @throws DBException
	 */
	public boolean checkPersonnelExists(long pid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM Personnel WHERE MID=?");
			ps.setLong(1, pid);
			ResultSet rs = ps.executeQuery();
			return rs.next();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns all of the hospitals this LHCP is associated with.
	 * 
	 * @param mid The MID of the personnel in question.
	 * @return A java.util.List of HospitalBeans.
	 * @throws DBException
	 */
	public List<HospitalBean> getHospitals(long mid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM HCPAssignedHos hah,Hospitals h "
					+ "WHERE hah.HCPID=? AND hah.HosID=h.HospitalID ORDER BY HospitalName ASC");
			ps.setLong(1, mid);
			ResultSet rs = ps.executeQuery();
			return hospitalBeanLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	
	
	/**
	 * Returns all personnel in the database.
	 * 
	 * @return A java.util.List of personnel.
	 * @throws DBException
	 */
	public List<PersonnelBean> getAllPersonnel() throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM personnel where role in ('hcp','uap','er') ");
			ResultSet rs = ps.executeQuery();
			return personnelLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns a list of UAPs who work for this LHCP.
	 * 
	 * @param hcpid The MID of the personnel in question.
	 * @return A java.util.List of UAPs.
	 * @throws DBException
	 */
	public List<PersonnelBean> getUAPsForHCP(long hcpid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM Personnel WHERE MID IN (SELECT UAP FROM HCPRelations WHERE HCP=?)");
			ps.setLong(1, hcpid);
			ResultSet rs = ps.executeQuery();
			return personnelLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Given a prescription that has been given, this method returns all the information for the
	 * doctor who authorized that prescription.
	 * 
	 * @param prescription The PrescriptionBean describing the prescription in question.
	 * @return The PersonnelBean describing the doctor who authorized it.
	 * @throws DBException
	 */
	public PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM Personnel WHERE MID IN (SELECT HCPID FROM OfficeVisits WHERE ID=?)");
			ps.setLong(1, prescription.getVisitID());
			ResultSet rs = ps.executeQuery();
			return personnelLoader.loadList(rs).get(0);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Matches all personnel who have names LIKE (as in SQL) the first and last names passed in.
	 * 
	 * @param first The first name to be searched for.
	 * @param last The last name to be searched for.
	 * @return A java.util.List of personnel who match these names.
	 * @throws DBException
	 */
	public List<PersonnelBean> searchForPersonnelWithName(String first, String last) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		
		if (first.equals("%") && last.equals("%")) return new Vector<PersonnelBean>();
		
		try {
			conn = factory.getConnection();
			
			ps = conn.prepareStatement("SELECT * FROM personnel WHERE firstName LIKE ? AND lastName LIKE ?");
			ps.setString(1, first);
			ps.setString(2, last);
			ResultSet rs = ps.executeQuery();
			return personnelLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.FamilyMemberBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Used for finding risk factors for a given patient.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class RiskDAO {
	private DAOFactory factory;

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public RiskDAO(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * This method is implemented using {@link FamilyDAO} for 2 reasons: (a) definitions of family members
	 * might change, so it's better to centralize that code and (2) to make this code a little bit "nicer"
	 * even though it executes one query per family member. If this method gets slow, then you will need to
	 * refactor. Otherwise, let's just keep it simple...
	 * 
	 * @param patientID The MID of the patient in question.
	 * @param icdLower A double of the lower bound for the codes.
	 * @param icdUpper A double of the upper bound for the codes.
	 * @return A boolean indicating whether a family member had a match in this range.
	 * @throws DBException
	 */
	public boolean hasFamilyHistory(long patientID, double icdLower, double icdUpper) throws DBException {
		List<FamilyMemberBean> familyMembers = getFamilyMembers(patientID);
		for (FamilyMemberBean famMember : familyMembers) {
			if (hadPriorDiagnoses(famMember.getMid(), icdLower, icdUpper))
				return true;
		}
		return false;
	}

	private List<FamilyMemberBean> getFamilyMembers(long patientID) throws DBException {
		FamilyDAO famDAO = factory.getFamilyDAO();
		List<FamilyMemberBean> familyMembers = famDAO.getParents(patientID);
		familyMembers.addAll(famDAO.getSiblings(patientID));
		return familyMembers;
	}

	/**
	 * Returns whether or not a patient had a childhood infection for the exact, given ICD codes.
	 * 
	 * @param patientID The MID of the patient in question.
	 * @param icdCodes A parameter list of the ICD codes to match.
	 * @return A boolean indicating whether this patient had all the listed ICD codes.
	 * @throws DBException
	 */
	public boolean hadChildhoodInfection(long patientID, double... icdCodes) throws DBException {
		// Note the datediff call - this is a MySQL function that takes the difference between two
		// dates and returns that value in terms of days. 6570 days is 18 years (not counting leap years)
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM OVDiagnosis ovd, OfficeVisits ov, Patients p "
					+ "WHERE ovd.visitID=ov.id AND ov.patientid=p.mid AND p.mid=? "
					+ "AND datediff(ov.visitdate,p.dateofbirth) < 6570 AND ovd.icdcode IN ("
					+ createPrepared(icdCodes.length) + ")");
			ps.setLong(1, patientID);
			setICDs(2, ps, icdCodes);
			return ps.executeQuery().next(); // if this query has ANY rows, then yes
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	private String createPrepared(int length) {
		String str = "";
		for (int i = 0; i < length; i++)
			str += "?,";
		return str.substring(0, str.length() - 1);
	}

	private void setICDs(int start, PreparedStatement ps, double[] icdCodes) throws SQLException {
		for (double icdCode : icdCodes) {
			ps.setDouble(start++, icdCode);
		}
	}

	/**
	 * Returns if the patient has ever smoked in their life
	 * 
	 * @param patientID The MID of the patient in question.
	 * @return A boolean indicating whether the patient smoked.
	 * @throws DBException
	 */
	public boolean hasSmoked(long patientID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn
					.prepareStatement("SELECT * FROM PersonalHealthInformation WHERE PatientID=? AND Smoker=1");
			ps.setLong(1, patientID);
			return ps.executeQuery().next(); // if this query has ANY rows, then yes
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns if a patient has ever been diagnosed with the given ICD code, in the range [lower,upper)
	 * 
	 * @param patientID The MID of the patient in question.
	 * @param lowerICDCode A double of the lower ICD code.
	 * @param upperICDCode A double of the upper ICD code.
	 * @return A boolean indicating whether there was a match in the given range.
	 * @throws DBException
	 */
	public boolean hadPriorDiagnoses(long patientID, double lowerICDCode, double upperICDCode)
			throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM OVDiagnosis ovd, OfficeVisits ov, Patients p "
					+ "WHERE ovd.visitID=ov.id AND ov.patientid=p.mid AND p.mid=? "
					+ "AND ovd.icdcode>=? AND ovd.icdcode<?");
			ps.setLong(1, patientID);
			ps.setDouble(2, lowerICDCode);
			ps.setDouble(3, upperICDCode);
			return ps.executeQuery().next(); // if this query has ANY rows, then yes
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.beans.ProcedureBean;
import edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader;
import edu.ncsu.csc.itrust.beans.loaders.PatientLoader;
import edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader;
import edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader;
import edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.DateUtil;

/**
 * Used for managing all static information related to a patient. For other information related to all aspects
 * of patient care, see the other DAOs.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class PatientDAO {
	private DAOFactory factory;
	private PatientLoader patientLoader;
	private PersonnelLoader personnelLoader;
	private DiagnosisBeanLoader diagnosisLoader;
	private PrescriptionBeanLoader prescriptionLoader;
	private ProcedureBeanLoader procedureLoader;

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public PatientDAO(DAOFactory factory) {
		this.factory = factory;
		this.patientLoader = new PatientLoader();
		this.personnelLoader = new PersonnelLoader();
		this.diagnosisLoader = new DiagnosisBeanLoader(true);
		this.prescriptionLoader = new PrescriptionBeanLoader();
		this.procedureLoader = new ProcedureBeanLoader(true);
	}

	/**
	 * Returns the name for the given MID
	 * 
	 * @param mid The MID of the patient in question.
	 * @return A String representing the patient's first name and last name.
	 * @throws iTrustException
	 * @throws DBException
	 */
	public String getName(long mid) throws iTrustException, DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT firstName, lastName FROM Patients WHERE MID=?");
			ps.setLong(1, mid);
			ResultSet rs;
			rs = ps.executeQuery();
			if (rs.next()) {
				return rs.getString("firstName") + " " + rs.getString("lastName");
			} else {
				throw new iTrustException("User does not exist");
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns the role of a particular patient - why is this in PatientDAO? It should be in AuthDAO
	 * 
	 * @param mid The MID of the patient in question.
	 * @param role A String representing the role of the patient.
	 * @return A String representing the patient's role.
	 * @throws iTrustException
	 * @throws DBException
	 */
	public String getRole(long mid, String role) throws iTrustException, DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT role FROM Users WHERE MID=? AND Role=?");
			ps.setLong(1, mid);
			ps.setString(2, role);
			ResultSet rs;
			rs = ps.executeQuery();
			if (rs.next()) {
				return rs.getString("role");
			} else {
				throw new iTrustException("User does not exist with the designated role");
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Adds an empty patient to the table, returns the new MID
	 * 
	 * @return The MID of the patient as a long.
	 * @throws DBException
	 */
	public long addEmptyPatient() throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO Patients(MID) VALUES(NULL)");
			ps.executeUpdate();
			return DBUtil.getLastInsert(conn);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns the patient's information for a given ID
	 * 
	 * @param mid The MID of the patient to retrieve.
	 * @return A PatientBean representing the patient.
	 * @throws DBException
	 */
	public PatientBean getPatient(long mid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM Patients WHERE MID = ?");
			ps.setLong(1, mid);
			ResultSet rs = ps.executeQuery();
			// pdao.logTransaction(type, loggedInMID, secondaryMID, addedInfo)
			if (rs.next()) {
				return patientLoader.loadSingle(rs);
			} else
				return null;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Updates a patient's information for the given MID
	 * 
	 * @param p The patient bean representing the new information for the patient.
	 * @throws DBException
	 */
	public void editPatient(PatientBean p) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE Patients SET firstName=?,lastName=?,email=?,"
					+ "address1=?,address2=?,city=?,state=?,zip1=?, zip2=?,phone1=?,phone2=?,phone3=?,"
					+ "eName=?,ePhone1=?,ePhone2=?,ePhone3=?,iCName=?,iCAddress1=?,iCAddress2=?,iCCity=?,"
					+ "ICState=?,iCZip1=?, iCZip2=?, iCPhone1=?,iCPhone2=?,iCPhone3=?,iCID=?,DateOfBirth=?,"
					+ "DateOfDeath=?,CauseOfDeath=?,MotherMID=?,FatherMID=?,"
					+ "BloodType=?,Ethnicity=?,Gender=?,TopicalNotes=?, CreditCardType=?, CreditCardNumber=?, MessageFilter=? WHERE MID=?");
			patientLoader.loadParameters(ps, p);
			ps.setLong(40, p.getMID());
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns whether or not the patient exists
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A boolean indicating whether the patient exists.
	 * @throws DBException
	 */
	public boolean checkPatientExists(long pid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM Patients WHERE MID=?");
			ps.setLong(1, pid);
			ResultSet rs = ps.executeQuery();
			return rs.next();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Returns a list of HCPs who are declared by the given patient
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of Personnel Beans.
	 * @throws DBException
	 */
	public List<PersonnelBean> getDeclaredHCPs(long pid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			if (pid == 0L) throw new SQLException("pid cannot be 0");
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM DeclaredHCP, Personnel "
					+ "WHERE PatientID=? AND Personnel.MID=DeclaredHCP.HCPID");
			ps.setLong(1, pid);
			ResultSet rs = ps.executeQuery();
			return personnelLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Declares an HCP for a particular patient
	 * 
	 * @param pid The MID of the patient in question.
	 * @param hcpID The HCP's MID.
	 * @return A boolean as to whether the insertion was successful.
	 * @throws DBException
	 * @throws iTrustException
	 */
	public boolean declareHCP(long pid, long hcpID) throws DBException, iTrustException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO DeclaredHCP(PatientID, HCPID) VALUES(?,?)");
			ps.setLong(1, pid);
			ps.setLong(2, hcpID);
			return 1 == ps.executeUpdate();
		} catch (SQLException e) {
			if (1062 == e.getErrorCode())
				throw new iTrustException("HCP " + hcpID + " has already been declared for patient " + pid);
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Undeclare an HCP for a given patient
	 * 
	 * @param pid The MID of the patient in question.
	 * @param hcpID The MID of the HCP in question.
	 * @return A boolean indicating whether the action was successful.
	 * @throws DBException
	 */
	public boolean undeclareHCP(long pid, long hcpID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("DELETE FROM DeclaredHCP WHERE PatientID=? AND HCPID=?");
			ps.setLong(1, pid);
			ps.setLong(2, hcpID);
			return 1 == ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Check if a patient has declared the given HCP
	 * 
	 * @param pid The MID of the patient in question as a long.
	 * @param hcpid The MID of the HCP in question as a long.
	 * @return
	 * @throws DBException
	 */
	public boolean checkDeclaredHCP(long pid, long hcpid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM DeclaredHCP WHERE PatientID=? AND HCPID=?");
			ps.setLong(1, pid);
			ps.setLong(2, hcpid);
			return ps.executeQuery().next();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Return a list of patients that the given patient represents
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of PatientBeans
	 * @throws DBException
	 */
	public List<PatientBean> getRepresented(long pid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT Patients.* FROM Representatives, Patients "
					+ "WHERE RepresenterMID=? AND RepresenteeMID=Patients.MID");
			ps.setLong(1, pid);
			ResultSet rs = ps.executeQuery();
			return patientLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Return a list of patients that the given patient is represented by
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of PatientBeans.
	 * @throws DBException
	 */
	public List<PatientBean> getRepresenting(long pid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT Patients.* FROM Representatives, Patients "
					+ "WHERE RepresenteeMID=? AND RepresenterMID=Patients.MID");
			ps.setLong(1, pid);
			ResultSet rs = ps.executeQuery();
			return patientLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Check if the given representer represents the representee
	 * 
	 * @param representer The MID of the representer in question.
	 * @param representee The MID of the representee in question.
	 * @return A boolean indicating whether represenation is in place.
	 * @throws DBException
	 */
	public boolean represents(long representer, long representee) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn
					.prepareStatement("SELECT * FROM Representatives WHERE RepresenterMID=? AND RepresenteeMID=?");
			ps.setLong(1, representer);
			ps.setLong(2, representee);
			ResultSet rs = ps.executeQuery();
			return rs.next();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Assign a representer to the representee
	 * 
	 * @param representer The MID of the representer as a long.
	 * @param representee The MID of the representee as a long.
	 * @return A boolean as to whether the insertion was correct.
	 * @throws DBException
	 * @throws iTrustException
	 */
	public boolean addRepresentative(long representer, long representee) throws DBException, iTrustException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn
					.prepareStatement("INSERT INTO Representatives(RepresenterMID,RepresenteeMID) VALUES (?,?)");
			ps.setLong(1, representer);
			ps.setLong(2, representee);
			return 1 == ps.executeUpdate();
		} catch (SQLException e) {
			if (1062 == e.getErrorCode())
				throw new iTrustException("Patient " + representer + " already represents patient "
						+ representee);
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Unassign the representation
	 * 
	 * @param representer The MID of the representer in question.
	 * @param representee The MID of the representee in question.
	 * @return A boolean indicating whether the unassignment was sucessful.
	 * @throws DBException
	 */
	public boolean removeRepresentative(long representer, long representee) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn
					.prepareStatement("DELETE FROM Representatives WHERE RepresenterMID=? AND RepresenteeMID=?");
			ps.setLong(1, representer);
			ps.setLong(2, representee);
			return 1 == ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Return a list of all diagnoses for a given patient
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of Diagnoses.
	 * @throws DBException
	 */
	public List<DiagnosisBean> getDiagnoses(long pid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			if (pid == 0L) throw new SQLException("pid cannot be 0");
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM OVDiagnosis ovd, OfficeVisits ov, ICDCodes icd "
					+ "WHERE ovd.VisitID=ov.ID and icd.Code=ovd.ICDCode and ov.PatientID=? "
					+ "ORDER BY ov.visitDate DESC");
			ps.setLong(1, pid);
			ResultSet rs = ps.executeQuery();
			return diagnosisLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
 
	/**
	 * Return a list of all procedures for a given patient
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of all the procedures.
	 * @throws DBException
	 */
	public List<ProcedureBean> getProcedures(long pid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			if (pid == 0L) throw new SQLException("pid cannot be 0");
			conn = factory.getConnection();
			ps = conn.prepareStatement("Select * From OVProcedure ovp, OfficeVisits ov, CPTCodes cpt "
					+ "Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? "
					+ "ORDER BY ov.visitDate desc");
			ps.setLong(1, pid);
			ResultSet rs = ps.executeQuery();
			return procedureLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Return a list of all immunization procedures for a given patient
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of the procedures.
	 * @throws DBException
	 */
	public List<ProcedureBean> getImmunizationProcedures(long pid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			if (pid == 0L) throw new SQLException("pid cannot be 0");
			conn = factory.getConnection();
			ps = conn.prepareStatement("Select * From OVProcedure ovp, OfficeVisits ov, CPTCodes cpt "
					+ "Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? and cpt.attribute='immunization'"
					+ "ORDER BY ov.visitDate desc");
			ps.setLong(1, pid);
			ResultSet rs = ps.executeQuery();
			return procedureLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	
	/**
	 * Return a list of all prescriptions for a patient
	 * 
	 * @param patientID The MID of the patient in question.
	 * @return A java.util.List of prescriptions.
	 * @throws DBException
	 */
	public List<PrescriptionBean> getPrescriptions(long patientID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			if (patientID == 0L) throw new SQLException("pid cannot be 0");
			conn = factory.getConnection();
			ps = conn.prepareStatement("Select * From OVMedication,NDCodes,OfficeVisits "
					+ "Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = "
					+ "OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode "
					+ "ORDER BY OfficeVisits.visitDate DESC, OVMedication.NDCode ASC;");
			ps.setLong(1, patientID);
			ResultSet rs = ps.executeQuery();
			return prescriptionLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Return a list of prescriptions which are currently prescribed for a patient
	 * 
	 * @param patientID The MID of the patient in question.
	 * @return A java.util.List of prescription beans.
	 * @throws DBException
	 */
	public List<PrescriptionBean> getCurrentPrescriptions(long patientID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			if (patientID == 0L) throw new SQLException("pid cannot be 0");
			conn = factory.getConnection();
			
			ps = conn.prepareStatement("Select * From OVMedication,NDCodes,OfficeVisits "
					+ "Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = "
					+ "OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode AND "
					+ "OVMedication.EndDate >= ?" + "ORDER BY OVMedication.ID DESC;");
			ps.setLong(1, patientID);
			ps.setDate(2, DateUtil.getSQLdateXDaysAgoFromNow(91));
			ResultSet rs = ps.executeQuery();
			return prescriptionLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Return a list of prescriptions which are expired prescription for a patient
	 * 
	 * @param patientID The MID of the patient in question.
	 * @return A java.util.List of prescriptions.
	 * @throws DBException
	 **/
	 
	public List<PrescriptionBean> getExpiredPrescriptions (long patientID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			if (patientID == 0L) throw new SQLException("pid cannot be 0");
			conn = factory.getConnection();
			ps = conn.prepareStatement("Select * From OVMedication,NDCodes,OfficeVisits "
					+ "Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = "
					+ "OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode AND "
					+ "OVMedication.EndDate < ?" + "ORDER BY OVMedication.ID DESC;");
			ps.setLong(1, patientID);
			ps.setDate(2, DateUtil.getSQLdateXDaysAgoFromNow(0));
			ResultSet rs = ps.executeQuery();
			return prescriptionLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Lists every patient in the database.
	 * 
	 * @return A java.util.List of PatientBeans representing the patients.
	 * @throws DBException
	 */
	public List<PatientBean> getAllPatients() throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM patients ");
			ResultSet rs = ps.executeQuery();
			return patientLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Return a list of patients with a special-diagnosis-history who
	 * have the logged in HCP as a DHCP and whose medications are going to
	 * expire within seven days.
	 * 
	 * @param hcpMID The MID of the logged in HCP
	 * @return A list of patients satisfying the conditions.
	 * @throws DBException
	 */
	public List<PatientBean> getRenewalNeedsPatients(long hcpMID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			
				
				ps = conn.prepareStatement("SELECT * FROM ( " + 

				"SELECT DISTINCT patients.* From patients, declaredhcp, ovdiagnosis, officevisits, ovmedication " + 
				"Where " + 
				
				"declaredHCP.HCPID = ? AND " + 
				"patients.MID = declaredhcp.PatientID AND " + 
				
				
				"( " + 
				"ovdiagnosis.VisitID = officevisits.ID AND officevisits.PatientID = declaredhcp.PatientID " + 
				"AND " + 
				
				"((ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?) " + 
				"OR (ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?) " + 
				"OR (ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?)) " + 
				") " + 
				
				
				
				"UNION ALL " + 
				
				
				"SELECT DISTINCT patients.* From patients, declaredhcp, ovdiagnosis, officevisits, ovmedication " + 
				"Where " + 
				
				"declaredHCP.HCPID = ? AND " + 
				"patients.MID = declaredhcp.PatientID AND " + 
				
				"( " + 
				"declaredhcp.PatientID = officevisits.PatientID AND officevisits.ID = ovmedication.VisitID " + 
				"AND " + 
				"ovmedication.EndDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY) " + 
				") " + 
				
				") AS final " + 
				
				"GROUP BY final.MID HAVING COUNT(*) = 2 " + 
				
				"ORDER BY final.lastname ASC, final.firstname ASC"); 
			
			ps.setLong(1, hcpMID);
			
			ps.setFloat(2, 250.0f);
			ps.setFloat(3, 251.0f);
				
			ps.setFloat(4, 493.0f);
			ps.setFloat(5, 494.0f);
			
			ps.setFloat(6, 390.0f);
			ps.setFloat(7, 460.99f);

			ps.setLong(8, hcpMID);
			
			ResultSet rs = ps.executeQuery();
			return patientLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Returns all patients with names "LIKE" (as in SQL) the passed in parameters.
	 * 
	 * @param first The patient's first name.
	 * @param last The patient's last name.
	 * @return A java.util.List of PatientBeans.
	 * @throws DBException
	 */
	public List<PatientBean> searchForPatientsWithName(String first, String last) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		
		if (first.equals("%") && last.equals("%")) return new Vector<PatientBean>();
		
		try {
			conn = factory.getConnection();
			
			ps = conn.prepareStatement("SELECT * FROM patients WHERE firstName LIKE ? AND lastName LIKE ?");
			ps.setString(1, first);
			ps.setString(2, last);
			ResultSet rs = ps.executeQuery();
			return patientLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

	
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.SurveyBean;
import edu.ncsu.csc.itrust.beans.loaders.SurveyLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * A DAO for handling all Survey data.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 */
public class SurveyDAO {
	private DAOFactory factory;
	private SurveyLoader surveyLoader;

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public SurveyDAO(DAOFactory factory) {
		this.factory = factory;
		this.surveyLoader = new SurveyLoader();
	}
	
	/**
	 * Insert survey data into database.
	 * @param surveyBean The Bean representing the user's responses which will be inserted.
	 * @param date The date the survey was completed.
	 */
	public void addCompletedSurvey(SurveyBean surveyBean, Date date) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;

		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO OVSurvey (VisitID, SurveyDate) VALUES (?,?)");
			ps.setLong(1, surveyBean.getVisitID());
			ps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));
			ps.executeUpdate();
			if (surveyBean.getWaitingRoomMinutes() > 0) {
				ps = conn.prepareStatement("update OVSurvey set WaitingRoomMinutes = ? where VisitID = ?");
				ps.setFloat(1, surveyBean.getWaitingRoomMinutes());
				ps.setLong(2, surveyBean.getVisitID());
				ps.executeUpdate();
			}
			if (surveyBean.getExamRoomMinutes() > 0) {
				ps = conn.prepareStatement("update OVSurvey set ExamRoomMinutes = ? where VisitID = ?");
				ps.setFloat(1, surveyBean.getExamRoomMinutes());
				ps.setLong(2, surveyBean.getVisitID());
				ps.executeUpdate();
			}
			if (surveyBean.getVisitSatisfaction() > 0) {
				ps = conn.prepareStatement("update OVSurvey set VisitSatisfaction = ? where VisitID = ?");
				ps.setFloat(1, surveyBean.getVisitSatisfaction());
				ps.setLong(2, surveyBean.getVisitID());
				ps.executeUpdate();
			}
			if (surveyBean.getTreatmentSatisfaction() > 0) {
				ps = conn.prepareStatement("update OVSurvey set TreatmentSatisfaction = ? where VisitID = ?");
				ps.setFloat(1, surveyBean.getTreatmentSatisfaction());
				ps.setLong(2, surveyBean.getVisitID());
				ps.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Gets survey data from the database by the office visit id. Creates an instance of an
	 * SurveyBean with data and returns it.
	 * 
	 * @param id The unique ID of the survey in question.
	 * @return A bean containing the SurveyBean.
	 * @throws DBException
	 */
	public SurveyBean getSurveyData(long id) throws DBException {

		Connection conn = null;
		PreparedStatement ps = null;

		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM OVSurvey WHERE VisitID = ?");
			ps.setLong(1, id);
			ResultSet rs = ps.executeQuery();
			rs.next();
			return surveyLoader.loadSingle(rs);

		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Has this survey been completed?
	 * 
	 * @param visitID The unique ID of the office visit we are wondering about.
	 * @return boolean indicating whether this survey is completed.
	 * @throws DBException
	 */
	public boolean isSurveyCompleted(long visitID) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT count(*) FROM OVSurvey WHERE VisitID = ?");
			ps.setLong(1, visitID);
			ResultSet rs = ps.executeQuery();
			rs.next();
			return (rs.getInt(1) == 0) ? false : true;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}

}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.ApptTypeBean;
import edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

public class ApptTypeDAO {
	private DAOFactory factory;
	private ApptTypeBeanLoader atLoader;
	
	public ApptTypeDAO(DAOFactory factory) {
		this.factory = factory;
		this.atLoader = new ApptTypeBeanLoader();
	}
	
	public List<ApptTypeBean> getApptTypes() throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;

		conn = factory.getConnection();
		ps = conn.prepareStatement("SELECT * FROM appointmenttype");
		ResultSet rs = ps.executeQuery();
		
		List<ApptTypeBean> atList = this.atLoader.loadList(rs);
		DBUtil.closeConnection(conn, ps);

		return atList;
	}
	
	public boolean addApptType(ApptTypeBean apptType) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;

		conn = factory.getConnection();
		ps = conn.prepareStatement(
				"INSERT INTO appointmenttype (appt_type, duration) "
			  + "VALUES (?, ?)");
		this.atLoader.loadParameters(ps, apptType);
		int x = ps.executeUpdate();

		DBUtil.closeConnection(conn, ps);
		
		if(x > 0)
			return true;
		else
			return false;
	}
	
	public boolean editApptType(ApptTypeBean apptType) throws SQLException, DBException {
		Connection conn = null;
		PreparedStatement ps = null;

		conn = factory.getConnection();
		ps = conn.prepareStatement("UPDATE appointmenttype SET duration=? WHERE appt_type=?");
		ps.setInt(1, apptType.getDuration());
		ps.setString(2, apptType.getName());
		int x = ps.executeUpdate();

		DBUtil.closeConnection(conn, ps);
		
		if(x > 0)
			return true;
		else
			return false;
	}
}

package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.AdverseEventBean;
import edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import java.sql.Timestamp;

/**
 * Used for the logging mechanism.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class AdverseEventDAO {
	private DAOFactory factory;
	private AdverseEventBeanLoader aeLoader;

	/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
	public AdverseEventDAO(DAOFactory factory) {
		this.factory = factory;
		this.aeLoader = new AdverseEventBeanLoader();
	}

	/**
	 * Gets all the adverse event reports for a certain user MID.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of AdverseEventBeans.
	 * @throws SQLException
	 * @throws DBException 
	 */
public List<AdverseEventBean> getReportsFor(long mid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;	
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM AdverseEvents WHERE PatientMID = ?");
			ps.setLong(1, mid);
			ResultSet rs = ps.executeQuery();

			List<AdverseEventBean> aeList = this.aeLoader.loadList(rs);
			return aeList;
		} catch(SQLException e){
			e.printStackTrace();
			throw new DBException(e);
		} finally{
			DBUtil.closeConnection(conn, ps);
		}
	}

	/**
	 * Adds a message to the database.
	 * @param mBean A bean representing the message to be added.
	 * @throws SQLException
	 * @throws DBException 
	 */
	public void addReport(AdverseEventBean aeBean, long hcpmid) throws DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		try{
			conn = factory.getConnection();
			ps = conn.prepareStatement(
					"INSERT INTO AdverseEvents (PatientMID, PresImmu, Code, Comment, Prescriber, Status) "
					  + "VALUES (?, ?, ?, ?, ?, ?)");
			ps.setString(1, aeBean.getMID());
			ps.setString(2, aeBean.getDrug());
			ps.setString(3, aeBean.getCode());
			ps.setString(4, aeBean.getDescription());
			ps.setLong(5, hcpmid);
			ps.setString(6,"Active");
			ps.executeUpdate();
		} catch(SQLException e){
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	public long getHCPMID(int id) throws DBException{
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM AdverseEvents WHERE id=?");
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();
	
			long hcpMID = 0;
			if(rs.next()) {
				
				 hcpMID = rs.getLong("Prescriber");
			}
			return hcpMID;
		} catch(SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	public AdverseEventBean getReport(int id) throws DBException{
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM AdverseEvents WHERE id=?");
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();
	
			List<AdverseEventBean> aeList = aeLoader.loadList(rs);
			return aeList.get(0);
		} catch(SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);			
		}
	}
	
	public long removeReport(int id) throws DBException{
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("UPDATE AdverseEvents SET Status = ? WHERE id = ?");
			String removed = "removed";
			ps.setString(1, removed);
			ps.setInt(2,id);
			ps.executeUpdate();
			long a = DBUtil.getLastInsert(conn);
			return a;
		} catch(SQLException e){
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);	
		}
	}
	
	public List<AdverseEventBean> getUnremovedAdverseEventsByCode(String code) throws DBException
	{
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM adverseevents WHERE code=? AND status=?");
			ps.setString(1, code);
			ps.setString(2, "Active");
			ResultSet rs;
			rs = ps.executeQuery();
			return aeLoader.loadList(rs);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	public String getNameForCode(String code) throws DBException
	{
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT PresImmu FROM adverseevents WHERE code=?");
			ps.setString(1, code);
			ResultSet rs;
			rs = ps.executeQuery();
			if(rs.next()) {
				 return rs.getString("PresImmu");
			}
			return "Name not Found";
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	public List<AdverseEventBean> getPerscriptions(String start, String end) throws ParseException, DBException{
		Connection conn = null;
		PreparedStatement ps = null;
		
		try{
			SimpleDateFormat fmt = new SimpleDateFormat("MM/dd/yyy");
			Date beginning = fmt.parse(start);
			Date ending = fmt.parse(end);
	 
			conn = factory.getConnection();
			//AND NDCodes.Code=AdverseEvents.Code 
			ps = conn.prepareStatement("SELECT * FROM AdverseEvents,NDCodes WHERE AdverseEvents.TimeLogged >= ? AND AdverseEvents.TimeLogged <= ? AND NDCodes.Code=AdverseEvents.Code ORDER BY AdverseEvents.Code, AdverseEvents.TimeLogged DESC");
			 
			ps.setTimestamp(1, new Timestamp(beginning.getTime()));
			ps.setTimestamp(2, new Timestamp(ending.getTime() + 1000L * 60L * 60 * 24L));
			ResultSet rs = ps.executeQuery();
	
			List<AdverseEventBean> aeList = aeLoader.loadList(rs);
			return aeList;
		} catch(SQLException e){
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);	
		}
	}
	
	public List<AdverseEventBean> getImmunizations(String start, String end) throws ParseException, DBException{
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			SimpleDateFormat fmt = new SimpleDateFormat("MM/dd/yyy");
			Date beginning = fmt.parse(start);
			Date ending = fmt.parse(end);
	 
			conn = factory.getConnection();
			//AND NDCodes.Code=AdverseEvents.Code 
			ps = conn.prepareStatement("SELECT * FROM AdverseEvents,CPTCodes WHERE AdverseEvents.TimeLogged >= ? AND AdverseEvents.TimeLogged <= ? AND CPTCodes.Code=AdverseEvents.Code ORDER BY AdverseEvents.Code, AdverseEvents.TimeLogged DESC");
			 
			ps.setTimestamp(1, new Timestamp(beginning.getTime()));
			ps.setTimestamp(2, new Timestamp(ending.getTime() + 1000L * 60L * 60 * 24L));
			ResultSet rs = ps.executeQuery();
	
			List<AdverseEventBean> aeList = aeLoader.loadList(rs);
			return aeList;
		} catch(SQLException e){
			e.printStackTrace();
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);			
		}
	}
}
package edu.ncsu.csc.itrust.dao;

import java.sql.Connection;
import java.sql.SQLException;
import edu.ncsu.csc.itrust.dao.mysql.AccessDAO;
import edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO;
import edu.ncsu.csc.itrust.dao.mysql.AllergyDAO;
import edu.ncsu.csc.itrust.dao.mysql.ApptDAO;
import edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO;
import edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO;
import edu.ncsu.csc.itrust.dao.mysql.FamilyDAO;
import edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO;
import edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO;
import edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.LOINCDAO;
import edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;
import edu.ncsu.csc.itrust.dao.mysql.MessageDAO;
import edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.ReferralDAO;
import edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO;
import edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO;
import edu.ncsu.csc.itrust.dao.mysql.RiskDAO;
import edu.ncsu.csc.itrust.dao.mysql.SurveyDAO;
import edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO;
import edu.ncsu.csc.itrust.testutils.EvilDAOFactory;
import edu.ncsu.csc.itrust.testutils.TestDAOFactory;

/**
 * The central mediator for all Database Access Objects. The production instance uses the database connection pool
 * provided by Tomcat (so use the production instance when doing stuff from JSPs in the "real code"). Both the
 * production and the test instance parses the context.xml file to get the JDBC connection.
 * 
 * Also, @see {@link EvilDAOFactory} and @see {@link TestDAOFactory}.
 * 
 * Any DAO that is added to the system should be added in this class, in the same way that all other DAOs are.
 * 
 * @author Andy
 * 
 */
public class DAOFactory {
	private static DAOFactory productionInstance = null;
	private IConnectionDriver driver;

	/**
	 * 
	 * @return A production instance of the DAOFactory, to be used in deployment (by Tomcat).
	 */
	public static DAOFactory getProductionInstance() {
		if (productionInstance == null)
			productionInstance = new DAOFactory();
		return productionInstance;
	}

	protected DAOFactory() {
		this.driver = new ProductionConnectionDriver();
	}

	public Connection getConnection() throws SQLException {
		return driver.getConnection();
	}

	public AccessDAO getAccessDAO() {
		return new AccessDAO(this);
	}

	public AllergyDAO getAllergyDAO() {
		return new AllergyDAO(this);
	}
	
	public ApptDAO getApptDAO() {
		return new ApptDAO(this);
	}
	
	public ApptTypeDAO getApptTypeDAO() {
		return new ApptTypeDAO(this);
	}

	public AuthDAO getAuthDAO() {
		return new AuthDAO(this);
	}

	public CPTCodesDAO getCPTCodesDAO() {
		return new CPTCodesDAO(this);
	}
	
	public DrugInteractionDAO getDrugInteractionDAO() {
		return new DrugInteractionDAO(this);
	}

	public FamilyDAO getFamilyDAO() {
		return new FamilyDAO(this);
	}

	public HealthRecordsDAO getHealthRecordsDAO() {
		return new HealthRecordsDAO(this);
	}

	public HospitalsDAO getHospitalsDAO() {
		return new HospitalsDAO(this);
	}

	public ICDCodesDAO getICDCodesDAO() {
		return new ICDCodesDAO(this);
	}

	public NDCodesDAO getNDCodesDAO() {
		return new NDCodesDAO(this);
	}

	public OfficeVisitDAO getOfficeVisitDAO() {
		return new OfficeVisitDAO(this);
	}

	public PatientDAO getPatientDAO() {
		return new PatientDAO(this);
	}

	public PersonnelDAO getPersonnelDAO() {
		return new PersonnelDAO(this);
	}

	public ReferralDAO getReferralDAO() {
		return new ReferralDAO(this);
	}
	
	public RiskDAO getRiskDAO() {
		return new RiskDAO(this);
	}

	public TransactionDAO getTransactionDAO() {
		return new TransactionDAO(this);
	}

	public VisitRemindersDAO getVisitRemindersDAO() {
		return new VisitRemindersDAO(this);
	}

	public FakeEmailDAO getFakeEmailDAO() {
		return new FakeEmailDAO(this);
	}

	public ReportRequestDAO getReportRequestDAO() {
		return new ReportRequestDAO(this);
	}

	public SurveyDAO getSurveyDAO() {
		return new SurveyDAO(this);
	}

	public LabProcedureDAO getLabProcedureDAO() {
		return new LabProcedureDAO(this);
	}

	public LOINCDAO getLOINCDAO() {
		return new LOINCDAO(this);
	}

	public SurveyResultDAO getSurveyResultDAO() {
		return new SurveyResultDAO(this);
	}
	
	public MessageDAO getMessageDAO() {
		return new MessageDAO(this);
	}
	
	public AdverseEventDAO getAdverseEventDAO() {
		return new AdverseEventDAO(this);
	}
	
	public RemoteMonitoringDAO getRemoteMonitoringDAO() {
		return new RemoteMonitoringDAO(this);
	}
	
}

package edu.ncsu.csc.itrust.charts;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;

import de.laures.cewolf.DatasetProduceException;
import de.laures.cewolf.DatasetProducer;
import de.laures.cewolf.links.CategoryItemLinkGenerator;
import de.laures.cewolf.tooltips.CategoryToolTipGenerator;
import edu.ncsu.csc.itrust.beans.AdverseEventBean;

/**
 * This class handles the data for charting in CeWolf/JFreeChart. This class implements DatasetProducer,
 * CategoryToolTipGenerator, CategoryItemLinkGenerator, and Serializable.
 * 
 * @author Jason
 *
 */
public class AdverseEventsData implements DatasetProducer, CategoryToolTipGenerator, CategoryItemLinkGenerator, Serializable {
	
	/**
	 * The generated serializable ID.
	 */
	private static final long serialVersionUID = 6145689621506271656L;

	// Hardcoded months array to make implementation simpler for Adverse Event charts
    private final String[] months = {"Jan","Feb","Mar","Apr","May","June","July","Aug","Sept","Oct","Nov","Dec"};
   
    // Initialize the values for each month to 0
    private int[] values = {0,0,0,0,0,0,0,0,0,0,0,0};
    
    // This will be the list of adverse events
    private List<AdverseEventBean> adverseEvents = new LinkedList<AdverseEventBean>();
    
    // This will be the name of the prescription or immunization under analysis
    private String codeName;
    
    /**
     * Called from the JSP page to initialize the list of Adverse Events needed to
     * produce the desired chart.
     * 
     * @param adEvents
     * @param name
     */
    public void setAdverseEventsList(List<AdverseEventBean> adEvents, String name)
    {
    	adverseEvents = adEvents;
    	this.codeName = name;
    }
    
    /**
     * This method parses the list of Adverse Event Beans to initialize the chart dataset.
     */
    @SuppressWarnings("unchecked")
	public Object produceDataset(Map params) throws DatasetProduceException {
    	// The DefaultCategoryDataset is used for bar charts.
    	// This dataset class may change based on the type of chart you wish to produce.
        DefaultCategoryDataset dataset = new DefaultCategoryDataset(){
			/**
			 * The generated serializable ID.
			 */
			private static final long serialVersionUID = -8238489914590553747L;

			/**
			 * @see java.lang.Object#finalize()
			 */
			protected void finalize() throws Throwable {
				super.finalize();
			}
        };
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        // For each Adverse Event in the list,
        // parse the string repreentation of the report date
        // to a Java Date object. Then, get the month of the
        // Date object and increment the value count for that month.
        for(AdverseEventBean event : adverseEvents)
        {
        	Calendar cal = Calendar.getInstance();
        	try {
				cal.setTime(sdf.parse(event.getDate()));
			} catch (ParseException e) {
				e.printStackTrace();
				throw new DatasetProduceException(e.getMessage());
			}
        	int monthOfReport = cal.get(Calendar.MONTH);
        	values[monthOfReport]++;
        }
        
        // For each month, add the monthly values to the dataset for
        // producing the chart.
        for(int i = 0; i < 12; i++)
        {
        	// values[i] represents the number of adverse events for month i
        	// codeName represents the given prescription/immunization being analyzed
        	// month[i] is the static array of month names, to be used as labels on the chart
        	dataset.addValue(values[i],codeName,months[i]);
        }
          
        return dataset;
    }

    /**
     * This producer's data is invalidated after 5 seconds. By this method the
     * producer can influence Cewolf's caching behaviour the way it wants to.
     */
	@SuppressWarnings("unchecked")
	public boolean hasExpired(Map params, Date since) {		
		return (System.currentTimeMillis() - since.getTime())  > 5000;
	}

	/**
	 * Returns a unique ID for this DatasetProducer
	 */
	public String getProducerId() {
		return "AdverseEventsData DatasetProducer";
	}

    /**
     * Returns a link target for a special data item.
     */
    public String generateLink(Object data, int series, Object category) {
        return months[series];
    }
    
	/**
	 * @see java.lang.Object#finalize()
	 */
	protected void finalize() throws Throwable {
		super.finalize();
	}

	/**
	 * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)
	 */
	public String generateToolTip(CategoryDataset arg0, int series, int arg2) {
		return months[series];
	}

}

package edu.ncsu.csc.itrust.server;

import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpSessionEvent;
import javax.servlet.http.HttpSessionListener;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * A listener which will time the user out after a pre-specified time limit. 
 */
public class SessionTimeoutListener implements HttpSessionListener {
	private DAOFactory factory;

	/**
	 * The default constructor.
	 */
	public SessionTimeoutListener() {
		this.factory = DAOFactory.getProductionInstance();
	}

	/**
	 * The specialized constructor, which takes a particular DAOFactory to be used when checking for the pre-specified
	 * timeout limit.
	 * @param factory The DAOFactory to be used.
	 */
	public SessionTimeoutListener(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Called when the HttpSession is created, this method pulls the pre-specified limit from the
	 * database and sets it as a property of the HttpSession.
	 * @param arg0 The HttpSessionEven which just occurred.
	 */
	public void sessionCreated(HttpSessionEvent arg0) {
		HttpSession session = arg0.getSession();
		int mins = 20;
		try {
			mins = factory.getAccessDAO().getSessionTimeoutMins();
		} catch (DBException e) {
			System.err.println("Unable to set session timeout, defaulting to 20 minutes");
			e.printStackTrace();
		}
		if (mins < 1)
			mins = 1;
		session.setMaxInactiveInterval(mins * 60);
	}

	/**
	 * Must be declared for compliance with the interface. Not implemented.
	 */
	public void sessionDestroyed(HttpSessionEvent arg0) {
		// nothing to do here
	}
}

package edu.ncsu.csc.itrust;

/**
 * Escapes a few key HTML characters and does some other checking
 * 
 * @author Andy
 * 
 */
public class HtmlEncoder {
	/**
	 *  Escapes a few key HTML characters
	 * @param input String to check and escape
	 * @return
	 */
	public static String encode(String input) {
		if (input == null)
			return input;
		String str = input.replaceAll("<", "&lt;");
		str = str.replaceAll(">", "&gt;");
		str = str.replaceAll("\n", "<br />");
		return str;
	}

	/**
	 * Checks URL
	 * 
	 * @param input URL to check
	 * @return false if the input contains http://, true otherwise
	 */
	public static boolean URLOnSite(String input) {
		return !(input.contains("http://"));
	}
}

package edu.ncsu.csc.itrust.tags;

import java.io.IOException;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.PageContext;
import javax.servlet.jsp.tagext.Tag;

/**
 * JSP tag that is used as the patient navigation bar at the bottom of the screen.
 * 
 * To add a new page, add to the two arrays, and make sure that the page accepts PID
 * 
 * @author Andy
 * 
 */
public class PatientNavigation implements Tag {
	private PageContext pageContext;
	private Tag parent;
	// A more elegant solution here would be to use enums and have a displayName, a name, and url
	private String pageTitles[] = { "Health Records", "Basic Health History", "Demographics",
			"Document Office Visit", "Risk Factors", "Prescriptions" };
	private String pageURLs[] = { "editPHR.jsp", "editBasicHealth.jsp", "editPatient.jsp",
			"documentOfficeVisit.jsp", "chronicDiseaseRisks.jsp", "getPrescriptionReport.jsp" };
	private String thisTitle;

	public PatientNavigation() {
		super();
	}

	public int doStartTag() throws JspException {
		try {
			JspWriter out = pageContext.getOut();
			out.write("<span class=\"navigation\">");
			for (int i = 0; i < pageTitles.length; i++) {
				if (pageTitles[i].equals(thisTitle)) {
					out.write(pageTitles[i]);
				} else
					out.write("<a href=\"/iTrust/auth/hcp-uap/" + pageURLs[i] + "\">"
							+ pageTitles[i] + "</a>");
				out.write(" | ");
			}
			out.write("<a href=\"/iTrust/auth/hcp-uap/editPHR.jsp?switch=true\">Switch Patient</a>");
			out.write("<br /></span>");
		} catch (IOException e) {
			e.printStackTrace();
		}
		return SKIP_BODY;
	}

	public int doEndTag() throws JspException {
		return SKIP_BODY;
	}

	public void release() {
	}

	public void setPageContext(PageContext pageContext) {
		this.pageContext = pageContext;
	}

	public void setParent(Tag parent) {
		this.parent = parent;
	}

	public Tag getParent() {
		return parent;
	}

	public String getThisTitle() {
		return thisTitle;
	}

	public void setThisTitle(String thisPage) {
		this.thisTitle = thisPage;
	}
}

package edu.ncsu.csc.itrust.tags;

import java.io.IOException;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.PageContext;
import javax.servlet.jsp.tagext.Tag;

/**
 * JSP tag used as a utility to link to the actual ICD9CM site
 * 
 * @author Andy
 * 
 */
public class ICD9CMLink implements Tag {
	private PageContext pageContext;
	private Tag parent;
	private String code;

	public ICD9CMLink() {
		super();
	}

	public int doStartTag() throws JspException {
		try {
			JspWriter out = pageContext.getOut();
			out.write("<a href=\"http://icd9cm.chrisendres.com/2007/index.php?srchtype=diseases&srchtext="
					+ code + "&Submit=Search&action=search\">" + code + "</a>");
		} catch (IOException e) {
			e.printStackTrace();
		}
		return SKIP_BODY;
	}

	public int doEndTag() throws JspException {
		return SKIP_BODY;
	}

	public void release() {
	}

	public void setPageContext(PageContext pageContext) {
		this.pageContext = pageContext;
	}

	public void setParent(Tag parent) {
		this.parent = parent;
	}

	public Tag getParent() {
		return parent;
	}

	public String getCode() {
		return code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	public void setCode(double code) {
		this.code = String.valueOf(code);
	}
}

package edu.ncsu.csc.itrust.tags;

import java.io.IOException;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.PageContext;
import javax.servlet.jsp.tagext.Tag;
import edu.ncsu.csc.itrust.enums.State;

/**
 * JSP tag that adds an HTML select for states, from the enum.
 * 
 * @see {@link State}
 * 
 * Also selects the current state
 * @author Andy
 * 
 */
public class StateSelect implements Tag {
	private PageContext pageContext;
	private Tag parent;
	private String name;
	private String value;

	public StateSelect() {
		super();
	}

	public int doStartTag() throws JspException {
		try {
			JspWriter out = pageContext.getOut();
			out.write("<select name=\"" + getName() + "\" >");
			if (name == null || "".equals(name))
				out.write("<option value=\"\">Select State</option>");
			for (State state : State.values()) {
				String selected = state.toString().equals(getValue()) ? "selected=selected" : "";
				out.write("<option value=\"" + state.toString() + "\" " + selected + ">" + state.getName()
						+ "</option>");
			}
			out.write("</select>");
		} catch (IOException e) {
			e.printStackTrace();
		}
		return SKIP_BODY;
	}

	public int doEndTag() throws JspException {
		return SKIP_BODY;
	}

	public void release() {
	}

	public void setPageContext(PageContext pageContext) {
		this.pageContext = pageContext;
	}

	public void setParent(Tag parent) {
		this.parent = parent;
	}

	public Tag getParent() {
		return parent;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getValue() {
		return value;
	}

	public void setValue(String value) {
		this.value = value;
	}
}

package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Please note that this is not the best mitigation for Denial of Service attacks. The better way would be to
 * keep track of password failure attempts per user account, NOT with easily spoofable ip addresses. The
 * reason this feature is implemented with ip addresses is a limitation in Tomcat authentication (actually,
 * it's technically JSP's fault for not specifying a form of account lockout). <br />
 * <br />
 * All authentication in this application is done by the container (Tomcat), which doesn't support account
 * lockout. So our options would be (a) to implement our own authentication (yuck!), or (2) to extend the
 * JDBCRealm class in the Tomcat source code and add the logic. I've looked into this and it's actually pretty
 * easy. The ONLY reason it's not implemented here is that the code would be buried in a jar in your Tomcat
 * installation - not very educational for those who want to learn about authentication in webapps. Feel free
 * to change this; extending this would be perfectly acceptable.
 * 
 * @author Andy
 * 
 */
public class LoginFailureAction {
	public static final int MAX_LOGIN_ATTEMPTS = 3;
	private AuthDAO authDAO;
	private String ipAddr;
	private TransactionDAO transactionDAO;

	/**
	 * Set up defaults
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param ipAddr The IP address of the user making the login attempt.
	 */
	public LoginFailureAction(DAOFactory factory, String ipAddr) {
		this.authDAO = factory.getAuthDAO();
		this.ipAddr = ipAddr;
		this.transactionDAO = factory.getTransactionDAO();
	}

	/**
	 * Calls authDAO to record the login failure in the database
	 * 
	 * @return How many login failure attempts or a DBException message
	 */
	public String recordLoginFailure() {
		try {
			authDAO.recordLoginFailure(ipAddr);
			int loginFailures = authDAO.getLoginFailures(ipAddr);
			transactionDAO.logTransaction(TransactionType.LOGIN_FAILURE, 0L, 0L, "IP: " + ipAddr);
			return "Login failed, attempt " + loginFailures;
		} catch (DBException e) {
			e.printStackTrace();
			return e.getMessage();
		}
	}

	/**
	 * Checks to see if the current user can login (#failures<3)
	 * 
	 * @return true if the user is valid to login
	 */
	public boolean isValidForLogin() {
		try {
			return authDAO.getLoginFailures(ipAddr) < 3;
		} catch (DBException e) {
			System.err.println("Denying access due to DBException");
			return false;
		}
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.Messages;

/**
 * Handles viewing the office visits, prescriptions, and HCP name for the given ovID Used by
 * viewOfficeVisit.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ViewOfficeVisitAction extends OfficeVisitBaseAction {
	private OfficeVisitDAO ovDAO;
	private PersonnelDAO personnelDAO;
	private PatientDAO patientDAO;

	/**
	 * Super class handles validating the loggedInMid and ovIDString
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing their office visits. 
	 * @param ovIDString
	 *            The unique identifier of the office visit as a String.
	 * @throws iTrustException
	 */
	public ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String ovIDString)
			throws iTrustException {
		super(factory, String.valueOf(loggedInMID), ovIDString);
		this.personnelDAO = factory.getPersonnelDAO();
		this.ovDAO = factory.getOfficeVisitDAO();
	}

	/**
	 * Super class handles validating the pidString and ovIDString. Usually used for representing a patient.
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param repPIDString The MID of the representative viewing the records.
	 * @param ovIDString
	 *            The unique identifier of the office visit as a String.
	 * @throws iTrustException
	 */
	public ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String repPIDString, String ovIDString)
			throws iTrustException {
		super(factory, repPIDString, ovIDString);
		this.personnelDAO = factory.getPersonnelDAO();
		this.patientDAO = factory.getPatientDAO();
		this.ovDAO = factory.getOfficeVisitDAO();
		checkRepresented(loggedInMID, repPIDString);
	}

	private void checkRepresented(long loggedInMID, String repPIDString) throws iTrustException {
		try {
			long repee = Long.valueOf(repPIDString);
			if (!patientDAO.represents(loggedInMID, repee))
				throw new iTrustException(
						Messages.getString("ViewOfficeVisitAction.0")); //$NON-NLS-1$
		} catch (NumberFormatException e) {
			throw new iTrustException(Messages.getString("ViewOfficeVisitAction.1")); //$NON-NLS-1$
		}
	}

	/**
	 * Returns the office visit as an OfficeVisitBean for the ovID that was initially passed to the
	 * constructor
	 * 
	 * @return the OfficeVisitBean for the ovID
	 * @throws iTrustException
	 */
	public OfficeVisitBean getOfficeVisit() throws iTrustException {
		return ovDAO.getOfficeVisit(ovID);
	}

	/**
	 * Returns the prescriptions associated with the ovID initially passed to the constructor
	 * 
	 * @return list of PrescriptionBeans for the ovID
	 * @throws DBException
	 */
	public List<PrescriptionBean> getPrescriptions() throws DBException {
		return ovDAO.getPrescriptions(ovID);
	}

	/**
	 * Returns the name of the HCP for the hcpID passed as a param
	 * 
	 * @param hcpID
	 * @return the name of the HCP
	 * @throws iTrustException
	 */
	public String getHCPName(long hcpID) throws iTrustException {
		String name = null;
		try {
			name = personnelDAO.getName(hcpID);
		} catch (iTrustException e) {
			e.printStackTrace();
			name = e.getMessage();
		}
		return name;
			
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Used for Document Office Visit page (documentOfficeVisit.jsp). This just adds an empty office visit, and
 * provides a list of office visits in case you want to edit an old office visit.
 * 
 * Very similar to {@link AddPatientAction}
 * 
 * @author Andy Meneely
 * 
 */
public class AddOfficeVisitAction extends PatientBaseAction {
	private DAOFactory factory;
	private OfficeVisitDAO ovDAO;
	private TransactionDAO transDAO;

	/**
	 * Sets up the defaults for the class
	 * @param factory
	 * @param pidString
	 *            Patient ID to be validated by the superclass, {@link PatientBaseAction}
	 * @throws iTrustException
	 */
	public AddOfficeVisitAction(DAOFactory factory, String pidString) throws iTrustException {
		super(factory, pidString);
		this.factory = factory;
		this.transDAO = factory.getTransactionDAO();
		ovDAO = factory.getOfficeVisitDAO();
	}

	/**
	 * Adds an empty office visit
	 * 
	 * @param loggedInMID
	 *            For logging purposes
	 * @return Office visit ID (primary key) of the new office visit
	 * @throws DBException
	 */
	public long addEmptyOfficeVisit(long loggedInMID) throws DBException {
		OfficeVisitBean ov = new OfficeVisitBean();
		ov.setHcpID(loggedInMID);
		ov.setPatientID(pid);
		long visitID = ovDAO.add(ov);
		transDAO.logTransaction(TransactionType.DOCUMENT_OFFICE_VISIT, loggedInMID, pid, "visit id: "
				+ visitID);
		return visitID;
	}

	/**
	 * Lists all office visits for a particular patient, regardless of who originally documented the office
	 * visit.
	 * 
	 * @return List of office visits,
	 * @throws iTrustException
	 */
	public List<OfficeVisitBean> getAllOfficeVisits() throws iTrustException {
		return ovDAO.getAllOfficeVisits(pid);
	}

	/**
	 * Returns the full name of the patient with this MID
	 * 
	 * @return name in the form of a string
	 * @throws DBException
	 * @throws iTrustException
	 */
	public String getUserName() throws DBException, iTrustException {
		return factory.getAuthDAO().getUserName(pid);
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.AllergyBean;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.FamilyMemberBean;
import edu.ncsu.csc.itrust.beans.HealthRecord;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.ReportRequestBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AllergyDAO;
import edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO;
import edu.ncsu.csc.itrust.dao.mysql.FamilyDAO;
import edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO;
import edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO;
import edu.ncsu.csc.itrust.dao.mysql.SurveyDAO;
import edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Handles patients viewing their own records Used by viewMyRecords.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ViewMyRecordsAction {
	private PatientDAO patientDAO;
	private PersonnelDAO personnelDAO;
	private AllergyDAO allergyDAO;
	private FamilyDAO familyDAO;
	private HealthRecordsDAO hrDAO;
	private OfficeVisitDAO ovDAO;
	private SurveyDAO surveyDAO;
	private LabProcedureDAO labDAO;
	private FakeEmailDAO emailDAO;
	private ICDCodesDAO icdDAO;
	private ReportRequestDAO reportRequestDAO;
	private long loggedInMID;

	/**
	 * Set up
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing the records.
	 */
	public ViewMyRecordsAction(DAOFactory factory, long loggedInMID) {
		this.patientDAO = factory.getPatientDAO();
		this.personnelDAO = factory.getPersonnelDAO();
		this.allergyDAO = factory.getAllergyDAO();
		this.familyDAO = factory.getFamilyDAO();
		this.hrDAO = factory.getHealthRecordsDAO();
		this.ovDAO = factory.getOfficeVisitDAO();
		this.surveyDAO = factory.getSurveyDAO();
		this.labDAO = factory.getLabProcedureDAO();
		this.emailDAO = factory.getFakeEmailDAO();
		this.reportRequestDAO = factory.getReportRequestDAO();
		this.icdDAO = factory.getICDCodesDAO();
		this.loggedInMID = loggedInMID;
	}

	/**
	 * Takes the patient's representee as a param and returns it as a long if the patient represents the input
	 * param
	 * 
	 * @param input
	 *            the patient's representee mid
	 * @return representee's mid as a long
	 * @throws iTrustException
	 */
	public long representPatient(String input) throws iTrustException {

		try {
			long reppeeMID = Long.valueOf(input);
			if (patientDAO.represents(loggedInMID, reppeeMID)) {
				loggedInMID = reppeeMID;
				return reppeeMID;
			} else
				throw new iTrustException("You do not represent patient " + reppeeMID);
		} catch (NumberFormatException e) {
			throw new iTrustException("MID is not a number");
		}
	}

	/**
	 * Returns a PatientBean for the currently logged in patient
	 * 
	 * @return PatientBean for the currently logged in patient
	 * @throws iTrustException
	 */
	public PatientBean getPatient() throws iTrustException {
		return patientDAO.getPatient(loggedInMID);
	}
	
	/**
	 * Returns a PatientBean for the specified MID
	 * @param mid id of the requested bean
	 * @return PatientBean for the specified MID
	 * @throws iTrustException
	 */
	public PatientBean getPatient(long mid) throws iTrustException {
		return patientDAO.getPatient(mid);
	}

	/**
	 * Returns a PersonnelBean for the requested MID
	 * @param mid id of the requested bean
	 * @return a PersonnelBean for the requested MID
	 * @throws iTrustException
	 */
	public PersonnelBean getPersonnel(long mid) throws iTrustException {
		return personnelDAO.getPersonnel(mid);
	}

	/**
	 * Returns a PatientBean for the currently logged in patient
	 * 
	 * @return PatientBean for the currently logged in patient
	 * @throws iTrustException
	 */
	public List<Email> getEmailHistory() throws iTrustException {
		return emailDAO.getEmailsByPerson(getPatient().getEmail());
	}

	/**
	 * Returns a list of AllergyBeans for the currently logged in patient
	 * 
	 * @return a list of AllergyBeans for the currently logged in patient
	 * @throws iTrustException
	 */
	public List<AllergyBean> getAllergies() throws iTrustException {
		return allergyDAO.getAllergies(loggedInMID);
	}

	/**
	 * Returns a list of Parents, Siblings, and Children of the currently logged in patient
	 * 
	 * @return list of FamilyMemberBeans
	 */
	public List<FamilyMemberBean> getFamily() throws iTrustException {
		List<FamilyMemberBean> fam = new ArrayList<FamilyMemberBean>();
		List<FamilyMemberBean> parents = null;
		try {
			parents = familyDAO.getParents(loggedInMID);
			fam.addAll(parents);
			fam.addAll(familyDAO.getSiblings(loggedInMID));
			fam.addAll(familyDAO.getChildren(loggedInMID));
		} catch (DBException e) {
			throw new iTrustException(e.getMessage());
		}
		
		if(parents != null) {
			List<FamilyMemberBean> grandparents = new ArrayList<FamilyMemberBean>();
			for(FamilyMemberBean parent : parents) {
				try {
					grandparents.addAll(familyDAO.getParents(parent.getMid()));
				} catch (DBException e) {
					throw new iTrustException(e.getMessage());
				}
			}
			
			fam.addAll(grandparents);
			
			for(FamilyMemberBean gp : grandparents) {
				gp.setRelation("Grandparent");
			}
		}
		return fam;
	}
	
	/**
	 * Returns a list of Parents, Siblings, and Grand Parents of the currently logged in patient
	 * 
	 * @return list of FamilyMemberBeans
	 */
	public List<FamilyMemberBean> getFamilyHistory() throws iTrustException {
		List<FamilyMemberBean> fam = new ArrayList<FamilyMemberBean>();
		List<FamilyMemberBean> parents = null;
		try {
			parents = familyDAO.getParents(loggedInMID);
			fam.addAll(parents);
			fam.addAll(familyDAO.getSiblings(loggedInMID));
		} catch (DBException e) {
			throw new iTrustException(e.getMessage());
		}
		
		if(parents != null) {
			List<FamilyMemberBean> grandparents = new ArrayList<FamilyMemberBean>();
			for(FamilyMemberBean parent : parents) {
				try {
					grandparents.addAll(familyDAO.getParents(parent.getMid()));
				} catch (DBException e) {
					throw new iTrustException(e.getMessage());
				}
			}
			
			fam.addAll(grandparents);
			
			for(FamilyMemberBean gp : grandparents) {
				gp.setRelation("Grandparent");
			}
		}
		return fam;
	}

	/**
	 * Returns a list of HealthRecords for the currently logged in patient
	 * 
	 * @return a list of HealthRecords for the currently logged in patient
	 * @throws iTrustException
	 */
	public List<HealthRecord> getAllHealthRecords() throws iTrustException {
		return hrDAO.getAllHealthRecords(loggedInMID);
	}
	
	/**
	 * Returns a list of HealthRecords for the specified family member
	 * 
	 * @return a list of HealthRecords for the specified family member
	 * @throws iTrustException
	 */
	public List<HealthRecord> getFamilyHealthRecords(long mid) throws iTrustException {
		return hrDAO.getAllHealthRecords(mid);
	}

	/**
	 * Returns a list of OfficeVisitBeans for all office visits for the currently logged in patient
	 * 
	 * @return  a list of OfficeVisitBeans for all office visits for the currently logged in patient
	 * @throws iTrustException
	 */
	public List<OfficeVisitBean> getAllOfficeVisits() throws iTrustException {
		return ovDAO.getAllOfficeVisits(loggedInMID);
	}

	/**
	 * Returns a complete OfficeVisitBean given a visitID
	 * 
	 * @return a complete OfficeVisitBean given a visitID
	 * @throws iTrustException
	 */
	public OfficeVisitBean getCompleteOfficeVisit(long visitID) throws iTrustException {
		return ovDAO.getOfficeVisit(visitID);
	}
	
	/**
	 * Returns a list of PatientBeans of all patients the currently logged in patient represents
	 * 
	 * @return a list of PatientBeans of all patients the currently logged in patient represents
	 * @throws iTrustException
	 */
	public List<PatientBean> getRepresented() throws iTrustException {
		return patientDAO.getRepresented(loggedInMID);
	}

	/**
	 * Returns a list of PatientBeans of all patients the currently logged in patient represents
	 * 
	 * @return a list of PatientBeans of all patients the currently logged in patient represents
	 * @throws iTrustException
	 */
	public List<PatientBean> getRepresenting() throws iTrustException {
		return patientDAO.getRepresenting(loggedInMID);
	}

	/**
	 * Has a survey been created for this office visit
	 * 
	 * @param visitID ID of the office visit in question
	 * @return true if the survey has been completed, otherwise false
	 * @throws iTrustException
	 */
	public boolean isSurveyCompleted(long visitID) throws iTrustException {
		return surveyDAO.isSurveyCompleted(visitID);
	}

	/**
	 * Returns a list of lab procedures
	 * 
	 * @return a list of lab procedures for the logged in patient
	 * @throws DBException
	 */
	public List<LabProcedureBean> getLabs() throws iTrustException {
		return labDAO.getLabProceduresForPatient(loggedInMID);

	}

	/**
	 * Returns all the report requests for the logged in patient
	 * @return the report requests for the logged in patient
	 * @throws iTrustException
	 */
	public List<ReportRequestBean> getReportRequests() throws iTrustException {
		return reportRequestDAO.getAllReportRequestsForPatient(loggedInMID);
	}
	
	/**
	 * Checks to see if family members have high blood pressure
	 * 
	 * @param member the family member in question
	 * @return true if the family member has the risk factor, otherwise false.
	 * @throws iTrustException
	 */
	public boolean doesFamilyMemberHaveHighBP(FamilyMemberBean member) throws iTrustException {
		List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());
		if(records.size() == 0)
			return false;
		for(HealthRecord record : records) {
			if(record.getBloodPressureSystolic() > 240 || record.getBloodPressureDiastolic() > 120 )
				return true;
		}
		return false;
	}
	
	/**
	 * Checks to see if family members have high cholesterol
	 * 
	 * @param member the family member in question
	 * @return true if the family member has the risk factor, otherwise false.
	 * @throws iTrustException
	 */
	public boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) throws iTrustException {
		List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());
		if(records.size() == 0)
			return false;
		for(HealthRecord record : records) {
			if(record.getCholesterolHDL() < 35 || record.getCholesterolLDL() > 250 )
				return true;
		}
		return false;
	}
	
	/**
	 * Checks to see if family members have diabetes
	 * 
	 * @param member the family member in question
	 * @return true if the family member has the risk factor, otherwise false.
	 * @throws iTrustException
	 */
	public boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean member) throws iTrustException {
		List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());
		if(diagnoses.size() == 0)
			return false;
		for(DiagnosisBean diag : diagnoses) {
			if(diag.getICDCode().startsWith("250"))
				return true;
		}
		return false;
	}
	
	/**
	 * Checks to see if family members have cancer
	 * 
	 * @param member the family member in question
	 * @return true if the family member has the risk factor, otherwise false.
	 * @throws iTrustException
	 */
	public boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) throws iTrustException {
		List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());
		if(diagnoses.size() == 0)
			return false;
		for(DiagnosisBean diag : diagnoses) {
			if(diag.getICDCode().startsWith("199"))
				return true;
		}
		return false;
	}
	
	/**
	 * Checks to see if family members have heart disease
	 * 
	 * @param member the family member in question
	 * @return true if the family member has the risk factor, otherwise false.
	 * @throws iTrustException
	 */
	public boolean doesFamilyMemberHaveHeartDisease(FamilyMemberBean member) throws iTrustException {
		List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());
		if(diagnoses.size() == 0)
			return false;
		for(DiagnosisBean diag : diagnoses) {
			if(diag.getICDCode().startsWith("402"))
				return true;
		}
		return false;
	}
	
	/**
	 * Checks to see if family members smoke
	 * 
	 * @param member the family member in question
	 * @return true if the family member has the risk factor, otherwise false.
	 * @throws iTrustException
	 */
	public boolean isFamilyMemberSmoker(FamilyMemberBean member) throws iTrustException {
		List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());
		if(records.size() == 0)
			return false;
		for(HealthRecord record : records) {
			if(record.isSmoker())
				return true;
		}
		return false;
	}
	
	/**
	 * Checks to see if family member is dead, and if so, what their cause of death was
	 * 
	 * @param member the family member in question
	 * @return the cause of death for the family member
	 * @throws iTrustException
	 */
	public String getFamilyMemberCOD(FamilyMemberBean member) throws iTrustException {
		PatientBean patient = patientDAO.getPatient(member.getMid());
		if(patient.getCauseOfDeath() == null)
			return "";
		DiagnosisBean diag = icdDAO.getICDCode(patient.getCauseOfDeath());
		if(diag == null)
			return "";
		return diag.getDescription();
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.Messages;

/**
 * Handles retrieving personnel beans for a given personnel Used by viewPersonnel.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ViewPersonnelAction {
	private PersonnelDAO personnelDAO;
	private TransactionDAO transDAO;
	private FakeEmailDAO emailDAO;
	private long loggedInMID;

	/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person retrieving personnel beans.
	 */
	public ViewPersonnelAction(DAOFactory factory, long loggedInMID) {
		this.emailDAO = factory.getFakeEmailDAO();
		this.personnelDAO = factory.getPersonnelDAO();
		this.transDAO = factory.getTransactionDAO();
		this.loggedInMID = loggedInMID;
	}

	/**
	 * Retrieves a PersonnelBean for the mid passed as a param
	 * 
	 * @param input
	 *            the mid for which the PersonnelBean will be returned
	 * @return PersonnelBean
	 * @throws iTrustException
	 */
	public PersonnelBean getPersonnel(String input) throws iTrustException {
		try {
			long mid = Long.valueOf(input);
			PersonnelBean personnel = personnelDAO.getPersonnel(mid);
			if (personnel != null) {
				transDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, mid,
						Messages.getString("ViewPersonnelAction.0") + mid); //$NON-NLS-1$
				return personnel;
			} else
				throw new iTrustException(Messages.getString("ViewPersonnelAction.1")); //$NON-NLS-1$
		} catch (NumberFormatException e) {
			e.printStackTrace();
			throw new iTrustException(Messages.getString("ViewPersonnelAction.2")); //$NON-NLS-1$
		}
	}
	
	/**
	 * Returns a PatientBean for the currently logged in personnel
	 * 
	 * @return The PatientBean
	 * @throws iTrustException
	 */
	public List<Email> getEmailHistory() throws iTrustException {
		return emailDAO.getEmailsByPerson(personnelDAO.getPersonnel(loggedInMID).getEmail());
	}

}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.HospitalBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Manages the assignment of HCPs to hospitals Used by hospitalAssignments.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ManageHospitalAssignmentsAction {
	private TransactionDAO transDAO;
	private PersonnelDAO personnelDAO;
	private HospitalsDAO hospitalsDAO;
	private long loggedInMID;

	/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user managing hospitals.
	 */
	public ManageHospitalAssignmentsAction(DAOFactory factory, long loggedInMID) {
		this.loggedInMID = loggedInMID;
		this.transDAO = factory.getTransactionDAO();
		this.personnelDAO = factory.getPersonnelDAO();
		this.hospitalsDAO = factory.getHospitalsDAO();
	}

	/**
	 * Returns a list of hospitals to which the given mid is not currently assigned
	 * 
	 * @param midString
	 * @return list of HospitalBeans
	 * @throws iTrustException
	 */
	public List<HospitalBean> getAvailableHospitals(String midString) throws iTrustException {
		try {
			long mid = Long.valueOf(midString);
			List<HospitalBean> allHospitals = hospitalsDAO.getAllHospitals();
			List<HospitalBean> ourHospitals = personnelDAO.getHospitals(mid);
			while (!ourHospitals.isEmpty()) {
				allHospitals.remove(ourHospitals.remove(0));
			}

			return allHospitals;
		} catch (NumberFormatException e) {
			throw new iTrustException("HCP's MID not a number");
		}
	}

	/**
	 * Returns a list of hospitals to which the given mid is currently assigned
	 * 
	 * @param midString
	 * @return list of HosptialBeans
	 * @throws iTrustException
	 */
	public List<HospitalBean> getAssignedHospitals(String midString) throws iTrustException {
		try {
			long mid = Long.valueOf(midString);
			return personnelDAO.getHospitals(mid);
		} catch (NumberFormatException e) {
			throw new iTrustException("HCP's MID not a number");
		}
	}

	/**
	 * Assigns the mid to the hospital
	 * 
	 * @param midString The MID of the person assigned to the hospital as a String.
	 * @param hospitalID The ID of the hospital.
	 * @return message indicating the status of the assignment
	 * @throws iTrustException
	 */
	public String assignHCPToHospital(String midString, String hospitalID) throws iTrustException {
		try {
			long hcpID = Long.valueOf(midString);
			boolean confirm = hospitalsDAO.assignHospital(hcpID, hospitalID);
			if (confirm) {/*
							 * only patient is mentioned for transaction type 0, but spec looks like personnel
							 * should be included too...
							 */
				transDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, hcpID,
						"HCP Assigned to Hospital");
				return "HCP successfully assigned.";
			} else
				return "Assignment did not occur";
		} catch (NumberFormatException e) {
			throw new iTrustException("HCP's MID not a number");
		}
	}

	/**
	 * Removes HCPs assignment to the designated hospital
	 * 
	 * @param midString
	 *            the HCP's mid
	 * @param hospitalID
	 *            the hospital id to be removed
	 * @return Status message
	 * @throws iTrustException
	 */
	public String removeHCPAssignmentToHospital(String midString, String hospitalID) throws iTrustException {
		try {
			long hcpID = Long.valueOf(midString);
			boolean confirm = hospitalsDAO.removeHospitalAssignment(hcpID, hospitalID);
			if (confirm) {
				transDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, hcpID,
						"HCP unassigned from hospital");
				return "HCP successfully unassigned";
			} else
				return "HCP not unassigned";
		} catch (NumberFormatException e) {
			throw new iTrustException("HCP's MID not a number");
		}
	}

	/**
	 * Removes all hospital assignments for the given hcp mid
	 * 
	 * @param midString
	 *            HCP's mid
	 * @return status message
	 * @throws iTrustException
	 */
	public int removeAllAssignmentsFromHCP(String midString) throws iTrustException {
		try {
			long hcpID = Long.valueOf(midString);
			int numAssignments = hospitalsDAO.removeAllHospitalAssignmentsFrom(hcpID);
			if (0 < numAssignments) {
				transDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, hcpID,
						"HCP unassigned from all hospital");
			}
			return numAssignments;
		} catch (NumberFormatException e) {
			throw new iTrustException("HCP's MID not a number");
		}
	}

	/**
	 * Checks if the hcpID param is a HCP
	 * 
	 * @param hcpID
	 *            the String to be checked
	 * @return the mid as a long if the hcpID is a HCP's mid
	 * @throws iTrustException
	 */
	public long checkHCPID(String hcpID) throws iTrustException {
		try {
			long pid = Long.valueOf(hcpID);
			if (personnelDAO.checkPersonnelExists(pid))
				return pid;
			else
				throw new iTrustException("HCP does not exist");
		} catch (NumberFormatException e) {
			throw new iTrustException("HCP ID is not a number: " + e.getMessage());
		}
	}

}

package edu.ncsu.csc.itrust.action;

import java.util.Arrays;
import java.util.List;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.validate.LabProcedureValidator;
/**
 * Class for LabProcUAP.jsp.  Handles lab procedures for UAPs
 */
public class LabProcUAPAction {
	private TransactionDAO transDAO;
	private LabProcedureDAO lpDAO;
	long loggedInMID;
	private LabProcedureValidator validator;
	private DAOFactory factory;

/**
 * Setup 
 * @param factory The DAOFactory used to create the DAOs used in this action.
 * @param loggedInMID UAP who is logged in
 */
	public LabProcUAPAction(DAOFactory factory, long loggedInMID) {
		transDAO = factory.getTransactionDAO();
		lpDAO = factory.getLabProcedureDAO();
		this.loggedInMID = loggedInMID;
		validator = new LabProcedureValidator();
		this.factory = factory;
	}
	
	/**
	 * Updates a lab procedure
	 * 
	 * @param b the procedure to update
	 * @throws DBException
	 * @throws FormValidationException
	 */
	public void updateProcedure(LabProcedureBean b) throws DBException, FormValidationException{
		validator.validate(b);
		//need to check if status is what's being changed - if new status!=old status send email
		if(!b.getStatus().equals(lpDAO.getLabProcedure(b.getProcedureID()).getStatus())){
			new EmailUtil(factory).sendEmail(makeEmail(b));
		}
		lpDAO.updateLabProcedure(b);
		transDAO.logTransaction(TransactionType.ENTER_EDIT_LAB_PROCEDURE, loggedInMID, 
				b.getPid(), "UAP updated procedure id: "
				+ b.getProcedureID());
	}
	
	/**
	 * Sends an e-mail informing the patient that their procedure has been updated
	 * 
	 * @param b the procedure that was updated
	 * @return an e-mail to the patient with the notice
	 * @throws DBException
	 */
	private Email makeEmail(LabProcedureBean b) throws DBException{
		
		PatientBean p = new PatientDAO(factory).getPatient(b.getPid());
		
		Email email = new Email();
		email.setFrom("no-reply@itrust.com");
		email.setToList(Arrays.asList(p.getEmail()));
		email.setSubject("A Lab Procedure Was Updated");
		email.setBody(String.format("Dear %s, \n Your Lab Procedure (%s) has a new updated status of %s. Log on to iTrust to view.",  p.getFullName(),b.getLoinc(),b.getStatus()));
		return email;
	}
	
	/**
	 * Returns a list of all the lab procedures
	 * 
	 * @param id MID of the UAP viewing the procedures 
	 * @return a list of all the lab procedures for that UAP
	 * @throws DBException
	 */
	public List<LabProcedureBean> viewProcedures(long id) throws DBException {
		transDAO.logTransaction(TransactionType.VIEW_LAB_PROCEDURE, loggedInMID,
				id, "UAP viewed procedures");
		return lpDAO.getAllLabProceduresDate(id);
	}
}

package edu.ncsu.csc.itrust.action;


import java.util.List;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.Messages;

/*
 * This action returns a list of patients with a special-diagnosis-history who
 * have the logged in HCP as a DHCP and whose medications are going to
 * expire within seven days. 
 */
public class ViewPrescriptionRenewalNeedsAction {
	private PatientDAO patientDAO;
	private TransactionDAO transDAO;
	private long loggedInMID;

	/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing the prescription renewals.
	 */
	public ViewPrescriptionRenewalNeedsAction(DAOFactory factory, long loggedInMID) {
		this.patientDAO = factory.getPatientDAO();
		this.transDAO = factory.getTransactionDAO();
		this.loggedInMID = loggedInMID;
	}
	
	/**
	 * Uses PatientDAO as a helper class to return a list of patients with a special-diagnosis-history who
	 * have the logged in HCP as a DHCP and whose medications are going to
	 * expire within seven days.
	 * 
	 * @return A list of PatientBean's
	 */
	public List<PatientBean> getRenewalNeedsPatients() {
	
		try {	
			transDAO.logTransaction(TransactionType.VIEW_RENEWAL_NEEDS_PATIENTS, loggedInMID, 
					0L, loggedInMID + Messages.getString("ViewPrescriptionRenewalNeedsAction.0")); //$NON-NLS-1$
			return patientDAO.getRenewalNeedsPatients(loggedInMID);
		}
		catch (DBException e) {
			System.out.println(Messages.getString("ViewPrescriptionRenewalNeedsAction.1")); //$NON-NLS-1$
			System.out.println(e);
			return null;
		}
	}
	
}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import java.util.ArrayList;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.validate.LabProcedureValidator;

/**
 * Action class for LabProcHCP.jsp.
 * 
 * @extends LabProcUAPAction
 */
public class LabProcHCPAction extends LabProcUAPAction {
	private TransactionDAO transDAO;
	private LabProcedureDAO lpDAO;
	private OfficeVisitDAO ovDAO;
	long loggedInMID;
	private LabProcedureValidator validator;

	
	/**
	 * Sets up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID  MID for the logged in HCP
	 */
	
	public LabProcHCPAction(DAOFactory factory, long loggedInMID) {
		super(factory, loggedInMID);
		transDAO = factory.getTransactionDAO();
		lpDAO = factory.getLabProcedureDAO();
		ovDAO = factory.getOfficeVisitDAO();
		this.loggedInMID = loggedInMID;
		validator = new LabProcedureValidator();

	}

	/**
	 * This method sorts by LOINC and returns the list
	 * 
	 * @param id the ID to sort the list by
	 * @return List sorted by LOINC
	 */
	public List<LabProcedureBean> sortByLOINC(long id) throws DBException {
		return lpDAO.getAllLabProceduresLOINC(id);
	}

	/**
	 * Returns a list of all the lab procedures for the next month
	 * 
	 * @return all the lab procedures for the next month
	 */
	public List<LabProcedureBean> getLabProcForNextMonth() throws DBException {
		List<LabProcedureBean> listLabProc = new ArrayList<LabProcedureBean>(0);
		List<OfficeVisitBean> listOV = ovDAO.getAllOfficeVisitsForLHCP(loggedInMID);
		for (OfficeVisitBean ov : listOV) {
			if (listLabProc.isEmpty() == true) {
				listLabProc = lpDAO.getLabProceduresForLHCPForNextMonth(ov.getID());
			}
			else {
				for (LabProcedureBean lb : lpDAO.getLabProceduresForLHCPForNextMonth(ov.getID())) {
					listLabProc.add(lb);
				}
			}
		}
		return listLabProc;
	}

	/**
	 * Changes the privacy settings
	 * 
	 * @param x the ID of the procedure to change 
	 * 
	 */
	public void changePrivacy(long x) throws DBException, FormValidationException {
		LabProcedureBean pb = lpDAO.getLabProcedure(x);
		if (checkAccess(x)) {
			if (pb.getRights().equals(LabProcedureBean.Restrict)) {
				pb.allow();
			} else {
				pb.restrict();
			}
			validator.validate(pb);
			lpDAO.updateRights(pb);
			transDAO.logTransaction(TransactionType.ENTER_EDIT_LAB_PROCEDURE, loggedInMID, pb.getPid(),
					"Privacy Changed procedure id: " + pb.getProcedureID());
		}

	}
	
	/**
	 * Checks to see if the logged in HCP is the one who made the procedure.  Used to generate links for page to edit OfficeVisit
	 * 
	 * @param x the ID of the HCP to check
	 * 
	 */
	public boolean checkAccess(long x) throws DBException, FormValidationException {
		LabProcedureBean pb = lpDAO.getLabProcedure(x);
		OfficeVisitBean ovbean = ovDAO.getOfficeVisit(pb.getOvID());
		return (loggedInMID == ovbean.getHcpID());

	}
}

package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.RandomPassword;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.AddPersonnelValidator;

/**
 * Used for Add Personnel page (addPersonnel.jsp). This just adds an empty PHA, creates a random password
 * for them.
 * 
 * Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}
 * 
 */
public class AddPHAAction {
	private PersonnelDAO personnelDAO;
	private AuthDAO authDAO;
	private TransactionDAO transDAO;
	private long loggedInMID;

	/**
	 * Sets up the defaults for the class
	 * 
	 * @param factory factory for creating the defaults.
	 * @param loggedInMID person currently logged in 
	 * @author Andy Meneely
	 */	
	
	public AddPHAAction(DAOFactory factory, long loggedInMID) {
		this.personnelDAO = factory.getPersonnelDAO();
		this.authDAO = factory.getAuthDAO();
		this.transDAO = factory.getTransactionDAO();
		this.loggedInMID = loggedInMID;
	}
	
	/**
	 * Adds the new user.   Event is logged.
	 * 
	 * @param p bean containing the information for the new user
	 * @return MID of the new user.
	 * @throws FormValidationException
	 * @throws iTrustException
	 */
	public long add(PersonnelBean p) throws FormValidationException, iTrustException {
		new AddPersonnelValidator().validate(p);
		long newMID = personnelDAO.addEmptyPersonnel(Role.PHA);
		p.setMID(newMID);
		personnelDAO.editPersonnel(p);
		String pwd = authDAO.addUser(newMID, Role.PHA, RandomPassword.getRandomPassword());
		p.setPassword(pwd);
		//transDAO.logTransaction(TransactionType.CREATE_DISABLE_PATIENT_HCP, loggedInMID);
		transDAO.logTransaction(TransactionType.CREATE_DISABLE_PHA, loggedInMID, newMID, "Added New PHA");
		return newMID;
	}

}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Edits a patient's personal representatives. Used by hcp/editRepresentatives.jsp
 * 
 * @author laurenhayward
 * 
 */
public class EditRepresentativesAction extends PatientBaseAction {
	private PatientDAO patientDAO;
	private TransactionDAO transDAO;
	private AuthDAO authDAO;
	private long loggedInMID;

	/**
	 * Super class validates the patient mid
	 * 
	 * @param factory The DAOFactory used in creating the DAOs for this action.
	 * @param loggedInMID The MID of the patient editing his/her representatives.
	 * @param pidString The MID of the representative in question.
	 * @throws iTrustException
	 */
	public EditRepresentativesAction(DAOFactory factory, long loggedInMID, String pidString)
			throws iTrustException {
		super(factory, pidString);
		this.loggedInMID = loggedInMID;
		this.transDAO = factory.getTransactionDAO();
		this.patientDAO = factory.getPatientDAO();
		this.authDAO = factory.getAuthDAO();
	}

	/**
	 * Return a list of patients that pid represents
	 * 
	 * @param pid The id of the personnel we are looking up representees for.
	 * @return a list of PatientBeans
	 * @throws iTrustException
	 */
	public List<PatientBean> getRepresented(long pid) throws iTrustException {
		return patientDAO.getRepresented(pid);
	}

	/**
	 * Makes the patient (pid) represent the input mid parameter
	 * 
	 * @param pidString
	 *            the mid of the person who will be represented (the representee)
	 * @return a message
	 * @throws iTrustException
	 */
	public String addRepresentative(String pidString) throws iTrustException {
		try {
			long representee = Long.valueOf(pidString);
			if (authDAO.getUserRole(representee) != Role.PATIENT)
				throw new iTrustException("This user is not a patient!");
			else if (super.pid == representee)
				throw new iTrustException("This user cannot represent themselves.");

			boolean confirm = patientDAO.addRepresentative(pid, representee);
			if (confirm) {
				transDAO.logTransaction(TransactionType.DECLARE_REPRESENTATIVE, loggedInMID, pid, "patient "
						+ pid + " now represents patient " + representee);
				return "Patient represented";
			} else
				return "No change made";
		} catch (NumberFormatException e) {
			return "MID not a number";
		}
	}

	/**
	 * Makes the patient (pid) no longer represent the input mid param
	 * 
	 * @param input
	 *            the mid of the person be represented (representee)
	 * @return a message
	 * @throws iTrustException
	 */
	public String removeRepresentative(String input) throws iTrustException {
		try {
			long representee = Long.valueOf(input);
			boolean confirm = patientDAO.removeRepresentative(pid, representee);
			if (confirm) {
				transDAO.logTransaction(TransactionType.DECLARE_REPRESENTATIVE, loggedInMID, pid, "patient "
						+ pid + " no longer represents patient " + representee);
				return "Patient represented";
			} else
				return "No change made";
		} catch (NumberFormatException e) {
			return "MID not a number";
		}
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.SurveyResultBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.SurveySearchValidator;

/**
 * This class is used to handle retrieving survey results from the database.  It also logs the transaction.
 */
public class ViewSurveyResultAction {
	
	private SurveyResultDAO surveyResultDAO;
	private TransactionDAO transDAO;
	private SurveySearchValidator validator;
	long loggedInMID;
	
	/**
	 * Set up defaults.
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person retrieving survey results.
	 */
	public ViewSurveyResultAction(DAOFactory factory, long loggedInMID) {
		transDAO = factory.getTransactionDAO();
		surveyResultDAO = factory.getSurveyResultDAO();
		this.loggedInMID = loggedInMID;
		validator = new SurveySearchValidator();
	}
	
	/**
	 * Retrieves survey results for a whole hospital.
	 * @param bean The SurveyResultBean containing the survey result specs.
	 * @return A java.util.List of Survey Results.
	 * @throws iTrustException
	 * @throws FormValidationException
	 */
	public List<SurveyResultBean> getSurveyResultsForHospital(SurveyResultBean bean) throws iTrustException, FormValidationException {
		
		transDAO.logTransaction(TransactionType.View_HCP_SURVEY_RESULTS, loggedInMID, 0, "searched results by HCP hospital ID");	
		
		return surveyResultDAO.getSurveyResultsForHospital(bean.getHCPhospital(), bean.getHCPspecialty());

		
	}
	
	/**
	 * Retrieves survey results for a given zip code.
	 * @param bean The SurveyResultBean containing the survey result specs.
	 * @return A java.util.List of Survey Results.
	 * @throws iTrustException
	 * @throws FormValidationException
	 */
	public List<SurveyResultBean> getSurveyResultsForZip(SurveyResultBean bean) throws iTrustException, FormValidationException {
		
		validator.validate(bean);
		transDAO.logTransaction(TransactionType.View_HCP_SURVEY_RESULTS, loggedInMID, 0, "searched results by HCP zip code");
		
		return surveyResultDAO.getSurveyResultsForZip(bean.getHCPzip(), bean.getHCPspecialty());

	}

}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Handles changes (adds and removes) to the monitoring list for a certain HCP.
 * 
 */
public class EditMonitoringListAction {
	private RemoteMonitoringDAO rmDAO;
	private TransactionDAO transDAO;
	private AuthDAO authDAO;
	private long loggedInMID;

	/**
	 * Constructor
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the HCP editing their monitoring list.
	 */
	public EditMonitoringListAction(DAOFactory factory, long loggedInMID) {
		this.loggedInMID = loggedInMID;
		this.rmDAO = factory.getRemoteMonitoringDAO();
		this.transDAO = factory.getTransactionDAO();
		this.authDAO = factory.getAuthDAO();
	}

	/**
	 * Adds a patient to the current HCP's remote monitoring list
	 * 
	 * @param patientMID the patient
	 * @return true if added successfully. False if already in list.
	 * @throws DBException
	 */
	public boolean addToList(long patientMID) throws DBException {
		transDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID, patientMID, "add");
		return rmDAO.addPatientToList(patientMID, loggedInMID);
	}
	
	/**
	 * Removes a patient from the current HCP's remote monitoring list
	 * 
	 * @param patientMID the patient
	 * @return true if removed successfully. False if not in list.
	 * @throws DBException
	 */
	public boolean removeFromList(long patientMID) throws DBException {
		transDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID, patientMID, "delete");
		return rmDAO.removePatientFromList(patientMID, loggedInMID);
	}
	
	/**
	 * Returns whether a patient is in an HCP's list already
	 * @param patientMID the patient
	 * @return true if in DB, false otherwise
	 * @throws DBException
	 */
	public boolean isPatientInList(long patientMID) throws DBException {
		List<RemoteMonitoringDataBean> dataset = rmDAO.getPatientsData(loggedInMID);
		for(RemoteMonitoringDataBean d: dataset) {
			if(d.getPatientMID() == patientMID)
				return true;
		}
		return false;
	}
	
	/**
	 * returns the patient name
	 * 
	 * @return patient name
	 * @throws DBException
	 * @throws iTrustException
	 */
	public String getPatientName(long pid) throws DBException, iTrustException {
		return authDAO.getUserName(pid);
	}
	
}

package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.PatientValidator;
import edu.ncsu.csc.itrust.EmailUtil;


/**
 * Edits a patient Used by editPatient.jsp
 * 
 * @author laurenhayward
 * 
 */
public class EditPatientAction extends PatientBaseAction {
	private TransactionDAO transDAO;
	private PatientValidator validator = new PatientValidator();
	private PatientDAO patientDAO;
	private long loggedInMID;
	private EmailUtil emailutil;

	/**
	 * The super class validates the patient id
	 * 
	 * @param factory The DAOFactory used to create the DAOs for this action.
	 * @param loggedInMID The MID of the user who is authorizing this action.
	 * @param pidString The MID of the patient being edited.
	 * @throws iTrustException
	 */
	public EditPatientAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {
		super(factory, pidString);
		this.patientDAO = factory.getPatientDAO();
		this.transDAO = factory.getTransactionDAO();
		this.loggedInMID = loggedInMID;
		emailutil = new EmailUtil(factory);
	}

	/**
	 * Takes the information out of the PatientBean param and updates the patient's information
	 * 
	 * @param p
	 *            the new patient information
	 * @throws iTrustException
	 * @throws FormValidationException
	 */
	public void updateInformation(PatientBean p) throws iTrustException, FormValidationException {
		p.setMID(pid); // for security reasons
		validator.validate(p);
		patientDAO.editPatient(p);
		transDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, pid, "EditPatient - Made Changes");
		emailutil.sendEmail(makeEmail());
	}

	/**
	 * Returns a PatientBean for the patient
	 * 
	 * @return the PatientBean
	 * @throws DBException
	 */
	public PatientBean getPatient() throws DBException {
		transDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, pid, "EditPatient - View Patient");
		return patientDAO.getPatient(this.getPid());
	}

	/**
	 *  Creates and e-mail to inform the patient that their information has been updated.
	 *  
	 * @return the email with the notice
	 * @throws DBException
	 */
	private Email makeEmail() throws DBException{

		Email email = new Email();
		List<PatientBean> reps = patientDAO.getRepresenting(pid);
		PatientBean pb = patientDAO.getPatient(pid);
		
		List<String> toAddrs = new ArrayList<String>();
		toAddrs.add(pb.getEmail());
		for (PatientBean r: reps) {
			toAddrs.add(r.getEmail());
		}
		
		email.setFrom("no-reply@itrust.com");
    	email.setToList(toAddrs); // patient and personal representative
    	email.setSubject(String.format("Patient Information Updated"));
    	email.setBody("Dear " + pb.getFullName() + ",\n\tYour patient record information has been updated. " + 
    			"Please login to iTrust to see who has viewed your records.");
		return email;
	}
	
	public void editMessageFilter(String filter) throws iTrustException, FormValidationException {
		PatientBean b = this.getPatient();
		b.setMessageFilter(filter);
		this.updateInformation(b);
	}
}

package edu.ncsu.csc.itrust.action;

import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.beans.ApptBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.ApptDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.exception.iTrustException;

public class ViewMyApptsAction {
	private long loggedInMID;
	private ApptDAO apptDAO;
	private PatientDAO patientDAO;
	private PersonnelDAO personnelDAO;
	
	public ViewMyApptsAction(DAOFactory factory, long loggedInMID) {
		this.loggedInMID = loggedInMID;
		this.apptDAO = factory.getApptDAO();
		this.patientDAO = factory.getPatientDAO();
		this.personnelDAO = factory.getPersonnelDAO();
	}
	
	public List<ApptBean> getMyAppointments() throws SQLException {
		return apptDAO.getApptsFor(loggedInMID);
	}
	
	/**
	 * Gets a users's name from their MID
	 * 
	 * @param mid the MID of the user
	 * @return the user's name
	 * @throws iTrustException
	 */
	public String getName(long mid) throws iTrustException {
		if(mid < 7000000000L)
			return patientDAO.getName(mid);
		else
			return personnelDAO.getName(mid);
	}
	
	/**
	 * Get All Appointments for the admins use... may need to change!
	 * @return
	 * @throws SQLException
	 */
	public List<ApptBean> getAllAppts()  throws SQLException {
		return apptDAO.getAllAppts();
	}
}

package edu.ncsu.csc.itrust.action;


import edu.ncsu.csc.itrust.beans.ReferralBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.ReferralDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.exception.DBException;
import java.util.List;

/**
 * Used for referring patients to other HCPs.  The call is made in /auth/hcp/hcpConsultation.jsp 
 */
public class ReferralManagementAction {
	private long loggedInMID;
	private TransactionDAO transDAO;
	private ReferralDAO referralDAO;

	/**
	 * Super class validates the patient id
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user managing this referral.
	 * @param pidString The MID of the patient being referred.
	 * @throws iTrustException
	 */
	public ReferralManagementAction(DAOFactory factory, long loggedInMID) throws iTrustException {
		
		this.referralDAO = factory.getReferralDAO();
		this.loggedInMID = loggedInMID;
		this.transDAO = factory.getTransactionDAO();
	}

	/**
	 * Adds a referral bean to the database.
	 * @param r The referral bean to be added.
	 * @throws DBException
	 */
	public void sendReferral(ReferralBean r) throws DBException {
		referralDAO.addReferral(r);
		transDAO.logTransaction(TransactionType.SEND_REFERRAL, loggedInMID);
	}
	
	/**
	 * Updates an existing referral bean.
	 * @param r The current referral bean.
	 * @throws DBException
	 */
	public void updateReferral(ReferralBean r) throws DBException {
		referralDAO.editReferral(r);
	}
	
	/**
	 * Gets the referrals the currently logged in MID has sent.
	 * @return A java.util.List of ReferralBeans this MID has sent.
	 * @throws DBException
	 */
	public List<ReferralBean> getReferralsSentFromMe() throws DBException {
		return referralDAO.getReferralsSentFrom(loggedInMID);
	}
	
	/**
	 * Gets the referrals this MID has received.
	 * @return A java.util.List of the ReferralBeans this MID has received.
	 * @throws DBException
	 */
	public List<ReferralBean> getReferralsSentToMe() throws DBException {
		return referralDAO.getReferralsSentTo(loggedInMID);
	}

}

package edu.ncsu.csc.itrust.action;


import edu.ncsu.csc.itrust.RandomPassword;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.AddPersonnelValidator;

/**
 * Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password
 * for them.
 * 
 * Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}
 * 
 * @author Andy Meneely
 * 
 * Copied from AddHCPAction 
 */


public class AddERespAction {
	private PersonnelDAO personnelDAO;
	private AuthDAO authDAO;
	private TransactionDAO transDAO;
	private long loggedInMID;

/**
 * Sets up the defaults for the class
 * 
 * @param factory factory for creating the defaults.
 * @param loggedInMID person currently logged in 
 * @author Andy Meneely
 */	
	
	public AddERespAction(DAOFactory factory, long loggedInMID) {
		this.personnelDAO = factory.getPersonnelDAO();
		this.authDAO = factory.getAuthDAO();
		this.transDAO = factory.getTransactionDAO();
		this.loggedInMID = loggedInMID;
	}

	/**
	 * Adds the new user.  Event is logged.
	 * 
	 * @param p bean containing the information for the new user
	 * @return MID of the new user.
	 * @throws FormValidationException
	 * @throws iTrustException
	 */
	public long add(PersonnelBean p) throws FormValidationException, iTrustException {
		new AddPersonnelValidator().validate(p);
		long newMID = personnelDAO.addEmptyPersonnel(Role.ER);
		p.setMID(newMID);
		personnelDAO.editPersonnel(p);
		String pwd = authDAO.addUser(newMID, Role.ER, RandomPassword.getRandomPassword());
		p.setPassword(pwd);

		transDAO.logTransaction(TransactionType.CREATE_DISABLE_ER, loggedInMID, newMID, "Added New " + p.getRole().name());
		return newMID;
	}

}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.beans.HealthRecord;
import edu.ncsu.csc.itrust.beans.forms.HealthRecordForm;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.HealthRecordFormValidator;

/**
 * Edits the health history of a patient, used by editBasicHealth.jsp
 * 
 * @author laurenhayward
 * 
 */
public class EditHealthHistoryAction extends PatientBaseAction {
	private TransactionDAO transDAO;
	private HealthRecordsDAO hrDAO;
	private AuthDAO authDAO;
	private long loggedInMID;
	private HealthRecordFormValidator validator = new HealthRecordFormValidator();

	/**
	 * The patient ID is validated by the superclass
	 * 
	 * @param factory The DAOFactory which will be used to generate the DAOs used for this action.
	 * @param loggedInMID The user authorizing this action.
	 * @param pidString The patient (or other user) who is being edited.
	 * @throws iTrustException
	 */
	public EditHealthHistoryAction(DAOFactory factory, long loggedInMID, String pidString)
			throws iTrustException {
		super(factory, pidString);
		this.hrDAO = factory.getHealthRecordsDAO();
		this.authDAO = factory.getAuthDAO();
		this.transDAO = factory.getTransactionDAO();
		this.loggedInMID = loggedInMID;
	}

	/**
	 * returns the patient name
	 * 
	 * @return patient name
	 * @throws DBException
	 * @throws iTrustException
	 */
	public String getPatientName() throws DBException, iTrustException {
		return authDAO.getUserName(pid);
	}

	/**
	 * Adds a health record for the given patient
	 * 
	 * @param pid  The patient record who is being edited.
	 * @param hr  The filled out health record form to be added.
	 * @return message - "Information Recorded" or exception's message
	 * @throws FormValidationException
	 */
	public String addHealthRecord(long pid, HealthRecordForm hr) throws FormValidationException,
			iTrustException {
		validator.validate(hr);
		HealthRecord record = transferForm(pid, hr);
		hrDAO.add(record);
		transDAO.logTransaction(TransactionType.ENTER_EDIT_PHR, loggedInMID, pid, "EditHealthHistory - Add Record");
		return "Information Recorded";
	}

	
/**
 * Moves the information from the form to a HealthRecord
 * 
 * @param pid Patient of interest
 * @param form Form to be translated
 * @return a HealthRecord containing all the information in the form
 * @throws FormValidationException
 */
	
	private HealthRecord transferForm(long pid, HealthRecordForm form) throws FormValidationException {
		HealthRecord record = new HealthRecord();
		record.setPatientID(pid);
		record.setPersonnelID(loggedInMID);
		record.setBloodPressureD(Integer.valueOf(form.getBloodPressureD()));
		record.setBloodPressureN(Integer.valueOf(form.getBloodPressureN()));
		record.setCholesterolHDL(Integer.valueOf(form.getCholesterolHDL()));
		record.setCholesterolLDL(Integer.valueOf(form.getCholesterolLDL()));
		record.setCholesterolTri(Integer.valueOf(form.getCholesterolTri()));
		if (record.getTotalCholesterol() < 100 || record.getTotalCholesterol() > 600)
			throw new FormValidationException("Total cholesterol must be in [100,600]");
		record.setHeight(Double.valueOf(form.getHeight()));
		record.setWeight(Double.valueOf(form.getWeight()));
		record.setSmoker(Boolean.valueOf(form.getIsSmoker()));
		return record;
	}

	/**
	 * Returns a list of all HealthRecords for the given patient
	 * 
	 * @param pid  The ID of the patient to look up
	 * @return list of HealthRecords
	 * @throws iTrustException
	 */
	public List<HealthRecord> getAllHealthRecords(long pid) throws iTrustException {
		transDAO.logTransaction(TransactionType.VIEW_HEALTH_RECORDS, loggedInMID, pid, "EditHealthHistory - View Records");
		return hrDAO.getAllHealthRecords(pid);
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Handles retrieving beans for viewPrescriptionRecords.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ViewExpiredPrescriptionsAction {
	private PatientDAO patientDAO;
	private PersonnelDAO personnelDAO;
	private TransactionDAO transDAO;
	private EmailUtil emailer;
	private long loggedInMID;

	/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing the expired prescriptions.
	 */
	public ViewExpiredPrescriptionsAction(DAOFactory factory, long loggedInMID) {
		this.emailer = new EmailUtil(factory);
		this.patientDAO = factory.getPatientDAO();
		this.personnelDAO = factory.getPersonnelDAO();
		this.transDAO = factory.getTransactionDAO();
		this.loggedInMID = loggedInMID;
	}
	
	/**
	 * Gets a PatientBean from an MID
	 * 
	 * @param patientID MID of the patient
	 * @return PatientBean for the MID given
	 * @throws iTrustException
	 */
	public PatientBean getPatient(long patientID) throws iTrustException {
		return patientDAO.getPatient(patientID);
	}
	
	/**
	 * Gets the logged in person's representees
	 * 
	 * @return list of PatientBeans holding the representees
	 * @throws iTrustException
	 */
	public List<PatientBean> getRepresentees() throws iTrustException {
		return patientDAO.getRepresented(loggedInMID);
	}
	
	/**
	 * Returns the prescribing HCP for a prescription
	 * 
	 * @param prescription item in question
	 * @return HCP who prescribed the prescription
	 * @throws iTrustException
	 */
	public PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {
		return personnelDAO.getPrescribingDoctor(prescription);
	}
	
	/**
	 * Returns all the prescriptions for a given patient
	 * 
	 * @param patientID patient in question
	 * @return list of all the prescriptions for that patient
	 * @throws iTrustException
	 */
	public List<PrescriptionBean> getPrescriptionsForPatient(long patientID) throws iTrustException {
		PatientBean patient = patientDAO.getPatient(patientID);
		if (loggedInMID == patientID) {
			transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);
			return patientDAO.getExpiredPrescriptions(patientID);
		}
		
		List<String> toList = new ArrayList<String>();
		toList.add(patient.getEmail());
		
		List<PatientBean> representatives = patientDAO.getRepresenting(patientID);
		for(PatientBean representative : representatives) {
			if (loggedInMID == representative.getMID()) {
				transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);
				return patientDAO.getExpiredPrescriptions(patientID);
			}
			toList.add(representative.getEmail());
		}
		
		List<PersonnelBean> dlhcps = patientDAO.getDeclaredHCPs(patientID);
		for(PersonnelBean dlhcp : dlhcps) {
			if (loggedInMID == dlhcp.getMID()) {
				transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);
				return patientDAO.getExpiredPrescriptions(patientID);
			}
			List<PersonnelBean> uaps = personnelDAO.getUAPsForHCP(dlhcp.getMID());
			for(PersonnelBean uap : uaps) {
				if (loggedInMID == uap.getMID()) {
					transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);
					return patientDAO.getPrescriptions(patientID);
				}
			}
		}
		
		Email email = new Email();
		email.setToList(toList);
		email.setFrom("noreply@itrust.com");
		email.setSubject("Undesignated Personnel Have Accessed Your Prescription Records");
		email.setBody("An undesignated HCP or UAP has accessed your prescription records. For more information, please log in to iTrust.");
		emailer.sendEmail(email);
		transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);
		return patientDAO.getPrescriptions(patientID);
	}
}

package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AccessDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Used to change the session timeout, sessionTimeout.jsp. Note that a change to this timeout only gets
 * reflected on new sessions.
 * 
 * @author Andy Meneely
 * 
 */
public class ChangeSessionTimeoutAction {
	private AccessDAO accessDAO;

	/**
	 * Sets up defualts.
	 * 
	 * @param factory
	 * @author Andy Meneely
	 */
	public ChangeSessionTimeoutAction(DAOFactory factory) {
		this.accessDAO = factory.getAccessDAO();
	}

	/**
	 * Changes the session timeout, the complicated logic of this is somewhat regrettably in the DAO,
	 * {@link AccessDAO}
	 * 
	 * @param minuteString
	 *            Pass the number of minutes in the form of a string, greater than 0.
	 * @throws FormValidationException
	 * @throws DBException
	 * @author Andy Meneely
	 */
	public void changeSessionTimeout(String minuteString) throws FormValidationException, DBException {
		try {
			Integer minutes = Integer.valueOf(minuteString);
			if (minutes < 1)
				throw new FormValidationException("Must be a number greater than 0");
			accessDAO.setSessionTimeoutMins(minutes);
		} catch (NumberFormatException e) {
			throw new FormValidationException("That is not a number");
		}
	}

	/**
	 * Returns the current session timeout in minutes, as reflected in the database
	 * 
	 * @return the number of minutes it would take for an inactive session to timeout
	 * @throws DBException
	 * @author Andy Meneely
	 */
	public int getSessionTimeout() throws DBException {
		return accessDAO.getSessionTimeoutMins();
	}
}

package edu.ncsu.csc.itrust.action;

import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import edu.ncsu.csc.itrust.beans.MessageBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.MessageDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Action class for ViewMyMessages.jsp
 *
 */
public class ViewMyMessagesAction {
	private long loggedInMID;
	private PatientDAO patientDAO;
	private PersonnelDAO personnelDAO;
	private MessageDAO messageDAO;

	/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user who is viewing their messages.
	 */
	public ViewMyMessagesAction(DAOFactory factory, long loggedInMID) {
		this.loggedInMID = loggedInMID;
		this.patientDAO = factory.getPatientDAO();
		this.personnelDAO = factory.getPersonnelDAO();
		this.messageDAO = factory.getMessageDAO();
	}
	
	/**
	 * Gets all the messages for the logged in user
	 * 
	 * @return a list of all the user's messages
	 * @throws SQLException
	 */
	public List<MessageBean> getAllMyMessages() throws SQLException {
		
		return messageDAO.getMessagesFor(loggedInMID);
	}
	
	/**
	 * Gets all the messages for the logged in user and sorts by ascending time
	 * 
	 * @return a list of all the user's messages
	 * @throws SQLException
	 */
	public List<MessageBean> getAllMyMessagesTimeAscending() throws SQLException {
		
		return messageDAO.getMessagesTimeAscending(loggedInMID);
	}
	
	/**
	 * Gets all the messages for the logged in user and sorts names in ascending order
	 * 
	 * @return a list of all the user's messages
	 * @throws SQLException
	 */
	public List<MessageBean> getAllMyMessagesNameAscending() throws SQLException {
		
		return messageDAO.getMessagesNameAscending(loggedInMID);
	}
	
	/**
	 * Gets all the messages for the logged in user and sorts name in descending order
	 * 
	 * @return a list of all the user's messages
	 * @throws SQLException
	 */
	public List<MessageBean> getAllMyMessagesNameDescending() throws SQLException {
		
		return messageDAO.getMessagesNameDescending(loggedInMID);
	}
	
	/**
	 * Gets all the sent messages for the logged in user
	 * 
	 * @return a list of all the user's sent messages
	 * @throws SQLException
	 */
	public List<MessageBean> getAllMySentMessages() throws SQLException {
		
		return messageDAO.getMessagesFrom(loggedInMID);
	}
	
	/**
	 * Gets all the messages for the logged in user and sorts by ascending time
	 * 
	 * @return a list of all the user's messages
	 * @throws SQLException
	 */
	public List<MessageBean> getAllMySentMessagesTimeAscending() throws SQLException {
		
		return messageDAO.getMessagesFromTimeAscending(loggedInMID);
	}
	
	/**
	 * Gets all the messages for the logged in user and sorts names in ascending order
	 * 
	 * @return a list of all the user's messages
	 * @throws SQLException
	 */
	public List<MessageBean> getAllMySentMessagesNameAscending() throws SQLException {
		
		return messageDAO.getMessagesFromNameAscending(loggedInMID);
	}
	
	/**
	 * Gets all the messages for the logged in user and sorts name in descending order
	 * 
	 * @return a list of all the user's messages
	 * @throws SQLException
	 */
	public List<MessageBean> getAllMySentMessagesNameDescending() throws SQLException {
		
		return messageDAO.getMessagesFromNameDescending(loggedInMID);
	}
	
	public String validateAndCreateFilter(String filter) {
		String[] f = filter.split(",", -1);
		
		DateFormat format = new SimpleDateFormat("MM/dd/yyyy");
		Date s = null;
		Date en = null;
		try {	
			if(!f[4].equals(""))
				s = format.parse(f[4]);
			if(!f[5].equals(""))
				en = format.parse(f[5]);
			if(s!=null && en!=null && en.before(s)) {
				return "Error: The end date cannot be before the start date.";
			}
		} catch(Exception e) {
			return "Error: A date was not formatted correctly, please enter dates as MM/DD/YYYY";
		}
		
		for(int i=0; i<f.length; i++) {
			f[i]=f[i].replace("\"", "");
			f[i]=f[i].replace("<","");
			f[i]=f[i].replace(">","");
		}
		
		String nf = f[0]+","+f[1]+","+f[2]+","+f[3]+","+f[4]+","+f[5];
		
		return nf;
	}
	
	/**
	 * Gets a list of messages for a user based on their filter criteria.
	 * 
	 * @param messages List of all of a user's MessageBeans
	 * @param filter String containing a user's filter criteria.
	 * @return a List of MessageBeans that meet the criteria of the filter.
	 * @throws iTrustException
	 * @throws ParseException
	 */
	public List<MessageBean> filterMessages(List<MessageBean> messages, String filter) throws iTrustException, ParseException {
		List<MessageBean> filtered = new ArrayList<MessageBean>();
		String[] f = filter.split(",", -1);
		for(MessageBean m : messages) {
			/**
			 * Check the sender filter field.
			 * Exclude if this MessageBean does not match the 
			 * requested sender, if one is specified.
			 */
			if(!f[0].equals("")) {
				if(!this.getName(m.getFrom()).equalsIgnoreCase(f[0]))
					continue;
			}
			/**
			 * Check the subject filter field.
			 * Exclude if this MessageBean does not match the 
			 * requested subject, if one is specified.
			 */
			if(!f[1].equals("")) {
				if(!m.getSubject().equalsIgnoreCase(f[1]))
					continue;
			}
			/**
			 * Check the body of the message for certain words.
			 * Exclude if this MessageBean if it does not contain 
			 * those words in the message body.
			 */
			if(!f[2].equals("")) {
				if(!m.getSubject().toLowerCase().contains(f[2].toLowerCase()) && !m.getBody().toLowerCase().contains(f[2].toLowerCase()))
					continue;
			}
			/**
			 * Check the body of the message for certain words.
			 * Exclude if this MessageBean if it does contain 
			 * those words in the message body.
			 */
			if(!f[3].equals("")) {
				if(m.getSubject().toLowerCase().contains(f[3].toLowerCase()) || m.getBody().toLowerCase().contains(f[3].toLowerCase()))
					continue;
			}
			/**
			 * Check the start date filter field.
			 * Exclude if this MessageBean was not sent after
			 * this date.
			 */
			if(!f[4].equals("")) {
				DateFormat format = new SimpleDateFormat("MM/dd/yyyy");
				Date s = format.parse(f[4]);
				if(s.after(m.getSentDate()))
						continue;
				
			}
			/**
			 * Check the end date filter field.
			 * Exclude if this MessageBean was not sent before
			 * this date.
			 */
			if(!f[5].equals("")) {
				DateFormat format = new SimpleDateFormat("MM/dd/yyyy");
				Date s = format.parse(f[5]);
				Calendar c = Calendar.getInstance();
				c.setTime(s);
				c.add(Calendar.DAY_OF_MONTH, 1);
				s = c.getTime();
				if(s.before(m.getSentDate()))
						continue;
				
			}
			/**
			 * If the message has not been eliminated by any 
			 * of the filter fields, add it to the new list 
			 * of messages.
			 */
			filtered.add(m);
		}
		
		return filtered;
	}
	
	/**
	 * Gets a patient's name from their MID
	 * 
	 * @param mid the MID of the patient
	 * @return the patient's name
	 * @throws iTrustException
	 */
	public String getName(long mid) throws iTrustException {
		if(mid < 7000000000L)
			return patientDAO.getName(mid);
		else
			return personnelDAO.getName(mid);
	}
	
	/**
	 * Gets a personnel's name from their MID
	 * 
	 * @param mid the MID of the personnel
	 * @return the personnel's name
	 * @throws iTrustException
	 */
	public String getPersonnelName(long mid) throws iTrustException {
		return personnelDAO.getName(mid);
	}
	
	/**
	 * Set the state of the MessageBean to read, after 
	 * it is read by a user.
	 * @param mBean MessageBean to be read
	 */
	public void setRead(MessageBean mBean) {
		try {
			messageDAO.updateRead(mBean);
		} catch (DBException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.beans.ProcedureBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * 
 * Action class for ViewReport.jsp
 *
 */
public class ViewReportAction {
	private PatientDAO patientDAO;
	private PersonnelDAO personnelDAO;

	/**
	 * Set up defaults
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing the report.
	 */
	public ViewReportAction(DAOFactory factory, long loggedInMID) {
		patientDAO = factory.getPatientDAO();
		personnelDAO = factory.getPersonnelDAO();
	}

	/**
	 *  Get diagnosis list for the given patient
	 * @param pid the patient of interest
	 * @return list of diagnoses
	 * @throws iTrustException
	 */
	public List<DiagnosisBean> getDiagnoses(long pid) throws iTrustException {
		return patientDAO.getDiagnoses(pid);
	}

	/**
	 *  Get procedure list for the given patient
	 * @param pid the patient of interest
	 * @return list of procedures
	 * @throws iTrustException
	 */
	public List<ProcedureBean> getProcedures(long pid) throws iTrustException {
		return patientDAO.getProcedures(pid);
	}

	/**
	 *  Get prescription list for the given patient
	 * @param pid the patient of interest
	 * @return list of prescriptions
	 * @throws iTrustException
	 */
	public List<PrescriptionBean> getPrescriptions(long pid) throws iTrustException {
		return patientDAO.getCurrentPrescriptions(pid);
	}

	/**
	 *  Get declared HCPs list for the given patient
	 * @param pid the patient of interest
	 * @return list of declared HCPs
	 * @throws iTrustException
	 */
	public List<PersonnelBean> getDeclaredHCPs(long pid) throws iTrustException {
		return patientDAO.getDeclaredHCPs(pid);
	}
	
	/**
	 * Returns a PersonnelBean when given an MID
	 * @param mid HCP of interest
	 * @return PersonnelBean of the given HCP
	 * @throws iTrustException
	 */
	public PersonnelBean getPersonnel(long mid) throws iTrustException {
		return personnelDAO.getPersonnel(mid);
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Calendar;
import edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.beans.ProcedureBean;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.beans.VisitFlag;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.enums.Gender;

/**
 * Gets the VisitReminders for a given patient Used by visitReminders.jsp
 * 
 * @author laurenhayward
 * 
 */
public class GetVisitRemindersAction {

	/**
	 * Reminder Type enumeration.
	 */
	public static enum ReminderType {
		DIAGNOSED_CARE_NEEDERS("Diagnosed Care Needers"),
		FLU_SHOT_NEEDERS("Flu Shot Needers"),
		IMMUNIZATION_NEEDERS("Immunization Needers");

		private String typeName;

		private ReminderType(String typeName) {
			this.typeName = typeName;
		}

		private static final HashMap<String, ReminderType> map = new HashMap<String, ReminderType>();
		static {
			for (ReminderType rt : ReminderType.values()) {
				map.put(rt.getTypeName(), rt);
			}
		}

		/**
		 * Gets the ReminderType for the name passed as a param
		 * 
		 * @param name
		 * @return the ReminderType associated with the name
		 */
		public static ReminderType getReminderType(String name) {
			return map.get(name);
		}

		/**
		 * Returns the type name as a string
		 * 
		 * @return
		 */
		public String getTypeName() {
			return typeName;
		}
	}

	/**
	 * 
	 * Begin GetVisitRemindersAction code
	 * 
	 */
	private TransactionDAO transDAO;
	private VisitRemindersDAO visitReminderDAO;
	private PatientDAO patientDAO;
	private long loggedInMID;

	/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID MID of the person who is logged in
	 * @throws iTrustException
	 */
	public GetVisitRemindersAction(DAOFactory factory, long loggedInMID) throws iTrustException {
		this.transDAO = factory.getTransactionDAO();
		this.loggedInMID = loggedInMID;
		visitReminderDAO = factory.getVisitRemindersDAO();
		patientDAO = factory.getPatientDAO();
	}

	/**
	 * Returns a list of VisitReminderReturnForms for the type passed in as a param
	 * 
	 * @param type
	 *            the ReminderType
	 * @return the list of VisitReminderReturnForms
	 * @throws iTrustException
	 * @throws FormValidationException
	 */
	public List<VisitReminderReturnForm> getVisitReminders(ReminderType type) throws iTrustException, FormValidationException {
		
		if (null == type)
			throw new iTrustException("Reminder Type DNE");
		
		transDAO.logTransaction(TransactionType.PATIENT_REMINDERS, loggedInMID, 0l, type.getTypeName());
		switch (type) {
			case DIAGNOSED_CARE_NEEDERS:
				return stripDupes(visitReminderDAO.getDiagnosedVisitNeeders(loggedInMID));

			case FLU_SHOT_NEEDERS:
				return visitReminderDAO.getFluShotDelinquents(loggedInMID);
				
			case IMMUNIZATION_NEEDERS:
				return getImmunizationNeeders(loggedInMID);
				
			default:
				throw new iTrustException("Reminder Type DNE");
		}
	}
	
	/**
	 * Gets a list of anyone who need immunizations
	 * 
	 * @param mid the HCP whose patients are being checked
	 * @return a list of all the people who need immunizations--done in a visit reminder
	 * @throws iTrustException
	 */

	private List<VisitReminderReturnForm> getImmunizationNeeders(long mid) throws iTrustException {
		
		List<VisitReminderReturnForm> formList;
		List<VisitReminderReturnForm> needList = new ArrayList<VisitReminderReturnForm>();
		String reason = "";
		// Get list of patients that designate this HCP
		formList = visitReminderDAO.getPatients(mid);
		
		for (VisitReminderReturnForm r : formList) {
			reason = checkImmunizations(r.getPatientID());
			if (0 < reason.length()) {
				needList.add(r);
				r.addVisitFlag(new VisitFlag(VisitFlag.IMMUNIZATION, reason));
			}
		}	
		
		return needList;
	}
	
	

	/**
	 * Checks a patient to see what immunizations they need
	 * 
	 * @param pid patient to be checked
	 * @return patient list of those lacking immunizations according to the schedule
	 */
	private String checkImmunizations(long pid) throws iTrustException {
		
		String reason = "";
		List<ProcedureBean> procs = patientDAO.getProcedures(pid);
		PatientBean patient = patientDAO.getPatient(pid);
		long patientAge = patient.getAgeInWeeks();
		Gender gen = patient.getGender();
		
		int hepB = 0;
		long hepBTime = 0;

		int rota = 0;
		long rotaTime = 0;

		int diptet = 0;
		long deptetTime = 0;
		
		int haemoflu = 0;
		long haemofluTime = 0;
		long haemofluTimeFirst = 0;
		
		int pneumo = 0;
		long pneumoTime = 0;
		long pneumofluTimeFirst = 0;
		
		int polio = 0;
		long polioTime = 0;
		
		int measles = 0;
		long measlesTime = 0;
		
		int varicella = 0;
		long varicellaTime = 0;
		
		int hepA = 0;
		long hepATime = 0;
		
		int hpv = 0;
		long hpvTime = 0;
		
		for (ProcedureBean proc: procs) {
		
			String cpt = proc.getCPTCode();
			
			// Hep B (90371)
			if (cpt.equals("90371")) {
				hepB++;
				hepBTime = proc.getDate().getTime();
			}
				
			// Rotavirus (90681)
			else if (cpt.equals("90681")) {
				rota++;
				rotaTime = proc.getDate().getTime();
			}
			
			// Diptheria, Tetanus, Pertussis (90696)
			else if (cpt.equals("90696")) {
				diptet++;
				deptetTime = proc.getDate().getTime();
			}
			
			// Haemophilus influenza (90645)
			else if (cpt.equals("90645")) {
				if (0 == haemoflu)
					haemofluTimeFirst = proc.getDate().getTime();
				
				haemoflu++;
				haemofluTime = proc.getDate().getTime();
				
			}
			
			// Pneumococcal (90669)
			else if (cpt.equals("90669")) {
				if (0 == pneumo)
					pneumofluTimeFirst = proc.getDate().getTime();
				pneumo++;
				pneumoTime = proc.getDate().getTime();
			}
			
			// Poliovirus (90712)
			else if (cpt.equals("90712")) {
				polio++;
				polioTime = proc.getDate().getTime();
			}
			
			// Measles, Mumps, Rubella (90707)
			else if (cpt.equals("90707")) {
				measles++;
				measlesTime = proc.getDate().getTime();
			}
			
			// Varicella (90396)
			else if (cpt.equals("90396")) {
				varicella++;
				varicellaTime = proc.getDate().getTime();
			}
			
			// Hep A (90633)
			else if (cpt.equals("90633")) {
				hepA++;
				hepATime = proc.getDate().getTime();
			}
			
			// Human Papillomaavirus (90649)
			else if (cpt.equals("90649")) {
				hpv++;
				hpvTime = proc.getDate().getTime();
			}
		}
		
		if (3 > hepB) {
			reason += testHepB(hepB, patientAge, hepBTime);
		}
		
		if (3 > rota) {
			reason += testRotaVirus(rota, patientAge, rotaTime);
		}
		
		if (6 > diptet) {
			reason += testDipTet(diptet, patientAge, deptetTime);
		}
		
		if (3 > haemoflu) {
			reason += testHaemoFlu(haemoflu, patientAge, haemofluTime, haemofluTimeFirst);
		}
		
		if (4 > pneumo) {
			reason += testPneumo(pneumo, patientAge, pneumoTime, pneumofluTimeFirst);
		}
		
		if (3 > polio) {
			reason += testPolio(polio, patientAge, polioTime);
		}
		
		if (2 > measles) {
			reason += testMeasles(measles, patientAge, measlesTime);
		}
		
		if (2 > varicella) {
			reason += testVaricella(varicella, patientAge, varicellaTime);
		}
		
		if (2 > hepA) {
			reason += testHepA(hepA, patientAge, hepATime);
		}
		
		if (3 > hpv && gen.getName().equals("Female")) {
			reason += testHPV(hpv, patientAge, hpvTime);
		}
	
		return reason;
	}
	
	
	/**
	 * Checks to see if a patient needs the HPV immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the date is
	 * @return when the immunization should be given
	 */
	public static String testHPV(int count, long patientAge, long time) {
	
		String reason = "";
		long weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);
		
		if (0 == count) {
			if (468 <= patientAge)
				reason += "90649 Human Papillomavirus (9 years) ";
		}
		else if (1 == count) {
			if (476 <= patientAge && 8 <= weeks)
				reason += "90649 Human Papillomavirus (9 years, 2 months) ";
		}
		else if (2 == count) {
			if (494 <= patientAge && 16 <= weeks)
				reason += "90649 Human Papillomavirus (9 years, 6 months) ";
		}
		
		return reason;
	}
	
	/**
	 * Checks to see if a patient needs the Hepatits A immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
	public static String testHepA(int count, long patientAge, long time) {
		
		String reason = "";
		long weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);
		
		if (0 == count) {
			if (52 <= patientAge)
				reason += "90633 Hepatits A (12 months) ";
		}
		else if (1 == count) {
			if (78 <= patientAge && 26 <= weeks)
				reason += "90633 Hepatits A (18 months) ";
		}
		
		return reason;	
	}
	
	/**
	 * Checks to see if a patient needs the Varicella immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
	public static String testVaricella(int count, long patientAge, long time) {
		
		String reason = "";
		long weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);
		
		if (0 == count) {
			if (52 <= patientAge)
				reason += "90396 Varicella (12 months) ";
		}
		else if (1 == count) {
			if (208 <= patientAge && 12 <= weeks)
				reason += "90396 Varicella (4 years) ";
		}
		
		return reason;
	}
	
	/**
	 * Checks to see if a patient needs the Measles, Mumps, and Rubekka immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
	public static String testMeasles(int count, long patientAge, long time) {
		
		String reason = "";
		long weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);
		
		if (0 == count) {
			if (52 <= patientAge)
				reason += "90707 Measles, Mumps, Rubekka (12 months) ";
		}
		else if (1 == count) {
			if (208 <= patientAge && 12 <= weeks)
				reason += "90707 Measles, Mumps, Rubekka (4 years) ";
		}
		
		return reason;
	}
	
	/**
	 * Checks to see if a patient needs the Polio immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
	public static String testPolio(int count, long patientAge, long time) {
		
		String reason = "";
		long weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);
		
		if (0 == count) {
			if (6 <= patientAge)
				reason += "90712 Poliovirus (6 weeks) ";
		}
		else if (1 == count) {
			if (16 <= patientAge && 4 <= weeks)
				reason += "90712 Poliovirus (4 months) ";
		}
		else if (2 == count) {
			if (26 <= patientAge)
				reason += "90712 Poliovirus (6 months) ";				
		}
		
		return reason;	
	}
	
	/**
	 * Checks to see if a patient needs the Pneumococcal immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
	public static String testPneumo(int count, long patientAge, long time, long firstDoseTime) {
		
		String reason = "";
		long weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);
		long ageFirst = patientAge - (firstDoseTime / (1000 * 60 * 60 * 24 * 7)); 
		
		if (0 == count) {
			if (6 <= patientAge)
				reason += "90669 Pneumococcal (6 weeks) ";
		}
		else if (1 == count) {
			if (16 <= patientAge && 52 > ageFirst && 4 <= weeks)
				reason += "90669 Pneumococcal (4 months) ";
			else if (16 <= patientAge && 52 <= ageFirst && 60 >= ageFirst && 8 <= weeks)
				reason += "90669 Pneumococcal (4 months) ";
		}
		else if (2 == count) {
			if (26 <= patientAge && 4 <= weeks && 52 >= ageFirst)
				reason += "90669 Pneumococcal (6 months) ";				
		}
		else if (3 == count) {
			if (52 <= patientAge && 8 <= weeks && 52 >= ageFirst)
				reason += "90669 Pneumococcal (12 months) ";				
		}
		return reason;
	}
	
	/**
	 * Checks to see if a patient needs the Haemophilus Infulenzae immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
	public static String testHaemoFlu(int count, long patientAge, long time, long firstDoseTime) {
		
		String reason = "";
		long weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);
		long ageFirst = patientAge - (firstDoseTime / (1000 * 60 * 60 * 24 * 7)); 
			
		if (0 == count) {
			if (6 <= patientAge)
				reason += "90645 Haemophilus influenzae (6 weeks) ";
		}
		else if (1 == count) {
			if (16 <= patientAge && 52 > ageFirst && 4 <= weeks)
				reason += "90645 Haemophilus influenzae (4 months) ";
			else if (16 <= patientAge && 52 <= ageFirst && 60 >= ageFirst && 8 <= weeks)
				reason += "90645 Haemophilus influenzae (4 months) ";
		}
		else if (2 == count) {
			if (26 <= patientAge && 4 <= weeks && 52 > ageFirst)
				reason += "90645 Haemophilus influenzae (6 months) ";
		}
		
		return reason;
	}
	
	/**
	 * Checks to see if a patient needs the Diphtheria, Tetanus, Pertussis immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
	public static String testDipTet(int count, long patientAge, long time) {
		
		String reason = "";
		long weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);
		
		if (0 == count) {
			if (6 <= patientAge)
				reason += "90696 Diphtheria, Tetanus, Pertussis (6 weeks) ";
		}
		else if (1 == count) {
			if (16 <= patientAge && 4 <= weeks )
				reason += "90696 Diphtheria, Tetanus, Pertussis (4 months) ";
		}
		else if (2 == count) {
			if (26 <= patientAge && 4 <= weeks)
				reason += "90696 Diphtheria, Tetanus, Pertussis (6 months) ";				
		}
		else if (3 == count) {
			if (15 <= patientAge && 26 <= weeks)
				reason += "90696 Diphtheria, Tetanus, Pertussis (15 weeks) ";
		}
		else if (4 == count) {
			if (208 <= patientAge && 26 <= weeks)
				reason += "90696 Diphtheria, Tetanus, Pertussis (4 years) ";
		}
		else if (5 == count) {
			if (572 <= patientAge && 260 <= weeks)
				reason += "90696 Diphtheria, Tetanus, Pertussis (11 years) ";				
		}
		
		return reason;
	}
	
	/**
	 * Checks to see if a patient needs the Rotavirus immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
	
	public static String testRotaVirus(int count, long patientAge, long time) {
	
		String reason = "";
		long weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);
		
		if (0 == count) {
			if (6 <= patientAge)
				reason += "90681 Rotavirus (6 weeks) ";
		}
		else if (1 == count) {
			if (16 <= patientAge && 4 <= weeks)
				reason += "90681 Rotavirus (4 months) ";
		}
		else if (2 == count) {
			if (26 <= patientAge && 4 <= weeks )
				reason += "90681 Rotavirus (6 months) ";				
		}
		
		return reason;
	}

	
	/**
	 * Checks to see if a patient needs the Hepatitis B immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
	public static String testHepB(int count, long patientAge, long time) {
		
		String reason = "";
		long weeks = (Calendar.getInstance().getTimeInMillis() - time) / (1000 * 60 * 60 * 24 * 7);
		
		if (0 == count) {
			if (0 < patientAge)
				reason += "90371 Hepatitis B (birth) ";
		}
		else if (1 == count) {
			if (4 <= patientAge && 4 <= weeks)
				reason += "90371 Hepatitis B (1 month) ";
		}
		else if (2 == count) {
			if (26 <= patientAge && 8 <= weeks)
				reason += "90371 Hepatitis B (6 months) ";				
		}
		
		return reason;
	}
	
	
	/**
	 * Removes duplicates from a list of VisitReminderReturnForms
	 * 
	 * @param patients list of visit remindersto be cleaned up
	 * @return cleaned up list of visit reminders
	 */
	private List<VisitReminderReturnForm> stripDupes(List<VisitReminderReturnForm> patients) {
		if (null == patients)
			return null;
		if (0 == patients.size())
			return patients;
		List<VisitReminderReturnForm> retPatients = new ArrayList<VisitReminderReturnForm>();
		VisitReminderReturnForm temp = patients.get(0);
		retPatients.add(temp);
		for (VisitReminderReturnForm vr : patients) {
			if (vr.getPatientID() != temp.getPatientID())
				retPatients.add(vr);
			temp = vr;
		}
		return retPatients;
	}
}

package edu.ncsu.csc.itrust.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import edu.ncsu.csc.itrust.beans.TransactionBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;

/**
 * Handles retrieving the log of record accesses for a given user Used by viewAccessLog.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ViewMyAccessLogAction {
	private TransactionDAO transDAO;
	private long loggedInMID;

	/**
	 * Set up
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person retrieving the logs.
	 */
	public ViewMyAccessLogAction(DAOFactory factory, long loggedInMID) {
		this.loggedInMID = loggedInMID;
		this.transDAO = factory.getTransactionDAO();
	}

	/**
	 * Returns a list of TransactionBeans between the two dates passed as params
	 * 
	 * @param lowerDate
	 *            the first date
	 * @param upperDate
	 *            the second date
	 * @return list of TransactionBeans
	 * @throws DBException
	 * @throws FormValidationException
	 */
	public List<TransactionBean> getAccesses(String lowerDate, String upperDate, boolean getByRole) throws DBException,
			FormValidationException {
		List<TransactionBean> accesses;
		if (lowerDate == null || upperDate == null)
			return transDAO.getAllRecordAccesses(loggedInMID, getByRole);
		String message = "";
		try {
			Date lower = new SimpleDateFormat("MM/dd/yyyy").parse(lowerDate);
			Date upper = new SimpleDateFormat("MM/dd/yyyy").parse(upperDate);
			if (lower.after(upper))
				throw new FormValidationException("Start date must be before end date!");
			message = "for dates between " + lowerDate + " and " + upperDate;
			transDAO.logTransaction(TransactionType.VIEW_ACCESS_LOG, loggedInMID, 0L, message);
			accesses = transDAO.getRecordAccesses(loggedInMID, lower, upper, getByRole);
		} catch (ParseException e) {
			throw new FormValidationException("Enter dates in MM/dd/yyyy");
		}
		return accesses;
	}

	/**
	 * Returns the date of the first Transaction in the list passed as a param if the list is not empty
	 * otherwise, returns today's date
	 * 
	 * @param accesses A java.util.List of TransactionBeans for the accesses.
	 * @return A String representing the date of the first transaction.
	 */
	public String getDefaultStart(List<TransactionBean> accesses) {
		String startDate = "";
		if (accesses.size() > 0) {
			startDate = new SimpleDateFormat("MM/dd/yyyy").format(new Date(accesses.get(accesses.size() - 1)
					.getTimeLogged().getTime()));
		} else {
			startDate = new SimpleDateFormat("MM/dd/yyyy").format(new Date());
		}
		return startDate;
	}

	/**
	 * Returns the date of the last Transaction in the list passed as a param if the list is not empty
	 * otherwise, returns today's date
	 * 
	 * @param accesses A java.util.List of TransactionBeans storing the access. 
	 * @return A String representation of the date of the last transaction.
	 */
	public String getDefaultEnd(List<TransactionBean> accesses) {
		String endDate = "";
		if (accesses.size() > 0) {
			endDate = new SimpleDateFormat("MM/dd/yyyy").format(new Date(accesses.get(0).getTimeLogged()
					.getTime()));
		} else {
			endDate = new SimpleDateFormat("MM/dd/yyyy").format(new Date());
		}
		return endDate;
	}
}

package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.beans.HospitalBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.HospitalBeanValidator;

/**
 * Handles updating the list of hospitals Used by hospitalListing.jsp
 * 
 * @author laurenhayward
 * 
 */
public class UpdateHospitalListAction {
	private long performerID;
	private HospitalsDAO hospDAO;
	private TransactionDAO transDAO;

	/**
	 * Set up
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param performerID The MID of the person updating the hospitals.
	 */
	public UpdateHospitalListAction(DAOFactory factory, long performerID) {
		this.hospDAO = factory.getHospitalsDAO();
		this.transDAO = factory.getTransactionDAO();
		this.performerID = performerID;
	}

	/**
	 * Adds a hosptial using the HospitalBean passed as a param
	 * 
	 * @param hosp
	 *            the new hospital listing
	 * @return Status message
	 * @throws FormValidationException
	 */
	public String addHospital(HospitalBean hosp) throws FormValidationException {
		new HospitalBeanValidator().validate(hosp);
		try {
			if (hospDAO.addHospital(hosp)) {
				transDAO.logTransaction(TransactionType.MAINTAIN_HOSPITALS, performerID, 0L,
						"added hospital " + hosp.getHospitalName());
				return "Success: " + hosp.getHospitalID() + " - " + hosp.getHospitalName() + " added";
			} else
				return "The database has become corrupt. Please contact the system administrator for assistance.";
		} catch (DBException e) {
			e.printStackTrace();
			return e.getMessage();
		} catch (iTrustException e) {
			return e.getMessage();
		}
	}

	/**
	 * Updates a hospital (based on the hospital id) using new information from the HospitalBean passed as a
	 * param
	 * 
	 * @param hosp
	 *            the new hospital information with the same hospital id
	 * @return Status message
	 * @throws FormValidationException
	 */
	public String updateInformation(HospitalBean hosp) throws FormValidationException {
		new HospitalBeanValidator().validate(hosp);
		try {
			int rows = 0;
			return ((0 == (rows = updateHospital(hosp))) ? "Error: Hospital not found." : "Success: " + rows
					+ " row(s) updated");
		} catch (DBException e) {
			e.printStackTrace();
			return e.getMessage();
		}
	}

	/**
	 * Updates hospital
	 * 
	 * @param hosp new information
	 * @return id for the updated hospital
	 * @throws DBException
	 */
	private int updateHospital(HospitalBean hosp) throws DBException {
		return hospDAO.updateHospital(hosp);
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.Calendar;
import java.util.List;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.ReportRequestBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Action class for ViewMyReports.jsp.  Allows the user to see all their reports
 */
public class ViewMyReportRequestsAction {
	private long loggedInMID;
	private ReportRequestDAO reportRequestDAO;
	private PersonnelDAO personnelDAO;
	private TransactionDAO transDAO;
	//private DAOFactory factory;

	/**
	 * Set up
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing their report requests.
	 */
	public ViewMyReportRequestsAction(DAOFactory factory, long loggedInMID) {
		this.loggedInMID = loggedInMID;
		this.reportRequestDAO = factory.getReportRequestDAO();
		this.personnelDAO = factory.getPersonnelDAO();
		this.transDAO = factory.getTransactionDAO();
		//this.factory = factory;
	}

	/**
	 * Returns all the reports for the currently logged in HCP
	 * 
	 * @return list of all reports for the logged in HCP
	 * @throws iTrustException
	 */
	public List<ReportRequestBean> getAllReportRequestsForRequester() throws iTrustException {
		return reportRequestDAO.getAllReportRequestsForRequester(loggedInMID);
	}

//	/**
//	 * Returns a list of *all* reports
//	 * 
//	 * @return list of all reports
//	 * @throws iTrustException
//	 */
//	public List<ReportRequestBean> getAllReportRequests() throws iTrustException {
//		return reportRequestDAO.getAllReportRequests();
//	}

	/**
	 * Adds a report request to the list
	 * 
	 * @param patientMID ID of the patient that the report request is for
	 * @return
	 * @throws iTrustException
	 */
	public long addReportRequest(long patientMID) throws iTrustException {
		long id = reportRequestDAO
				.addReportRequest(loggedInMID, patientMID, Calendar.getInstance().getTime());
		transDAO.logTransaction(TransactionType.COMPREHENSIVE_REPORT_REQUEST, loggedInMID, patientMID,
				"Added comprehensive report request");
		return id;

	}

//	/**
//	 * Approves a report request from the list.  E-mail is sent when the request is approved.
//	 * 
//	 * @param ID id of the request
//	 * @throws iTrustException
//	 */
//	public void approveReportRequest(long ID) throws iTrustException {
//		ReportRequestBean rr = reportRequestDAO.getReportRequest(ID);
//		reportRequestDAO.approveReportRequest(ID, loggedInMID, Calendar.getInstance().getTime());
//		transDAO.logTransaction(TransactionType.COMPREHENSIVE_REPORT_REQUEST, loggedInMID,
//				rr.getPatientMID(), "Approved comprehensive report request");
//		new EmailUtil(factory).sendEmail(makeEmailApp(loggedInMID, rr.getRequesterMID(), rr.getPatientMID()));
//
//	}

//	/**
//	 * 
//	 * Sends e-mail regarding the approved request.
//	 * 
//	 * @param adminID admin who approved the request
//	 * @param hcpID HCP the request is for
//	 * @param pid ID of the patient the report is about
//	 * @return the sent e-mail
//	 * @throws DBException
//	 */
//	private Email makeEmailApp(long adminID, long hcpID, long pid) throws DBException {
//
//		PatientBean p = new PatientDAO(factory).getPatient(pid);
//
//		Email email = new Email();
//		email.setFrom("no-reply@itrust.com");
//		email.setToList(Arrays.asList(p.getEmail()));
//		email.setSubject("A Report has been generated in iTrust");
//		email
//				.setBody(String
//						.format(
//								"Dear %s, \n The iTrust Health Care Provider (%s) submitted a request to view your full medical records.  The iTrust administrator (%s) approved a one-time viewing of this report.  You will be notified when the HCP chooses to view it.",
//								p.getFullName(), hcpID, adminID));
//		return email;
//	}

//	/**
//	 * Rejects a request from the list.
//	 * 
//	 * @param ID id of the rejected request
//	 * @param comment why the request was rejected
//	 * @throws iTrustException
//	 */
//	public void rejectReportRequest(long ID, String comment) throws iTrustException {
//		reportRequestDAO.rejectReportRequest(ID, loggedInMID, Calendar.getInstance().getTime(), comment);
//		transDAO.logTransaction(TransactionType.COMPREHENSIVE_REPORT_REQUEST, loggedInMID, 0L,
//				"Rejected comprehensive report request");
//	}

	/**
	 * Returns the requested report
	 * 
	 * @param ID id of the requested report
	 * @return the requested report
	 * @throws iTrustException
	 */
	public ReportRequestBean getReportRequest(int ID) throws iTrustException {
		return reportRequestDAO.getReportRequest(ID);
	}
	
/**
 * Sets the viewed status of the report.  If the report is "viewed" the HCP must request a new one to see it again.
 * 
 * @param ID id of the report
 * @throws iTrustException
 */
	public void setViewed(int ID) throws iTrustException {
//		ReportRequestBean rr = reportRequestDAO.getReportRequest(ID);
		reportRequestDAO.setViewed(ID, Calendar.getInstance().getTime());
		transDAO.logTransaction(TransactionType.COMPREHENSIVE_REPORT_REQUEST, loggedInMID, 0L,
				"Viewed comprehensive report");
		//new EmailUtil(factory).sendEmail(makeEmailView(rr.getApproverMID(), rr.getRequesterMID(), rr
			//	.getPatientMID()));

	}

//	/**
//	 * 
//	 * Sends e-mail regarding the request to the patient.
//	 * 
//	 * @param adminID admin who approved the request
//	 * @param hcpID HCP the request is for
//	 * @param pid ID of the patient the report is about
//	 * @return the sent e-mail
//	 * @throws DBException
//	 */
//	private Email makeEmailView(long adminID, long hcpID, long pid) throws DBException {
//
//		PatientBean p = new PatientDAO(factory).getPatient(pid);
//
//		Email email = new Email();
//		email.setFrom("no-reply@itrust.com");
//		email.setToList(Arrays.asList(p.getEmail()));
//		email.setSubject("A Report has been generated in iTrust");
//		email
//				.setBody(String
//						.format(
//								"Dear %s, \n The iTrust Health Care Provider (%s) has chosen to view your full medical report, which was approved by an iTrust administrator (%s).  This report was only viewable one time and is no longer available.",
//								p.getFullName(), hcpID, adminID));
//		return email;
//	}

	/**
	 * Gets the status of the request
	 * 
	 * @param id id of the request
	 * @return the request's status
	 * @throws iTrustException
	 */
	public String getLongStatus(long id) throws iTrustException {
		StringBuilder s = new StringBuilder();
		ReportRequestBean r = reportRequestDAO.getReportRequest(id);
		if (r.getStatus().equals(ReportRequestBean.Requested)) {
			PersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());
			s.append(String.format("Request was requested on %s by %s", r.getRequestedDateString(), p
					.getFullName()));
		}
//		if (r.getStatus().equals(ReportRequestBean.Approved)) {
//			PersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());
//			PersonnelBean p2 = personnelDAO.getPersonnel(r.getApproverMID());
//			s.append(String.format("Request was requested on %s by %s ", r.getRequestedDateString(), p
//					.getFullName()));
//			s.append(String.format("and approved on %s by %s", r.getApprovedDateString(), p2.getFullName()));
//		}
//		if (r.getStatus().equals(ReportRequestBean.Rejected)) {
//			PersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());
//			PersonnelBean p2 = personnelDAO.getPersonnel(r.getApproverMID());
//			s.append(String.format("Request was requested on %s by %s ", r.getRequestedDateString(), p
//					.getFullName()));
//			s.append(String.format("and rejected on %s by %s", r.getApprovedDateString(), p2.getFullName()));
//		}
		if (r.getStatus().equals(ReportRequestBean.Viewed)) {
			PersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());
//			PersonnelBean p2 = personnelDAO.getPersonnel(r.getApproverMID());
			String fullName = "Unknown";
			if(p != null){
				fullName = p.getFullName();
				s.append(String.format("Request was requested on %s by %s, ", r.getRequestedDateString(), p
					.getFullName()));
			}
//			s.append(String.format("approved on %s by %s, ", r.getApprovedDateString(), fullName));
			s.append("");// removed "<br />" because it caused unit test to fail and seems to have no
			// purpose
			s.append(String.format("and viewed on %s by %s", r.getViewedDateString(), fullName));
		}

		return s.toString();
	}

}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Used by the patient to declare HCPs as "designated", in editHCPs.jsp.
 * 
 * @author Andy Meneely
 * 
 */
public class DeclareHCPAction {
	private TransactionDAO transDAO;
	private PatientDAO patientDAO;
	private AuthDAO authDAO;
	private long loggedInMID;

	/**
	 * Sets up defaults
	 * 
	 * @param factory The DAO factory to be used for generating the DAOs for this action.
	 * @param loggedInMID
	 *            This patient
	 * @author Andy Meneely
	 */
	public DeclareHCPAction(DAOFactory factory, long loggedInMID) {
		this.loggedInMID = loggedInMID;
		this.transDAO = factory.getTransactionDAO();
		this.patientDAO = factory.getPatientDAO();
		this.authDAO = factory.getAuthDAO();
	}

	/**
	 * Lists the declared HCPs for this current patient
	 * 
	 * @return Returns a list of the declared HCPs
	 * @throws iTrustException
	 * @author Andy Meneely
	 */
	public List<PersonnelBean> getDeclaredHCPS() throws iTrustException {
		return patientDAO.getDeclaredHCPs(loggedInMID);
	}

	/**
	 * Validate an HCP's MID and declare them, if possible
	 * 
	 * @param hcpStr
	 *            The MID of an HCP to declare
	 * @return A status message,
	 * @throws iTrustException
	 * @author Andy Meneely
	 */
	public String declareHCP(String hcpStr) throws iTrustException {
		try {
			long hcpID = Long.valueOf(hcpStr);
			if (authDAO.getUserRole(hcpID) != Role.HCP)
				throw new iTrustException("This user is not a licensed healthcare professional!");

			boolean confirm = patientDAO.declareHCP(loggedInMID, hcpID);

			if (confirm) {
				transDAO.logTransaction(TransactionType.DECLARE_HCP, loggedInMID, hcpID,
						"patient declared hcp");
				return "HCP successfully declared";
			} else
				return "HCP not declared";
		} catch (NumberFormatException e) {
			throw new iTrustException("HCP's MID not a number");
		} 
	}

	/**
	 * Validate an HCP's MID and undeclare them, if possible
	 * 
	 * @param input
	 *            The MID of an HCP to undeclare
	 * @return
	 * @throws iTrustException
	 * @author Andy Meneely
	 */
	public String undeclareHCP(String input) throws iTrustException {
		try {
			long hcpID = Long.valueOf(input);
			boolean confirm = patientDAO.undeclareHCP(loggedInMID, hcpID);
			if (confirm) {
				transDAO.logTransaction(TransactionType.DECLARE_HCP, loggedInMID, hcpID,
						"patient undeclared hcp");
				return "HCP successfully undeclared";
			} else
				return "HCP not undeclared";
		} catch (NumberFormatException e) {
			throw new iTrustException("HCP's MID not a number");
		} 
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import java.util.ArrayList;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.HCPVisitBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Action class for ViewVisitedHCPs.jsp
 *
 */
public class ViewVisitedHCPsAction {

	private long patientMID;
	private PersonnelDAO docDAO;
	private OfficeVisitDAO visitDAO;
	private PatientDAO patientDAO;
	private ArrayList<HCPVisitBean> visits;
	private DeclareHCPAction declareAction; 
	private ArrayList<PersonnelBean> filterList;
	
	/**
	 * Set up defaults 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing the visited HCPs.
	 */
	public ViewVisitedHCPsAction(DAOFactory factory, long loggedInMID) {
		patientMID = loggedInMID;
		docDAO = factory.getPersonnelDAO();
		visitDAO = factory.getOfficeVisitDAO();
		patientDAO = factory.getPatientDAO();
		
		visits = new ArrayList<HCPVisitBean>();
		declareAction = new DeclareHCPAction(factory, loggedInMID);
		filterList = new ArrayList<PersonnelBean>();
	}
	
	/**
	 * Adds all the office visits to a global array
	 * 
	 * @throws iTrustException
	 */
	private void processOfficeVisits() throws iTrustException {
		
		try {
			List<OfficeVisitBean> ovlist = visitDAO.getAllOfficeVisits(patientMID);
			HCPVisitBean visitBean;
			List<PersonnelBean> dhcps = patientDAO.getDeclaredHCPs(patientMID);
			boolean tmp;
			PersonnelBean pb;
			ArrayList<PersonnelBean> removeIDs = new ArrayList<PersonnelBean>();
			
			for (OfficeVisitBean ov: ovlist) {
				visitBean = new HCPVisitBean();
				pb = docDAO.getPersonnel(ov.getHcpID());
				
				visitBean.setHCPMID(ov.getHcpID());
				visitBean.setHCPName(pb.getFullName());
				visitBean.setOVDate(ov.getVisitDateStr());
				visitBean.setHCPSpecialty(pb.getSpecialty());
				visitBean.setHCPAddr(pb.getStreetAddress1() +" "+ pb.getStreetAddress2() +" "+ pb.getCity() +", "+ pb.getState() +" "+ pb.getZip());
								
				if (true == (tmp = patientDAO.checkDeclaredHCP(patientMID, ov.getHcpID()))) {
					visitBean.setDesignated(tmp);
					if (!dhcps.isEmpty()) {
						for (PersonnelBean hcp : dhcps) {
							if (hcp.getMID() == ov.getHcpID()) {
								removeIDs.add(hcp);
							}
						}
						if (!removeIDs.isEmpty()) {
							for (PersonnelBean pbean: removeIDs) {
								dhcps.remove(pbean);
							}
						}
					}
				}
				
				visits.add(visitBean);
				
			}
			
			for (PersonnelBean hcp : dhcps) {
				visitBean = new HCPVisitBean();
				visitBean.setHCPMID(hcp.getMID());
				visitBean.setHCPName(hcp.getFullName());
				visitBean.setOVDate("");
				visitBean.setHCPSpecialty(hcp.getSpecialty());
				visitBean.setHCPAddr(hcp.getStreetAddress1() +" "+ hcp.getStreetAddress2() +" "+ hcp.getCity() +", "+ hcp.getState() +" "+ hcp.getZip());
				visitBean.setDesignated(true);
				visits.add(visitBean);
			}
			
			
		}
		catch (DBException dbe) {
			throw new iTrustException(dbe.getMessage());
		}
	}
	
	/**
	 * Returns a list of all the visited HCPs
	 * @return list of all the visited HCPs
	 */
	
	public List<HCPVisitBean> getVisitedHCPs() {
		
		try {
			processOfficeVisits();
		
			for(int i = 0; i<visits.size(); i++){
				for(int j = i+1; j<visits.size(); j++){
					if(visits.get(i).getHCPMID()==visits.get(j).getHCPMID()){
						visits.remove(visits.get(j));
						j--;
					}
				}
			}
		}
		catch (iTrustException ie) {
			
		}
			
		return visits;
	}
	
	/**
	 * Set a given HCP as undeclared
	 * 
	 * @param name HCP to undeclare
	 * @return An empty string.
	 * @throws iTrustException
	 */
	public String undeclareHCP(String name) throws iTrustException {

		HCPVisitBean remove = null;
		
		for (HCPVisitBean visit: visits) {
			if (0 == visit.getHCPName().toLowerCase().compareTo(name.toLowerCase())) {
				Long mid = Long.valueOf(visit.getHCPMID());

				//if (patientDAO.checkDeclaredHCP(patientMID, visit.getHCPMID())) {
					declareAction.undeclareHCP(mid.toString());
				//}
				visit.setDesignated(false);
				
				if (0 == visit.getOVDate().compareTo("")) {
					remove = visit;
				}
			}
		}
		
		if (null != remove) {
			visits.remove(remove);
		}
				
		return "";
	}
	
	/**
	 * Set a given HCP as declared
	 * 
	 * @param name HCP to declare
	 * @return An empty string.
	 * @throws iTrustException
	 */
	public String declareHCP(String name) throws iTrustException {
		boolean match = false;
		for (HCPVisitBean visit: visits) {
			if (0 == visit.getHCPName().toLowerCase().compareTo(name.toLowerCase())) {
				match = true;
				Long mid = Long.valueOf(visit.getHCPMID());
				if (!patientDAO.checkDeclaredHCP(patientMID, visit.getHCPMID())) {
					declareAction.declareHCP(mid.toString());
				}
				visit.setDesignated(true);
			}
		}
		
		if (!match) {
				List<PersonnelBean> doclist = docDAO.getAllPersonnel();
				for (PersonnelBean ele: doclist) {
					if (0 == name.compareTo(ele.getFullName())) {
						HCPVisitBean visitBean;
						visitBean = new HCPVisitBean();
						visitBean.setHCPMID(ele.getMID());
						visitBean.setHCPName(ele.getFullName());
						visitBean.setOVDate("");
						visitBean.setHCPSpecialty(ele.getSpecialty());
						visitBean.setHCPAddr(ele.getStreetAddress1() +" "+ ele.getStreetAddress2() +" "+ ele.getCity() +", "+ ele.getState() +" "+ ele.getZip());
						
						visitBean.setDesignated(true);
				
						Long mid = Long.valueOf(ele.getMID());
						if (!patientDAO.checkDeclaredHCP(patientMID, mid)) {
							declareAction.declareHCP(mid.toString());
							visits.add(visitBean);
						}
					}
				}
			
		}
		return "";
	}
	
	/**
	 * Check to see if a given HCP is declared
	 * @param mid HCP to check
	 * @return true if the HCP is declared, otherwise false
	 */
	public boolean checkDeclared(long mid) {
		
		try {
			return patientDAO.checkDeclaredHCP(patientMID, mid);
		} catch (DBException dbe) {
			return false;
		}
	}
	
	/**
	 * Filter the list of HCPs by last name, specialty, or zip code. 
	 * @param doc sort by last name
	 * @param specialty sort by specialty
	 * @param zip sort by zip
	 * @return sorted list of HCPs
	 */
	public List<PersonnelBean> filterHCPList(String doc, String specialty, String zip) {
		List<PersonnelBean> doclist;
			
		try {
			doclist = docDAO.getAllPersonnel();
			for (PersonnelBean ele: doclist) {
				if (ele.getLastName().toLowerCase().contains(doc.toLowerCase())) {
					if (null != specialty && !specialty.equals("")) {
						if (0 == specialty.toLowerCase().compareTo(ele.getSpecialty().toLowerCase())) {
							if (null != zip && !zip.equals("")) {
								if (ele.getZip().contains(zip.substring(0, 2))) {
									filterList.add(ele);
								}
							}
							else {	
								filterList.add(ele);
							}
						}
					}
					else if (null != zip && !zip.equals("")) {
						if (ele.getZip().contains(zip.substring(0, 2))) {
							filterList.add(ele);
						}
					}
					else {
						filterList.add(ele);
					}
				}
			}
		}
		catch (DBException dbe) {
			
		}
		return filterList;
	}

}

package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator;

/**
 * Handles updating the ICD Code (Diagnosis) List Used by editICDCodes.jsp
 * 
 * The International Statistical Classification of Diseases and Related Health Problems 
 * (most commonly known by the abbreviation ICD) provides codes to classify diseases and a 
 * wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and 
 * external causes of injury or disease. 
 * 
 * @see http://www.cdc.gov/nchs/icd9.htm
 * @author laurenhayward
 * 
 */
public class UpdateICDCodeListAction {
	private long performerID = 0;
	private ICDCodesDAO icdDAO;
	private TransactionDAO transDAO;
	private DiagnosisBeanValidator validator = new DiagnosisBeanValidator();

	/**
	 * Set up
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param performerID The MID of the person udpating the ICDs.
	 */
	public UpdateICDCodeListAction(DAOFactory factory, long performerID) {
		this.performerID = performerID;
		transDAO = factory.getTransactionDAO();
		icdDAO = factory.getICDCodesDAO();
	}

	/**
	 * Adds a new ICD code (diagnosis) based on the DiagnosisBean passed as a param
	 * 
	 * @param diagn
	 *            The new diagnosis (ICD code)
	 * @return Status message
	 * @throws FormValidationException
	 */
	public String addICDCode(DiagnosisBean diagn) throws FormValidationException {
		validator.validate(diagn);
		try {
			if (icdDAO.addICDCode(diagn)) {
				transDAO.logTransaction(TransactionType.MANAGE_DIAGNOSIS_CODE, performerID, 0L,
						"added ICD code " + diagn.getICDCode());
				return "Success: " + diagn.getICDCode() + " - " + diagn.getDescription() + " added";
			} else
				return "The database has become corrupt. Please contact the system administrator for assistance.";
		} catch (DBException e) {
			e.printStackTrace();
			return e.getMessage();
		} catch (iTrustException e) {
			return e.getMessage();
		}
	}

	/**
	 * Updates a diagnosis with new information from the DiagnosisBean passed as a param
	 * 
	 * @param diagn
	 *            new information to update (but same code)
	 * @return Status message
	 * @throws FormValidationException
	 */
	public String updateInformation(DiagnosisBean diagn) throws FormValidationException {
		validator.validate(diagn);
		try {
			int rows = icdDAO.updateCode(diagn);
			if (0 == rows) {
				return "Error: Code not found.";
			} else {
				transDAO.logTransaction(TransactionType.MANAGE_DIAGNOSIS_CODE, performerID, 0L,
						"updated ICD code " + diagn.getICDCode());
				return "Success: " + rows + " row(s) updated";
			}
		} catch (DBException e) {
			e.printStackTrace();
			return e.getMessage();
		}
	}

}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator;
import edu.ncsu.csc.itrust.risk.RiskChecker;

/**
 * 
 * Used for chronicDiseaseRisks.jsp. Passes most of the logic off to {@link ChronicDiseaseMediator}, and the
 * various subclasses of {@link RiskChecker}.
 * 
 * @author Andy Meneely
 * 
 */
public class ChronicDiseaseRiskAction extends PatientBaseAction {
	private AuthDAO authDAO;
	private long loggedInMID;
	private ChronicDiseaseMediator diseaseMediator;
	private TransactionDAO transDAO;

	/**
	 * 
	 * @param factory
	 * @param loggedInMID
	 * @param pidString
	 *            The patient ID to be validated and used
	 * @throws iTrustException
	 * @throws DBException
	 * @throws NoHealthRecordsException
	 *             This is thrown if a patient is added without any health records to be checked. Try to avoid
	 *             having this exception be thrown in a normal flow of events.
	 * @author Andy Meneely
	 */
	public ChronicDiseaseRiskAction(DAOFactory factory, long loggedInMID, String pidString)
			throws iTrustException, DBException, NoHealthRecordsException {
		super(factory, pidString);
		this.authDAO = factory.getAuthDAO();
		this.transDAO = factory.getTransactionDAO();
		this.loggedInMID = loggedInMID;
		this.diseaseMediator = new ChronicDiseaseMediator(factory, pid);
	}

	/**
	 * Returns the ID of the patient to be checked.
	 * 
	 * @return patient ID whose risk we are checking
	 * @author Andy Meneely
	 */
	public long getPatientID() {
		return pid;
	}

	/**
	 * Gives the full name of the patient
	 * 
	 * @return Full name of the patient who we are checking
	 * @throws DBException
	 * @throws iTrustException
	 * @author Andy Meneely
	 */
	public String getUserName() throws DBException, iTrustException {
		return authDAO.getUserName(pid);
	}

	/**
	 * Returns the risks for which this patient is at risk for. All logic has been passed to
	 * {@link ChronicDiseaseMediator} and the subclasses of {@link RiskChecker}.
	 * 
	 * @return List of risks
	 * @throws iTrustException
	 * @throws DBException
	 * @author Andy Meneely
	 */
	public List<RiskChecker> getDiseasesAtRisk() throws iTrustException, DBException {
		transDAO.logTransaction(TransactionType.IDENTIFY_RISK_FACTORS, loggedInMID, pid, "");
		return diseaseMediator.getDiseaseAtRisk();
	}
}

package edu.ncsu.csc.itrust.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.HospitalBean;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.beans.MedicationBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.DrugInteractionBean;
import edu.ncsu.csc.itrust.beans.AllergyBean;
import edu.ncsu.csc.itrust.beans.PrescriptionReportBean;
import edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AllergyDAO;
import edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO;
import edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO;
import edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;
import edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator;

/**
 * Edits the office visits of a patient Used by editOfficeVisit.jsp
 * 
 * @author laurenhayward
 * 
 */
public class EditOfficeVisitAction extends OfficeVisitBaseAction {
	private EditOfficeVisitValidator validator = new EditOfficeVisitValidator();
	private PersonnelDAO personnelDAO;
	private HospitalsDAO hospitalDAO;
	private OfficeVisitDAO ovDAO;
	private LabProcedureDAO lpDAO;
	private TransactionDAO transDAO;
	private DrugInteractionDAO drugDAO;
	private AllergyDAO allergyDAO;
	private PatientDAO patDAO;
	private NDCodesDAO ndcDAO;
	private long loggedInMID;
	private long pid;

	/**
	 * Used to identify the subactions that can comprise an office visit action.
	 * Subactions help direct the action's logic because sometimes multiple 
	 * office visit actions can occur within one transaction.
	 */
	private enum OVSubAction {
		ADD_DIAGNOSIS,
		REMOVE_DIAGNOSIS,
		ADD_PROCEDURE,
		REMOVE_PROCEDURE,
		ADD_MEDICATION,
		REMOVE_MEDICATION,
		ADD_LAB_PROCEDURE,
		REMOVE_LAB_PROCEDURE,
		ADD_IMMUNIZATION,
		REMOVE_IMMUNIZATION
	};

	/**
	 * Patient id and office visit id validated by super class
	 * 
	 * @param factory The DAOFactory to be used in creating the DAOs for this action.
	 * @param loggedInMID The MID of the user who is authorizing this action.
	 * @param pidString The patient who this action is performed on.
	 * @param ovIDString The ID of the office visit in play.
	 * @throws iTrustException
	 */
	public EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString, String ovIDString)
			throws iTrustException {
		super(factory, pidString, ovIDString);
		pid = Long.parseLong(pidString);
		ovDAO = factory.getOfficeVisitDAO();
		this.personnelDAO = factory.getPersonnelDAO();
		this.hospitalDAO = factory.getHospitalsDAO();
		this.lpDAO = factory.getLabProcedureDAO();
		this.transDAO = factory.getTransactionDAO();
		this.drugDAO = factory.getDrugInteractionDAO();
		this.allergyDAO = factory.getAllergyDAO();
		this.ndcDAO = factory.getNDCodesDAO();
		this.patDAO = factory.getPatientDAO();
		this.loggedInMID = loggedInMID;
	}

	/**
	 * Returns the office visit bean for the office visit
	 * 
	 * @return the OfficeVisitBean of the office visit
	 * @throws iTrustException
	 */
	public OfficeVisitBean getOfficeVisit() throws iTrustException {
		OfficeVisitBean officeVisit = ovDAO.getOfficeVisit(ovID);
		transDAO.logTransaction(TransactionType.VIEW_OFFICE_VISIT, loggedInMID, pid, "EditOffceVisit - View office visits");
		return officeVisit;
	}
	
	/**
	 * Returns a list of the lab procedures that have been done in an office visit.
	 * 
	 * @param mid the doctor the visit was with
	 * @param ovid the office visit's id
	 * @return a list of the lab procedures that were done in that visit
	 * @throws DBException
	 */

	public List<LabProcedureBean> getLabProcedures(long mid, long ovid) throws DBException {
		transDAO.logTransaction(TransactionType.VIEW_LAB_PROCEDURE, loggedInMID, pid, "EditOffceVisit - View lab procedures");
		return lpDAO.getAllLabProceduresForDocOV(mid, ovid);
	}

	/**
	 * This is a list of all hospitals, ordered by the office visit's hcp FIRST
	 * 
	 * @param hcpID
	 * @return
	 * @throws iTrustException
	 */
	public List<HospitalBean> getHospitals(long hcpID) throws iTrustException {
		List<HospitalBean> hcpsHospitals = personnelDAO.getHospitals(hcpID);
		List<HospitalBean> allHospitals = hospitalDAO.getAllHospitals();
		return combineLists(hcpsHospitals, allHospitals);
	}

	
	/**
	 * Combines two lists of hospitals
	 * 
	 * @param hcpsHospitals hospitals the HCP is assigned to
	 * @param allHospitals all hopsitals
	 * @return the combined list
	 */
	private List<HospitalBean> combineLists(List<HospitalBean> hcpsHospitals, List<HospitalBean> allHospitals) {
		for (HospitalBean hos : allHospitals) {
			if (!hcpsHospitals.contains(hos))
				hcpsHospitals.add(hos);
		}
		return hcpsHospitals;
	}

	/**
	 * Updates the office visit with information from the form passed in
	 * 
	 * @param form
	 *            information to update
	 * @return "success" or exception's message
	 * @throws FormValidationException
	 */
	public String updateInformation(EditOfficeVisitForm form) throws FormValidationException {
		String confirm = "";
		try {
			checkAddSubAction(OVSubAction.ADD_DIAGNOSIS, form.getAddDiagID(), ovID, null);
			checkAddSubAction(OVSubAction.ADD_PROCEDURE, form.getAddProcID(), ovID, null);
			checkAddSubAction(OVSubAction.ADD_IMMUNIZATION, form.getAddImmunizationID(), ovID, null, form.getHcpID());
			checkAddSubAction(OVSubAction.ADD_LAB_PROCEDURE, form.getAddLabProcID(), ovID, null);
			checkAddPrescription(form, ovID);
			checkRemoveSubAction(OVSubAction.REMOVE_DIAGNOSIS, form.getRemoveDiagID());
			checkRemoveSubAction(OVSubAction.REMOVE_LAB_PROCEDURE, form.getRemoveLabProcID());
			checkRemoveSubAction(OVSubAction.REMOVE_PROCEDURE, form.getRemoveProcID());
			checkRemoveSubAction(OVSubAction.REMOVE_IMMUNIZATION, form.getRemoveImmunizationID());
			checkRemoveSubAction(OVSubAction.REMOVE_MEDICATION, form.getRemoveMedID());
			updateOv(form);
			transDAO.logTransaction(TransactionType.DOCUMENT_OFFICE_VISIT, loggedInMID, getOfficeVisit().getPatientID(), "EditOfficeVisit - edited office visit " + ovID);
			confirm = "success";
			return confirm;
		} catch (iTrustException e) {
			e.printStackTrace();
			return e.getMessage();
		}
	}
	
	public String hasInteraction(String drug, String pid, String startdate, String enddate) throws iTrustException{
		String response = "";
		try {

			SimpleDateFormat original = new SimpleDateFormat("MM/dd/yyyy");
			SimpleDateFormat needed = new SimpleDateFormat("yyyy/MM/dd");
			
			Date start = original.parse(startdate);
			startdate = needed.format(start);
			Date end = original.parse(enddate);
			enddate = needed.format(end);
			
			
			startdate = startdate.replaceAll("/", "-");
			enddate = enddate.replaceAll("/", "-");
			List<PrescriptionReportBean> prBeanList = ovDAO.getPrescriptionReportsByDate(Long.parseLong(pid), startdate, enddate);
			List<DrugInteractionBean> dBeanList = drugDAO.getInteractions(drug);
			for (PrescriptionReportBean prBean : prBeanList){
				String presDrug = prBean.getPrescription().getMedication().getNDCode();
				for (DrugInteractionBean dBean : dBeanList){
					String intDrug1 = dBean.getFirstDrug();
					String intDrug2 = dBean.getSecondDrug();
					
					if (presDrug.equals(intDrug1) && drug.equals(intDrug2)){
						response += "Currently Prescribed: " + prBean.getPrescription().getMedication().getDescription() + 
						". Start Date: " + prBean.getPrescription().getStartDateStr() 
						+ ", End Date: " + prBean.getPrescription().getEndDateStr() + ". ";
						response += "Interactions: " + prBean.getPrescription().getMedication().getDescription() + " - " + ndcDAO.getNDCode((dBean.getSecondDrug())).getDescription() + ". ";
						response += "Description: " + dBean.getDescription() + "  ";
					} else if (presDrug.equals(intDrug2) && drug.equals(intDrug1)){
						response += "Currently Prescribed: " + prBean.getPrescription().getMedication().getDescription() + ". Start Date: " + prBean.getPrescription().getStartDateStr() 
						+ ", End Date: " + prBean.getPrescription().getEndDateStr() + ". ";
						response += "Interactions: " + prBean.getPrescription().getMedication().getDescription() + " - " + ndcDAO.getNDCode(dBean.getFirstDrug()).getDescription() + ". ";
						response += "Description: " + dBean.getDescription() + "  ";
					}
				}
			}

		} catch (DBException e){
			e.printStackTrace();
			throw new iTrustException(e.getMessage());
		} catch (ParseException e){
			e.printStackTrace();
			throw new iTrustException(e.getMessage());
		}
		return response;
	}
	
	public String  isAllergyOnList(String patMID, String ndcode) throws iTrustException{
		String response = "";
		try {
			List<AllergyBean> allergyList = allergyDAO.getAllergies(Long.parseLong(patMID));
			if (allergyList.isEmpty()) return response;
			MedicationBean medBean = ndcDAO.getNDCode(ndcode);
			if(medBean == null) return response;
			String newDrug = medBean.getDescription();
			for (AllergyBean allergyBean : allergyList){
				String currentAllerDrug = allergyBean.getDescription();
				//Allergy: Aspirin. First Found: 12/20/2008. 
				if (newDrug.equals(currentAllerDrug)){
					response += "Allergy: " + newDrug + ". First Found: " + allergyBean.getFirstFoundStr();
				}
			}
		} catch (DBException e){
			e.printStackTrace();
			throw new iTrustException(e.getMessage());
		}
		return response;
	}
	
	/**
	 * 
	 * Sends e-mail regarding the prescribed dangerous drug.
	 * 
	 * @param hcpID HCP the prescription is made by
	 * @param patID ID of the patient prescription is for
	 * @param problem The allergy and/or interaction that is the problem
	 * @return the sent e-mail
	 * @throws DBException
	 */	
	public Email makeEmailApp(long hcpID, String patID, String problem) throws DBException, iTrustException {
		PatientBean p = patDAO.getPatient(Long.parseLong(patID));
		String hcpName = personnelDAO.getName(hcpID);
		Email email = new Email();
		email.setFrom("no-reply@itrust.com");
		email.setToList(Arrays.asList(p.getEmail()));
		email.setSubject("HCP has prescribed you a potentially dangerous medication");
		email.setBody(String
				.format(
					"%s has prescribed a medication that you are allergic to or that has a known interaction with a drug you are currently taking. %s",
					hcpName, problem));
		return email;
	}
	
/**
 * Adds a prescription to an office visit
 * 
 * @param form the information about the prescription
 * @param ovID the id for the office visit
 * @throws DBException
 * @throws FormValidationException
 */
	
	private void checkAddPrescription(EditOfficeVisitForm form, long ovID) throws DBException,
			FormValidationException {
		if (form.getAddMedID() != null && !"".equals(form.getAddMedID())) {
			new EditOfficeVisitValidator(true).validate(form);
			PrescriptionBean pres = new PrescriptionBean();
			pres.setDosage(Integer.valueOf(form.getDosage()));
			pres.setEndDateStr(form.getEndDate());
			pres.setStartDateStr(form.getStartDate());
			pres.setInstructions(form.getInstructions());
			MedicationBean med = new MedicationBean();
			med.setNDCode(form.getAddMedID());
			pres.setMedication(med);
			pres.setVisitID(ovID);
			transDAO.logTransaction(TransactionType.ADD_PRESCRIPTION, loggedInMID, pid, "EditOffceVisit - Add prescription - " + pres.getMedication().getNDCode());
			ovDAO.addPrescription(pres);
		}
	}

	/**
	 * Updates the office visit.
	 * 
	 * @param form form with all the information
	 * @throws DBException
	 * @throws FormValidationException
	 */
	private void updateOv(EditOfficeVisitForm form) throws DBException, FormValidationException {
		validator.validate(form);
		OfficeVisitBean ov = new OfficeVisitBean(ovID);
		ov.setNotes(form.getNotes());
		ov.setVisitDateStr(form.getVisitDate());
		ov.setHcpID(Long.valueOf(form.getHcpID()));
		ov.setPatientID(Long.valueOf(form.getPatientID()));
		ov.setHospitalID(form.getHospitalID());
		transDAO.logTransaction(TransactionType.UPDATE_OFFICE_VISIT, loggedInMID, pid, "EditOffceVisit - Update office visit");
		ovDAO.update(ov);
	}

	
	/**
	 * Adds a diagnosis or a procedure to an office visit
	 * 
	 * @param action the type of action to add
	 * @param code the CPT code of the action
	 * @param visitID the office visit to add the action to
	 * @param dateOfDeath the date of death, if needed
	 * @return true if the operation completed; false if the code was null
	 * @throws DBException
	 * @throws iTrustException
	 */
	
	private boolean checkAddSubAction(OVSubAction action, String code, long visitID, String dateOfDeath)
			throws DBException, iTrustException {
		if (code == null || "".equals(code)) {
			return false;
		} else {
			switch (action) {
			case ADD_DIAGNOSIS:
				ovDAO.addDiagnosisToOfficeVisit(Double.valueOf(code), visitID);
				break;
			case ADD_IMMUNIZATION:
			case ADD_PROCEDURE:
				ovDAO.addProcedureToOfficeVisit(code, visitID, "");
				break;
			case ADD_LAB_PROCEDURE:
				ovDAO.addLabProcedureToOfficeVisit(code, visitID, pid);
				break;
			default:
				return false;
			}
			return true;
		}
	}
	
	private boolean checkAddSubAction(OVSubAction action, String code, long visitID, String dateOfDeath, String hcpid)
	throws DBException, iTrustException {
		if (code == null || "".equals(code)) {
			return false;
		} else {
			ovDAO.addProcedureToOfficeVisit(code, visitID, hcpid);
			return true;
		}
	 }
	
	/**
	 * Removes an action from an office visit
	 * 
	 * @param action type of action to remove
	 * @param input id for the action to remove
	 * @return true if the operation completed; false if the code was null
	 * @throws DBException
	 */

	private boolean checkRemoveSubAction(OVSubAction action, String input) throws DBException {
		if (input == null || "".equals(input))
			return false;
		long removeID;
		try {
			removeID = Long.valueOf(input);
		} catch (NumberFormatException e) {
			e.printStackTrace();
			return false;
		}
		switch (action) {
		case REMOVE_DIAGNOSIS:
			ovDAO.removeDiagnosisFromOfficeVisit(removeID);
			break;
		case REMOVE_IMMUNIZATION:
		case REMOVE_PROCEDURE:
			ovDAO.removeProcedureFromOfficeVisit(removeID);
			break;
		case REMOVE_MEDICATION:
			ovDAO.removePrescription(removeID);
			break;
		case REMOVE_LAB_PROCEDURE:
			ovDAO.removeLabProcedureFromOfficeVisit(removeID);
			break;
		}
		return true;
	}

}

package edu.ncsu.csc.itrust.action;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.MessageBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.MessageDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.EMailValidator;
import edu.ncsu.csc.itrust.validate.MessageValidator;


/**
 * Class for SendMessage.jsp.  
 *
 */

public class SendMessageAction {
	private long loggedInMID;
	private EmailUtil emailer;
	private PatientDAO patientDAO;
	private PersonnelDAO personnelDAO;
	private MessageDAO messageDAO;
	private TransactionDAO transactionDAO;
	private EMailValidator emailVal;
	private MessageValidator messVal;


	/**
	 * Sets up defaults
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user sending the message.
	 */
	public SendMessageAction(DAOFactory factory, long loggedInMID) {
		this.loggedInMID = loggedInMID;
		this.patientDAO = factory.getPatientDAO();
		this.personnelDAO = factory.getPersonnelDAO();
		this.emailer = new EmailUtil(factory);
		this.messageDAO = factory.getMessageDAO();
		this.transactionDAO = factory.getTransactionDAO();
		this.emailVal = new EMailValidator();
		this.messVal = new MessageValidator();
	}
	
	/**
	 * Sends a message
	 * 
	 * @param mBean message to be sent
	 * @throws iTrustException
	 * @throws SQLException
	 */
	public void sendMessage(MessageBean mBean) throws iTrustException, SQLException, FormValidationException {
		messVal.validate(mBean);
		emailVal.validate(mBean);
		messageDAO.addMessage(mBean);
		
		Email email = new Email();
		String senderName;
		String fromEmail;
		email.setFrom("noreply@itrust.com");
		List<String> toList = new ArrayList<String>();
		if (8999999999L < mBean.getFrom() && 8999999999L < mBean.getTo()){
			PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);
			PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());
			
			toList.add(receiver.getEmail());
			senderName = sender.getFullName();
			fromEmail = sender.getEmail();
		}else{
			if (6999999999L < mBean.getFrom()) {
				PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);
				
				if (6999999999L < mBean.getTo()) {
					PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());
					toList.add(receiver.getEmail());
				} else {
					PatientBean receiver = patientDAO.getPatient(mBean.getTo());
					toList.add(receiver.getEmail());
				}
				senderName = sender.getFullName();
				fromEmail = sender.getEmail();
				
			} else {
				PatientBean sender = patientDAO.getPatient(loggedInMID);
				
				if (6999999999L < mBean.getTo()) {
					PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());
					toList.add(receiver.getEmail());
				} else {
					PatientBean receiver = patientDAO.getPatient(mBean.getTo());
					toList.add(receiver.getEmail());
				}
				senderName = sender.getFullName();
				fromEmail = sender.getEmail();
			}
		}
		email.setToList(toList);
		email.setFrom(fromEmail);
		email.setSubject(String.format("A new message from %s", senderName));
		email.setBody(String.format("You have received a new message from %s in iTrust. To view it, log in to iTrust and go to \"View My Messages\"", senderName));
		emailer.sendEmail(email);
		
		transactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);
	}
	
	/**
	 * Returns the patient's name
	 * 
	 * @param mid MId of the patient
	 * @return the name of the patient
	 * @throws iTrustException
	 */
	public String getPatientName(long mid) throws iTrustException {
		return patientDAO.getName(mid);
	}
	
	/**
	 * Returns the personnel's name
	 * 
	 * @param mid MId of the personnel
	 * @return the name of the personnel
	 * @throws iTrustException
	 */
	public String getPersonnelName(long mid) throws iTrustException {
		return personnelDAO.getName(mid);
	}
	
	/**
	 * Returns a list of the patients that the logged in HCP represents
	 * 
	 * @return list of the patients that the logged in HCP represents
	 * @throws iTrustException
	 */
	public List<PatientBean> getMyRepresentees() throws iTrustException {
		List<PatientBean> representees = new ArrayList<PatientBean>();
		try {
			representees = patientDAO.getRepresented(loggedInMID);
		} catch (DBException e) {
			e.printStackTrace();
		}
		return representees;
	}
	
	/**
	 * Returns the designated HCPs for the logged in patient.
	 * 
	 * @return designated HCPs for the logged in patient.
	 * @throws iTrustException
	 */
	public List<PersonnelBean> getMyDLHCPs() throws iTrustException {
		return getDLHCPsFor(loggedInMID);
	}
	
	/**
	 * Returns the designated HCPs for the given patient.
	 * 
	 * @return designated HCPs for the given patient.
	 * @throws iTrustException
	 */
	public List<PersonnelBean> getDLHCPsFor(long pid) throws iTrustException {
		List<PersonnelBean> dlhcps = new ArrayList<PersonnelBean>();
		try {
			dlhcps = patientDAO.getDeclaredHCPs(pid);
		} catch (DBException e) {
			e.printStackTrace();
		}
		return dlhcps;		
	}
}

package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.RandomPassword;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.AddPersonnelValidator;

/**
 * Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password
 * for them.
 * 
 * Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}
 * 
 * @author Andy Meneely
 * 
 */
public class AddUAPAction {
	private PersonnelDAO personnelDAO;
	private AuthDAO authDAO;
	private TransactionDAO transDAO;
	private long loggedInMID;

	/**
	 * Sets up the defaults for the class
	 * 
	 * @param factory factory for creating the defaults.
	 * @param loggedInMID person currently logged in 
	 * @author Andy Meneely
	 */	
	public AddUAPAction(DAOFactory factory, long loggedInMID) {
		this.personnelDAO = factory.getPersonnelDAO();
		this.authDAO = factory.getAuthDAO();
		this.transDAO = factory.getTransactionDAO();
		this.loggedInMID = loggedInMID;
	}
	
	
	/**
	 * Adds the new user.  Event is logged.
	 * 
	 * @param p bean containing the information for the new user
	 * @return MID of the new user.
	 * @throws FormValidationException
	 * @throws iTrustException
	 */
	public long add(PersonnelBean p) throws FormValidationException, iTrustException {
		new AddPersonnelValidator().validate(p);
		long newMID = personnelDAO.addEmptyPersonnel(Role.UAP);
		p.setMID(newMID);
		personnelDAO.editPersonnel(p);
		String pwd = authDAO.addUser(newMID, Role.UAP, RandomPassword.getRandomPassword());
		p.setPassword(pwd);
		transDAO.logTransaction(TransactionType.CREATE_DISABLE_PATIENT_HCP, loggedInMID, newMID, "New UAP Added");
		return newMID;
	}


}

package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.action.base.PersonnelBaseAction;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.PersonnelValidator;

/**
 * Edits the designated personnel Used by admin/editPersonnel.jsp, staff/editMyDemographics.jsp,
 * editPersonnel.jsp
 * 
 * @author laurenhayward
 * 
 */
public class EditPersonnelAction extends PersonnelBaseAction {
	private long loggedInMID;
	private PersonnelDAO personnelDAO;
	private TransactionDAO transDAO;
	private AuthDAO authDAO;
	private PersonnelValidator validator = new PersonnelValidator();;

	/**
	 * Super class validates the patient id
	 * 
	 * @param factory The DAOFactory used to create the DAOs for this action.
	 * @param loggedInMID The MID of the user editing this personnel.
	 * @param pidString The ID of the user being edited.
	 * @throws iTrustException
	 */
	public EditPersonnelAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {
		super(factory, pidString);

		this.authDAO = factory.getAuthDAO();
		long pidlong = Long.parseLong(pidString);
		Role editor = authDAO.getUserRole(loggedInMID);
		Role editing = authDAO.getUserRole(pidlong);

		if (editor == editing && pidlong != loggedInMID)
			throw new iTrustException("You can only edit your own demographics!");
		else if (editor == Role.HCP && editing == Role.ADMIN || editor == Role.UAP && editing == Role.HCP
				|| editor == Role.ADMIN && editing == Role.UAP)
			throw new iTrustException("You are not authorized to edit this record!");

		this.personnelDAO = factory.getPersonnelDAO();
		this.transDAO = factory.getTransactionDAO();
		this.loggedInMID = loggedInMID;
	}

	/**
	 * Takes information from the personnelForm param and updates the patient
	 * 
	 * @param personnelForm
	 *            PersonnelBean with new information
	 * @throws iTrustException
	 * @throws FormValidationException
	 */
	public void updateInformation(PersonnelBean personnelForm) throws iTrustException,
			FormValidationException {
		personnelForm.setMID(pid);
		validator.validate(personnelForm);
		personnelDAO.editPersonnel(personnelForm);
		transDAO.logTransaction(TransactionType.CREATE_DISABLE_PATIENT_HCP, loggedInMID);
	}
	
	public void editMessageFilter(String filter) throws iTrustException, FormValidationException {
		PersonnelBean b = personnelDAO.getPersonnel(this.getPid());
		b.setMessageFilter(filter);
		this.updateInformation(b);
	}

}

package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import edu.ncsu.csc.itrust.ParameterUtil;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PrescriptionReportBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Handles Prescription Reports for the given pid Used by hcp-uap/getPrescriptionReport.jsp,
 * hcp-uap/viewPrescriptionRecord.jsp, patient/getMyPrescriptionReport.jsp, &
 * patient/viewMyPrescriptionRecord.jsp
 * 
 * @author laurenhayward
 * 
 */
public class PrescriptionReportAction extends PatientBaseAction {
	private boolean isRepresenting = false;
	private OfficeVisitDAO ovDAO;
	private TransactionDAO transDAO;
	private PatientDAO patientDAO;
	private long loggedInMID;

	/**
	 * Super class validates pidString
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user who is making a prescription report.
	 * @param pidString The MID of the patient in question.
	 * @throws iTrustException
	 * @throws DBException
	 * @throws NoHealthRecordsException
	 */
	public PrescriptionReportAction(DAOFactory factory, long loggedInMID, String pidString)
			throws iTrustException, DBException, NoHealthRecordsException {
		super(factory, pidString);
		this.transDAO = factory.getTransactionDAO();
		this.ovDAO = factory.getOfficeVisitDAO();
		this.patientDAO = factory.getPatientDAO();
		this.loggedInMID = loggedInMID;
	}

	/**
	 * Takes the patient's representee as a param and returns it as a long if the patient represents the input
	 * param
	 * 
	 * @param input
	 *            the patient's representee mid
	 * @return representee's mid as a long
	 * @throws iTrustException
	 */
	public long representPatient(String input) throws iTrustException {
		try {
			long reppeeMID = Long.valueOf(input);
			if (patientDAO.represents(loggedInMID, reppeeMID)) {
				loggedInMID = reppeeMID;
				pid = reppeeMID;
				isRepresenting = true;
				return reppeeMID;
			} else
				throw new iTrustException("You do not represent patient " + reppeeMID);
		} catch (NumberFormatException e) {
			throw new iTrustException("MID is not a number");
		}
	}

	/**
	 * Returns a list of all office visits for the pid
	 * 
	 * @return list of OfficeVisitBeans for the pid
	 * @throws DBException
	 */
	public List<OfficeVisitBean> getAllOfficeVisits() throws DBException {
		return ovDAO.getAllOfficeVisits(pid);
	}

	/**
	 * Used by the JSP, passes a Map from the html form and a list of OfficeVisitBeans Returns a list of
	 * PrescriptionReportBeans
	 * 
	 * @param params A java.util.HashMap containing the parameter map.
	 * @param officeVisits A java.util.List of OfficeVisitBeans for the visits.
	 * @return list of PrescriptionReportBeans
	 * @throws DBException
	 */
	// suppressing warnings because JSP doesn't have a generic for request.getParameterMap()
	@SuppressWarnings("unchecked")
	public List<PrescriptionReportBean> getPrescriptionReports(Map params, List<OfficeVisitBean> officeVisits)
			throws DBException {
		HashMap<String, String> myParams = ParameterUtil.convertMap(params);
		List<Long> ovIDs = new ArrayList<Long>();
		for (int i = 0; i < officeVisits.size(); i++) {
			try {
				if (params.get("ovOff" + i) != null) {
					int offset = Integer.valueOf(myParams.get("ovOff" + i));
					ovIDs.add(officeVisits.get(offset).getVisitID());
				}
			} catch (NumberFormatException e) {
				// just skip it
			}
		}
		transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID, pid,
				"Getting reports for office visits " + ovIDs.toString());
		if (ovIDs.size() == 0)
			return new ArrayList<PrescriptionReportBean>();

		return ovDAO.getPrescriptionReports(ovIDs, pid);
	}

	/**
	 * Returns a PatientBean for the pid
	 * 
	 * @return PatientBean
	 * @throws DBException
	 */
	public PatientBean getPatient() throws DBException {
		return patientDAO.getPatient(pid);
	}

	/**
	 * Used by the JSP, which passes the param map from the html form and a list of OfficeVisitBeans Returns a
	 * string that will be used to create a new url. The JSP will pull params from this url to create the
	 * prescription report.
	 * 
	 * @param paramMap A java.util.HashMap of the parameters.
	 * @param officeVisits A java.util.List of OfficeVisitBeans.
	 * @return the string that will be used in the new url
	 * @throws FormValidationException
	 * @throws DBException
	 */
	// suppressing warnings because JSP doesn't have a generic for request.getParameterMap()
	@SuppressWarnings("unchecked")
	public String getQueryString(Map paramMap, List<OfficeVisitBean> officeVisits)
			throws FormValidationException, DBException {
		HashMap<String, String> myParams = ParameterUtil.convertMap(paramMap);
		List<Integer> ovOffsets = checkOfficeVisits(myParams, officeVisits);
		String queryString = buildQueryString(ovOffsets);
		if (isRepresenting)
			queryString += "&rep=" + pid;
		return queryString;
	}

	/**
	 * Checks office visits
	 * 
	 * @param myParams list of parameters
	 * @param officeVisits list of office visits
	 * @return Returns a java.util.ArrayList of Integers for the given office visits.
	 */
	private ArrayList<Integer> checkOfficeVisits(HashMap<String, String> myParams,
			List<OfficeVisitBean> officeVisits) {
		ArrayList<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < officeVisits.size(); i++) {
			if ("on".equals(myParams.get("ov" + i)))
				list.add(i);
		}
		return list;
	}

	/**
	 * Builds a query string for office visits
	 * 
	 * @param ovOffsets offsets for the office visits
	 * @return A SQL query in a Java String.
	 */
	private String buildQueryString(List<Integer> ovOffsets) {
		int n = ovOffsets.size();
		if (n == 0)
			return "";
		String str = "&n=" + n;
		for (int i = 0; i < ovOffsets.size(); i++) {
			str += "&ovOff" + i + "=" + ovOffsets.get(i);
		}
		return str;
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.exception.DBException;


public class SearchUsersAction {
	private PatientDAO patientDAO;
	private PersonnelDAO personnelDAO;


	/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user who is performing the search.
	 */
	public SearchUsersAction(DAOFactory factory, long loggedInMID) {
		this.patientDAO = factory.getPatientDAO();
		this.personnelDAO = factory.getPersonnelDAO();
	}
	

	/**
	 * Searches for all personnel with the first name and last name specified in the parameter list.
	 * @param firstName The first name to be searched.
	 * @param lastName The last name to be searched.
	 * @return A java.util.List of PersonnelBeans for the users who matched.
	 */
	public List<PersonnelBean> searchForPersonnelWithName(String firstName, String lastName) {
		
		try {	
			if("".equals(firstName))
				firstName = "%";
			if("".equals(lastName))
				lastName = "%";
			return personnelDAO.searchForPersonnelWithName(firstName, lastName);
		}
		catch (DBException e) {
			System.out.println("DB Exception from SearchUsersAction");
			e.printStackTrace();
			return null;
		}
	}
	
	/**
	 * Search for all patients with first name and last name given in parameters.
	 * @param firstName The first name of the patient being searched.
	 * @param lastName The last name of the patient being searched.
	 * @return A java.util.List of PatientBeans
	 */
	public List<PatientBean> searchForPatientsWithName(String firstName, String lastName) {
	
		try {	
			if("".equals(firstName))
				firstName = "%";
			if("".equals(lastName))
				lastName = "%";
			return patientDAO.searchForPatientsWithName(firstName, lastName);
		}
		catch (DBException e) {
			System.out.println("DB Exception from SearchUsersAction");
			e.printStackTrace();
			return null;
		}
	}
}

package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Handles Getting the person's name associated with a certain mid Used by getUser.jsp
 * 
 * @author laurenhayward
 * 
 */
public class GetUserNameAction {
	private DAOFactory factory;

	/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used for creating the DAOs for this action.
	 */
	public GetUserNameAction(DAOFactory factory) {
		this.factory = factory;
	}

	/**
	 * Returns the person's name that matches the inputMID param
	 * 
	 * @param inputMID The MID to look up.
	 * @return the person's name
	 * @throws DBException
	 * @throws iTrustException
	 */
	public String getUserName(String inputMID) throws iTrustException {
		try {
			long mid = Long.valueOf(inputMID);
			return factory.getAuthDAO().getUserName(mid);
		} catch (NumberFormatException e) {
			throw new iTrustException("MID not in correct form");
		}
	}
}

package edu.ncsu.csc.itrust.action;

import java.io.Serializable;
import java.util.*;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.HCPDiagnosisBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.beans.MedicationBean;
import edu.ncsu.csc.itrust.beans.SurveyBean;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.SurveyDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Edits the privacy levels of diagnoses, used by myDiagnoses.jsp
 * 
 * @author laurenhayward
 * 
 */
public class MyDiagnosisAction {
	
	private OfficeVisitDAO officeVisitDAO;
	private PatientDAO patientDAO;
	private PersonnelDAO personnelDAO;
	private SurveyDAO surveyDAO;
	private TransactionDAO transactionDAO;
	private LabProcedureDAO labprocDAO;
	private long loggedInMID;

	/**
	 * Set up for defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user who is looking at their diagnoses.
	 * @throws iTrustException
	 */
	public MyDiagnosisAction(DAOFactory factory, long loggedInMID) throws iTrustException {
		this.loggedInMID = loggedInMID;
		this.patientDAO = factory.getPatientDAO();
		this.officeVisitDAO = factory.getOfficeVisitDAO();
		this.personnelDAO = factory.getPersonnelDAO();
		this.surveyDAO = factory.getSurveyDAO();
		this.transactionDAO = factory.getTransactionDAO();
		this.labprocDAO = factory.getLabProcedureDAO();
	}
	
	/**
	 * Returns a list of DiagnosisBeans for the patient
	 * 
	 * @return the list of DiagnosisBeans
	 * @throws DBException
	 */
	public List<DiagnosisBean> getDiagnoses() throws DBException {
		return patientDAO.getDiagnoses(loggedInMID);
	}
	
	/**
	 * Returns a list of all the HCPs who have a particular diagnosis
	 * 
	 * @param icdcode the diagnosis of interest
	 * @return the list of HCPs
	 * @throws DBException
	 */
	public List<HCPDiagnosisBean> getHCPByDiagnosis(String icdcode) throws DBException {
		
		int medMatch = 0;
		HashMap<Long, HCPDiagnosisBean> hcpHash = new HashMap<Long, HCPDiagnosisBean>();
		HashMap<Long, Long> patientHash = new HashMap<Long, Long>();
	
		transactionDAO.logTransaction(TransactionType.FIND_HCPS_WITH_EXP, loggedInMID);
		
		HCPDiagnosisBean diag = null;
		List<OfficeVisitBean> beans = officeVisitDAO.getAllOfficeVisitsForDiagnosis(icdcode);
		
		for (OfficeVisitBean bean: beans) {
			
			// check for HCP-Patient locality based on first 3 digits in ZIP
			if (!patientDAO.getPatient(loggedInMID).getZip1().substring(0, 2).
					equals(personnelDAO.getPersonnel(bean.getHcpID()).getZip1().substring(0, 2)))
				continue;
			
			// Check to see if we already have a bean for the HCP associated with this visit
			if (hcpHash.containsKey(bean.getHcpID())) {
				diag = (HCPDiagnosisBean)hcpHash.get(bean.getHcpID());
				
				for (PrescriptionBean p: bean.getPrescriptions()) {
					List<MedicationBean> mlist = diag.getMedList();
					
					for (MedicationBean b: mlist) {
						if (p.getMedication().getDescription().equals(b.getDescription()))
							medMatch++;
					}
					if (medMatch == 0) {
						mlist.add(p.getMedication());
						diag.setMedList(mlist);
					}
					else {
						medMatch = 0;
					}
				}
				
				// Get Lab Procedures
				List<LabProcedureBean> labprocs = diag.getLabList(); 
				List<LabProcedureBean> lpbeans = labprocDAO.getAllLabProceduresForDocOV(bean.getVisitID());
				for (LabProcedureBean p: lpbeans) {
					labprocs.add(p);
				}
				diag.setLabList(labprocs);
				
				
				if (surveyDAO.isSurveyCompleted(bean.getVisitID())) {
					SurveyBean survey = surveyDAO.getSurveyData(bean.getVisitID());
					diag.setVisitSat(survey.getVisitSatisfaction());
					diag.setTreatmentSat(survey.getTreatmentSatisfaction());
				}
				
				// Check if this patient has been seen multiple times for this diagnosis
				if (!patientHash.containsKey(bean.getPatientID())) {
					patientHash.put(bean.getPatientID(), bean.getHcpID());
					diag.incNumPatients();
				}
			}
			else {
				diag = new HCPDiagnosisBean();
				List<MedicationBean> mlist = new ArrayList<MedicationBean>();
				diag.setHCP(bean.getHcpID());
				try {
					diag.setHCPName(personnelDAO.getName(bean.getHcpID()));
				} catch (iTrustException e) {
					diag.setHCPName("null");
				}
				diag.incNumPatients();
				for (PrescriptionBean p: bean.getPrescriptions()) {
					mlist.add(p.getMedication());
				}
				diag.setMedList(mlist);
				diag.setLabList(labprocDAO.getAllLabProceduresForDocOV(bean.getVisitID()));
				
				if (surveyDAO.isSurveyCompleted(bean.getVisitID())) {
					SurveyBean survey = surveyDAO.getSurveyData(bean.getVisitID());
					diag.setVisitSat(survey.getVisitSatisfaction());
					diag.setTreatmentSat(survey.getTreatmentSatisfaction());
				}
				
				patientHash.put(bean.getPatientID(), bean.getHcpID());
				hcpHash.put(bean.getHcpID(), diag);
			}
		}
		List<HCPDiagnosisBean> list = new ArrayList<HCPDiagnosisBean>(hcpHash.values());
		Collections.sort(list, new HCPDiagnosisBeanComparator() );
		return list;
	}
	
	/**
	 * Looks up all the prescriptions given by a certain HCP with the same ICD code.
	 * @param hcpid The MID of the HCP
	 * @param icdcode The ICD code of the prescription we are looking up.
	 * @return A java.util.List of PrescriptionBeans made by this HCP of this ICD code.
	 * @throws DBException
	 */
	public List<PrescriptionBean> getPrescriptionsByHCPAndICD(long hcpid, String icdcode) throws DBException {
		List<PrescriptionBean> list = new ArrayList<PrescriptionBean>();
		
		List<OfficeVisitBean> ovs = officeVisitDAO.getAllOfficeVisitsForDiagnosis(icdcode);
		for (int i = 0; i < ovs.size(); i++) {
			if (ovs.get(i).getHcpID() == hcpid) {
				list.addAll(ovs.get(i).getPrescriptions());
			}
		}
		
		return list;
		
		
	}
	
	
	/**
	 * Checks to see what HCP has had the most experience with a diagnosis
	 *
	 */
	static class HCPDiagnosisBeanComparator implements Comparator<HCPDiagnosisBean>, Serializable {
		
		private static final long serialVersionUID = -6328390386684022934L;

		/**
		 * Compares one HCP with another
		 * 
		 * @param a the first HCP
		 * @param b the second HCP
		 * @return -1 if a has had more patients, 1 if b has had more patients; otherwise 0
		 */
		public int compare(HCPDiagnosisBean a, HCPDiagnosisBean b) {
			int ret = 0;
			
			if (a.getNumPatients() > b.getNumPatients())
				ret = -1;
			else if (a.getNumPatients() < b.getNumPatients())
				ret = 1;
			
			return ret;
		}
	}
	
}

package edu.ncsu.csc.itrust.action;
/**
 * Used for the patient to report adverse events.
 */
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.AdverseEventBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.AdverseEventValidator;
import edu.ncsu.csc.itrust.exception.FormValidationException;

public class ReportAdverseEventAction {
	
	private long loggedInMID;
	private EmailUtil emailer;
	private PatientDAO patientDAO;
	private PersonnelDAO personnelDAO;
	private AdverseEventDAO adverseEventDAO;
	private TransactionDAO transactionDAO;
	private long hcpID;
	private AdverseEventValidator validator;
	
	public ReportAdverseEventAction(String hcpID, DAOFactory factory, long loggedInMID){
		this.loggedInMID = loggedInMID;
		this.patientDAO = factory.getPatientDAO();
		this.personnelDAO = factory.getPersonnelDAO();
		this.emailer = new EmailUtil(factory);
		this.adverseEventDAO = factory.getAdverseEventDAO();
		this.transactionDAO = factory.getTransactionDAO();
		this.hcpID = Long.parseLong(hcpID);
		this.validator = new AdverseEventValidator();
		
		
	}
	
	/**
	 * Constructor used to send e-mails only
	 */
	public ReportAdverseEventAction(DAOFactory factory, long loggedInMID){
		this.loggedInMID = loggedInMID;
		this.patientDAO = factory.getPatientDAO();
		this.personnelDAO = factory.getPersonnelDAO();
		this.emailer = new EmailUtil(factory);
		this.adverseEventDAO = factory.getAdverseEventDAO();
		this.transactionDAO = factory.getTransactionDAO();
		this.validator = new AdverseEventValidator();
	}
	/**
	 * Method that sends exactly one e-mail to each MID in the list of Adverse Events
	 * @param aeList The list of adverse Event Beans that need to be acted upon
	 * @return EList The list of e-mails sent for testing purposes
	 */
	public Email sendMails(List<AdverseEventBean> aeList) throws iTrustException, FormValidationException, DBException {
		List<String> MIDlist = new ArrayList<String>();
		String patientID = "";
		
		for(AdverseEventBean beaner : aeList){
			patientID = beaner.getMID();
			String newDesc = " Drug: " + beaner.getDrug() + " (" + beaner.getCode() + ") Description: " + beaner.getDescription();
			beaner.setDescription(newDesc);
		}
		for(AdverseEventBean beano : aeList){
			if(!MIDlist.contains(beano.getPrescriber())){
				MIDlist.add(beano.getPrescriber());
			}
		}
		Email email = new Email();
		
		for(String num : MIDlist){
			String message = " Patient: " + patientDAO.getName(Long.parseLong(patientID)) 
				+ " (MID " + patientID + ") Has Reported the following adverse event(s)";
			for(AdverseEventBean beano : aeList){
				if(beano.getPrescriber().equals(num)){
					message = message + beano.getDescription();
				}
			}
			
			String fromEmail;
			email.setFrom("noreply@itrust.com");
			PatientBean sender = patientDAO.getPatient(loggedInMID);
			PersonnelBean receiver = personnelDAO.getPersonnel(Long.parseLong(num));
			List<String> toList = new ArrayList<String>();
			toList.add(receiver.getEmail());
			fromEmail = sender.getEmail();
			
			email.setToList(toList);
			email.setFrom(fromEmail);
			email.setSubject(String.format("Adverse Event Report(Prescription)"));
			email.setBody(message);
			emailer.sendEmail(email);
			transactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);
			
		}
		return email;
	}
	/**
	 * A method used to send a single e-mail. Used in immunizations.
	 * @param aeBean
	 * @return Email returns the Email for testing purposes.
	 */
	public Email sendMail (AdverseEventBean aeBean)throws iTrustException, FormValidationException, DBException{
		Email email = new Email();
		String fromEmail;
		email.setFrom("noreply@itrust.com");
		List<String> toList = new ArrayList<String>();
		
		PatientBean sender = patientDAO.getPatient(loggedInMID);
		PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);
		
		toList.add(receiver.getEmail());
		fromEmail = sender.getEmail();
		
		email.setToList(toList);
		email.setFrom(fromEmail);
		email.setSubject(String.format("Adverse Event Report (Immunization)"));
		email.setBody(String.format(
				" Patient: " + patientDAO.getName(Long.parseLong(aeBean.getMID())) 
				+ " (MID " + aeBean.getMID() + ") Has Reported the following adverse event" +
				" Drug: " + aeBean.getDrug() + "(" + aeBean.getCode() + ") Description: " + aeBean.getDescription()
				));
		emailer.sendEmail(email);
		
		transactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);
		
		return email;
	}
	
	/**
	 * Method used to add a report to the data base
	 * @param aeBean The adverse event to add
	 * @return a string for testing purposes only
	 * @throws iTrustException
	 * @throws FormValidationException
	 * @throws DBException
	 */
	public String addReport(AdverseEventBean aeBean)throws iTrustException, FormValidationException, DBException {
		
		try{
			validator.validate(aeBean);
		}catch (FormValidationException e){
			e.printStackTrace();
			return e.getMessage();
			}
		try{
			adverseEventDAO.addReport(aeBean, hcpID);
		}
		catch( DBException e ){
			throw new iTrustException(e.getMessage());
		}
		/**
		 * Old code used to send a single e-mail. Keep for reference
		Email email = new Email();
		String senderName;
		String fromEmail;
		email.setFrom("noreply@itrust.com");
		List<String> toList = new ArrayList<String>();
		
		PatientBean sender = patientDAO.getPatient(loggedInMID);
		PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);
		
		toList.add(receiver.getEmail());
		senderName = sender.getFullName();
		fromEmail = sender.getEmail();
		
		email.setToList(toList);
		email.setFrom(fromEmail);
		email.setSubject(String.format("Adverse Event Report"));
		email.setBody(String.format(
				" Patient: " + patientDAO.getName(Long.parseLong(aeBean.getMID())) 
				+ " (MID " + aeBean.getMID() + ") Has Reported the following adverse event(s)" +
				" Drug: " + aeBean.getDrug() + "(" + aeBean.getCode() + ") Description: " + aeBean.getDescription()
				));
		emailer.sendEmail(email);
		
		transactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);*/
		transactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID);
		return "";
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.LOINCbean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.LOINCDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.LOINCBeanValidator;

/**
 * Handles updating the LOINC Used.
 * 
 * Logical Observation Identifiers Names and Codes (LOINC) is a database and universal
 *  standard for identifying medical laboratory observations. 
 *  
 * @see http://loinc.org/
 */
public class UpdateLOINCListAction {
	private long performerID = 0;
	private LOINCDAO lDAO;
	private TransactionDAO transDAO;
	private LOINCBeanValidator validator = new LOINCBeanValidator();

	/**
	 * Sets up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param performerID The MID of the person updating the LOINCs.
	 */
	public UpdateLOINCListAction(DAOFactory factory, long performerID) {
		this.performerID = performerID;
		transDAO = factory.getTransactionDAO();
		lDAO = factory.getLOINCDAO();
	}

	/**
	 * Adds a new LOINC
	 * 
	 * @param diagn
	 *            New LOINC
	 * @return Status message
	 * @throws FormValidationException
	 */
	public String add(LOINCbean diagn) throws FormValidationException, iTrustException {
		validator.validate(diagn);

		List<LOINCbean> lblist = lDAO.getAllLOINC();

		boolean correctID = false;
		for (int i = 0; i < lblist.size(); i++) {
			if (lblist.get(i).getLabProcedureCode().equals(diagn.getLabProcedureCode())) {
				correctID = true;
				i = lblist.size();
			}
		}
		if (correctID) {
			throw new FormValidationException("Error: Code already exists.");
		}
		lDAO.addLOINC(diagn);
		transDAO.logTransaction(TransactionType.MANAGE_LOINC, performerID, 0L, "added LOINC code "
				+ diagn.getLabProcedureCode());
		return "Success: " + diagn.getLabProcedureCode() + " added";
	}

	/**
	 * Updates a LOINC
	 * 
	 * @param diagn
	 *            new information to update (but same code)
	 * @return Status message
	 * @throws FormValidationException
	 */
	public String updateInformation(LOINCbean diagn) throws FormValidationException {
		validator.validate(diagn);
		try {
			int rows = lDAO.update(diagn);
			if (0 == rows) {
				return "Error: Code not found.";
			} else {
				transDAO.logTransaction(TransactionType.MANAGE_LOINC, performerID, 0L, "updated LOINC code "
						+ diagn.getLabProcedureCode());
				return "Success: " + diagn.getLabProcedureCode() + " updated";
			}
		} catch (DBException e) {
			e.printStackTrace();
			return e.getMessage();
		}
	}

}

package edu.ncsu.csc.itrust.action;

import java.sql.SQLException;
import java.sql.Timestamp;
import edu.ncsu.csc.itrust.beans.ApptBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.ApptDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.ApptBeanValidator;

public class AddApptAction {
	private long loggedInMID;
	private ApptDAO apptDAO;
	private TransactionDAO transDAO;
	private PatientDAO patientDAO;
	private PersonnelDAO personnelDAO;
	private ApptBeanValidator validator = new ApptBeanValidator();
	
	public AddApptAction(DAOFactory factory, long loggedInMID) {
		this.loggedInMID = loggedInMID;
		this.apptDAO = factory.getApptDAO();
		this.transDAO = factory.getTransactionDAO();
		this.patientDAO = factory.getPatientDAO();
		this.personnelDAO = factory.getPersonnelDAO();
	}
	
	public String addAppt(ApptBean appt) throws FormValidationException, SQLException {
		validator.validate(appt);
		if(appt.getDate().before(new Timestamp(System.currentTimeMillis()))) {
			return "The scheduled date of this Appointment ("+appt.getDate()+") has already passed.";
		}
		
		try {
			apptDAO.scheduleAppt(appt);
			transDAO.logTransaction(TransactionType.ADD_APPT, loggedInMID, 0L,
					"Added Appointment " + appt.getApptType());
			return "Success: " + appt.getApptType() + " for " + appt.getDate() + " added";
		}
		catch (DBException e) {
			e.printStackTrace();
			return e.getMessage();
		} 
	}
	
	/**
	 * Gets a users's name from their MID
	 * 
	 * @param mid the MID of the user
	 * @return the user's name
	 * @throws iTrustException
	 */
	public String getName(long mid) throws iTrustException {
		if(mid < 7000000000L)
			return patientDAO.getName(mid);
		else
			return personnelDAO.getName(mid);
	}
}

package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator;

/**
 * Handles adding remote monitoring patient data to the database
 * 
 */
public class AddRemoteMonitoringDataAction {
	private RemoteMonitoringDataBeanValidator validator = new RemoteMonitoringDataBeanValidator();
	private RemoteMonitoringDAO rmDAO;
	private TransactionDAO transDAO;
	private AuthDAO authDAO;
	private long loggedInMID;
	private long patientMID;

	/**
	 * Constructor
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person recording the patient's data.
	 * @param patientMID The MID of the patient
	 */
	public AddRemoteMonitoringDataAction(DAOFactory factory, long loggedInMID, long patientMID) {
		this.loggedInMID = loggedInMID;
		this.rmDAO = factory.getRemoteMonitoringDAO();
		this.transDAO = factory.getTransactionDAO();
		this.authDAO = factory.getAuthDAO();
		this.patientMID = patientMID;
	}

	/**
	 * Adds a patients remote monitoring data to the database.
	 * 
	 * @param glucoseLevel
	 * @throws DBException
	 */
	public void addRemoteMonitoringData(int glucoseLevel)
	  throws DBException, FormValidationException,iTrustException {
		//Validation - Only need to validate the three integer parameters
		RemoteMonitoringDataBean m = new RemoteMonitoringDataBean();
		m.setGlucoseLevel(glucoseLevel);
		m.setDiastolicBloodPressure(60);
		m.setSystolicBloodPressure(60);
		validator.validate(m);
		m.setDiastolicBloodPressure(-1);
		m.setSystolicBloodPressure(-1);
		//Log transaction
		transDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID);
		String role;
		if (loggedInMID == patientMID){
			role = "self-reported";
		} else if (authDAO.getUserRole(loggedInMID).getUserRolesString().equals("uap")){
			role = "case-manager";
		} else {
			role = "patient representative";
		}		
		//Store in DB
		rmDAO.storePatientData(patientMID, glucoseLevel, role, loggedInMID);
	}
	
	/**
	 * Adds a patients remote monitoring data to the database.
	 * 
	 * @param systolicBloodPressure
	 * @param diastolicBloodPressure
	 * @throws DBException
	 */
	public void addRemoteMonitoringData(int systolicBloodPressure, int diastolicBloodPressure)
	  throws DBException, FormValidationException,iTrustException {
		//Validation - Only need to validate the three integer parameters
		RemoteMonitoringDataBean m = new RemoteMonitoringDataBean();
		m.setSystolicBloodPressure(systolicBloodPressure);
		m.setDiastolicBloodPressure(diastolicBloodPressure);
		validator.validate(m);
		
		//Log transaction
		transDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID);
		String role;
		if (loggedInMID == patientMID){
			role = "self-reported";
		} else if (authDAO.getUserRole(loggedInMID).getUserRolesString().equals("uap")){
			role = "case-manager";
		} else {
			role = "patient representative";
		}		
		//Store in DB
		rmDAO.storePatientData(patientMID, systolicBloodPressure, diastolicBloodPressure, role, loggedInMID);
	}
	
	/**
	 * Adds a patients remote monitoring data to the database.
	 * 
	 * @param systolicBloodPressure
	 * @param diastolicBloodPressure
	 * @param glucoseLevel
	 * @throws DBException
	 */
	public void addRemoteMonitoringData(int systolicBloodPressure, int diastolicBloodPressure, int glucoseLevel)
	  throws DBException, FormValidationException,iTrustException {
		//Validation - Only need to validate the three integer parameters
		RemoteMonitoringDataBean m = new RemoteMonitoringDataBean();
		m.setSystolicBloodPressure(systolicBloodPressure);
		m.setDiastolicBloodPressure(diastolicBloodPressure);
		m.setGlucoseLevel(glucoseLevel);
		validator.validate(m);
		
		//Log transaction
		transDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID);
		String role;
		if (loggedInMID == patientMID){
			role = "self-reported";
		} else if (authDAO.getUserRole(loggedInMID).getUserRolesString().equals("uap")){
			role = "case-manager";
		} else {
			role = "patient representative";
		}		
		//Store in DB
		rmDAO.storePatientData(patientMID, systolicBloodPressure, diastolicBloodPressure, glucoseLevel, role, loggedInMID);
	}
	
	/**
	 * returns the patient name
	 * 
	 * @return patient name
	 * @throws DBException
	 * @throws iTrustException
	 */
	public String getPatientName(long pid) throws DBException, iTrustException {
		return authDAO.getUserName(pid);
	}
	
}

package edu.ncsu.csc.itrust.action;


import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;


/**
 * Edits a patient's prescription information.  Used by hcp-uap/editPrescription.jsp
 * @author Ben Smith
 */
public class EditPrescriptionAction {

	private OfficeVisitDAO ovDAO;


	/**
	 * Creates a new action by initializing the office visit
	 * database access object.
	 * 
	 * @param factory
	 * @throws iTrustException
	 */
	public EditPrescriptionAction(DAOFactory factory) throws iTrustException {
		this.ovDAO = factory.getOfficeVisitDAO();

	}

	/**
	 * Edits an existing prescription in the database.
	 * 
	 * @param pres The prescription bean that has been changed.
	 * @throws DBException
	 */
	public void editPrescription(PrescriptionBean pres) throws DBException {
		
		ovDAO.editPrescription(pres);
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.List;
import java.util.Calendar;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.beans.AllergyBean;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AllergyDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.enums.PrescriptionAlerts;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.ProcedureBean;

/**
 * Creates a new Emergency Report Used by emergencyReport.jsp
 * 
 * @author laurenhayward
 * 
 */
public class EmergencyReportAction extends PatientBaseAction {
	private TransactionDAO transDAO;
	private PatientDAO patientDAO;
	private AllergyDAO allergyDAO;
	private OfficeVisitDAO ovDAO;
	private PatientBean pb;
	private EmailUtil emailutil;
	private long loggedInMID;

	/**
	 * The super class handles validating the pid Logs viewing of the report
	 * 
	 * @param factory The DAOFactory used in creating the DAOs for this action.
	 * @param loggedInMID The MID of the user who is looking at the emergency report.
	 * @param pidString The ID of the patient whose report is being generated.
	 * @throws iTrustException
	 */
	public EmergencyReportAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {
		super(factory, pidString);
		this.patientDAO = factory.getPatientDAO();
		this.allergyDAO = factory.getAllergyDAO();
		this.transDAO = factory.getTransactionDAO();
		this.ovDAO = factory.getOfficeVisitDAO();
		this.loggedInMID = loggedInMID;
		emailutil = new EmailUtil(factory);
		
		pb = patientDAO.getPatient(this.pid);
		transDAO.logTransaction(TransactionType.VIEW_EMERGENCY_REPORT, this.loggedInMID, Long.valueOf(pidString), "viewed emergency report");
		emailutil.sendEmail(makeEmail());
	}

	/**
	 * Returns the patient's name
	 * 
	 * @return patient's full name
	 */
	public String getPatientName() {
		return (pb.getFirstName() + " " + pb.getLastName());
	}

	/**
	 * Returns the patient's age
	 * 
	 * @return patient's age
	 */
	public String getPatientAge() {
		return Integer.toString(pb.getAge());
	}
	
	/**
	 * Returns the patient's gender
	 * 
	 * @return patient's gender
	 */
	public String getPatientGender() {
		return pb.getGender().toString();
	}
	
	/**
	 * Returns the patient's emergency contact
	 * 
	 * @return patient's emergency contact
	 */
	public String getPatientEmergencyContact() {
		return pb.getEmergencyName() + " " + pb.getEmergencyPhone();
	}
	
	/**
	 * Returns the patient's blood type
	 * 
	 * @return the patient's blood type
	 */
	public String getBloodType() {
		return pb.getBloodType() + "";
	}

	/**
	 * Returns a list of allergies for the given patient
	 * 
	 * @return a list of AllergyBeans
	 * @throws iTrustException
	 */
	public List<AllergyBean> getAllergies() throws iTrustException {
		return allergyDAO.getAllergies(this.pid);
	}

	/**
	 * Returns a list of prescriptions the patient is currently taking
	 * 
	 * @return a list of PrescriptionBeans for which the patient is currently taking
	 * @throws iTrustException
	 */
	public List<PrescriptionBean> getCurrentPrescriptions() throws iTrustException {
		List<PrescriptionBean> allPrescriptions = patientDAO.getCurrentPrescriptions(this.pid);
		ArrayList<PrescriptionBean> warningList = new ArrayList<PrescriptionBean>();
		for (int i = 0; i < allPrescriptions.size(); i++) {
			if (PrescriptionAlerts.isAlert(allPrescriptions.get(i).getMedication().getNDCode()))
				warningList.add(allPrescriptions.get(i));
		}
		return warningList;
	}

	/**
	 * Returns a list of diagnoses that are in the range indicated by the DiagnosisRange enum
	 * 
	 * @return list of DiagnosisBeans
	 * @throws iTrustException
	 */
	public List<DiagnosisBean> getWarningDiagnoses() throws iTrustException {
		try {
			boolean dup = false;
			List<DiagnosisBean> allDiagnoses = patientDAO.getDiagnoses(this.pid);
			ArrayList<DiagnosisBean> warningList = new ArrayList<DiagnosisBean>();
			for (DiagnosisBean bean: allDiagnoses) {
				OfficeVisitBean ovb = ovDAO.getOfficeVisit(bean.getVisitID());

				if(ovb == null){
					continue;
					
				}
				if ("yes".equals(bean.getClassification()) || (ovb.getVisitDate().getTime() > Calendar.getInstance().getTimeInMillis() - 30 * 24 * 60 * 60 * 1000))  {
					for (DiagnosisBean wbean: warningList) {
						if (bean.getDescription().equals(wbean.getDescription())) {
							dup = true;
						}
					}
					if (!dup) {
						warningList.add(bean);
					}
				}
			}
			return warningList;
		} catch (DBException dbe) {
			throw new iTrustException(dbe.getMessage());
		}
	}

	/**
	 * Returns a list of prescriptions the patient is currently taking
	 * 
	 * @return a list of PrescriptionBeans for which the patient is currently taking
	 * @throws iTrustException
	 */
	public List<ProcedureBean> getImmunizations() throws iTrustException {
		List<ProcedureBean> allImmunizations = patientDAO.getImmunizationProcedures(this.pid);
		return allImmunizations;
	}
	
	/**
	 * Creates a fake e-mail to notify the user that an emergency report has been created and viewed.
	 * 
	 * @return the e-mail to be sent
	 * @throws DBException
	 */
	private Email makeEmail() throws DBException{

		Email email = new Email();
		List<PatientBean> reps = patientDAO.getRepresenting(pb.getMID());
		
		List<String> toAddrs = new ArrayList<String>();
		toAddrs.add(pb.getEmail());
		for (PatientBean r: reps) {
			toAddrs.add(r.getEmail());
		}
		
		email.setFrom("no-reply@itrust.com");
    	email.setToList(toAddrs); // patient and personal representative
    	email.setSubject(String.format("Emergency Report Viewed Notification"));
    	email.setBody("Dear " + pb.getFullName() + ",\n An emergency report has been generated. " + 
    			"Please login to iTrust to see who has viewed your records.");
		return email;
	}
}

package edu.ncsu.csc.itrust.action;

/**
 * Used by PHAs to view the reported adverse events
 */
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.AdverseEventBean;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.MessageBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;

public class MonitorAdverseEventAction {
	 
	private long loggedInMID;
	private EmailUtil emailer;
	private PatientDAO patientDAO;
	private AdverseEventDAO adverseEventDAO;
	private TransactionDAO transactionDAO;
	private SendMessageAction messenger;
	
	/**
	 * Constructor 
	 * @param factory
	 * @param loggedInMID
	 */
	public MonitorAdverseEventAction(DAOFactory factory, long loggedInMID){
		this.loggedInMID = loggedInMID;
		this.transactionDAO = factory.getTransactionDAO();
		this.patientDAO = factory.getPatientDAO();
		this.emailer = new EmailUtil(factory);
		this.adverseEventDAO = factory.getAdverseEventDAO();
		this.messenger = new SendMessageAction(factory, loggedInMID);
		
	}
	/**
	 * Returns a list of reports between specified dates
	 * @param isPrescription Boolean to return prescriptions or immunizations
	 * @param start The starting date
	 * @param end The ending date
	 * @return the list of events
	 * @throws iTrustException
	 * @throws FormValidationException
	 * @throws SQLException
	 * @throws ParseException
	 */
	public List<AdverseEventBean> getReports(boolean isPrescription, String start, String end)throws iTrustException, FormValidationException, SQLException, ParseException {
		if(isPrescription) {
			transactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID, 0L, "Adverse Prescription Reports Requested.");
			return adverseEventDAO.getPerscriptions(start, end);
		} else { //is Immunization
			transactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID, 0L, "Adverse Immunization Report Requested.");
			return adverseEventDAO.getImmunizations(start, end);
		}
		
	}
	
	/**
	 * Returns the patient's name
	 * @param MID the MID of the patient to return the name for.
	 * @return
	 */
	public String getName(long MID) {
		try {
			return patientDAO.getName(MID);
		} catch(DBException e) {
			return "";
		} catch(iTrustException e) {
			return "Patient no longer exists";
		}
	}
	
	/**
	 * Sends an e-mail to a patient requesting more information
	 * @param patientMID The patient to receive the message
	 * @param message The message
	 * @return string for testing purposes
	 * @throws DBException
	 */
	public String sendEmail(long patientMID, String message) throws DBException{
		String rValue;
		List<String> toList = new ArrayList<String>();
		PatientBean receiver = patientDAO.getPatient(patientMID);
		toList.add(receiver.getEmail());
		Email mail = new Email();
		mail.setBody(message);
		mail.setFrom(loggedInMID + "");
		mail.setToList(toList);
		emailer.sendEmail(mail);
		transactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID, 0L, "Requested more information");
		rValue = "" + mail.getFrom() + " " + mail.getBody();
		return rValue;
	}
	
	/**
	 * Method used to remove an adverse event report
	 * 
	 * @param id the id of the report to be removed
	 * @throws DBException
	 * @throws iTrustException
	 */
	public void remove(int id) throws DBException, iTrustException, FormValidationException{
		long HCPMID;
		try{
		AdverseEventBean aeBean = adverseEventDAO.getReport(id);
		adverseEventDAO.removeReport(id);
		HCPMID = adverseEventDAO.getHCPMID(id);
		MessageBean mBeanTwo = new MessageBean();
		MessageBean mBeanOne = new MessageBean();
		String body = "An adverse event for " + aeBean.getDrug() + " perscribed to " + patientDAO.getName(Long.parseLong(aeBean.getMID())) +" with description: (" + aeBean.getDescription()+ ") was removed.";
		mBeanOne.setTo(Long.parseLong(aeBean.getMID()));
		mBeanTwo.setTo(HCPMID);
		mBeanOne.setSubject("Subject");
		mBeanTwo.setSubject("Subject");
		mBeanOne.setBody(body);
		mBeanTwo.setBody(body);
		mBeanOne.setFrom(loggedInMID);
		mBeanTwo.setFrom(loggedInMID);
		messenger.sendMessage(mBeanOne);
		messenger.sendMessage(mBeanTwo);
		transactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID, 0L, "Adverse Event Report Removed");
		}catch(SQLException e){
			throw new DBException(e);
		} 
	}
}

package edu.ncsu.csc.itrust.action;

import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.beans.ApptTypeBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator;

public class EditApptTypeAction {
	private long loggedInMID;
	private ApptTypeDAO apptTypeDAO;
	private TransactionDAO transDAO;
	private ApptTypeBeanValidator validator = new ApptTypeBeanValidator();
	
	public EditApptTypeAction(DAOFactory factory, long loggedInMID) {
		this.loggedInMID = loggedInMID;
		this.apptTypeDAO = factory.getApptTypeDAO();
		this.transDAO = factory.getTransactionDAO();
	}
	
	public List<ApptTypeBean> getApptTypes() throws SQLException {
		return apptTypeDAO.getApptTypes();
	}
	
	public String addApptType(ApptTypeBean apptType) throws SQLException, FormValidationException {
		validator.validate(apptType);
		
		List<ApptTypeBean> list = this.getApptTypes();
		for(ApptTypeBean a : list) {
			if(a.getName().equals(apptType.getName()))
				return "Appointment Type: "+apptType.getName()+" already exists.";
		}
		
		try {
			if (apptTypeDAO.addApptType(apptType)) {
				transDAO.logTransaction(TransactionType.ADD_APPT_TYPE, loggedInMID, 0L,
						"Added Appointment Type " + apptType.getName());
				return "Success: " + apptType.getName() + " - Duration: " + apptType.getDuration() + " added";
			} else
				return "The database has become corrupt. Please contact the system administrator for assistance.";
		} catch (DBException e) {
			e.printStackTrace();
			return e.getMessage();
		} 
	}
	
	public String editApptType(ApptTypeBean apptType) throws SQLException, FormValidationException {
		validator.validate(apptType);
		
		List<ApptTypeBean> list = this.getApptTypes();
		int flag = 0;
		for(ApptTypeBean a : list) {
			if(a.getName().equals(apptType.getName())) {
				flag = 1;
				if(a.getDuration() == apptType.getDuration())
					return "Appointment Type: "+apptType.getName()+" already has a duration of "+apptType.getDuration()+" minutes.";
				break;
			}
		}
		if(flag == 0) {
			return "Appointment Type: "+apptType.getName()+" you are trying to update does not exist.";
		}
		
		try {
			if (apptTypeDAO.editApptType(apptType)) {
				transDAO.logTransaction(TransactionType.UPDATE_APPT_TYPE, loggedInMID, 0L,
						"Updated Appointment Type " + apptType.getName());
				return "Success: " + apptType.getName() + " - Duration: " + apptType.getDuration() + " updated";
			} else
				return "The database has become corrupt. Please contact the system administrator for assistance.";
		} catch (DBException e) {
			e.printStackTrace();
			return e.getMessage();
		}
	}
	
	public int getDurationByType(String at) throws SQLException {
		List<ApptTypeBean> list = this.getApptTypes();
		for(ApptTypeBean a : list) {
			if(a.getName().equals(at))
				return a.getDuration();
		}
		return 0;
	}
}

package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.RandomPassword;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.AddPersonnelValidator;

/**
 * Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password
 * for them.
 * 
 * Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}
 * 
 * @author Andy Meneely
 * 
 */
public class AddHCPAction {
	private PersonnelDAO personnelDAO;
	private AuthDAO authDAO;
	private TransactionDAO transDAO;
	private long loggedInMID;

	/**
	 * Sets up the defaults for the class
	 * 
	 * @param factory factory for creating the defaults.
	 * @param loggedInMID person currently logged in 
	 * @author Andy Meneely
	 */	
	
	public AddHCPAction(DAOFactory factory, long loggedInMID) {
		this.personnelDAO = factory.getPersonnelDAO();
		this.authDAO = factory.getAuthDAO();
		this.transDAO = factory.getTransactionDAO();
		this.loggedInMID = loggedInMID;
	}
	
	/**
	 * Adds the new user.   Event is logged.
	 * 
	 * @param p bean containing the information for the new user
	 * @return MID of the new user.
	 * @throws FormValidationException
	 * @throws iTrustException
	 */
	public long add(PersonnelBean p) throws FormValidationException, iTrustException {
		new AddPersonnelValidator().validate(p);
		long newMID = personnelDAO.addEmptyPersonnel(Role.HCP);
		p.setMID(newMID);
		personnelDAO.editPersonnel(p);
		String pwd = authDAO.addUser(newMID, Role.HCP, RandomPassword.getRandomPassword());
		p.setPassword(pwd);
		//transDAO.logTransaction(TransactionType.CREATE_DISABLE_PATIENT_HCP, loggedInMID);
		transDAO.logTransaction(TransactionType.CREATE_DISABLE_PATIENT_HCP, loggedInMID, newMID, "Added New HCP");
		return newMID;
	}

}

package edu.ncsu.csc.itrust.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * Handles retrieving the patient data for a certain HCP as used by viewTelemedicineData.jsp
 * 
 */
public class ViewMyRemoteMonitoringListAction {
	private RemoteMonitoringDAO rmDAO;
	private TransactionDAO transDAO;
	private AuthDAO authDAO;
	private long loggedInMID;

	/**
	 * Constructor
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the HCP retrieving the patient data.
	 */
	public ViewMyRemoteMonitoringListAction(DAOFactory factory, long loggedInMID) {
		this.loggedInMID = loggedInMID;
		this.rmDAO = factory.getRemoteMonitoringDAO();
		this.transDAO = factory.getTransactionDAO();
		this.authDAO = factory.getAuthDAO();
	}

	/**
	 * Returns a list of RemoteMonitoringDataBeans for the logged in HCP
	 * 
	 * @return list of TransactionBeans
	 * @throws DBException
	 * @throws FormValidationException
	 */
	public List<RemoteMonitoringDataBean> getPatientsData() throws DBException {
		
		transDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID);
		return rmDAO.getPatientsData(loggedInMID);
		
	}
	
	/**
	 * Returns a list of RemoteMonitoringDataBeans for the logged in HCP
	 * 
	 * @return list of TransactionBeans
	 * @throws DBException
	 * @throws FormValidationException
	 */
	public List<RemoteMonitoringDataBean> getPatientDataByDate(long patientMID, String startDate, String endDate) throws DBException,FormValidationException {
		Date lower;
		Date upper;
		try {
			lower = new SimpleDateFormat("MM/dd/yyyy").parse(startDate);
			upper = new SimpleDateFormat("MM/dd/yyyy").parse(endDate);
			if (lower.after(upper))
				throw new FormValidationException("Start date must be before end date!");
		} catch (ParseException e) {
			throw new FormValidationException("Enter dates in MM/dd/yyyy");
		}		
		
		transDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID);
		return rmDAO.getPatientDataByDate(patientMID, lower, upper);
		
	}
	
	public List<RemoteMonitoringDataBean> getPatientDataWithoutLogging() throws DBException {
		return rmDAO.getPatientsData(loggedInMID);
	}
	
	/**
	 * returns the patient name
	 * 
	 * @return patient name
	 * @throws DBException
	 * @throws iTrustException
	 */
	public String getPatientName(long pid) throws DBException, iTrustException {
		return authDAO.getUserName(pid);
	}
	
}

package edu.ncsu.csc.itrust.action;

import java.util.Calendar;
import edu.ncsu.csc.itrust.beans.SurveyBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.SurveyDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * This class is used to add patient survey data to the database.  The office visit ID is linked with the survey ID.  Once the
 * survey is added, the transaction is logged
 *
 */
public class SurveyAction {
	private TransactionDAO transDAO;
	private SurveyDAO surveyDAO;
	long loggedInMID;
	
	/**
	 * Sets up defaults
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user taking the survey.
	 */
	public SurveyAction(DAOFactory factory, long loggedInMID) {
		transDAO = factory.getTransactionDAO();
		surveyDAO = factory.getSurveyDAO();
		this.loggedInMID = loggedInMID;
	}


	/**
	 * Pass the OfficeVistBean along with SurveyBean
	 * @param surveyBean contains data to be added to database
	 * @param visitID The Office Visit ID corresponding to this Survey.
	 * @throws DBException
	 */
	public void addSurvey(SurveyBean surveyBean, long visitID) throws DBException {
		
		surveyBean.setVisitID(visitID); //now set visit ID in the survey bean
		surveyDAO.addCompletedSurvey(surveyBean, Calendar.getInstance().getTime());
		//add to transaction log
		transDAO.logTransaction(TransactionType.ADD_PATIENT_SURVEY, loggedInMID, 0L, "office visit ID for completed survey is: " + visitID);
		
	}
}

package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.beans.MedicationBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.MedicationBeanValidator;

/**
 * Handles updating the ND Code (Prescription) List Used by editNDCodes.jsp
 * 
 * The National Drug Code (NDC) is a universal product identifier used in the
 * United States for drugs intended for human use.
 * 
 * @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm
 * @author laurenhayward
 */
public class UpdateNDCodeListAction {
	private long performerID = 0;
	private TransactionDAO transDAO;
	private NDCodesDAO ndDAO;
	private MedicationBeanValidator validator = new MedicationBeanValidator();

	/**
	 * Set up defaults.
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param performerID The MID of the user updating the ND lists.
	 */
	public UpdateNDCodeListAction(DAOFactory factory, long performerID) {
		this.performerID = performerID;
		ndDAO = factory.getNDCodesDAO();
		transDAO = factory.getTransactionDAO();
	}

	/**
	 * Adds a new ND Code (prescription) to the list
	 * 
	 * @param med
	 *            The new ND Code to be added
	 * @return Status message
	 * @throws FormValidationException
	 */
	public String addNDCode(MedicationBean med) throws FormValidationException {
		validator.validate(med);
		try {
			if (ndDAO.addNDCode(med)) {
				transDAO.logTransaction(TransactionType.MANAGE_DRUG_CODE, performerID, 0L, "added ND code "
						+ med.getNDCode());
				return "Success: " + med.getNDCode() + " - " + med.getDescription() + " added";
			} else
				return "The database has become corrupt. Please contact the system administrator for assistance.";
		} catch (DBException e) {
			e.printStackTrace();
			return e.getMessage();
		} catch (iTrustException e) {
			return e.getMessage();
		}
	}

	/**
	 * Updates the ND Code with new information from the MedicationBean
	 * 
	 * @param med
	 *            the MedicationBean that holds new information but the same code
	 * @return status message
	 * @throws FormValidationException
	 */
	public String updateInformation(MedicationBean med) throws FormValidationException {
		validator.validate(med);
		try {
			int rows = updateCode(med);
			if (0 == rows) {
				return "Error: Code not found.";
			} else {
				transDAO.logTransaction(TransactionType.MANAGE_DRUG_CODE, performerID, 0L, "updated ND code "
						+ med.getNDCode());
				return "Success: " + rows + " row(s) updated";
			}
		} catch (DBException e) {
			e.printStackTrace();
			return e.getMessage();
		}
	}

	/**
	 * Medication information should already be validated
	 * 
	 * @param med
	 * @return
	 * @throws DBException
	 */
	private int updateCode(MedicationBean med) throws DBException {
		return ndDAO.updateCode(med);
	}

}

package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.DrugInteractionBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.DrugInteractionValidator;

/**
 * Used by EditDrugInteraction.jsp to edit and get information about drug interactions.
 * 
 */
public class DrugInteractionAction {
	private DrugInteractionDAO drugDAO;
	private TransactionDAO tranDAO;
	private DrugInteractionValidator validator;
	long loggedInMID;

	/**
	 * Sets up defaults
	 * 
	 * @param factory The DAO factory to be used for generating the DAOs for this action.
	 * 
	 */
	public DrugInteractionAction(DAOFactory factory, long loggedInMID) {
		this.drugDAO = factory.getDrugInteractionDAO();
		this.tranDAO = factory.getTransactionDAO();
		this.validator = new DrugInteractionValidator();
		this.loggedInMID = loggedInMID;
	}
	
	/**
	 * Method to report an interaction
	 * @param firstDrug
	 * @param secondDrug
	 * @param description
	 * @return
	 */
	
	public String reportInteraction(String firstDrug, String secondDrug, String description) throws iTrustException,FormValidationException{
		if (firstDrug.equals(secondDrug)){
			return "Interactions can only be recorded between two different drugs";
		}
		DrugInteractionBean drugInt = new DrugInteractionBean();
		drugInt.setFirstDrug(firstDrug);
		drugInt.setSecondDrug(secondDrug);
		drugInt.setDescription(description);
		
		try {
			validator.validate(drugInt);
			if (drugDAO.reportInteraction(firstDrug,secondDrug,description)){
				tranDAO.logTransaction(TransactionType.DRUG_INTERACTION, loggedInMID);
				return "Interaction recorded successfully";
			} else {
				return "Interaction could not be added";
			}
		} catch (DBException e){
			e.printStackTrace();
			return e.getMessage();
			}
		}

	/**
	 * Method to delete an interaction
	 * @param firstDrug
	 * @param secondDrug
	 * @return
	 */
	public String deleteInteraction(String firstDrug,String secondDrug) throws iTrustException, FormValidationException{
		DrugInteractionBean drugInt = new DrugInteractionBean();
		drugInt.setFirstDrug(firstDrug);
		drugInt.setSecondDrug(secondDrug);
		drugInt.setDescription("blank");
		
		try {
			validator.validate(drugInt);
			if (drugDAO.deleteInteraction(firstDrug,secondDrug)){
				tranDAO.logTransaction(TransactionType.DRUG_INTERACTION, loggedInMID);
				return "Interaction deleted successfully";
			} else {
				return "Interaction could not be deleted";
			}
		} catch (DBException e){
			e.printStackTrace();
			throw new iTrustException(e.getMessage());
		}
	}
	
	/**
	 * Method to return a list of drug interactions for a given drug
	 * @param drugCode - The ND Code of the drug
	 * @return
	 */
	public List<DrugInteractionBean> getInteractions(String drugCode) throws iTrustException {
		try {
			return drugDAO.getInteractions(drugCode);
		} catch (DBException e){
			throw new iTrustException(e.getMessage());
		}
	}
}
package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.AllergyBean;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.FamilyMemberBean;
import edu.ncsu.csc.itrust.beans.HealthRecord;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AllergyDAO;
import edu.ncsu.csc.itrust.dao.mysql.FamilyDAO;
import edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO;
import edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator;
import edu.ncsu.csc.itrust.risk.RiskChecker;
import edu.ncsu.csc.itrust.validate.AllergyBeanValidator;


/**
 * Edits the patient health record for a given patient Used by editPHR.jsp
 * 
 * @author laurenhayward
 * 
 */
public class EditPHRAction extends PatientBaseAction {
	private DAOFactory factory;
	private PatientDAO patientDAO;
	private AllergyDAO allergyDAO;
	private FamilyDAO familyDAO;
	private HealthRecordsDAO hrDAO;
	private OfficeVisitDAO ovDAO;
	private TransactionDAO transDAO;
	private ICDCodesDAO icdDAO;
	private long loggedInMID;
	private ChronicDiseaseMediator diseaseMediator;
	private PersonnelDAO personnelDAO;
	private PersonnelBean HCPUAP;
	private PatientBean patient;
	private EmailUtil emailutil;
	
	/**
	 * Super class validates the patient id
	 * 
	 * @param factory The DAOFactory to be used in creating DAOs for this action.
	 * @param loggedInMID The MID of the currently logged in user who is authorizing this action.
	 * @param pidString The MID of the patient whose personal health records are being added.
	 * @throws iTrustException
	 * @throws DBException
	 * @throws NoHealthRecordsException
	 */
	public EditPHRAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException,
			DBException {
		super(factory, pidString);
		this.patientDAO = factory.getPatientDAO();
		this.allergyDAO = factory.getAllergyDAO();
		this.familyDAO = factory.getFamilyDAO();
		this.hrDAO = factory.getHealthRecordsDAO();
		this.ovDAO = factory.getOfficeVisitDAO();
		this.transDAO = factory.getTransactionDAO();
		this.icdDAO = factory.getICDCodesDAO();
		this.loggedInMID = loggedInMID;
		this.personnelDAO = factory.getPersonnelDAO();
		this.HCPUAP = personnelDAO.getPersonnel(loggedInMID);
		this.patient = patientDAO.getPatient(pid);
		emailutil = new EmailUtil(factory);
		this.factory = factory;
	}

	/**
	 * Adds an allergy to the patient's records
	 * 
	 * @param pid
	 * @param description
	 * @return "Allergy Added", exception message, a list of invalid fields, or "" (only if description is
	 *         null)
	 * @throws iTrustException
	 */
	public String updateAllergies(long pid, String description) throws iTrustException {
		
		emailutil.sendEmail(makeEmail());
		
		if (description != null && !description.equals("")) {
			try {
				AllergyBean bean = new AllergyBean();
				bean.setDescription(description);
				AllergyBeanValidator abv = new AllergyBeanValidator();
				abv.validate(bean);
				allergyDAO.addAllergy(pid, description);
				transDAO.logTransaction(TransactionType.ENTER_EDIT_PHR, loggedInMID, pid, "EditPHR - added allergy " + description);
				return "Allergy Added";
			} catch (FormValidationException e2) {
				return "<span class=error>Error: Invalid Fields--" + e2.getErrorList() + "</span><p />";
			}
		} else
			return "";
	}

	/**
	 * Returns a PatientBean for the patient
	 * 
	 * @return PatientBean
	 * @throws iTrustException
	 */
	public PatientBean getPatient() throws iTrustException {
		transDAO.logTransaction(TransactionType.VIEW_RECORDS, loggedInMID, pid, "EditPHR - view patient record ");
		return patientDAO.getPatient(pid);
	}

	/**
	 * Returns a list of AllergyBeans for the patient
	 * 
	 * @return list of AllergyBeans
	 * @throws iTrustException
	 */
	public List<AllergyBean> getAllergies() throws iTrustException {
		return allergyDAO.getAllergies(pid);
	}

	/**
	 * Returns a list of FamilyMemberBeans for the patient
	 * 
	 * @return list of FamilyMemberBeans
	 * @throws iTrustException
	 */
	public List<FamilyMemberBean> getFamily() throws iTrustException {
		List<FamilyMemberBean> fam = new ArrayList<FamilyMemberBean>();
		List<FamilyMemberBean> parents = null;
		parents = familyDAO.getParents(pid);
		fam.addAll(parents);
		fam.addAll(familyDAO.getSiblings(pid));
		fam.addAll(familyDAO.getChildren(pid));

		
		if(parents != null) {
			List<FamilyMemberBean> grandparents = new ArrayList<FamilyMemberBean>();
			for(FamilyMemberBean parent : parents) {
				grandparents.addAll(familyDAO.getParents(parent.getMid()));
			}
			
			fam.addAll(grandparents);
			
			for(FamilyMemberBean gp : grandparents) {
				gp.setRelation("Grandparent");
			}
		}
		transDAO.logTransaction(TransactionType.VIEW_RECORDS, loggedInMID, pid, "EditPHR - view patient family information ");
		return fam;
	}


	/**
	 * Returns a list of HealthRecords for the patient
	 * 
	 * @return
	 * @throws iTrustException
	 */
	public List<HealthRecord> getAllHealthRecords() throws iTrustException {
		List<HealthRecord> allHealthRecords = hrDAO.getAllHealthRecords(pid);
		transDAO.logTransaction(TransactionType.VIEW_HEALTH_RECORDS, loggedInMID, pid, "EditPHR - Viewed patient records");
		return allHealthRecords;
	}

	/**
	 * Returns a list of OfficeVisitBeans
	 * 
	 * @return
	 * @throws iTrustException
	 */
	public List<OfficeVisitBean> getAllOfficeVisits() throws iTrustException {
		transDAO.logTransaction(TransactionType.VIEW_OFFICE_VISIT, loggedInMID, pid, "EditPHR - view patient office visits ");
		return ovDAO.getAllOfficeVisits(pid);
	}

	/**
	 * Returns a complete OfficeVisitBean given a visitID
	 * 
	 * @return
	 * @throws iTrustException
	 */
	public OfficeVisitBean getCompleteOfficeVisit(long visitID) throws iTrustException {
		return ovDAO.getOfficeVisit(visitID);
	}
	
	/**
	 * Returns a list of diseases for which the patient is at risk
	 * 
	 * @return list of RiskCheckers
	 * @throws iTrustException
	 * @throws DBException
	 */
	public List<RiskChecker> getDiseasesAtRisk() throws NoHealthRecordsException,iTrustException,DBException {
		this.diseaseMediator = new ChronicDiseaseMediator(factory, pid);
		transDAO.logTransaction(TransactionType.IDENTIFY_RISK_FACTORS, loggedInMID, pid, "Check for risk factors");
		return diseaseMediator.getDiseaseAtRisk();
	}
	
	/**
	 * Checks to see if a particular family member has high blood pressure
	 * 
	 * @param member the family member to check
	 * @return true if the family member has high blood pressure.  False if there are no records or the family member does not have high blood pressure
	 * @throws iTrustException
	 */
	public boolean doesFamilyMemberHaveHighBP(FamilyMemberBean member) throws iTrustException {
		List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());
		if(records.size() == 0)
			return false;
		for(HealthRecord record : records) {
			if(record.getBloodPressureSystolic() > 240 || record.getBloodPressureDiastolic() > 120 )
				return true;
		}
		return false;
	}
	
	/**
	 * Checks to see if a particular family member has high cholesterol
	 * 
	 * @param member the family member to check
	 * @return true if the family member has high cholesterol.  False if there are no records or the family member does not
	 * @throws iTrustException
	 */	
	public boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) throws iTrustException {
		List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());
		if(records.size() == 0)
			return false;
		for(HealthRecord record : records) {
			if(record.getCholesterolHDL() < 35 || record.getCholesterolLDL() > 250 )
				return true;
		}
		return false;
	}
	
	/**
	 * Checks to see if a particular family member has diabetes
	 * 
	 * @param member the family member to check
	 * @return true if the family member has diabetes.  False if there are no records or the family member does not
	 * @throws iTrustException
	 */	

	public boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean member) throws iTrustException {
		List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());
		if(diagnoses.size() == 0)
			return false;
		for(DiagnosisBean diag : diagnoses) {
			if(diag.getICDCode().startsWith("250"))
				return true;
		}
		return false;
	}
	
	/**
	 * Checks to see if a particular family member has cancer
	 * 
	 * @param member the family member to check
	 * @return true if the family member has cancer.  False if there are no records or the family member does not
	 * @throws iTrustException
	 */	

	public boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) throws iTrustException {
		List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());
		if(diagnoses.size() == 0)
			return false;
		for(DiagnosisBean diag : diagnoses) {
			if(diag.getICDCode().startsWith("199"))
				return true;
		}
		return false;
	}
	
	/**
	 * Checks to see if a particular family member has heart disease
	 * 
	 * @param member the family member to check
	 * @return true if the family member has heart disease.  False if there are no records or the family member does not
	 * @throws iTrustException
	 */	
	public boolean doesFamilyMemberHaveHeartDisease(FamilyMemberBean member) throws iTrustException {
		List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());
		if(diagnoses.size() == 0)
			return false;
		for(DiagnosisBean diag : diagnoses) {
			if(diag.getICDCode().startsWith("402"))
				return true;
		}
		return false;
	}
	
	/**
	 * Checks to see if a particular family member smokes
	 * 
	 * @param member the family member to check
	 * @return true if the family member smokes.  False if there are no records or the family member does not
	 * @throws iTrustException
	 */	
	public boolean isFamilyMemberSmoker(FamilyMemberBean member) throws iTrustException {
		List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());
		if(records.size() == 0)
			return false;
		for(HealthRecord record : records) {
			if(record.isSmoker())
				return true;
		}
		return false;
	}
	

	/**
	 * Checks to see if the family member is dead and returns their cause of death if so
	 * 
	 * @param member the family member to check
	 * @return the cause of death if there is one; otherwise null
	 * @throws iTrustException
	 */
	public String getFamilyMemberCOD(FamilyMemberBean member) throws iTrustException {
		PatientBean patient = patientDAO.getPatient(member.getMid());
		if(patient.getCauseOfDeath() == null)
			return "";
		DiagnosisBean diag = icdDAO.getICDCode(patient.getCauseOfDeath());
		if(diag == null)
			return "";
		return diag.getDescription();
	}
	
	/**
	 * Creates a fake e-mail to notify the user that their records have been altered.
	 * 
	 * @return the e-mail to be sent
	 * @throws DBException
	 */
	private Email makeEmail() throws DBException{

		Email email = new Email();
		List<PatientBean> reps = patientDAO.getRepresenting(patient.getMID());
		
		List<String> toAddrs = new ArrayList<String>();
		toAddrs.add(patient.getEmail());
		for (PatientBean r: reps) {
			toAddrs.add(r.getEmail());
		}
		
		email.setFrom("no-reply@itrust.com");
    	email.setToList(toAddrs); // patient and personal representative
    	email.setSubject(String.format("Your medical records have been altered"));
    	email.setBody("Health care professional "+ HCPUAP.getFullName() +" has altered your medical records. " +
    				"She is not on your list of designated health care professionals.");
		return email;
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PatientVisitBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * 
 * Action class for ViewPatientOfficeVisitHistory.jsp
 *
 */
public class ViewPatientOfficeVisitHistoryAction {
	private long loggedInMID;
	private PatientDAO patientDAO;
	private TransactionDAO transDAO;
	private PersonnelDAO personnelDAO;
	private OfficeVisitDAO officevisitDAO;
	private ArrayList<PatientVisitBean> visits;

	/**
	 * Set up defaults
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing the office visits.
	 */
	public ViewPatientOfficeVisitHistoryAction(DAOFactory factory, long loggedInMID) {
		this.loggedInMID = loggedInMID;
		this.personnelDAO = factory.getPersonnelDAO();
		this.transDAO = factory.getTransactionDAO();
		officevisitDAO = factory.getOfficeVisitDAO();
		this.patientDAO = factory.getPatientDAO();
		
		visits = new ArrayList<PatientVisitBean>();
		
	}
	
	/**
	 * Adds all the office visits for the logged in HCP to a list.
	 * 
	 * @throws iTrustException
	 */
	private void processOfficeVisits() throws iTrustException {
		try {
			List<OfficeVisitBean> ovlist = officevisitDAO.getAllOfficeVisitsForLHCP(loggedInMID);
			Iterator<OfficeVisitBean> it = ovlist.iterator();
			OfficeVisitBean ov;
			PatientVisitBean visitBean;
			
			while (it.hasNext()) {
				visitBean = new PatientVisitBean();
				ov = it.next();
				PatientBean pb;
				pb = patientDAO.getPatient(ov.getPatientID());
				visitBean.setPatient(pb);
				visitBean.setPatientName(pb.getFullName());
				String date = ov.getVisitDateStr();
				Scanner sc = new Scanner(date);
				sc.useDelimiter("/");
				String month = sc.next();
				String day = sc.next();
				String year = sc.next();
				visitBean.setLastOVDateM(month);
				visitBean.setLastOVDateD(day);
				visitBean.setLastOVDateY(year);
				visitBean.setLastOVDate(year +"-" + month +"-" + date);
				visitBean.setAddress1(pb.getStreetAddress1() +" " + pb.getStreetAddress2());
				visitBean.setAddress2(pb.getCity() + " " +pb.getState() +" " +pb.getZip());
				boolean b = PatientInList(pb,date);
				if(b == false)
					visits.add(visitBean);
				
			}
		}
		catch (DBException dbe) {
			throw new iTrustException(dbe.getMessage());
		}
	}
	
	/**
	 * Checks to see if a patient is in the list of  visits
	 * @param pb patient to check
	 * @param date date of the visit
	 * @return True if the patient is in the list of visits.
	 */
	private boolean PatientInList(PatientBean pb, String date) {
		Iterator<PatientVisitBean> it = visits.iterator();
		PatientVisitBean visitBean;
		while (it.hasNext()){
			visitBean = it.next();
		if(visitBean.getPatientName().equals(pb.getFullName())){
				
				if(visitBean.getLastOVDateY().compareTo(date) < 0){
					visitBean.setLastOVDate(date);
				}
					return true;
				}
		}		
		
		return false;
	}
/**
 * Get the list of patients an HCP has had office visits with
 * 
 * @return the list of patients an HCP has had office visits with
 * @throws DBException
 */
	public List<PatientVisitBean> getPatients() throws DBException {
		
		try {
			processOfficeVisits();
		}
		catch (iTrustException ie) {
			
		}
		//log transaction
		transDAO.logTransaction(TransactionType.VIEW_PATIENT_LIST,loggedInMID);
		
		return visits;
	}
	/**
	 * Returns a PersonnelBean for the logged in HCP
	 * @return PersonnelBean for the logged in HCP
	 * @throws iTrustException
	 */
	public PersonnelBean getPersonnel() throws iTrustException {
		return personnelDAO.getPersonnel(loggedInMID);
	}
}
package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.RandomPassword;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.validate.AddPatientValidator;

/**
 * Used for Add Patient page (addPatient.jsp). This just adds an empty patient, creates a random password for
 * that patient.
 * 
 * Very similar to {@link AddOfficeVisitAction}
 * 
 * @author Andy Meneely
 * 
 */
public class AddPatientAction {
	private TransactionDAO transDAO;
	private PatientDAO patientDAO;
	private AuthDAO authDAO;
	private long loggedInMID;

	/**
	 * Just the factory and logged in MID
	 * 
	 * @param factory
	 * @param loggedInMID
	 */
	public AddPatientAction(DAOFactory factory, long loggedInMID) {
		this.patientDAO = factory.getPatientDAO();
		this.transDAO = factory.getTransactionDAO();
		this.loggedInMID = loggedInMID;
		this.authDAO = factory.getAuthDAO();
	}

	/**
	 * Creates a new patient, returns the new MID. Adds a new user to the table along with a random password.
	 * 
	 * @return the new MID of the patient
	 * @throws DBException
	 * @throws FormValidationException
	 */
	public long addPatient(PatientBean p) throws DBException, FormValidationException {
		new AddPatientValidator().validate(p);
		long newMID = patientDAO.addEmptyPatient();
		p.setMID(newMID);
		String pwd = authDAO.addUser(newMID, Role.PATIENT, RandomPassword.getRandomPassword());
		p.setPassword(pwd);
		patientDAO.editPatient(p);
		transDAO.logTransaction(TransactionType.CREATE_DISABLE_PATIENT_HCP, loggedInMID, newMID, "New Patient Added");
		return newMID;
	}

}

package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.beans.ProcedureBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.ProcedureBeanValidator;

/**
 * Updates the CPT Code (Medical Procedures) List Used by editCPTProcedureCodes.jsp
 * 
 * The CPT code set accurately describes medical, surgical, and diagnostic services 
 * and is designed to communicate uniform information about medical services and procedures 
 * among physicians, coders, patients, accreditation organizations, and payers for administrative, 
 * financial, and analytical purposes.
 *
 * @see http://www.ama-assn.org/ama/pub/physician-resources/solutions-managing-your-practice/coding-billing-insurance/cpt/about-cpt.shtml
 * @author laurenhayward
 */
public class UpdateCPTCodeListAction {
	private long loggedInMID;
	private TransactionDAO transDAO;
	private CPTCodesDAO cptDAO;
	private ProcedureBeanValidator validator = new ProcedureBeanValidator();

	/**
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the administrator who is updating the CPTs.
	 */
	public UpdateCPTCodeListAction(DAOFactory factory, long loggedInMID) {
		this.loggedInMID = loggedInMID;
		this.transDAO = factory.getTransactionDAO();
		this.cptDAO = factory.getCPTCodesDAO();
	}

	/**
	 * Adds a new cpt code (med procedure)
	 * 
	 * @param proc
	 *            ProcedureBean that holds the new cpt code
	 * @return status message
	 * @throws FormValidationException
	 */
	public String addCPTCode(ProcedureBean proc) throws FormValidationException {
		validator.validate(proc);
		try {
			if (cptDAO.addCPTCode(proc)) {
				transDAO.logTransaction(TransactionType.MANAGE_PROCEDURE_CODE, loggedInMID, 0L,
						"added CPT code " + proc.getCPTCode());
				return "Success: " + proc.getCPTCode() + " - " + proc.getDescription() + " added";
			} else
				return "The database has become corrupt. Please contact the system administrator for assistance.";
		} catch (DBException e) {
			e.printStackTrace();
			return e.getMessage();
		} catch (iTrustException e) {
			return e.getMessage();
		}
	}

	/**
	 * Updates a procedure with new information from the ProcedureBean
	 * 
	 * @param proc
	 *            ProcedureBean with new information (but same CPT code)
	 * @return Status message
	 * @throws FormValidationException
	 */
	public String updateInformation(ProcedureBean proc) throws FormValidationException {
		validator.validate(proc);
		try {
			int rows = updateCode(proc);
			if (0 == rows) {
				return "Error: Code not found. To edit an actual code, "
						+ "change the description and add a new code with the old description";
			} else {
				transDAO.logTransaction(TransactionType.MANAGE_PROCEDURE_CODE, loggedInMID, 0L,
						"updated CPT code " + proc.getCPTCode());
				return "Success: " + rows + " row(s) updated";
			}
		} catch (DBException e) {
			e.printStackTrace();
			return e.getMessage();
		}
	}

	/**
	 * Updates the cpt code
	 * 
	 * @param proc the code to be updated
	 * @return updated code
	 * @throws DBException
	 */
	private int updateCode(ProcedureBean proc) throws DBException {
		return cptDAO.updateCode(proc);
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.Messages;


/**
 * Handles retrieving beans for viewPrescriptionRecords.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ViewPrescriptionRecordsAction {
	private PatientDAO patientDAO;
	private PersonnelDAO personnelDAO;
	private TransactionDAO transDAO;
	private EmailUtil emailer;
	private long loggedInMID;

	/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing prescription records.
	 */
	public ViewPrescriptionRecordsAction(DAOFactory factory, long loggedInMID) {
		this.emailer = new EmailUtil(factory);
		this.patientDAO = factory.getPatientDAO();
		this.personnelDAO = factory.getPersonnelDAO();
		this.transDAO = factory.getTransactionDAO();
		this.loggedInMID = loggedInMID;
	}
	
	/**
	 * Gets a PatientBean from an MID
	 * 
	 * @param patientID MID of the patient
	 * @return PatientBean for the MID given
	 * @throws iTrustException
	 */
	public PatientBean getPatient(long patientID) throws iTrustException {
		return patientDAO.getPatient(patientID);
	}
	
	/**
	 * Gets the logged in person's representees
	 * 
	 * @return list of PatientBeans holding the representees
	 * @throws iTrustException
	 */
	public List<PatientBean> getRepresentees() throws iTrustException {
		return patientDAO.getRepresented(loggedInMID);
	}
	
	/**
	 * Returns the prescribing HCP for a prescription
	 * 
	 * @param prescription item in question
	 * @return HCP who prescribed the prescription
	 * @throws iTrustException
	 */
	public PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {
		return personnelDAO.getPrescribingDoctor(prescription);
	}
	
	/**
	 * Returns all the prescriptions for a given patient
	 * 
	 * @param patientID patient in question
	 * @return list of all the prescriptions for that patient
	 * @throws iTrustException
	 */
	public List<PrescriptionBean> getPrescriptionsForPatient(long patientID) throws iTrustException {
		PatientBean patient = patientDAO.getPatient(patientID);
		if (loggedInMID == patientID) {
			transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);
			return patientDAO.getPrescriptions(patientID);
		}
		
		List<String> toList = new ArrayList<String>();
		toList.add(patient.getEmail());
		
		List<PatientBean> representatives = patientDAO.getRepresenting(patientID);
		for(PatientBean representative : representatives) {
			if (loggedInMID == representative.getMID()) {
				transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);
				return patientDAO.getPrescriptions(patientID);
			}
			toList.add(representative.getEmail());
		}
		
		List<PersonnelBean> dlhcps = patientDAO.getDeclaredHCPs(patientID);
		for(PersonnelBean dlhcp : dlhcps) {
			if (loggedInMID == dlhcp.getMID()) {
				transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);
				return patientDAO.getPrescriptions(patientID);
			}
			List<PersonnelBean> uaps = personnelDAO.getUAPsForHCP(dlhcp.getMID());
			for(PersonnelBean uap : uaps) {
				if (loggedInMID == uap.getMID()) {
					transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);
					return patientDAO.getPrescriptions(patientID);
				}
			}
		}
		
		Email email = new Email();
		email.setToList(toList);
		email.setFrom("noreply@itrust.com"); //$NON-NLS-1$
		email.setSubject(Messages.getString("ViewPrescriptionRecordsAction.1")); //$NON-NLS-1$
		email.setBody(Messages.getString("ViewPrescriptionRecordsAction.2")); //$NON-NLS-1$
		emailer.sendEmail(email);
		transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);
		return patientDAO.getPrescriptions(patientID);
	}
}

package edu.ncsu.csc.itrust.action;

import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.beans.AdverseEventBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO;
import edu.ncsu.csc.itrust.exception.DBException;

public class ViewAdverseEventAction {
	private AdverseEventDAO adEventDAO;

	public ViewAdverseEventAction(DAOFactory factory)
	{
		this.adEventDAO = factory.getAdverseEventDAO();
	}
	
	public AdverseEventBean getAdverseEvent(int id) throws DBException
	{
		return adEventDAO.getReport(id);
	}
	
	public List<AdverseEventBean> getUnremovedAdverseEventsByCode(String code) throws DBException
	{
		return adEventDAO.getUnremovedAdverseEventsByCode(code);
	}
	
	public String getNameForCode(String code) throws DBException
	{
		return adEventDAO.getNameForCode(code);
	}
}

package edu.ncsu.csc.itrust.action;

import java.util.Arrays;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.ValidationFormat;

/**
 * Manages resetting the password Used by resetPassword.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ResetPasswordAction {
	public static final int MAX_RESET_ATTEMPTS = 3;

	private AuthDAO authDAO;
	private PatientDAO patientDAO;
	private DAOFactory factory;

	/**
	 * Set up defaults
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 */
	public ResetPasswordAction(DAOFactory factory) {
		this.authDAO = factory.getAuthDAO();
		this.patientDAO = factory.getPatientDAO();
		this.factory = factory;
	}

	/**
	 * Checks to see if a user exists with the given mid
	 * 
	 * @param midString The user's MID to check for.
	 * @return 0 if the user does not exist, else the mid of the user as a long
	 */
	public long checkMID(String midString) {
		try {
			long mid = Long.valueOf(midString);
			if (!authDAO.checkUserExists(mid))
				return 0;
			return mid;
		} catch (NumberFormatException e) {
			return 0L;
		} catch (DBException e) {
			return 0L;
		}
	}

	/**
	 * Checks to see if the number of reset password attempts has been exceeded for the given ipAddress
	 * 
	 * @param ipAddress The IPv4 or IPv6 IP address as a String.
	 * @return true if the the number of reset attempts is greater than or equal to MAX_RESET_ATTEMPTS
	 * @throws DBException
	 */
	public boolean isMaxedOut(String ipAddress) throws DBException {
		return authDAO.getResetPasswordFailures(ipAddress) >= MAX_RESET_ATTEMPTS;
	}

	/**
	 * Checks if the given mid matches the given role
	 * 
	 * @param mid
	 *            the mid to be checked
	 * @param role
	 *            the role to be checked
	 * @return true if the mid and role match
	 * @throws iTrustException
	 */
	public String checkRole(long mid, String role) throws iTrustException {
		try {
			if (("patient".equals(role) && patientDAO.getRole(mid, role).equals("patient"))
					|| ("hcp".equals(role) && patientDAO.getRole(mid, role).equals("hcp"))
					|| ("uap".equals(role) && patientDAO.getRole(mid, role).equals("uap"))
					|| ("pha".equals(role) && patientDAO.getRole(mid, role).equals("pha"))
					|| ("er".equals(role) && patientDAO.getRole(mid, role).equals("er")))
				return role;
			else
				return null;
		} catch (DBException e) {
			e.printStackTrace();
		} catch (iTrustException e) {
			e.printStackTrace();
			throw e;
		}
		return null;
	}

	/**
	 * Checks if the answer param is null
	 * 
	 * @param answer the user's security answer
	 * @return answer if not null, else return null
	 */
	public String checkAnswerNull(String answer) {
		if (answer == null || "".equals(answer))
			return null;
		else
			return answer;
	}

	/**
	 * Returns the security question for the mid param
	 * 
	 * @param mid MID of the user
	 * @return the security question or "" if DBException thrown
	 * @throws iTrustException
	 */
	public String getSecurityQuestion(long mid) throws iTrustException {
		try {
			if (null == authDAO.getSecurityQuestion(mid) || authDAO.getSecurityQuestion(mid).equals(""))
				throw new iTrustException("No security question or answer for this user has been set.");
			else
				return authDAO.getSecurityQuestion(mid);
		} catch (DBException e) {
			e.printStackTrace();
			return "";
		}
	}

	/**
	 * Resets the password for the given mid
	 * 
	 * @param mid of the user to have their password reset
	 * @param role what role the user has in iTrust
	 * @param answer answers to their security question
	 * @param password their password
	 * @param confirmPassword their password again
	 * @param ipAddr the ip address the request is coming from
	 * @return status message
	 * @throws FormValidationException
	 * @throws DBException
	 * @throws iTrustException
	 */
	public String resetPassword(long mid, String role, String answer, String password,
			String confirmPassword, String ipAddr) throws FormValidationException, DBException,
			iTrustException {

		Role r = authDAO.getUserRole(mid);
		try {
			Role.parse(role);
		} catch (IllegalArgumentException e) {
			return "Invalid role";
		}

		if (r.equals(Role.ADMIN))
			return "This role cannot be changed here";
		if (!r.equals(Role.parse(role)))
			return "Role mismatch";

		if (authDAO.getResetPasswordFailures(ipAddr) >= MAX_RESET_ATTEMPTS) {
			return "Too many retries";
		}

		try {
			validatePassword(password, confirmPassword);

			if (answer.equals(authDAO.getSecurityAnswer(mid))) {
				authDAO.resetPassword(mid, password);
				new EmailUtil(factory).sendEmail(makeEmailApp(mid, role));
				return "Password changed";
				
			} else {
				authDAO.recordResetPasswordFailure(ipAddr);
				return "Answer did not match";
			}

		} catch (DBException e) {
			return "Error in validation of security answer";
		}
	}
	
	/**
	 * Creates and sends an e-mail about the change
	 * 
	 * @param mid the user who's password was changed
	 * @param role what role they have in iTrust
	 * @return the e-mial that is sent
	 * @throws DBException
	 */
	private Email makeEmailApp(long mid, String role) throws DBException{
		
		if(Role.parse(role) == Role.PATIENT){
			PatientBean p = new PatientDAO(factory).getPatient(mid);
			Email email = new Email();
			email.setFrom("no-reply@itrust.com");
			email.setToList(Arrays.asList(p.getEmail()));
			email.setSubject("Your password has been changed in iTrust");
			email.setBody(String.format("Dear %s, \n You have chosen to change your iTrust password for user %s", p.getFullName(), mid));

			return email;
		}
		else{ //UAP or HCP - admin taken out in "resetPassword"
			PersonnelBean p = new PersonnelDAO(factory).getPersonnel(mid);
			Email email = new Email();
			email.setFrom("no-reply@itrust.com");
			email.setToList(Arrays.asList(p.getEmail()));
			email.setSubject("Your password has been changed in iTrust");
			email.setBody(String.format("Dear %s, \n You have chosen to change your iTrust password for user %s", p.getFullName(), mid));

			return email;
		}
	}
	
	/**
	 * Checks to make sure the password is correctly entered twice.
	 * 
	 * @param password the password
	 * @param confirmPassword the password again for confirmation
	 * @throws FormValidationException
	 */

	private void validatePassword(String password, String confirmPassword) throws FormValidationException {
		ErrorList errorList = new ErrorList();
		if (password == null || "".equals(password)) {
			errorList.addIfNotNull("Password cannot be empty");
		} else {
			if (!password.equals(confirmPassword))
				errorList.addIfNotNull("Passwords don't match");
			if (!ValidationFormat.PASSWORD.getRegex().matcher(password).matches()) {
				errorList.addIfNotNull("Password must be in the following format: "
						+ ValidationFormat.PASSWORD.getDescription());
			}
		}
		if (errorList.hasErrors())
			throw new FormValidationException(errorList);
	}
}

package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.beans.SecurityQA;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.SecurityQAValidator;

/**
 * Handles setting and retrieving the security questions/answers for users Used by
 * patient/editMyDemographics.jsp, staff/editMyDemographics.jsp, staff/editPersonnell.jsp
 * 
 * @author laurenhayward
 * 
 */
public class SetSecurityQuestionAction {

	private AuthDAO authDAO;
	private long loggedInMID;

	/**
	 * Sets up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param rLoggedInMID The MID of the user who is setting their security question.
	 * @throws iTrustException
	 */
	public SetSecurityQuestionAction(DAOFactory factory, long rLoggedInMID) throws iTrustException {
		this.authDAO = factory.getAuthDAO();
		loggedInMID = checkMID(rLoggedInMID);
	}

	/**
	 * Updates information in the database from the information held in the SecurityQA bean passed as a param
	 * 
	 * @param a
	 *            SecurityQuestionBean that holds new information
	 * @throws Exception
	 */
	public void updateInformation(SecurityQA a) throws Exception {
		SecurityQAValidator sqav = new SecurityQAValidator();
		sqav.validate(a);
		authDAO.setSecurityQuestionAnswer(a.getQuestion(), a.getAnswer(), loggedInMID);
	}

	/**
	 * Returns a SecurityQA bean holding the security info for the currently logged in user
	 * 
	 * @return SecurityQA for loggedInMid
	 * @throws iTrustException
	 */
	public SecurityQA retrieveInformation() throws iTrustException {
		SecurityQA toRet = new SecurityQA();
		toRet.setAnswer(authDAO.getSecurityAnswer(loggedInMID));
		toRet.setQuestion(authDAO.getSecurityQuestion(loggedInMID));
		return toRet;
	}
	/**
	 * Checks to make sure the MID exists in iTrust
	 * 
	 * @param mid MID to check
	 * @return returns the MID if the user is valid, otherwise, throws an exception
	 * @throws iTrustException
	 */

	private long checkMID(long mid) throws iTrustException {
		if (!authDAO.checkUserExists(mid))
			throw new iTrustException("MID " + mid + " is not a user!");
		return mid;
	}

}

package edu.ncsu.csc.itrust.action.base;

import edu.ncsu.csc.itrust.HtmlEncoder;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * An abstract class for dealing with actions that require an associated patient. The concrete functionality
 * provided by this class allows for asserting the correctness and existence of patients' MIDs.
 * 
 * Use this class whenever your JSP requires a patient ID when it loads (e.g. editPatient.jsp). The patient
 * string is passed to the constructor of this class and is checked for both format and existence. If the
 * patient ID is wrong in any way, an exception is thrown, resulting in the user getting kicked out to the
 * home page.
 * 
 * Very similar to {@link PersonnelBaseAction} and {@link OfficeVisitBaseAction}
 * 
 * Subclasses need not rewrite this functionality, and they are not held to any strict contract to extend this
 * class.
 */
public class PatientBaseAction {

	/**
	 * The database access object factory to associate this with a runtime context.
	 */
	private DAOFactory factory;

	/**
	 * Stores the MID of the patient associated with this action.
	 */
	protected long pid;

	/**
	 * The default constructor.
	 * 
	 * @param factory
	 *            A factory to create a database access object.
	 * @param pidString
	 *            The patient's ID to associate with this action.
	 * @throws iTrustException
	 *             If the patient's ID is incorrect or there is a DB problem.
	 */
	public PatientBaseAction(DAOFactory factory, String pidString) throws iTrustException {
		this.factory = factory;
		this.pid = checkPatientID(pidString);
	}

	/**
	 * Asserts whether the input is a valid, existing patient's MID.
	 * 
	 * @param input
	 *            The presumed MID
	 * @return The existing patient's ID as a long.
	 * @throws iTrustException
	 *             If the patient does not exist or there is a DB Problem.
	 */
	private long checkPatientID(String input) throws iTrustException {
		try {
			long pid = Long.valueOf(input);
			if (factory.getPatientDAO().checkPatientExists(pid))
				return pid;
			else
				throw new iTrustException("Patient does not exist");
		} catch (NumberFormatException e) {
			throw new iTrustException("Patient ID is not a number: " + HtmlEncoder.encode(input));
		}
	}

	/**
	 * Retrieves the identifier of the patient as a long.
	 * 
	 * @return The patient's MID.
	 */
	public long getPid() {
		return pid;
	}
}

package edu.ncsu.csc.itrust.action.base;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * An abstract class which contains functionalities common among all actions relating to inserting and editing
 * office visits. Because all office visits are with a certain patient, OfficeVisitBaseAction extends
 * PatientBaseAction.
 * 
 * Use this class whenever you have a page which not only requires a patient MID, but an office visit ID. Pass
 * those IDs to the constructor, and an exception will be thrown if they are not valid IDs (which should kick
 * the user out to the home page).
 * 
 * The concrete methods created by this class allow for its association with the unique identifier of a given
 * office visit. These identifiers can also be verified for their correctness and existence.
 * 
 * Very similar to {@link PatientBaseAction} and {@link PersonnelBaseAction}
 */
abstract public class OfficeVisitBaseAction extends PatientBaseAction {

	/**
	 * A database access object for dealing with office visits.
	 */
	private OfficeVisitDAO ovDAO;

	/**
	 * The unique identifier of the office visit this action is associated with.
	 */
	protected long ovID;

	/**
	 * The default constructor.
	 * 
	 * @param factory
	 *            A database access object factory for supplying a runtime context.
	 * @param pidString
	 *            The patient's MID as a String, to be passed to the super constructor (for PatientBaseAction)
	 * @param ovIDString
	 *            The unique identifier of the office visit as a String.
	 * @throws iTrustException
	 *             If any of the supplied parameters is incorrect or there is a DB problem.
	 */
	public OfficeVisitBaseAction(DAOFactory factory, String pidString, String ovIDString)
			throws iTrustException {
		super(factory, pidString);
		this.ovDAO = factory.getOfficeVisitDAO();
		this.ovID = checkOfficeVisitID(ovIDString);
	}

	/**
	 * Asserts whether this unique office visit identifier both exists and is associated with the patient in
	 * the database.
	 * 
	 * @param input
	 *            The presumed identifier as a String.
	 * @return The same identifier as a long of the existing office visit.
	 * @throws iTrustException
	 *             If the visit does not exist or if there is a DB problem.
	 */
	private long checkOfficeVisitID(String input) throws iTrustException {
		try {
			encode(input);
			long ovID = Long.valueOf(input);

			if (ovDAO.checkOfficeVisitExists(ovID, pid))
				return ovID;
			else
				throw new iTrustException("Office Visit " + ovID + " with Patient MID " + pid
						+ " does not exist");
		} catch (NumberFormatException e) {
			throw new iTrustException("Office Visit ID is not a number: " + e.getMessage());
		}
	}

	/**
	 * For obtaining the unique identifier of the office visit this action is associated with.
	 * 
	 * @return A long of the identifier.
	 */
	public long getOvID() {
		return ovID;
	}

	/**
	 * Converts all characters of the input string to their HTML special characters equivalent representation.
	 * Explicitly, the less than symbol becomes lt, the greater than symbol becomes gt and a newline feed
	 * becomes br.
	 * 
	 * @param input
	 *            The string to encode.
	 * @return The encoded string.
	 */
	public String encode(String input) {
		String str = input.replaceAll("<", "&lt;");
		str = str.replaceAll(">", "&gt;");
		str = str.replaceAll("\n", "<br />");
		return str;
	}
}

package edu.ncsu.csc.itrust.action.base;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.iTrustException;

/**
 * An abstract class for dealing with actions that require an associated personnel. The concrete functionality
 * provided by this class allows for asserting the correctness and existence of personnel' MIDs.
 * 
 * Use this class whenever your JSP requires a personnel ID when it loads (e.g. editPatient.jsp). The patient
 * string is passed to the constructor of this class and is checked for both format and existence. If the
 * patient ID is wrong in any way, an exception is thrown, resulting in the user getting kicked out to the
 * home page.
 * 
 * Subclasses need not rewrite this functionality, and they are not held to any strict contract to extend this
 * class.
 * 
 * Very similar to {@link PatientBaseAction}
 */
public class PersonnelBaseAction {

	/**
	 * The database access object factory to associate this with a runtime context.
	 */
	private DAOFactory factory;

	/**
	 * Stores the MID of the personnel associated with this action.
	 */
	protected long pid;

	/**
	 * The default constructor.
	 * 
	 * @param factory
	 *            A factory to create a database access object.
	 * @param pidString
	 *            The personnel's ID to associate with this action.
	 * @throws iTrustException
	 *             If the personnel's ID is incorrect or there is a DB problem.
	 */
	public PersonnelBaseAction(DAOFactory factory, String pidString) throws iTrustException {
		this.factory = factory;
		this.pid = checkPersonnelID(pidString);
	}

	/**
	 * Asserts whether the input is a valid, existing personnel's MID.
	 * 
	 * @param input
	 *            The presumed MID
	 * @return The existing personnel's ID as a long.
	 * @throws iTrustException
	 *             If the personnel does not exist or there is a DB Problem.
	 */
	private long checkPersonnelID(String input) throws iTrustException {
		try {
			long pid = Long.valueOf(input);
			if (factory.getPersonnelDAO().checkPersonnelExists(pid))
				return pid;
			else
				throw new iTrustException("Personnel does not exist");
		} catch (NumberFormatException e) {
			throw new iTrustException("Personnel ID is not a number: " + e.getMessage());
		}
	}

	/**
	 * Retrieves the identifier of the patient as a long.
	 * 
	 * @return The patient's MID.
	 */
	public long getPid() {
		return pid;
	}
}

package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.action.EditApptTypeAction;
import edu.ncsu.csc.itrust.action.ViewMyApptsAction;
import edu.ncsu.csc.itrust.action.ViewMyRecordsAction;
import edu.ncsu.csc.itrust.beans.ApptBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import java.util.List;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Calendar;

/**
 * Action class for calendar.jsp
 * @author Software Engineering Team 13, 2010 "Project Zephyr"
 *
 */
public class GenerateCalendarAction {
	private ViewMyApptsAction a_action;
	private EditApptTypeAction types;
	private ViewMyRecordsAction r_action;
	private List<ApptBean> send;
	
	/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user who is viewing the calendar
	 */
	public GenerateCalendarAction(DAOFactory factory, long loggedInMID) {
		a_action = new ViewMyApptsAction(factory, loggedInMID);
		types = new EditApptTypeAction(factory, loggedInMID);
		r_action = new ViewMyRecordsAction(factory, loggedInMID);
		send = new ArrayList<ApptBean>();
	}
	
	/**
	 * Return the send request for an AppointmentBean
	 * @return the send request for an AppointmentBean
	 */
	public List<ApptBean> getSend() {
		return send;
	}
	
	/**
	 * Check appointments appearing on the calendar for conflicts 
	 * with other appointments on the calendar. 
	 * 
	 * The array from this method is used to determine what appointments
	 * will appear in bold on the calendar.
	 * 
	 * @return An array of items that are in conflict with other items.
	 * @throws SQLException
	 */
	public boolean[] getConflicts() throws SQLException {
		boolean conflicts[] = new boolean[send.size()];
		for(int i=0; i<send.size(); i++) {
			ApptBean ab = send.get(i);
			long t = ab.getDate().getTime();
			long m = types.getDurationByType(ab.getApptType()) * 60L * 1000L;
			Timestamp time = new Timestamp(t+m);
			for(int j=i+1; j<send.size(); j++) {
				if(send.get(j).getDate().before(time)) {
					conflicts[i] = true;
					conflicts[j] = true;
				}
			}
		}
		return conflicts;
	}
	
	/**
	 * Creates a hash table with all of the Appointments to be 
	 * displayed on the calendar for the month and year being viewed.
	 * 
	 * @param thisMonth The month of the calendar to be rendered
	 * @param thisYear The year of the calendar to be rendered
	 * @return A Hashtable containing the AppointmentBeans to be rendered
	 * @throws SQLException
	 */
	public Hashtable<Integer, ArrayList<ApptBean>> getApptsTable(int thisMonth, int thisYear) throws SQLException {
		List<ApptBean> appts = a_action.getMyAppointments();
		Hashtable<Integer, ArrayList<ApptBean>> atable = new Hashtable<Integer, ArrayList<ApptBean>>();
		Calendar a = Calendar.getInstance();
		for(ApptBean b : appts) {
			a.setTimeInMillis(b.getDate().getTime());
			if(a.get(Calendar.MONTH) == thisMonth && a.get(Calendar.YEAR) == thisYear) {
				if(!atable.containsKey(a.get(Calendar.DAY_OF_MONTH)))
					atable.put(a.get(Calendar.DAY_OF_MONTH), new ArrayList<ApptBean>());
				ArrayList<ApptBean> l = atable.get(a.get(Calendar.DAY_OF_MONTH));
				l.add(b);
				send.add(b);
				atable.put(a.get(Calendar.DAY_OF_MONTH), l);
			}
		}
		return atable;
	}
	
	/**
	 * Creates a hash table with all of the Office Visits to be 
	 * displayed on the calendar for the month and year being viewed.
	 * 
	 * @param thisMonth The month of the calendar to be rendered
	 * @param thisYear The year of the calendar to be rendered
	 * @return A Hashtable containing the OfficeVisitBeans to be rendered
	 * @throws SQLException
	 */
	public Hashtable<Integer, ArrayList<OfficeVisitBean>> getOfficeVisitsTable(int thisMonth, int thisYear) throws iTrustException {
		List<OfficeVisitBean> officeVisits = r_action.getAllOfficeVisits();
		Hashtable<Integer, ArrayList<OfficeVisitBean>> rtable = new Hashtable<Integer, ArrayList<OfficeVisitBean>>();
		Calendar a = Calendar.getInstance();
		for(OfficeVisitBean b : officeVisits) {
			a.setTimeInMillis(b.getVisitDate().getTime());
			if(a.get(Calendar.MONTH) == thisMonth && a.get(Calendar.YEAR) == thisYear) {
				if(!rtable.containsKey(a.get(Calendar.DAY_OF_MONTH)))
					rtable.put(a.get(Calendar.DAY_OF_MONTH), new ArrayList<OfficeVisitBean>());
				ArrayList<OfficeVisitBean> l = rtable.get(a.get(Calendar.DAY_OF_MONTH));
				l.add(b);
				rtable.put(a.get(Calendar.DAY_OF_MONTH), l);
			}
		}
		return rtable;
	}
	
	/**
	 * Creates a hash table with all of the lab procedures to be 
	 * displayed on the calendar for the month and year being viewed.
	 * 
	 * @param thisMonth The month of the calendar to be rendered
	 * @param thisYear The year of the calendar to be rendered
	 * @return A Hashtable containing the LabProcedureBeans to be rendered
	 * @throws SQLException
	 */
	public Hashtable<Integer, ArrayList<LabProcedureBean>> getLabProceduresTable(int thisMonth, int thisYear) throws iTrustException {
		List<LabProcedureBean> procs = r_action.getLabs();
		Hashtable<Integer, ArrayList<LabProcedureBean>> ptable = new Hashtable<Integer, ArrayList<LabProcedureBean>>();
		Calendar a = Calendar.getInstance();
		for(LabProcedureBean b : procs) {
			a.setTimeInMillis(b.getTimestamp().getTime());
			if(a.get(Calendar.MONTH) == thisMonth && a.get(Calendar.YEAR) == thisYear) {
				if(!ptable.containsKey(a.get(Calendar.DAY_OF_MONTH)))
					ptable.put(a.get(Calendar.DAY_OF_MONTH), new ArrayList<LabProcedureBean>());
				ArrayList<LabProcedureBean> l = ptable.get(a.get(Calendar.DAY_OF_MONTH));
				l.add(b);
				ptable.put(a.get(Calendar.DAY_OF_MONTH), l);
			}
		}
		return ptable;
	}
}

package edu.ncsu.csc.itrust;

import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

/**
 * Takes a parameter map and creates a bean from that map of the appropriate type.
 * @param <T> The type to be returned from the appropriate parameter map.
 */
public class BeanBuilder<T> {
	/**
	 * The code here is not obvious, but this method should not need rewriting unless a bug is found
	 * 
	 * @param map -
	 *            typically a request.getParameterMap; also can be a HashMap
	 * @param bean -
	 *            an instantiated bean to be loaded. Loaded bean is returned.
	 * @return a loaded "bean"
	 * @throws Exception -
	 *             Several exceptions are thrown here, so promotion seemed fitting
	 */
	// this warning is only suppressed because Map isn't parameterized (old JSP)
	@SuppressWarnings("unchecked")
	public T build(Map map, T bean) throws Exception {
		// JavaBeans should not have overloaded methods, according to their API
		// (a stupid limitation!)
		// Nevertheless, we should check for it
		checkOverloadedMethods(bean);

		// Use an introspector to find all of the getXXX or setXXX, we only want
		// the setXXX
		PropertyDescriptor[] propertyDescriptors = Introspector.getBeanInfo(bean.getClass())
				.getPropertyDescriptors();
		for (PropertyDescriptor descriptor : propertyDescriptors) {
			// if object is null, either it was ignored or empty - just go with
			// bean's default
			String[] value = (String[]) map.get(descriptor.getName());
			Method writeMethod = descriptor.getWriteMethod();
			if (!"class".equals(descriptor.getName()) && value != null && writeMethod != null) {
				// descriptor's name is the name of your property; like
				// firstName
				// only take the first string
				try {
					// Skip the setters for enumerations
					if (writeMethod.getParameterTypes()[0].getEnumConstants() == null)
						writeMethod.invoke(bean, new Object[] { value[0] });
				} catch (IllegalArgumentException e) {
					// Throw a more informative exception
					throw new IllegalArgumentException(e.getMessage() + " with " + writeMethod.getName()
							+ " and " + value[0]);
				}
			}
		}
		return bean;
	}

	/**
	 * Checks for overloaded methods
	 * 
	 * @param bean item to check
	 */
	private void checkOverloadedMethods(T bean) {
		Method[] methods = bean.getClass().getDeclaredMethods();
		HashMap<String, String> nameMap = new HashMap<String, String>(methods.length);
		for (Method method : methods) {
			if (nameMap.get(method.getName()) != null)
				throw new IllegalArgumentException(bean.getClass().getName()
						+ " should not have any overloaded methods, like " + method.getName());
			if (!"equals".equals(method.getName())) // allow an equals override
				nameMap.put(method.getName(), "exists");
		}

	}
}

package edu.ncsu.csc.itrust;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

/**
 * Provides a few extra date utilities
 * 
 * @author Andy
 * 
 */
public class DateUtil {
	public static final long YEAR_IN_MS = 1000L * 60L * 60L * 24L * 365L;

	/**
	 * Returns a MM/dd/yyyy format of the date for the given years ago
	 * 
	 * @param years
	 * @return
	 */
	public static String yearsAgo(long years) {
		long time = System.currentTimeMillis();
		return new SimpleDateFormat("MM/dd/yyyy").format(new Date(time - years * YEAR_IN_MS));
	}

	/**
	 * Checks to see if a given date is within a range of months <strong>INCLUSIVELY</strong>, agnostic of
	 * the year. <br />
	 * <br />
	 * 
	 * The range "wraps" so that if the first month is after the second month, then the definition of "is in
	 * month range" is:<br />
	 * the date falls outside of secondMonth, firstMonth, but including secondMonth and firstMonth.
	 * 
	 * Modular arithmetic is used to adjust month values into the valid range.
	 * 
	 * @param date
	 * @param firstMonth
	 * @param secondMonth
	 * @return
	 */
	public static boolean isInMonthRange(java.util.Date date, int firstMonth, int secondMonth) {
		Calendar cal = new GregorianCalendar();
		cal.setTime(date);
		firstMonth %= 12;
		secondMonth %= 12;
		if (secondMonth >= firstMonth) {
			return ((cal.get(Calendar.MONTH) >= firstMonth) && (cal.get(Calendar.MONTH) <= secondMonth));
		}
		return ((cal.get(Calendar.MONTH) >= firstMonth) || (cal.get(Calendar.MONTH) <= secondMonth));
	}

	/**
	 * Same as isInMonthRange but uses the current date as the date value.
	 * 
	 * @see DateUtil#isInMonthRange(Date, int, int)
	 * @param firstMonth
	 * @param secondMonth
	 * @return
	 */
	public static boolean currentlyInMonthRange(int firstMonth, int secondMonth) {
		return isInMonthRange(new Date(), firstMonth, secondMonth);
	}

	/**
	 * Returns the date a certain number of years ago
	 * @param years how many years ago
	 * @return the date it was however many years ago
	 */
	public static Date getDateXyearsAgoFromNow(int years) {
		Calendar cal = new GregorianCalendar();
		cal.add(Calendar.YEAR, -years);
		return cal.getTime();
	}

	/**
	 * Returns the date a certain number of years ago
	 * @param years how many years ago
	 * @return the date it was however many years ago
	 */
	public static java.sql.Date getSQLdateXyearsAgoFromNow(int years) {
		return new java.sql.Date(getDateXyearsAgoFromNow(years).getTime());
	}

	/**
	 * Returns the date a certain number of days ago
	 * @param days how many days ago
	 * @return the date it was however many days ago
	 */
	public static Date getDateXDaysAgoFromNow(int days) {
		Calendar cal = new GregorianCalendar();
		cal.add(Calendar.DAY_OF_YEAR, -days);
		return cal.getTime();
	}
	
	/**
	 * Returns the date a certain number of days ago
	 * @param days how many days ago
	 * @return the date it was however many days ago
	 */
	public static java.sql.Date getSQLdateXDaysAgoFromNow(int days) {
		return new java.sql.Date(getDateXDaysAgoFromNow(days).getTime());
	}

	/**
	 * <!--Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM
	 * <current year> - yearsAgo1/monthValue1/01 TO <current year> - yearsAgo2/monthValue2/<last day of
	 * month2>--> Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM
	 * &lt;current year&gt; - yearsAgo1/monthValue1/01 TO &lt;current year&gt; -
	 * yearsAgo2/monthValue2/&lt;last day of month2&gt;
	 * 
	 * @param month1
	 *            First sql.Date object to be set
	 * @param monthValue1
	 * @param yearsAgo1
	 * @param month2
	 *            Second sql.Date object to be set
	 * @param monthValue2
	 * @param yearsAgo2
	 */
	public static void setSQLMonthRange(java.sql.Date month1, int monthValue1, int yearsAgo1,
			java.sql.Date month2, int monthValue2, int yearsAgo2) {
		GregorianCalendar cal = new GregorianCalendar();
		cal.add(Calendar.YEAR, -yearsAgo1);
		cal.set(Calendar.MONTH, monthValue1);
		cal.set(Calendar.DAY_OF_MONTH, 1);
		month1.setTime(cal.getTimeInMillis());
		cal.add(Calendar.YEAR, yearsAgo1);
		cal.add(Calendar.YEAR, -yearsAgo2);
		cal.set(Calendar.MONTH, monthValue2);
		cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
		month2.setTime(cal.getTimeInMillis());
	}
}

package edu.ncsu.csc.itrust;

import java.util.MissingResourceException;
import java.util.ResourceBundle;

public class Messages {
	private static final String BUNDLE_NAME = "edu.ncsu.csc.itrust.messages"; //$NON-NLS-1$

	private static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle(BUNDLE_NAME,Localization.instance().getCurrentLocale());

	public static String getString(String key) {
		try {
			return RESOURCE_BUNDLE.getString(key);
		} catch (MissingResourceException e) {
			return '!' + key + '!';
		}
	}
}


package edu.ncsu.csc.itrust.beans;

/**
 * Bean to be used for survey results (search).  Stores address information about a HCP
 * in addition to their specialty, hospital, and averages from survey (results range from 1-5).  This
 * beans also contains a variable that stores the percent of office visits that satisfaction results are 
 * available.
 */
public class SurveyResultBean {

	private long hcpMID;
	private String hcpFirstName;
	private String hcpLastName;
	private String hcpAddress1;
	private String hcpAddress2;
	private String hcpCity;
	private String hcpState;
	private String hcpZip;
	private String hcpSpecialty;
	private String hcpHospitalID;
	private float avgWaitingRmMinutes;
	private float avgExamRmMinutues;
	private float avgVisitSatisfaction;
	private float avgTreatmentSatisfaction;
	private float percentSatResultsAvailable;
	
	//list of specialties
	public final static String GENERAL_SPECIALTY = "General";
	public final static String SURGEON_SPECIALTY = "Surgeon";
	public final static String HEART_SPECIALTY = "Heart Specialist";
	public final static String PEDIATRICIAN_SPECIALTY = "Pediatrician";
	public final static String OBGYN_SPECIALTY = "OB/GYN";
	public final static String ANY_SPECIALTY = "None";
	
	public void setHCPMID(long mid) {
		hcpMID = mid;
	}
	public long getHCPMID() {
		return hcpMID;
	}
	
	public void setHCPFirstName(String firstName) {
		this.hcpFirstName = firstName;
	}
	public String getHCPFirstName() {
		return hcpFirstName;
	}
	
	public void setHCPLastName(String lastName) {
		this.hcpLastName = lastName;
	}
	public String getHCPLastName() {
		return hcpLastName;
	}
	
	public void setHCPaddress1(String address1) {
		this.hcpAddress1 = address1;
	}
	public String getHCPaddress1() {
		return hcpAddress1;
	}
	
	public void setHCPaddress2(String address2) {
		this.hcpAddress2 = address2;
	}
	public String getHCPaddress2() {
		return hcpAddress2;
	}
	
	public void setHCPcity(String city) {
		this.hcpCity = city;
	}
	public String getHCPcity() {
		return hcpCity;
	}
	
	public void setHCPstate(String state) {
		this.hcpState = state;
	}
	public String getHCPstate() {
		return hcpState;
	}
	
	public void setHCPzip(String zip) {
		this.hcpZip = zip;
	}
	public String getHCPzip() {
		return hcpZip;
	}
	
	public void setHCPspecialty(String specialty) {
		this.hcpSpecialty = specialty;
	}
	public String getHCPspecialty() {
		return hcpSpecialty;
	}
	
	public void setHCPhospital(String hospital) {
		this.hcpHospitalID = hospital;
	}
	public String getHCPhospital() {
		return hcpHospitalID;
	}
	
	public void setAvgWaitingRoomMinutes(float waitingRoomMinutes) {
		this.avgWaitingRmMinutes = waitingRoomMinutes;
	}
	public float getAvgWaitingRoomMinutes() {
		return avgWaitingRmMinutes;
	}
	
	public void setAvgExamRoomMinutes(float examRoomMinutes) {
		this.avgExamRmMinutues = examRoomMinutes;
	}
	public float getAvgExamRoomMinutes() {
		return avgExamRmMinutues;
	}
	
	public void setAvgVisitSatisfaction(float visitSatisfaction) {
		this.avgVisitSatisfaction = visitSatisfaction;
	}
	public float getAvgVisitSatisfaction() {
		return avgVisitSatisfaction;
	}
	
	public void setAvgTreatmentSatisfaction(float treatmentSatisfaction) {
		this.avgTreatmentSatisfaction = treatmentSatisfaction;
	}
	public float getAvgTreatmentSatisfaction() {
		return avgTreatmentSatisfaction;
	}
	
	public void setPercentSatisfactionResults (float percent) {
		this.percentSatResultsAvailable= percent;
	}
	public float getPercentSatisfactionResults() {
		return percentSatResultsAvailable;
	}
}

package edu.ncsu.csc.itrust.beans;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import edu.ncsu.csc.itrust.Messages;

/**
 * A bean for storing data about a report request.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class ReportRequestBean {
	private long ID = 0L;
	private long requesterMID = 0L;
	private long patientMID = 0L;
//	private long approverMID = 0L;
	private Date requestedDate;
//	private Date approvedDate;
	private Date viewedDate;
	private String status = ""; //$NON-NLS-1$
//	private String comment = ""; //$NON-NLS-1$

	public final static String dateFormat = "MM/dd/yyyy HH:mm"; //$NON-NLS-1$

	public final static String Requested = Messages.getString("ReportRequestBean.requested"); //$NON-NLS-1$
//	public final static String Approved = Messages.getString("ReportRequestBean.approved"); //$NON-NLS-1$
//	public final static String Rejected = Messages.getString("ReportRequestBean.rejected"); //$NON-NLS-1$
	public final static String Viewed = Messages.getString("ReportRequestBean.viewed"); //$NON-NLS-1$

	public ReportRequestBean() {
	}

	public void setID(long iD) {
		ID = iD;
	}

	public long getID() {
		return ID;
	}

	public void setRequesterMID(long requesterMID) {
		this.requesterMID = requesterMID;
	}

	public long getRequesterMID() {
		return requesterMID;
	}

	public void setPatientMID(long patientMID) {
		this.patientMID = patientMID;
	}

	public long getPatientMID() {
		return patientMID;
	}

//	public void setApproverMID(long approverMID) {
//		this.approverMID = approverMID;
//	}
//
//	public long getApproverMID() {
//		return approverMID;
//	}

	public void setRequestedDate(Date requestedDate) {
		this.requestedDate = (requestedDate == null ? null : (Date) requestedDate.clone());
	}

	public void setRequestedDateString(String s) {
		try {
			setRequestedDate(new SimpleDateFormat(dateFormat).parse(s));
		} catch (ParseException ex) {
			System.out.println(ex.getMessage());
		}
	}

	public Date getRequestedDate() {
		return (requestedDate == null ? null : (Date) requestedDate.clone());
	}

	public String getRequestedDateString() {
		if (requestedDate == null)
			return ""; //$NON-NLS-1$
		return new SimpleDateFormat(dateFormat).format(requestedDate);
	}

//	public void setApprovedDate(Date approvedDate) {
//		this.approvedDate = (approvedDate == null ? null : (Date) approvedDate.clone());
//	}
//
//	public void setApprovedDateString(String s) {
//		try {
//			setApprovedDate(new SimpleDateFormat(dateFormat).parse(s));
//		} catch (ParseException ex) {
//			System.out.println(ex.getMessage());
//		}
//	}
//
//	public Date getApprovedDate() {
//		return (approvedDate == null ? null : (Date) approvedDate.clone());
//	}
//
//	public String getApprovedDateString() {
//		if (approvedDate == null)
//			return ""; //$NON-NLS-1$
//		return new SimpleDateFormat(dateFormat).format(approvedDate);
//	}

	public void setViewedDate(Date viewedDate) {
		this.viewedDate = (viewedDate == null ? null : (Date) viewedDate.clone());
	}

	public void setViewedDateString(String s) {
		try {
			setViewedDate(new SimpleDateFormat(dateFormat).parse(s));
		} catch (ParseException ex) {
			System.out.println(ex.getMessage());
		}
	}

	public Date getViewedDate() {
		return (viewedDate == null ? null : (Date) viewedDate.clone());
	}

	public String getViewedDateString() {
		if (viewedDate == null)
			return ""; //$NON-NLS-1$
		//DateFormat dateFormatter = DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,Localization.instance().getCurrentLocale());
		//return dateFormatter.format(viewedDate);
		return new SimpleDateFormat(dateFormat).format(viewedDate);
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public String getStatus() {
		return status;
	}

//	public void setComment(String comment) {
//		this.comment = comment;
//	}
//
//	public String getComment() {
//		return comment;
//	}
}

package edu.ncsu.csc.itrust.beans;

import java.sql.Date;

/**
 * A bean for storing data about a procedure.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class ProcedureBean {

	private long ovProcedureID = 0L;
	private String CPTCode;
	private String description;
	private String attribute;
	private Date date;
	private String hcpid;

	public ProcedureBean() {
	}

	public ProcedureBean(String code) {
		CPTCode = code;
	}

	public ProcedureBean(String code, String description) {
		CPTCode = code;
		this.description = description;
	}

	public ProcedureBean(String code, String description, String attribute) {
		CPTCode = code;
		this.description = description;
		this.attribute = attribute;
	}
	
	public ProcedureBean(String code, String description, String attribute, String hcpid) {
		CPTCode = code;
		this.description = description;
		this.attribute = attribute;
		this.hcpid = hcpid;
	}
	
	/**
	 * Gets the CPT Code for this procedure
	 * 
	 * @return The CPT Code for this procedure
	 */
	public String getCPTCode() {
		return CPTCode;
	}

	public void setCPTCode(String code) {
		CPTCode = code;
	}
	
	/**
	 * Gets the CPT Description for this procedure
	 * 
	 * @return The CPT Description for this procedure
	 */
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}
	
	/**
	 * Gets the HCP ID of the HCP administering the immunization
	 * @return String
	 */
	public String getHcpid() {
		return hcpid;
	}

	public void setHcpid(String hcpid) {
		this.hcpid = hcpid;
	}
		
	/**
	 * Gets the CPT attribute, used to determine if this is an immunization
	 * @return String
	 */
	public String getAttribute() {
		return attribute;
	}

	/**
	 * Sets the CPT attribute, used to determine if this is an immunization
	 * @param String
	 */
	public void setAttribute(String attrib) {
		attribute = attrib;
	}
	
	public long getOvProcedureID() {
		return ovProcedureID;
	}

	public void setOvProcedureID(long ovProcedureID) {
		this.ovProcedureID = ovProcedureID;
	}
	
	public Date getDate() {
		return date;
	}
	
	public void setDate(Date d) {
		date = d;
	}

}

package edu.ncsu.csc.itrust.beans;

import java.util.HashMap;
import edu.ncsu.csc.itrust.enums.TransactionType;

/**
 * A bean for storing operational profile data.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class OperationalProfile {
	private int numTotalTransactions = 0;
	private int numPatientTransactions = 0;
	private int numPersonnelTransactions = 0;
	private HashMap<TransactionType, Integer> totalCount;
	private HashMap<TransactionType, Integer> personnelCount;
	private HashMap<TransactionType, Integer> patientCount;

	public OperationalProfile() {
		totalCount = createEmptyMap();
		personnelCount = createEmptyMap();
		patientCount = createEmptyMap();
	}

	private HashMap<TransactionType, Integer> createEmptyMap() {
		HashMap<TransactionType, Integer> map = new HashMap<TransactionType, Integer>(TransactionType
				.values().length);
		for (TransactionType type : TransactionType.values()) {
			map.put(type, 0);
		}
		return map;
	}

	public HashMap<TransactionType, Integer> getTotalCount() {
		return totalCount;
	}

	public void setTotalCount(HashMap<TransactionType, Integer> totalCount) {
		this.totalCount = totalCount;
	}

	public HashMap<TransactionType, Integer> getPersonnelCount() {
		return personnelCount;
	}

	public void setPersonnelCount(HashMap<TransactionType, Integer> personnelCount) {
		this.personnelCount = personnelCount;
	}

	public HashMap<TransactionType, Integer> getPatientCount() {
		return patientCount;
	}

	public void setPatientCount(HashMap<TransactionType, Integer> patientCount) {
		this.patientCount = patientCount;
	}

	public void setNumTotalTransactions(int numTransactions) {
		this.numTotalTransactions = numTransactions;
	}

	public int getNumTotalTransactions() {
		return numTotalTransactions;
	}

	public int getNumPatientTransactions() {
		return numPatientTransactions;
	}

	public void setNumPatientTransactions(int numPatientTransactions) {
		this.numPatientTransactions = numPatientTransactions;
	}

	public int getNumPersonnelTransactions() {
		return numPersonnelTransactions;
	}

	public void setNumPersonnelTransactions(int numPersonnelTransactions) {
		this.numPersonnelTransactions = numPersonnelTransactions;
	}
}

package edu.ncsu.csc.itrust.beans.forms;

import java.util.ArrayList;
import edu.ncsu.csc.itrust.beans.VisitFlag;

/**
 * A form to contain data coming from reminding a user about an upcoming office visit.
 * 
 * A form is a bean, kinda. You could say that it's a form of a bean :) 
 * Think of a form as a real-life administrative form that you would fill out to get 
 * something done, not necessarily making sense by itself.
 */
public class VisitReminderReturnForm {

	private long hcpID;
	private long patientID;
	private String lastName;
	private String firstName;
	private String phoneNumber;
	private ArrayList<VisitFlag> visitFlags;

	public VisitReminderReturnForm(long hcpID, long patientID, String lastName, String firstName,
			String phone1, String phone2, String phone3) {
		this.hcpID = hcpID;
		this.patientID = patientID;
		this.lastName = lastName;
		this.firstName = firstName;
		setPhoneNumber(phone1, phone2, phone3);
	}

	public long getHcpID() {
		return hcpID;
	}

	public void setHcpID(long hcpID) {
		this.hcpID = hcpID;
	}

	public long getPatientID() {
		return patientID;
	}

	public void setPatientID(long patientID) {
		this.patientID = patientID;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getPhoneNumber() {
		return phoneNumber;
	}

	public void setPhoneNumber(String phone1, String phone2, String phone3) {
		this.phoneNumber = phone1 + "-" + phone2 + "-" + phone3;
	}

	public VisitFlag[] getVisitFlags() {
		return visitFlags.toArray(new VisitFlag[visitFlags.size()]);
	}

	public void setVisitFlags(VisitFlag[] visitFlags) {
		this.visitFlags = new ArrayList<VisitFlag>();
		for (VisitFlag flag : visitFlags) {
			this.visitFlags.add(flag);
		}
	}

	public void addVisitFlag(VisitFlag flag) {
		if (null == visitFlags)
			visitFlags = new ArrayList<VisitFlag>();
		visitFlags.add(flag);
	}
}

package edu.ncsu.csc.itrust.beans.forms;

/**
 * A form to contain data coming from editing an office visit.
 * 
 * A form is a bean, kinda. You could say that it's a form of a bean :) 
 * Think of a form as a real-life administrative form that you would fill out to get 
 * something done, not necessarily making sense by itself.
 */
public class EditOfficeVisitForm {
	private String ovID;
	private String hcpID;
	private String patientID;
	private String hospitalID;
	private String removeLabProcID;
	private String removeDiagID;
	private String removeProcID;
	private String removeImmunizationID;
	private String removeMedID;
	private String addLabProcID;
	private String addDiagID;
	private String addProcID;
	private String addImmunizationID;
	private String addMedID;
	private String notes;
	private String visitDate;
	private String startDate;
	private String endDate;
	private String dosage;
	private String instructions;
	private String causeOfDeath;

	public String getAddDiagID() {
		return addDiagID;
	}

	public void setAddDiagID(String addDiagID) {
		this.addDiagID = addDiagID;
	}

	public String getAddLabProcID() {
		return addLabProcID;
	}

	public void setAddLabProcID(String addLabProcID) {
		this.addLabProcID = addLabProcID;
	}
	
	public String getAddMedID() {
		return addMedID;
	}

	public void setAddMedID(String addMedID) {
		this.addMedID = addMedID;
	}

	public String getAddProcID() {
		return addProcID;
	}

	public void setAddProcID(String addProcID) {
		this.addProcID = addProcID;
	}

	public String getAddImmunizationID() {
		return addImmunizationID;
	}

	public void setAddImmunizationID(String addImmunizationID) {
		this.addImmunizationID = addImmunizationID;
	}
	
	public String getNotes() {
		return notes;
	}

	public void setNotes(String notes) {
		this.notes = notes;
	}

	public String getOvID() {
		return ovID;
	}

	public void setOvID(String ovID) {
		this.ovID = ovID;
	}

	public String getRemoveLabProcID() {
		return removeLabProcID;
	}

	public void setRemoveLabProcID(String removeLabProcID) {
		this.removeLabProcID = removeLabProcID;
	}
	
	public String getRemoveDiagID() {
		return removeDiagID;
	}

	public void setRemoveDiagID(String removeDiagID) {
		this.removeDiagID = removeDiagID;
	}

	public String getRemoveMedID() {
		return removeMedID;
	}

	public void setRemoveMedID(String removeMedID) {
		this.removeMedID = removeMedID;
	}

	public String getRemoveProcID() {
		return removeProcID;
	}

	public void setRemoveProcID(String removeProcID) {
		this.removeProcID = removeProcID;
	}
	
	public String getRemoveImmunizationID() {
		return removeImmunizationID;
	}

	public void setRemoveImmunizationID(String removeImmunizationID) {
		this.removeImmunizationID = removeImmunizationID; 
	}

	public String getVisitDate() {
		return visitDate;
	}

	public void setVisitDate(String visitDate) {
		this.visitDate = visitDate;
	}

	public String getHcpID() {
		return hcpID;
	}

	public void setHcpID(String hcpID) {
		this.hcpID = hcpID;
	}

	public String getPatientID() {
		return patientID;
	}

	public void setPatientID(String patientID) {
		this.patientID = patientID;
	}

	public String getHospitalID() {
		return hospitalID;
	}

	public void setHospitalID(String hospitalID) {
		this.hospitalID = hospitalID;
	}

	public String getDosage() {
		return dosage;
	}

	public void setDosage(String dosage) {
		this.dosage = dosage;
	}

	public String getEndDate() {
		return endDate;
	}

	public void setEndDate(String endDate) {
		this.endDate = endDate;
	}

	public String getInstructions() {
		return instructions;
	}

	public void setInstructions(String instructions) {
		this.instructions = instructions;
	}

	public String getStartDate() {
		return startDate;
	}

	public void setStartDate(String startDate) {
		this.startDate = startDate;
	}

	public String getCauseOfDeath() {
		return causeOfDeath;
	}

	public void setCauseOfDeath(String causeOfDeath) {
		this.causeOfDeath = causeOfDeath;
	}
}

package edu.ncsu.csc.itrust.beans.forms;

/**
 * A form to contain data coming from editing a health record.
 * 
 * A form is a bean, kinda. You could say that it's a form of a bean :) 
 * Think of a form as a real-life administrative form that you would fill out to get 
 * something done, not necessarily making sense by itself.
 */
public class HealthRecordForm {
	private String height = "0.0";
	private String weight = "0.0";
	private String isSmoker = "false";
	private String bloodPressureN = "0";
	private String bloodPressureD = "0";
	private String cholesterolHDL = "0";
	private String cholesterolLDL = "0";
	private String cholesterolTri = "0";

	public HealthRecordForm() {
	}

	public String getBloodPressureD() {
		return bloodPressureD;
	}

	public void setBloodPressureD(String bloodPressureD) {
		this.bloodPressureD = bloodPressureD;
	}

	public String getBloodPressureN() {
		return bloodPressureN;
	}

	public void setBloodPressureN(String bloodPressureN) {
		this.bloodPressureN = bloodPressureN;
	}

	public String getCholesterolHDL() {
		return cholesterolHDL;
	}

	public void setCholesterolHDL(String cholesterolHDL) {
		this.cholesterolHDL = cholesterolHDL;
	}

	public String getCholesterolLDL() {
		return cholesterolLDL;
	}

	public void setCholesterolLDL(String cholesterolLDL) {
		this.cholesterolLDL = cholesterolLDL;
	}

	public String getCholesterolTri() {
		return cholesterolTri;
	}

	public void setCholesterolTri(String cholesterolTri) {
		this.cholesterolTri = cholesterolTri;
	}

	public String getHeight() {
		return height;
	}

	public void setHeight(String height) {
		this.height = height;
	}

	public String getIsSmoker() {
		return isSmoker;
	}

	public void setIsSmoker(String isSmoker) {
		this.isSmoker = isSmoker;
	}

	public String getWeight() {
		return weight;
	}

	public void setWeight(String weight) {
		this.weight = weight;
	}
}

package edu.ncsu.csc.itrust.beans;

import java.sql.Timestamp;


public class ApptBean {
	private String apptType;
	private long patient;
	private long hcp;
	private Timestamp date;
	private String comment;
	
	/**
	 * @return the apptType
	 */
	public String getApptType() {
		return apptType;
	}
	/**
	 * @param apptType the apptType to set
	 */
	public void setApptType(String apptType) {
		this.apptType = apptType;
	}
	/**
	 * @return the patient
	 */
	public long getPatient() {
		return patient;
	}
	/**
	 * @param patient the patient to set
	 */
	public void setPatient(long patient) {
		this.patient = patient;
	}
	/**
	 * @return the hcp
	 */
	public long getHcp() {
		return hcp;
	}
	/**
	 * @param hcp the hcp to set
	 */
	public void setHcp(long hcp) {
		this.hcp = hcp;
	}
	/**
	 * @return the date
	 */
	public Timestamp getDate() {
		return date;
	}
	/**
	 * @param date the date to set
	 */
	public void setDate(Timestamp date) {
		this.date = date;
	}
	/**
	 * @return the comment
	 */
	public String getComment() {
		return comment;
	}
	/**
	 * @param comment the comment to set
	 */
	public void setComment(String comment) {
		this.comment = comment;
	}
}

package edu.ncsu.csc.itrust.beans;

public class ApptTypeBean {
	
	private String name;
	private int duration;
	
	public ApptTypeBean() {
		this.name = null;
		this.duration = 0;
	}
	
	public ApptTypeBean(String name, int duration) {
		this.name = name;
		this.duration = duration;
	}

	public String getName() {
		return name;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public int getDuration() {
		return duration;
	}
	
	public void setDuration(int duration) {
		this.duration = duration;
	}
}

package edu.ncsu.csc.itrust.beans;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

/**
 * A bean for storing data about Fake Emails.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class Email {
	private List<String> toList = new ArrayList<String>();
	private String from = "";
	private String subject = "";
	private String body = "";
	private Timestamp timeAdded;

	public List<String> getToList() {
		return toList;
	}

	public void setToList(List<String> toList) {
		this.toList = toList;
	}

	public String getToListStr() {
		String str = "";
		for (String addr : toList) {
			str += addr + ",";
		}
		return str.substring(0, str.length() - 1);
	}

	public String getFrom() {
		return from;
	}

	public void setFrom(String from) {
		this.from = from;
	}

	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	public String getBody() {
		return body;
	}

	public void setBody(String body) {
		this.body = body;
	}

	public Timestamp getTimeAdded() {
		return timeAdded;
	}

	public void setTimeAdded(Timestamp timeAdded) {
		this.timeAdded = timeAdded;
	}

	@Override
	public boolean equals(Object obj) {
		return obj != null && obj.getClass().equals(this.getClass()) && this.equals((Email) obj);
	}

	@Override
	public int hashCode() {
		assert false : "hashCode not designed";
		return 42; // any arbitrary constant will do
	}

	private boolean equals(Email other) {
		return from.equals(other.from) && subject.equals(other.subject) && body.equals(other.body)
				&& listEquals(toList, other.toList);
	}

	private boolean listEquals(List<String> toList, List<String> otherToList) {
		if (toList.size() != otherToList.size())
			return false;
		for (int i = 0; i < toList.size(); i++) {
			if (!toList.get(i).equals(otherToList.get(i)))
				return false;
		}
		return true;
	}

	@Override
	public String toString() {
		return "FROM: " + from + " TO: " + toList.toString() + " SUBJECT: " + subject + " BODY: " + body;
	}

}

package edu.ncsu.csc.itrust.beans;

import java.util.List;

/**
 * A bean for storing data about the diagnosis given by an HCP.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class HCPDiagnosisBean {

	private long HCPID;
	private String HCPname;
	private long numPatients;
	private List<MedicationBean> medList;
	private List<LabProcedureBean> labList;
	private int visitSat;
	private int treatmentSat;
	private int surveyCount;
	
	public HCPDiagnosisBean() {
		numPatients = 0;
		visitSat = 0;
		treatmentSat = 0;
		surveyCount = 0;
	}

	public long getHCP() {
		return HCPID;
	}
	
	public void setHCP(long hcp) {
		HCPID = hcp;
	}
	
	public String getHCPName() {
		return HCPname;
	}
	
	public void setHCPName(String name) {
		HCPname = name;
	}
	
	public long getNumPatients() {
		return numPatients;
	}
	
	public void incNumPatients() {
		numPatients++;
	}
	
	public List<MedicationBean> getMedList() {
		return medList;
	}
	
	public void setMedList(List<MedicationBean> medlist) {
		medList = medlist;
	}
	
	public List<LabProcedureBean> getLabList() {
		return labList;
	}
	
	public void setLabList(List<LabProcedureBean> lablist) {
		labList = lablist;
	}
	
	public String getVisitSatisfaction() {
		return (visitSat != 0 && surveyCount != 0)?Double.toString(((double)visitSat/(double)surveyCount)):"no results available";
	}
	
	public void setVisitSat(int sat) {
		visitSat += sat;
		surveyCount++;
	}

	public String getTreatmentSatisfaction() {
		return (treatmentSat != 0 && surveyCount != 0)?Double.toString((double)treatmentSat/(double)surveyCount):"no results available";
	}	
	
	public void setTreatmentSat(int sat) {
		treatmentSat += sat;
	}

}

package edu.ncsu.csc.itrust.beans;

import java.sql.Timestamp;

/**
 * A bean for storing data about a message from one user to another.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class MessageBean {
	private long to;
	private long from;
	private long id;
	private long parentMsgId;
	private String subject;
	private String body;
	private Timestamp timestamp;
	private int read;
	
	/**
	 * Gets the MIDs of the recipients for this Message
	 * @return
	 */
	public long getTo() {
		return to;
	}
	
	/**
	 * Sets the MIDs of the recipients for this Message
	 * @param to
	 */
	public void setTo(long to) {
		this.to = to;
	}
	
	public long getMessageId()
	{
		return id;
	}
	
	public void setMessageId(long id) {
		this.id = id;
	}

	public long getParentMessageId() {
		return this.parentMsgId;
	}
	
	public void setParentMessageId(long parentMsgId) {
		this.parentMsgId = parentMsgId;
	}
	
	/**
	 * Gets the MID of the sender for this message
	 * @return
	 */
	public long getFrom() {
		return from;
	}

	/**
	 * Sets the MID of the sender for this message
	 * @param from
	 */
	public void setFrom(long from) {
		this.from = from;
	}
	
	/**
	 * Gets the subject of this message
	 * @return
	 */
	public String getSubject() {
		return subject;
	}
	
	/**
	 * Sets the subject of this message
	 * @param subject
	 */
	public void setSubject(String subject) {
		this.subject = subject;
	}

	/**
	 * Gets the body of this message
	 * @return
	 */
	public String getBody() {
		return body;
	}
	
	/**
	 * Sets the body of this message
	 * @param body
	 */
	public void setBody(String body) {
		this.body = body;
	}

	/**
	 * Gets the time for this message
	 * @return
	 */
	public Timestamp getSentDate() {
		return this.timestamp;
	}

	/**
	 * Sets the time for this message
	 * @param timestamp
	 */
	public void setSentDate(Timestamp timestamp) {
		this.timestamp = timestamp;
	}
	
	/**
	 * Gets read for this message
	 * @return
	 */
	public int getRead() {
		return this.read;
	}

	/**
	 * Sets read for this message
	 * @param read
	 */
	public void setRead(int read) {
		this.read = read;
	}

}

package edu.ncsu.csc.itrust.beans;

/**
 * A bean for storing data about Diagnosis.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class DiagnosisBean {
	private long ovDiagnosisID = 0L; // optional
	private String icdCode;
	private String description;
	private String classification;
	private long visitID;

	public DiagnosisBean() {
	}

	/**
	 * This functionality will be moved elsewhere.
	 * 
	 */
	public DiagnosisBean(String code, String description, String classification) {
		this.icdCode = code;
		this.description = description;
		
		if (null != classification && classification.equals("yes")) {
			this.classification = classification;
		}
		else {
			this.classification = "no";
		}
	}

	/**
	 * Gets the ICD Code for this procedure
	 * 
	 * @return The ICD Code for this procedure
	 */
	public String getICDCode() {
		return icdCode;
	}

	public void setICDCode(String code) {
		icdCode = code;
	}
	
	public String getClassification() {
		return classification;
	}

	/**
	 * Gets the ICD Description for this procedure
	 * 
	 * @return The ICD Description for this procedure
	 */
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getFormattedDescription() {
		return description + "(" + icdCode + ")";
	}

	/**
	 * Optional - for use with editing an office visit
	 * 
	 * @return
	 */
	public long getOvDiagnosisID() {
		return ovDiagnosisID;
	}

	public void setOvDiagnosisID(long ovDiagnosisID) {
		this.ovDiagnosisID = ovDiagnosisID;
	}

	public void setVisitID(long vid) {
		visitID = vid;
	}
	
	public long getVisitID() {
		return visitID;
	}
}

package edu.ncsu.csc.itrust.beans;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * A bean for storing survey data associated with an office visit.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class SurveyBean {
	private long visitID;
	private Date surveyDate;
	private int waitingRoomMinutes;
	private int examRoomMinutes;
	private int visitSatisfaction;
	private int treatmentSatisfaction;

	public final static String dateFormat = "MM/dd/yyyy HH:mm";
	
	public void setVisitID(long iD) {
		visitID = iD;
	}
	public long getVisitID() {
		return visitID;
	}

	public void setSurveyDate(Date surveyDate) {
		this.surveyDate = (surveyDate == null ? null : (Date)surveyDate.clone());
	}
	public void setSurveyDateString(String s) {
		try {
			setSurveyDate(new SimpleDateFormat(dateFormat).parse(s));
		}
		catch (ParseException ex) {
			System.out.println(ex.getMessage());
		}
	}
	public Date getSurveyDate() {
		return (surveyDate == null ? null : (Date)surveyDate.clone());
	}
	public String getSurveyDateString() {
		if (surveyDate == null) return "";
		return new SimpleDateFormat(dateFormat).format(getSurveyDate());
	}
	
	public void setWaitingRoomMinutes(int waitingRoomMinutes) {
		this.waitingRoomMinutes = waitingRoomMinutes;
	}
	public int getWaitingRoomMinutes() {
		return waitingRoomMinutes;
	}
	
	public void setExamRoomMinutes(int examRoomMinutes) {
		this.examRoomMinutes = examRoomMinutes;
	}
	public int getExamRoomMinutes() {
		return examRoomMinutes;
	}
	
	public void setVisitSatisfaction(int visitSatisfaction) {
		this.visitSatisfaction = visitSatisfaction;
	}
	public int getVisitSatisfaction() {
		return visitSatisfaction;
	}
	
	public void setTreatmentSatisfaction(int treatmentSatisfaction) {
		this.treatmentSatisfaction = treatmentSatisfaction;
	}
	public int getTreatmentSatisfaction() {
		return treatmentSatisfaction;
	}

	
}

package edu.ncsu.csc.itrust.beans;

import java.sql.Timestamp;
import edu.ncsu.csc.itrust.enums.TransactionType;

/**
 * A bean for storing data about a transaction that occurred within iTrust.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class TransactionBean {
	private long transactionID;
	private long loggedInMID;
	private long secondaryMID;
	private TransactionType transactionType;
	private Timestamp timeLogged;
	private String addedInfo;
	private String role;

	public String getRole() {
		return role;
	}

	public void setRole(String role) {
		this.role = role;
	}

	public String getAddedInfo() {
		return addedInfo;
	}

	public void setAddedInfo(String addedInfo) {
		this.addedInfo = addedInfo;
	}

	public long getLoggedInMID() {
		return loggedInMID;
	}

	public void setLoggedInMID(long loggedInMID) {
		this.loggedInMID = loggedInMID;
	}

	public long getSecondaryMID() {
		return secondaryMID;
	}

	public void setSecondaryMID(long secondaryMID) {
		this.secondaryMID = secondaryMID;
	}

	public Timestamp getTimeLogged() {
		return timeLogged;
	}

	public void setTimeLogged(Timestamp timeLogged) {
		this.timeLogged = timeLogged;
	}

	public TransactionType getTransactionType() {
		return transactionType;
	}

	public void setTransactionType(TransactionType tranactionType) {
		this.transactionType = tranactionType;
	}

	public long getTransactionID() {
		return transactionID;
	}

	public void setTransactionID(long transactionID) {
		this.transactionID = transactionID;
	}
}

package edu.ncsu.csc.itrust.beans;

/**
 * A mini-bean to pass data between viewPrescriptionRecords.jsp and reportAdverseEvent.jsp
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class HCPLinkBean {
	long prescriberMID;
	String drug;
	boolean checked;
	String code;
	
	public boolean isChecked() {
		return checked;
	}

	public void setChecked(boolean checked) {
		this.checked = checked;
	}

	public String getCode() {
		return code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	/**
	 * @return the patient MID
	 */
	public long getPrescriberMID() {
		return prescriberMID;
	}
	
	/**
	 * 
	 * @param mID the patients MID
	 */
	public void setPrescriberMID(long mID) {
		prescriberMID = mID;
	}
	
	/**
	 * 
	 * @return the drug the event is being reported for
	 */
	public String getDrug() {
		return drug;
	}
	
	/**
	 * 
	 * @param drug sets the drug the event is being reported for
	 */
	public void setDrug(String drug) {
		this.drug = drug;
	}
}

package edu.ncsu.csc.itrust.beans;

import java.sql.Timestamp;



/**
 * A bean for storing data about a lab procedure.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class LabProcedureBean {
	
	public final static String Not_Received = "NOT YET RECEIVED";
	public final static String Pending = "PENDING";
	public final static String Completed = "COMPLETED";
	public final static String Allow = "ALLOWED";
	public final static String Restrict = "RESTRICTED";

	
	/**
	 * Unique 10-digit number that does not start with 9
	 */
	 private long pid;	 
	 
	 /**
	  * Unique identifier for a laboratory procedure of a patient
	  */
	 private long procedureID;
	 
	 /**
	  * Digits of the format nnnnn-n 
	  */
	 private String loinc; 
	
	 /**
	  * One of (NOT YET RECEIVED, PENDING, COMPLETED)
	  */
	 private String status;
	 
	 /**
	  * Up to 500 alphanumeric characters
	  */
	 private String commentary;
	 
	 /**
	  * Up to 500 alphanumeric characters
	  */
	 private String results;
	 
	 /**
	  * Office VisitID	Identifier that specifies the office visit in 
	  * which the laboratory procedure was ordered
	  */
	 private long ovID; 
	 
	 /**
	  * Date/Time of last status update 	Timestamp
	  */
	 private Timestamp timestamp;
	 
	 /**
	  * permission granted by lhcp who ordered test:
	  * "ALLOWED", "RESTRICTED"
	  */
	 private String rights = Allow;
	 
	 
	 
	 public LabProcedureBean(){
	 }


	/**
	 * Unique 10-digit number that does not start with 9
	 */
	public long getPid() {
		return pid;
	}


	/**
	 * Unique 10-digit number that does not start with 9
	 */
	public void setPid(long pid) {
		this.pid = pid;
	}


	/**
	  * Unique identifier for a laboratory procedure of a patient
	  */
	public long getProcedureID() {
		return procedureID;
	}


	/**
	  * Unique identifier for a laboratory procedure of a patient
	  */
	public void setProcedureID(long procedureID) {
		this.procedureID = procedureID;
	}


	 /**
	  * Digits of the format nnnnn-n 
	  */
	public String getLoinc() {
		return loinc;
	}


	 /**
	  * Digits of the format nnnnn-n 
	  */
	public void setLoinc(String loinc) {
		this.loinc = loinc;
	}


	/**
	  * One of (NOT YET RECEIVED, PENDING, COMPLETED)
	  */
	public String getStatus() {
		return status;
	}


	/**
	  * One of (NOT YET RECEIVED, PENDING, COMPLETED)
	  */
	public void setStatus(String status) {
		this.status = status;
	}


	 /**
	  * Up to 500 alphanumeric characters
	  */
	public String getCommentary() {
		return commentary;
	}


	 /**
	  * Up to 500 alphanumeric characters
	  */
	public void setCommentary(String commentary) {
		this.commentary = commentary;
	}


	 /**
	  * Up to 500 alphanumeric characters
	  */
	public String getResults() {
		return results;
	}


	 /**
	  * Up to 500 alphanumeric characters
	  */
	public void setResults(String results) {
		this.results = results;
	}


	 /**
	  * Office VisitID	Identifier that specifies the office visit in 
	  * which the laboratory procedure was ordered
	  */
	public long getOvID() {
		return ovID;
	}


	 /**
	  * Office VisitID	Identifier that specifies the office visit in 
	  * which the laboratory procedure was ordered
	  */
	public void setOvID(long ovID) {
		this.ovID = ovID;
	}



	public Timestamp getTimestamp() {
		return timestamp;
	}



	public void setTimestamp(Timestamp timestamp) {
		this.timestamp = timestamp;
	}

	 /**
	  * permission granted by lhcp who ordered test:
	  * "ALLOWED", "RESTRICTED"
	  */
	public String getRights() {
		return rights;
	}

	 /**
	  * permission granted by lhcp who ordered test:
	  * "ALLOWED", "RESTRICTED"
	  */
	public void setRights(String rights) {
		this.rights = rights;
	}
	
	
	 public void allow(){
		 this.rights = Allow;
	 }
	 
	 public void restrict(){
		 this.rights = Restrict;
	 }
	 
	 public void statusComplete(){
	 	this.status = Completed;
	 }
	 
	 public void statusPending(){
		 this.status = Pending;
	 }
	 
	 public void statusNotReceived(){
		 this.status = Not_Received;
	 }
	 
	 
	 
}

package edu.ncsu.csc.itrust.beans;

/**
 * A bean for storing data about a patient's visit.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class PatientVisitBean {
	private PatientBean patient = null;
	private String PatientName = "";
	private String Address1 = "";
	private String Address2 = "";
	private String LastOVDateM = "";
	private String LastOVDateD = "";
	private String LastOVDateY = "";
	private String LastOVDate = "";
	
	public String getLastOVDate() {
		return LastOVDate;
	}

	public void setLastOVDate(String lastOVDate) {
		LastOVDate = lastOVDate;
	}

	public String getLastOVDateM() {
		return LastOVDateM;
	}

	public void setLastOVDateM(String lastOVDateM) {
		LastOVDateM = lastOVDateM;
	}

	public String getLastOVDateD() {
		return LastOVDateD;
	}

	public void setLastOVDateD(String lastOVDateD) {
		LastOVDateD = lastOVDateD;
	}

	public String getLastOVDateY() {
		return LastOVDateY;
	}

	public void setLastOVDateY(String lastOVDateY) {
		LastOVDateY = lastOVDateY;
	}

	public PatientVisitBean() {
		
	}

	public String getPatientName() {
		return PatientName;
	}

	public void setPatientName(String patientName) {
		PatientName = patientName;
	}

	public String getAddress1() {
		return Address1;
	}

	public void setAddress1(String address1) {
		Address1 = address1;
	}

	public String getAddress2() {
		return Address2;
	}

	public void setAddress2(String address2) {
		Address2 = address2;
	}

	public PatientBean getPatient() {
		return patient;
	}

	public void setPatient(PatientBean patient) {
		this.patient = patient;
	}

}

package edu.ncsu.csc.itrust.beans;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import edu.ncsu.csc.itrust.enums.BloodType;
import edu.ncsu.csc.itrust.enums.Ethnicity;
import edu.ncsu.csc.itrust.enums.Gender;

/**
 * A bean for storing data about a patient.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class PatientBean implements Serializable {
	private static final long serialVersionUID = -6474182977342257877L;
	
	private long MID = 0;
	private String firstName = "";
	private String lastName = "";
	private String email = "";
	private String securityQuestion = "";
	private String securityAnswer = "";
	private String password = "";
	private String confirmPassword = "";
	private String streetAddress1 = "";
	private String streetAddress2 = "";
	private String city = "";
	private String state = "AK";
	private String zip1 = "";
	private String zip2 = "";
	private String phone1 = "";
	private String phone2 = "";
	private String phone3 = "";
	private String emergencyName = "";
	private String emergencyPhone1 = "";
	private String emergencyPhone2 = "";
	private String emergencyPhone3 = "";
	private String icName = "";
	private String icAddress1 = "";
	private String icAddress2 = "";
	private String icCity = "";
	private String icState = "AK";
	private String icZip1 = "";
	private String icZip2 = "";
	private String icPhone1 = "";
	private String icPhone2 = "";
	private String icPhone3 = "";
	private String icID = "";
	private String creditCardType = "";
	private String creditCardNumber = "";
	// Topical Health Information
	private String dateOfBirthStr = new SimpleDateFormat("MM/dd/yyyy").format(new Date());
	private String dateOfDeathStr = "";
	private String causeOfDeath = "";
	private String motherMID = "0";
	private String fatherMID = "0";
	private BloodType bloodType = BloodType.NS;
	private Ethnicity ethnicity = Ethnicity.NotSpecified;
	private Gender gender = Gender.NotSpecified;
	private String topicalNotes = "";
	private String messageFilter= "";

	public String getMessageFilter() {
		return messageFilter;
	}

	public void setMessageFilter(String messageFilter) {
		this.messageFilter = messageFilter;
	}

	public BloodType getBloodType() {
		return bloodType;
	}

	public void setBloodTypeStr(String bloodType) {
		this.bloodType = BloodType.parse(bloodType);
	}

	public void setBloodType(BloodType bloodType) {
		this.bloodType = bloodType;
	}

	public String getCauseOfDeath() {
		return causeOfDeath;
	}

	public void setCauseOfDeath(String causeOfDeath) {
		this.causeOfDeath = causeOfDeath;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public String getDateOfBirthStr() {
		return dateOfBirthStr;
	}

	public Date getDateOfBirth() {
		try {
			return new SimpleDateFormat("MM/dd/yyyy").parse(dateOfBirthStr);
		} catch (ParseException e) {
			e.printStackTrace();
			return null;
		}
	}

	public Date getDateOfDeath() {
		try {
			return new SimpleDateFormat("MM/dd/yyyy").parse(dateOfDeathStr);
		} catch (ParseException e) {
			e.printStackTrace();
			return null;
		}
	}

	public void setDateOfBirthStr(String dateOfBirthStr) {
		this.dateOfBirthStr = dateOfBirthStr;
	}

	public int getAge() {
		try {
			long ageInMs = System.currentTimeMillis()
					- new SimpleDateFormat("MM/dd/yyyy").parse(dateOfBirthStr).getTime();
			long age = ageInMs / (1000L * 60L * 60L * 24L * 365L);
			return (int) age;
		} catch (ParseException e) {
			e.printStackTrace();
			return -1;
		}
	}
	
	public long getAgeInDays() {
		
		long age;
		long ageInMs;

		try {
			ageInMs = System.currentTimeMillis()
					- new SimpleDateFormat("MM/dd/yyyy").parse(dateOfBirthStr).getTime();
			age = ageInMs / (1000L * 60L * 60L * 24L);
	
		}
		catch (ParseException e) {
			e.printStackTrace();
			return -1;
		}
		
		return age;
	}

	public long getAgeInWeeks() {
		
		long age;
		long ageInMs;

		try {
			ageInMs = System.currentTimeMillis()
					- new SimpleDateFormat("MM/dd/yyyy").parse(dateOfBirthStr).getTime();
			age = ageInMs / (1000L * 60L * 60L * 24L * 7L);
	
		}
		catch (ParseException e) {
			e.printStackTrace();
			return -1;
		}
		
		return age;
	}
	
	public String getDateOfDeathStr() {
		return dateOfDeathStr;
	}

	public void setDateOfDeathStr(String dateOfDeathStr) {
		this.dateOfDeathStr = dateOfDeathStr;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getEmergencyName() {
		return emergencyName;
	}

	public void setEmergencyName(String emergencyName) {
		this.emergencyName = emergencyName;
	}

	public Ethnicity getEthnicity() {
		return ethnicity;
	}

	public void setEthnicityStr(String ethnicity) {
		this.ethnicity = Ethnicity.parse(ethnicity);
	}

	public void setEthnicity(Ethnicity ethnicity) {
		this.ethnicity = ethnicity;
	}

	public String getFatherMID() {
		return fatherMID;
	}

	public void setFatherMID(String fatherMID) {
		this.fatherMID = fatherMID;
	}

	public String getFullName() {
		return getFirstName() + " " + getLastName();
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public Gender getGender() {
		return gender;
	}

	public void setGenderStr(String gender) {
		this.gender = Gender.parse(gender);
	}

	public void setGender(Gender gender) {
		this.gender = gender;
	}

	public String getIcAddress1() {
		return icAddress1;
	}

	public void setIcAddress1(String icAddress1) {
		this.icAddress1 = icAddress1;
	}

	public String getIcAddress2() {
		return icAddress2;
	}

	public void setIcAddress2(String icAddress2) {
		this.icAddress2 = icAddress2;
	}

	// Composition of city, state, and zip
	public String getIcAddress3() {
		return getIcCity() + ", " + getIcState() + " " + getIcZip();
	}

	public String getIcCity() {
		return icCity;
	}

	public void setIcCity(String icCity) {
		this.icCity = icCity;
	}

	public String getIcID() {
		return icID;
	}

	public void setIcID(String icID) {
		this.icID = icID;
	}
	
	public String getCreditCardType() {
		return creditCardType;
	}
	
	public void setCreditCardType(String creditCardType) {
		this.creditCardType = creditCardType;
	}
	
	public String getCreditCardNumber() {
		return creditCardNumber;
	}
	
	public void setCreditCardNumber(String creditCardNumber) {
		this.creditCardNumber = creditCardNumber;
	}

	public String getIcName() {
		return icName;
	}

	public void setIcName(String icName) {
		this.icName = icName;
	}

	public String getIcZip() {
		if (getIcZip2() != null && !"".equals(getIcZip2()))
			return getIcZip1() + "-" + getIcZip2();
		else
			return getIcZip1();
	}

	public String getIcZip1() {
		return icZip1;
	}

	public void setIcZip1(String icZip1) {
		this.icZip1 = icZip1;
	}

	public String getIcZip2() {
		return icZip2;
	}

	public void setIcZip2(String icZip2) {
		this.icZip2 = icZip2;
	}

	public String getIcState() {
		return icState;
	}

	public void setIcState(String icState) {
		this.icState = icState;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public long getMID() {
		return MID;
	}

	public void setMID(long mid) {
		MID = mid;
	}

	public String getMotherMID() {
		return motherMID;
	}

	public void setMotherMID(String motherMID) {
		this.motherMID = motherMID;
	}

	// Note that there is no setter for this - it's stored in the database as 3 separate columns
	public String getPhone() {
		return getPhone1() + "-" + getPhone2() + "-" + getPhone3();
	}

	public String getPhone1() {
		return phone1;
	}

	public String getPhone2() {
		return phone2;
	}

	public String getPhone3() {
		return phone3;
	}

	public void setPhone1(String phone1) {
		this.phone1 = phone1;
	}

	public void setPhone2(String phone2) {
		this.phone2 = phone2;
	}

	public void setPhone3(String phone3) {
		this.phone3 = phone3;
	}

	public String getSecurityAnswer() {
		return securityAnswer;
	}

	public void setSecurityAnswer(String securityAnswer) {
		this.securityAnswer = securityAnswer;
	}

	public String getSecurityQuestion() {
		return securityQuestion;
	}

	public void setSecurityQuestion(String securityQuestion) {
		this.securityQuestion = securityQuestion;
	}

	public String getState() {
		return state;
	}

	public void setState(String state) {
		this.state = state;
	}

	public String getStreetAddress1() {
		return streetAddress1;
	}

	public void setStreetAddress1(String streetAddress1) {
		this.streetAddress1 = streetAddress1;
	}

	public String getStreetAddress2() {
		return streetAddress2;
	}

	public void setStreetAddress2(String streetAddress2) {
		this.streetAddress2 = streetAddress2;
	}

	// Composition of the city, state, zip
	public String getStreetAddress3() {
		return getCity() + ", " + getState() + " " + getZip();
	}

	public String getTopicalNotes() {
		return topicalNotes;
	}

	public void setTopicalNotes(String topicalNotes) {
		this.topicalNotes = topicalNotes;
	}

	public String getZip() {
		if (getZip2() != null && !"".equals(getZip2()))
			return getZip1() + "-" + getZip2();
		else
			return getZip1();
	}

	public String getZip1() {
		return zip1;
	}

	public void setZip1(String zip1) {
		this.zip1 = zip1;
	}

	public String getZip2() {
		return zip2;
	}

	public void setZip2(String zip2) {
		this.zip2 = zip2;
	}

	// Same idea as "phone"
	public String getEmergencyPhone() {
		return getEmergencyPhone1() + "-" + getEmergencyPhone2() + "-" + getEmergencyPhone3();
	}

	public String getEmergencyPhone1() {
		return emergencyPhone1;
	}

	public void setEmergencyPhone1(String emergencyPhone1) {
		this.emergencyPhone1 = emergencyPhone1;
	}

	public String getEmergencyPhone2() {
		return emergencyPhone2;
	}

	public void setEmergencyPhone2(String emergencyPhone2) {
		this.emergencyPhone2 = emergencyPhone2;
	}

	public String getEmergencyPhone3() {
		return emergencyPhone3;
	}

	public void setEmergencyPhone3(String emergencyPhone3) {
		this.emergencyPhone3 = emergencyPhone3;
	}

	// Same idea as "phone"
	public String getIcPhone() {
		return getIcPhone1() + "-" + getIcPhone2() + "-" + getIcPhone3();
	}

	public String getIcPhone1() {
		return icPhone1;
	}

	public void setIcPhone1(String icPhone1) {
		this.icPhone1 = icPhone1;
	}

	public String getIcPhone2() {
		return icPhone2;
	}

	public void setIcPhone2(String icPhone2) {
		this.icPhone2 = icPhone2;
	}

	public String getIcPhone3() {
		return icPhone3;
	}

	public void setIcPhone3(String icPhone3) {
		this.icPhone3 = icPhone3;
	}

	public String getConfirmPassword() {
		return confirmPassword;
	}

	public void setConfirmPassword(String confirmPassword) {
		this.confirmPassword = confirmPassword;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}
}

package edu.ncsu.csc.itrust.beans;

/**
 * A bean for storing data about a visit with an HCP.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class HCPVisitBean {
	private String HCPName;
	private String HCPSpecialty;
	private String HCPAddr;
	private String OVDate;
	private boolean designated;
	private long hcpMID;
	
	public HCPVisitBean() {
		HCPName = "";
		HCPSpecialty = "";
		HCPAddr = "";
		OVDate = "";
		
	}
	
	public void setHCPMID(long mid) {
		hcpMID = mid;
	}
	
	public long getHCPMID() {
		return hcpMID;
	}
	
	public String getHCPName() {
		return HCPName;
	}
	
	public void setHCPName(String name) {
		if (null != name) {
			HCPName = name;
		}
	}
	
	public String getHCPSpecialty() {
		return HCPSpecialty;
	}
	
	public void setHCPSpecialty(String specialty) {
		if (null != specialty) {
			HCPSpecialty = specialty;
		}
		else {
			HCPSpecialty = "none";
		}
	}
	
	public String getHCPAddr() {
		return HCPAddr;
	}
	
	public void setHCPAddr(String addr) {
		if (null != addr) {
			HCPAddr = addr;
		}
	}
	
	public String getOVDate() {
		return OVDate;
	}
	
	public void setOVDate(String date) {
		if (null != date) {
			OVDate = date;
		}
	}
	
	public boolean isDesignated() {
		return designated;
	}
	
	public void setDesignated(boolean val) {
		designated = val;
	}
}

package edu.ncsu.csc.itrust.beans;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * A bean for storing data about a prescription.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class PrescriptionBean {
	private long id = 0L;
	private MedicationBean medication = new MedicationBean();
	private long visitID = 0L;
	private String startDateStr = new SimpleDateFormat("MM/dd/yyyy").format(new Date());
	private String endDateStr = new SimpleDateFormat("MM/dd/yyyy").format(new Date());
	private int dosage = 0;
	private String instructions = "";

	public PrescriptionBean() {
	}

	@Override
	public boolean equals(Object other) {
		return (other != null) && this.getClass().equals(other.getClass())
				&& this.equals((PrescriptionBean) other);
	}

	private boolean equals(PrescriptionBean other) {
		return (medication == other.medication || (medication != null && medication.equals(other.medication)))
				&& visitID == other.visitID
				&& startDateStr.equals(other.startDateStr)
				&& endDateStr.equals(other.endDateStr)
				&& dosage == other.dosage
				&& instructions.equals(other.instructions);
	}

	public int hashCode() {
		assert false : "hashCode not designed";
		return 42; // any arbitrary constant will do
	}

	public int getDosage() {
		return dosage;
	}

	public void setDosage(int dosage) {
		this.dosage = dosage;
	}

	public Date getEndDate() {
		try {
			return new SimpleDateFormat("MM/dd/yyyy").parse(endDateStr);
		} catch (java.text.ParseException e) {
			return null;
		}
	}

	public void setEndDateStr(String endDate) {
		this.endDateStr = endDate;
	}

	public String getInstructions() {
		return instructions;
	}

	public void setInstructions(String instruction) {
		this.instructions = instruction;
	}

	public MedicationBean getMedication() {
		return medication;
	}

	public void setMedication(MedicationBean medication) {
		this.medication = medication;
	}

	public Date getStartDate() {
		try {
			return new SimpleDateFormat("MM/dd/yyyy").parse(startDateStr);
		} catch (ParseException e) {
			return null;
		}
	}

	public String getStartDateStr() {
		return startDateStr;
	}

	public String getEndDateStr() {
		return endDateStr;
	}

	public void setStartDateStr(String startDate) {
		this.startDateStr = startDate;
	}

	public long getVisitID() {
		return visitID;
	}

	public void setVisitID(long visitID) {
		this.visitID = visitID;
	}

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

}

package edu.ncsu.csc.itrust.beans;

import java.sql.Timestamp;
import java.util.Date;

/**
 * A bean for storing health record data.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class HealthRecord {
	private long patientID = 0;
	private double height = 0;
	private double weight = 0;
	private boolean isSmoker = false;
	private int bloodPressureN = 0;
	private int bloodPressureD = 0;
	private int cholesterolHDL = 1;
	private int cholesterolLDL = 100;
	private int cholesterolTri = 100;
	private long personnelID = 0;
	private Timestamp dateRecorded = new Timestamp(new Date().getTime());

	public HealthRecord() {
	}

	public int getBloodPressureD() {
		return bloodPressureD;
	}

	public void setBloodPressureD(int bloodPressureD) {
		this.bloodPressureD = bloodPressureD;
	}

	public void setBloodPressureSystolic(int bloodPressure) {
		this.bloodPressureN = bloodPressure;
	}

	public void setBloodPressureDiastolic(int bloodPressure) {
		this.bloodPressureD = bloodPressure;
	}

	public int getBloodPressureN() {
		return bloodPressureN;
	}

	public int getBloodPressureSystolic() {
		return bloodPressureN;
	}

	public int getBloodPressureDiastolic() {
		return bloodPressureD;
	}

	public void setBloodPressureN(int bloodPressureN) {
		this.bloodPressureN = bloodPressureN;
	}

	public String getBloodPressure() {
		return getBloodPressureN() + "/" + getBloodPressureD();
	}

	public int getCholesterolHDL() {
		return cholesterolHDL;
	}

	public void setCholesterolHDL(int cholesterolHDL) {
		this.cholesterolHDL = cholesterolHDL;
	}

	public int getCholesterolLDL() {
		return cholesterolLDL;
	}

	public void setCholesterolLDL(int cholesterolLDL) {
		this.cholesterolLDL = cholesterolLDL;
	}

	public int getCholesterolTri() {
		return cholesterolTri;
	}

	public void setCholesterolTri(int cholesterolTri) {
		this.cholesterolTri = cholesterolTri;
	}

	/**
	 * Note that this is a simplistic view. See the Wikipedia article on cholesterol.
	 * 
	 * @return
	 */
	public int getTotalCholesterol() {
		return getCholesterolHDL() + getCholesterolLDL() + getCholesterolTri();
	}

	public Date getDateRecorded() {
		return dateRecorded;
	}

	public void setDateRecorded(Timestamp dateRecorded) {
		this.dateRecorded = dateRecorded;
	}

	// Rounds the height off here because MySQL won't return the *exact* value you put in it
	public double getHeight() {
		return Math.round(height * 10000) / 10000D;
	}

	public void setHeight(double height) {
		this.height = height;
	}

	public long getPatientID() {
		return patientID;
	}

	public void setPatientID(long patientID) {
		this.patientID = patientID;
	}

	public long getPersonnelID() {
		return personnelID;
	}

	public void setPersonnelID(long personnelID) {
		this.personnelID = personnelID;
	}

	public boolean isSmoker() {
		return isSmoker;
	}

	public void setSmoker(boolean smoker) {
		this.isSmoker = smoker;
	}

	public double getWeight() {
		return Math.round(weight * 10000) / 10000D;
	}

	public void setWeight(double weight) {
		this.weight = weight;
	}

	public double getBodyMassIndex() {
		return 703 * (weight / (height * height));
	}
}

package edu.ncsu.csc.itrust.beans;

/**
 * A bean for storing data about a adverse event based on a drug.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class AdverseEventBean {
	String MID;
	String drug;
	String description;
	String code;
	String date;
	String status;
	String Prescriber;
	
	public String getPrescriber() {
		return Prescriber;
	}

	public void setPrescriber(String prescriber) {
		Prescriber = prescriber;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}
	int id;
	
	/**
	 * @return the id
	 */
	public int getId() {
		return id;
	}

	/**
	 * @param id the id to set
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * @return the date
	 */
	public String getDate() {
		return date;
	}

	/**
	 * @param date the date to set
	 */
	public void setDate(String date) {
		this.date = date;
	}

	public String getCode() {
		return code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	/**
	 * @return the patient MID
	 */
	public String getMID() {
		return MID;
	}
	
	/**
	 * 
	 * @param mID the patients MID
	 */
	public void setMID(String mID) {
		MID = mID;
	}
	
	/**
	 * 
	 * @return the drug the event is being reported for
	 */
	public String getDrug() {
		return drug;
	}
	
	/**
	 * 
	 * @param drug sets the drug the event is being reported for
	 */
	public void setDrug(String drug) {
		this.drug = drug;
	}
	/**
	 * @return the description
	 */
	public String getDescription() {
		return description;
	}
	/**
	 * @param description the description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}
	
	
	
	

}

package edu.ncsu.csc.itrust.beans;

/**
 * A bean for storing data about Lab Procedure Codes.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class LOINCbean {
	private String labProcedureCode;
	private String component;
	private String kindOfProperty;
	private String timeAspect;
	private String system;
	private String scaleType;
	private String methodType;
	
	public LOINCbean(){
		
	}

	public String getLabProcedureCode(){
		return labProcedureCode;
	}
	
	public void setLabProcedureCode(String aLabProcedureCode){
		labProcedureCode=aLabProcedureCode;
	}
	
	public String getComponent(){
		return component;
	}
	
	public void setComponent(String aComponent){
		component=aComponent;
	}

	public String getKindOfProperty(){
		return kindOfProperty;
	}
	
	public void setKindOfProperty(String aKindOfProperty){
		kindOfProperty=aKindOfProperty;
	}
	
	public String getTimeAspect(){
		return timeAspect;
	}
	
	public void setTimeAspect(String aTimeAspect){
		timeAspect=aTimeAspect;
	}

	public String getSystem(){
		return system;
	}
	
	public void setSystem(String aSystem){
		system=aSystem;
	}
	public String getScaleType(){
		return scaleType;
	}
	
	public void setScaleType(String aScaleType){
		scaleType=aScaleType;
	}

	public String getMethodType(){
		return methodType;
	}
	
	public void setMethodType(String aMethodType){
		methodType=aMethodType;
	}

}


package edu.ncsu.csc.itrust.beans;

/**
 * This is the container bean for the Prescription Report requirement. It contains a PrescriptionBean (which
 * in turn contains a Medication Bean), and an office visit bean. <br />
 * <br />
 * This was made so that the prescription report could be done all in one clean query.<br />
 * <br />
 * See {@link PrescriptionBean} See {@link OfficeVisitBean}
 * 
 * @author Andy Meneely
 * 
 */
public class PrescriptionReportBean {
	PrescriptionBean prescription;
	OfficeVisitBean officeVisit;

	public PrescriptionReportBean() {
	}

	public PrescriptionBean getPrescription() {
		return prescription;
	}

	public void setPrescription(PrescriptionBean prescription) {
		this.prescription = prescription;
	}

	public OfficeVisitBean getOfficeVisit() {
		return officeVisit;
	}

	public void setOfficeVisit(OfficeVisitBean officeVisit) {
		this.officeVisit = officeVisit;
	}
}

package edu.ncsu.csc.itrust.beans;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * A bean for storing data about an office visit at the hospital.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class OfficeVisitBean {
	private long visitID = 0;
	private long patientID = 0;
	private long hcpID = 0;
	private String notes = "";
	private String visitDateStr = new SimpleDateFormat("MM/dd/yyyy").format(new Date());
	private String hospitalID = "";
	private List<DiagnosisBean> diagnoses = new ArrayList<DiagnosisBean>();
	private List<PrescriptionBean> prescriptions = new ArrayList<PrescriptionBean>();
	private List<ProcedureBean> procedures = new ArrayList<ProcedureBean>();

	public OfficeVisitBean() {
	}

	/**
	 * For use ONLY by DAOs
	 * 
	 * @param visitID
	 */
	public OfficeVisitBean(long visitID) {
		this.visitID = visitID;
	}

	public long getID() {
		return visitID;
	}

	public long getPatientID() {
		return this.patientID;
	}

	public long getHcpID() {
		return this.hcpID;
	}

	public String getNotes() {
		return this.notes;
	}

	public Date getVisitDate() {
		Date d = null; 
		try {
			d = new SimpleDateFormat("MM/dd/yyyy").parse(visitDateStr);
		} catch (ParseException e) {
			System.out.println(e.toString());
		}
		
		return d;
	}

	public String getVisitDateStr() {
		return visitDateStr;
	}

	public List<DiagnosisBean> getDiagnoses() {
		return diagnoses;
	}

	public List<PrescriptionBean> getPrescriptions() {
		return prescriptions;
	}

	public List<ProcedureBean> getProcedures() {
		return procedures;
	}

	public long getVisitID() {
		return visitID;
	}

	public void setDiagnoses(List<DiagnosisBean> diagnoses) {
		this.diagnoses = diagnoses;
	}

	public void setHcpID(long hcpID) {
		this.hcpID = hcpID;
	}

	public void setPrescriptions(List<PrescriptionBean> prescriptions) {
		this.prescriptions = prescriptions;
	}

	public void setNotes(String notes) {
		this.notes = notes;
	}

	public void setPatientID(long patientID) {
		this.patientID = patientID;
	}

	public void setProcedures(List<ProcedureBean> procedures) {
		this.procedures = procedures;
	}

	public void setVisitDateStr(String visitDate) {
		this.visitDateStr = visitDate;
	}

	public String getHospitalID() {
		return hospitalID;
	}

	public void setHospitalID(String hospitalID) {
		this.hospitalID = hospitalID;
	}

}

package edu.ncsu.csc.itrust.beans;

/**
 * A bean for storing data about a medical referral.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class ReferralBean {
	private long id = 0L;
	private long patientID = 0L;
	private long senderID = 0L;
	private long receiverID = 0L;
	private String referralDetails = "";
	private String consultationDetails = "";
	private ReferralStatus status = ReferralStatus.Pending;
	
	public enum ReferralStatus {
		Pending,
		Finished,
		Declined
	}

	public ReferralBean() {
	}

	@Override
	public boolean equals(Object other) {
		return (other != null) && this.getClass().equals(other.getClass())
				&& this.equals((ReferralBean) other);
	}

	private boolean equals(ReferralBean other) {
		return (id == other.id
				&& senderID == other.senderID
				&& receiverID == other.receiverID
				&& referralDetails.equals(other.referralDetails)
				&& consultationDetails.equals(other.consultationDetails)
				&& status.equals(other.status));
	}

	public int hashCode() {
		assert false : "hashCode not designed";
		return 42; // any arbitrary constant will do
	}

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public long getSenderID() {
		return senderID;
	}

	public void setSenderID(long senderID) {
		this.senderID = senderID;
	}

	public long getReceiverID() {
		return receiverID;
	}

	public void setReceiverID(long receiverID) {
		this.receiverID = receiverID;
	}

	public String getReferralDetails() {
		return referralDetails;
	}

	public void setReferralDetails(String referralDetails) {
		this.referralDetails = referralDetails;
	}

	public String getConsultationDetails() {
		return consultationDetails;
	}

	public void setConsultationDetails(String consultationDetails) {
		this.consultationDetails = consultationDetails;
	}

	public ReferralStatus getStatus() {
		return status;
	}

	public void setStatus(ReferralStatus status) {
		this.status = status;
	}

	public long getPatientID() {
		return patientID;
	}

	public void setPatientID(long patientID) {
		this.patientID = patientID;
	}

	

}

package edu.ncsu.csc.itrust.beans;

import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * A bean for storing data about Allergies.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class AllergyBean {
	private long id;
	private long patientID;
	private String description;
	private Date firstFound;

	public AllergyBean() {
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Date getFirstFound() {
		return (Date) firstFound.clone();
	}

	public void setFirstFound(Date firstFound) {
		if (null != firstFound)
			this.firstFound = (Date) firstFound.clone();
		else
			this.firstFound = null;
	}

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String toString() {
		return this.description;
	}

	public long getPatientID() {
		return patientID;
	}

	public void setPatientID(long patientID) {
		this.patientID = patientID;
	}

	public String getFirstFoundStr() {
		try {
			return new SimpleDateFormat("MM/dd/yyyy").format(getFirstFound());
		} catch (Exception e) {
			e.printStackTrace();
			return "";
		}
	}
}

package edu.ncsu.csc.itrust.beans;

import java.sql.Timestamp;

/**
 * A bean for storing remote monitoring data for patients.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class RemoteMonitoringDataBean {
	private long patientMID;
	private Timestamp time;
	private int systolicBloodPressure;
	private int diastolicBloodPressure;
	private int glucoseLevel;
	private String reporterRole;
	private long reporterMID;

	/**
	 * Constructor with no parameters
	 */
	public RemoteMonitoringDataBean() {
		
	}
	
	/**
	 * Constructor with loggedInMID parameter
	 */
	public RemoteMonitoringDataBean(long patientMID) {
		this.patientMID = patientMID;
	}
	
	public long getReporterMID() {
		return reporterMID;
	}

	public void setReporterMID(long reporterMID) {
		this.reporterMID = reporterMID;
	}
	
	public long getPatientMID() {
		return patientMID;
	}
	
	public void setLoggedInMID(long patientMID) {
		this.patientMID = patientMID;
	}
	
	public Timestamp getTime() {
		return time;
	}
	
	public void setTime(Timestamp time) {
		this.time = time;
	}
	
	public int getSystolicBloodPressure() {
		return systolicBloodPressure;
	}
	
	public void setSystolicBloodPressure(int systolicBloodPressure) {
		this.systolicBloodPressure = systolicBloodPressure;
	}
	
	public int getDiastolicBloodPressure() {
		return diastolicBloodPressure;
	}
	
	public void setDiastolicBloodPressure(int diastolicBloodPressure) {
		this.diastolicBloodPressure = diastolicBloodPressure;
	}
	
	public int getGlucoseLevel() {
		return glucoseLevel;
	}
	
	public void setGlucoseLevel(int glucoseLevel) {
		this.glucoseLevel = glucoseLevel;
	}
	
	public String getReporterRole() {
		return reporterRole;
	}

	public void setReporterRole(String reporterRole) {
		this.reporterRole = reporterRole;
	}

}

package edu.ncsu.csc.itrust.beans;

/**
 * A bean for storing data to flag an office visit.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class VisitFlag {

	public static final String DIAGNOSED = "Diagnosed";
	public static final String MISSED_MEDICATION = "Missed Medication";
	public static final String MISSING_MEDICATION = "Currently Missing Medication";
	public static final String LAST_VISIT = "Last Visit";
	public static final String IMMUNIZATION = "Needs Immunization";

	private String type;
	private String value;

	public VisitFlag(String type) {
		this.type = type;
	}

	public VisitFlag(String type, String value) {
		this.type = type;
		this.value = value;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public String getValue() {
		return value;
	}

	public void setValue(String value) {
		this.value = value;
	}

}

package edu.ncsu.csc.itrust.beans;

/**
 * A bean for storing data about a hospital.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class HospitalBean {
	String hospitalID;
	String hospitalName;

	public HospitalBean() {
	}

	public HospitalBean(String id) {
		hospitalID = id;
	}

	public HospitalBean(String id, String name) {
		hospitalID = id;
		hospitalName = name;
	}

	public String getHospitalID() {
		return hospitalID;
	}

	public void setHospitalID(String hospitalID) {
		this.hospitalID = hospitalID;
	}

	public String getHospitalName() {
		return hospitalName;
	}

	public void setHospitalName(String hospitalName) {
		this.hospitalName = hospitalName;
	}

	@Override
	public boolean equals(Object obj) {
		return obj != null && obj.getClass().equals(this.getClass()) && this.equals((HospitalBean) obj);
	}

	public int hashCode() {
		assert false : "hashCode not designed";
		return 42; // any arbitrary constant will do
	}

	private boolean equals(HospitalBean other) {
		return hospitalID.equals(other.hospitalID) && hospitalName.equals(other.hospitalName);
	}
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;

/**
 * A loader for LabProcedureBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class LabProcedureBeanLoader implements BeanLoader<LabProcedureBean> {
	
	public List<LabProcedureBean> loadList(ResultSet rs) throws SQLException {
		ArrayList<LabProcedureBean> list = new ArrayList<LabProcedureBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public LabProcedureBean loadSingle(ResultSet rs) throws SQLException {
		LabProcedureBean LabProcedure = new LabProcedureBean();
		LabProcedure.setProcedureID(rs.getLong("LaboratoryProcedureID"));
		LabProcedure.setPid(rs.getLong("PatientMID"));
		LabProcedure.setLoinc(rs.getString("LaboratoryProcedureCode"));
		LabProcedure.setStatus(rs.getString("Status"));
		LabProcedure.setCommentary(rs.getString("Commentary"));
		LabProcedure.setResults(rs.getString("Results"));
		LabProcedure.setOvID(rs.getLong("OfficeVisitID"));
		LabProcedure.setTimestamp(rs.getTimestamp("UpdatedDate"));
		LabProcedure.setRights(rs.getString("Rights"));		
		return LabProcedure;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, LabProcedureBean bean) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}

}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import edu.ncsu.csc.itrust.beans.Email;

/**
 * A loader for Fake Emails.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class EmailBeanLoader implements BeanLoader<Email> {

	public List<Email> loadList(ResultSet rs) throws SQLException {
		List<Email> list = new ArrayList<Email>();
		while (rs.next())
			list.add(loadSingle(rs));
		return list;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, Email email) throws SQLException {
		ps.setString(1, email.getToListStr());
		ps.setString(2, email.getFrom());
		ps.setString(3, email.getSubject());
		ps.setString(4, email.getBody());
		return ps;
	}

	public Email loadSingle(ResultSet rs) throws SQLException {
		Email email = new Email();
		email.setFrom(rs.getString("FromAddr"));
		email.setToList(Arrays.asList(rs.getString("ToAddr").split(",")));
		email.setBody(rs.getString("Body"));
		email.setSubject(rs.getString("Subject"));
		email.setTimeAdded(rs.getTimestamp("AddedDate"));
		return email;
	}

}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.LOINCbean;

/**
 * A loader for LOINCBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class LOINCBeanLoader implements BeanLoader<LOINCbean> {
	
	public List<LOINCbean> loadList(ResultSet rs) throws SQLException {
		ArrayList<LOINCbean> list = new ArrayList<LOINCbean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public LOINCbean loadSingle(ResultSet rs) throws SQLException {
		LOINCbean LOINC = new LOINCbean();
		LOINC.setLabProcedureCode(rs.getString("LaboratoryProcedureCode"));
		LOINC.setComponent(rs.getString("Component"));
		LOINC.setKindOfProperty(rs.getString("KindOfProperty"));
		LOINC.setTimeAspect(rs.getString("TimeAspect"));
		LOINC.setSystem(rs.getString("System"));
		LOINC.setScaleType(rs.getString("ScaleType"));
		LOINC.setMethodType(rs.getString("MethodType"));
		return LOINC;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, LOINCbean bean) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}

}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;

/**
 * A loader for OfficeVisitBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class OfficeVisitLoader implements BeanLoader<OfficeVisitBean> {
	public List<OfficeVisitBean> loadList(ResultSet rs) throws SQLException {
		List<OfficeVisitBean> list = new ArrayList<OfficeVisitBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public OfficeVisitBean loadSingle(ResultSet rs) throws SQLException {
		OfficeVisitBean ov = new OfficeVisitBean(rs.getInt("ID"));
		ov.setHcpID(rs.getLong("HCPID"));
		ov.setNotes(rs.getString("Notes"));
		ov.setPatientID(rs.getLong("PatientID"));
		ov.setHospitalID(rs.getString("HospitalID"));
		ov.setVisitDateStr(new SimpleDateFormat("MM/dd/yyyy").format(new Date(rs.getDate("VisitDate").getTime())));

		return ov;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, OfficeVisitBean p) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

/**
 * This interface helps enforce the paradigm of what should be contained in a loader.
 * 
 * The generic type <T> specifies the type of bean that the loader is responsible for extacting from
 * a result set.
 * 
 * @param <T> A type for the bean that will be loaded with this class.
 */
public interface BeanLoader<T> {
	/**
	 * Loads a list of the bean of type T from a result set.  Typically makes iterated calls
	 * to loadSingle.
	 * @param rs The java.sql.ResultSet we are extracting.
	 * @return A java.util.List<T> where T is the type for this loader.
	 * @throws SQLException
	 */
	public List<T> loadList(ResultSet rs) throws SQLException;

	/**
	 * Contains the instructions for mapping the rows in this java.sql.ResultSet into
	 * beans of type <T>.
	 * @param rs The java.sql.ResultSet to be loaded.
	 * @return A Bean of type T containing the loaded information, typically of the first (or next) item in the result set.
	 * @throws SQLException
	 */
	public T loadSingle(ResultSet rs) throws SQLException;

	/**
	 * Used for an insert or update, this method contains the instructions for mapping the fields within
	 * a bean of type T into a prepared statement which modifies the appropriate table.
	 * @param ps The prepared statement to be loaded.
	 * @param bean The bean containing the data to be placed.
	 * @return A prepared statement with the appropriately loaded parameters.
	 * @throws SQLException
	 */
	public PreparedStatement loadParameters(PreparedStatement ps, T bean) throws SQLException;
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.beans.OperationalProfile;
import edu.ncsu.csc.itrust.enums.TransactionType;

/**
 * A loader for the operational profile.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class OperationalProfileLoader implements BeanLoader<OperationalProfile> {
	public List<OperationalProfile> loadList(ResultSet rs) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}

	public PreparedStatement loadParameters(PreparedStatement ps, OperationalProfile bean)
			throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}

	public OperationalProfile loadSingle(ResultSet rs) throws SQLException {
		OperationalProfile op = new OperationalProfile();
		int grandTotal = 0;
		int grandPatient = 0;
		int grandPersonnel = 0;
		while (rs.next()) {
			TransactionType type = TransactionType.parse(rs.getInt("TransactionCode"));
			int totalCount = rs.getInt("TotalCount");
			int patientCount = rs.getInt("PatientCount");
			int personnelCount = rs.getInt("PersonnelCount");
			op.getTotalCount().put(type, totalCount);
			op.getPatientCount().put(type, patientCount);
			op.getPersonnelCount().put(type, personnelCount);
			grandTotal += totalCount;
			grandPatient += patientCount;
			grandPersonnel += personnelCount;
		}
		op.setNumTotalTransactions(grandTotal);
		op.setNumPatientTransactions(grandPatient);
		op.setNumPersonnelTransactions(grandPersonnel);
		return op;
	}
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.ApptBean;

public class ApptBeanLoader implements BeanLoader<ApptBean> {

	public List<ApptBean> loadList(ResultSet rs) throws SQLException {
		List<ApptBean> list = new ArrayList<ApptBean>();
		while (rs.next())
			list.add(loadSingle(rs));
		return list;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, ApptBean bean) throws SQLException {
		ps.setString(1, bean.getApptType());
		ps.setLong(2, bean.getPatient());
		ps.setLong(3, bean.getHcp());
		ps.setTimestamp(4, bean.getDate());
		ps.setString(5, bean.getComment());
		return ps;
	}

	public ApptBean loadSingle(ResultSet rs) throws SQLException {
		ApptBean bean = new ApptBean();
		bean.setApptType(rs.getString("appt_type"));
		bean.setPatient(rs.getLong("patient_id"));
		bean.setHcp(rs.getLong("doctor_id"));
		bean.setDate(rs.getTimestamp("sched_date"));
		bean.setComment(rs.getString("comment"));
		return bean;
	}

}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.HealthRecord;

/**
 * A loader for HealthRecords.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class HealthRecordsBeanLoader implements BeanLoader<HealthRecord> {
	public List<HealthRecord> loadList(ResultSet rs) throws SQLException {
		ArrayList<HealthRecord> list = new ArrayList<HealthRecord>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, HealthRecord bean) throws SQLException {
		int i = 1;
		ps.setLong(i++, bean.getPatientID());
		ps.setDouble(i++, bean.getHeight());
		ps.setDouble(i++, bean.getWeight());
		ps.setInt(i++, bean.isSmoker() ? 1 : 0);
		ps.setInt(i++, bean.getBloodPressureN());
		ps.setInt(i++, bean.getBloodPressureD());
		ps.setInt(i++, bean.getCholesterolHDL());
		ps.setInt(i++, bean.getCholesterolLDL());
		ps.setInt(i++, bean.getCholesterolTri());
		ps.setLong(i++, bean.getPersonnelID());
		return ps;
	}

	public HealthRecord loadSingle(ResultSet rs) throws SQLException {
		HealthRecord hr = new HealthRecord();
		hr.setBloodPressureN(rs.getInt("BloodPressureN"));
		hr.setBloodPressureD(rs.getInt("BloodPressureD"));
		hr.setCholesterolHDL(rs.getInt("CholesterolHDL"));
		hr.setCholesterolLDL(rs.getInt("CholesterolLDL"));
		hr.setCholesterolTri(rs.getInt("CholesterolTri"));
		hr.setDateRecorded(rs.getTimestamp("AsOfDate"));
		hr.setSmoker(rs.getInt("Smoker") == 1);
		hr.setHeight(rs.getDouble("Height"));
		hr.setWeight(rs.getDouble("Weight"));
		hr.setPersonnelID(rs.getLong("HCPID"));
		hr.setPatientID(rs.getLong("PatientID"));
		return hr;
	}
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.HospitalBean;

/**
 * A loader for HospitalBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */

public class HospitalBeanLoader implements BeanLoader<HospitalBean> {
	public List<HospitalBean> loadList(ResultSet rs) throws SQLException {
		ArrayList<HospitalBean> list = new ArrayList<HospitalBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public HospitalBean loadSingle(ResultSet rs) throws SQLException {
		// HospitalBean hosp = new HospitalBean();
		HospitalBean hosp = new HospitalBean(rs.getString("HospitalID"), rs.getString("HospitalName"));
		return hosp;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, HospitalBean bean) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.beans.SurveyBean;


/**
 * A loader for SurveyBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class SurveyLoader implements BeanLoader<SurveyBean>{

	public List<SurveyBean> loadList(ResultSet rs) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}

	public PreparedStatement loadParameters(PreparedStatement ps, SurveyBean bean) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}

	public SurveyBean loadSingle(ResultSet rs) throws SQLException {
		SurveyBean survey = new SurveyBean();
		survey.setVisitID(rs.getLong("VisitID"));
		survey.setSurveyDate(rs.getTimestamp("SurveyDate"));
		survey.setExamRoomMinutes(rs.getInt("ExamRoomMinutes"));
		survey.setWaitingRoomMinutes(rs.getInt("WaitingRoomMinutes"));
		survey.setTreatmentSatisfaction(rs.getInt("TreatmentSatisfaction"));
		survey.setVisitSatisfaction(rs.getInt("VisitSatisfaction"));

		return survey;
	}

}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.TransactionBean;
import edu.ncsu.csc.itrust.enums.TransactionType;

/**
 * A loader for TransactionBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class TransactionBeanLoader implements BeanLoader<TransactionBean> {

	public List<TransactionBean> loadList(ResultSet rs) throws SQLException {
		List<TransactionBean> list = new ArrayList<TransactionBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, TransactionBean bean) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}

	public TransactionBean loadSingle(ResultSet rs) throws SQLException {
		TransactionBean t = new TransactionBean();
		t.setAddedInfo(rs.getString("addedInfo"));
		t.setLoggedInMID(rs.getLong("loggedInMID"));
		t.setSecondaryMID(rs.getLong("secondaryMID"));
		t.setTimeLogged(rs.getTimestamp("timeLogged"));
		t.setTransactionType(TransactionType.parse(rs.getInt("transactionCode")));
		t.setTransactionID(rs.getLong("transactionID"));
		return t;
	}

}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.SurveyResultBean;
/**
 * A loader for SurveyResultBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class SurveyResultBeanLoader implements BeanLoader<SurveyResultBean> {

	public List<SurveyResultBean> loadList(ResultSet rs) throws SQLException {
		ArrayList<SurveyResultBean> list = new ArrayList<SurveyResultBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, SurveyResultBean bean) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}

	public SurveyResultBean loadSingle(ResultSet rs) throws SQLException {
		SurveyResultBean surveyResult = new SurveyResultBean();
		surveyResult.setHCPMID(rs.getLong("mid"));
		surveyResult.setAvgExamRoomMinutes(rs.getFloat("AvgExamRoomMinutes"));
		surveyResult.setAvgTreatmentSatisfaction(rs.getFloat("AvgTreatmentSatisfation"));
		surveyResult.setAvgVisitSatisfaction(rs.getFloat("AvgVisitSatisfaction"));
		surveyResult.setAvgWaitingRoomMinutes(rs.getFloat("AvgWaitingRoomMinutes"));
		surveyResult.setHCPaddress1(rs.getString("address1"));
		surveyResult.setHCPaddress2(rs.getString("address2"));
		surveyResult.setHCPcity(rs.getString("city"));
		surveyResult.setHCPstate(rs.getString("state"));
		surveyResult.setHCPzip(rs.getString("zip"));
		surveyResult.setHCPhospital(rs.getString("hospitalID"));
		surveyResult.setHCPFirstName(rs.getString("firstName"));
		surveyResult.setHCPLastName(rs.getString("lastName"));
		surveyResult.setHCPspecialty(rs.getString("specialty"));
		surveyResult.setPercentSatisfactionResults(rs.getFloat("PercentSatisfactionResults"));
		
		return surveyResult;
	}

}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.PatientBean;

/**
 * A loader for PatientBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class PatientLoader implements BeanLoader<PatientBean> {
	public List<PatientBean> loadList(ResultSet rs) throws SQLException {
		List<PatientBean> list = new ArrayList<PatientBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public PatientBean loadSingle(ResultSet rs) throws SQLException {
		PatientBean p = new PatientBean();
		p.setMID(rs.getInt("MID"));
		p.setFirstName(rs.getString("firstName"));
		p.setLastName(rs.getString("LastName"));
		Date dateOfBirth = rs.getDate("DateOfBirth");
		if (dateOfBirth != null)
			p.setDateOfBirthStr(new SimpleDateFormat("MM/dd/yyyy").format(dateOfBirth));
		Date dateOfDeath = rs.getDate("DateOfDeath");
		if (dateOfDeath != null)
			p.setDateOfDeathStr(new SimpleDateFormat("MM/dd/yyyy").format(dateOfDeath));
		p.setCauseOfDeath(rs.getString("CauseOfDeath"));
		p.setEmail(rs.getString("Email"));
		p.setStreetAddress1(rs.getString("address1"));
		p.setStreetAddress2(rs.getString("address2"));
		p.setCity(rs.getString("City"));
		p.setState(rs.getString("State"));
		p.setZip1((rs.getString("Zip1")));
		p.setZip2((rs.getString("Zip2")));
		p.setPhone1((rs.getString("phone1")));
		p.setPhone2((rs.getString("phone2")));
		p.setPhone3((rs.getString("phone3")));
		p.setEmergencyName(rs.getString("eName"));
		p.setEmergencyPhone1(rs.getString("ePhone1"));
		p.setEmergencyPhone2(rs.getString("ePhone2"));
		p.setEmergencyPhone3(rs.getString("ePhone3"));
		p.setIcName(rs.getString("icName"));
		p.setIcAddress1(rs.getString("icAddress1"));
		p.setIcAddress2(rs.getString("icAddress2"));
		p.setIcCity(rs.getString("icCity"));
		p.setIcState(rs.getString("icState"));
		p.setIcZip1(rs.getString("icZip1"));
		p.setIcZip2(rs.getString("icZip2"));
		p.setIcPhone1(rs.getString("icPhone1"));
		p.setIcPhone2(rs.getString("icPhone2"));
		p.setIcPhone3(rs.getString("icPhone3"));
		p.setIcID(rs.getString("icID"));
		p.setMotherMID(rs.getString("MotherMID"));
		p.setFatherMID(rs.getString("FatherMID"));
		p.setBloodTypeStr(rs.getString("BloodType"));
		p.setEthnicityStr(rs.getString("Ethnicity"));
		p.setGenderStr(rs.getString("Gender"));
		p.setTopicalNotes(rs.getString("TopicalNotes"));
		p.setCreditCardType(rs.getString("CreditCardType"));
		p.setCreditCardNumber(rs.getString("CreditCardNumber"));
		p.setMessageFilter(rs.getString("MessageFilter"));
		return p;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, PatientBean p) throws SQLException {
		int i = 1;
		ps.setString(i++, p.getFirstName());
		ps.setString(i++, p.getLastName());
		ps.setString(i++, p.getEmail());
		// ps.setString(i++, p.getSecurityQuestion());
		// ps.setString(i++, p.getSecurityAnswer());
		ps.setString(i++, p.getStreetAddress1());
		ps.setString(i++, p.getStreetAddress2());
		ps.setString(i++, p.getCity());
		ps.setString(i++, p.getState());
		ps.setString(i++, p.getZip1());
		ps.setString(i++, p.getZip2());
		ps.setString(i++, p.getPhone1());
		ps.setString(i++, p.getPhone2());
		ps.setString(i++, p.getPhone3());
		ps.setString(i++, p.getEmergencyName());
		ps.setString(i++, p.getEmergencyPhone1());
		ps.setString(i++, p.getEmergencyPhone2());
		ps.setString(i++, p.getEmergencyPhone3());
		ps.setString(i++, p.getIcName());
		ps.setString(i++, p.getIcAddress1());
		ps.setString(i++, p.getIcAddress2());
		ps.setString(i++, p.getIcCity());
		ps.setString(i++, p.getIcState());
		ps.setString(i++, p.getIcZip1());
		ps.setString(i++, p.getIcZip2());
		ps.setString(i++, p.getIcPhone1());
		ps.setString(i++, p.getIcPhone2());
		ps.setString(i++, p.getIcPhone3());
		ps.setString(i++, p.getIcID());
		Date date = null;
		try {
			date = new java.sql.Date(new SimpleDateFormat("MM/dd/yyyy").parse(p.getDateOfBirthStr())
					.getTime());
		} catch (ParseException e) {
			e.printStackTrace();
		}
		ps.setDate(i++, date);
		date = null;
		try {
			date = new java.sql.Date(new SimpleDateFormat("MM/dd/yyyy").parse(p.getDateOfDeathStr())
					.getTime());
		} catch (ParseException e) {
			if ("".equals(p.getDateOfDeathStr()))
				date = null;
			else
				e.printStackTrace();
		}
		ps.setDate(i++, date);
		ps.setString(i++, p.getCauseOfDeath());
		ps.setString(i++, p.getMotherMID());
		ps.setString(i++, p.getFatherMID());
		ps.setString(i++, p.getBloodType().getName());
		ps.setString(i++, p.getEthnicity().getName());
		ps.setString(i++, p.getGender().getName());
		ps.setString(i++, p.getTopicalNotes());
		ps.setString(i++, p.getCreditCardType());
		ps.setString(i++, p.getCreditCardNumber());
		ps.setString(i++, p.getMessageFilter());
		return ps;
	}
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.ApptTypeBean;

public class ApptTypeBeanLoader implements BeanLoader<ApptTypeBean> {

	public List<ApptTypeBean> loadList(ResultSet rs) throws SQLException {
		List<ApptTypeBean> list = new ArrayList<ApptTypeBean>();
		while (rs.next())
			list.add(loadSingle(rs));
		return list;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, ApptTypeBean apptType) throws SQLException {
		ps.setString(1, apptType.getName());
		ps.setInt(2, apptType.getDuration());
		return ps;
	}

	public ApptTypeBean loadSingle(ResultSet rs) throws SQLException {
		ApptTypeBean apptType = new ApptTypeBean();
		apptType.setName(rs.getString("appt_type"));
		apptType.setDuration(rs.getInt("duration"));
		return apptType;
	}

}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;

/**
 * A loader for PrescriptionBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class PrescriptionBeanLoader implements BeanLoader<PrescriptionBean> {
	private MedicationBeanLoader medLoader;

	public PrescriptionBeanLoader() {
		medLoader = new MedicationBeanLoader();
	}

	public List<PrescriptionBean> loadList(ResultSet rs) throws SQLException {
		ArrayList<PrescriptionBean> list = new ArrayList<PrescriptionBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public PrescriptionBean loadSingle(ResultSet rs) throws SQLException {
		PrescriptionBean pres = new PrescriptionBean();
		pres.setId(rs.getLong("ID"));
		pres.setVisitID((long) rs.getInt("VisitID"));
		pres.setStartDateStr(new SimpleDateFormat("MM/dd/yyyy").format(new java.util.Date(rs.getDate(
				"StartDate").getTime())));
		pres.setEndDateStr(new SimpleDateFormat("MM/dd/yyyy").format(new java.util.Date(rs.getDate("EndDate")
				.getTime())));
		pres.setDosage(rs.getInt("Dosage"));
		pres.setInstructions(rs.getString("Instructions"));
		pres.setMedication(medLoader.loadSingle(rs));
		return pres;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, PrescriptionBean pres) throws SQLException {
		ps.setLong(1, pres.getVisitID());
		ps.setString(2, pres.getMedication().getNDCode());
		ps.setDate(3, new java.sql.Date(pres.getStartDate().getTime()));
		ps.setDate(4, new java.sql.Date(pres.getEndDate().getTime()));
		ps.setInt(5, pres.getDosage());
		ps.setString(6, pres.getInstructions());
		return ps;
	}
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.enums.Role;

/**
 * A loader for PersonnelBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class PersonnelLoader implements BeanLoader<PersonnelBean> {
	public List<PersonnelBean> loadList(ResultSet rs) throws SQLException {
		List<PersonnelBean> list = new ArrayList<PersonnelBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public PersonnelBean loadSingle(ResultSet rs) throws SQLException {
		PersonnelBean p = new PersonnelBean();
		p.setMID(rs.getLong("MID"));
		p.setAMID(rs.getLong("amid"));
		p.setRole(Role.parse(rs.getString("role")));
		p.setLastName(rs.getString("lastName"));
		p.setFirstName(rs.getString("firstName"));
		p.setPhone1(rs.getString("phone1"));
		p.setPhone2(rs.getString("phone2"));
		p.setPhone3(rs.getString("phone3"));
		p.setStreetAddress1(rs.getString("address1"));
		p.setStreetAddress2(rs.getString("address2"));
		p.setCity(rs.getString("city"));
		p.setState(rs.getString("state"));
		p.setZip1((rs.getString("zip1")));
		p.setZip2((rs.getString("zip2")));
		p.setEmail(rs.getString("email"));
		p.setSpecialty(rs.getString("specialty"));
		p.setMessageFilter(rs.getString("MessageFilter"));
		return p;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, PersonnelBean p) throws SQLException {
		int i = 1;
		ps.setLong(i++, p.getAMID());
		ps.setString(i++, p.getFirstName());
		ps.setString(i++, p.getLastName());
		ps.setString(i++, p.getPhone1());
		ps.setString(i++, p.getPhone2());
		ps.setString(i++, p.getPhone3());
		ps.setString(i++, p.getStreetAddress1());
		ps.setString(i++, p.getStreetAddress2());
		ps.setString(i++, p.getCity());
		ps.setString(i++, p.getState());
		ps.setString(i++, p.getZip());
		ps.setString(i++, p.getZip1());
		ps.setString(i++, p.getZip2());
		//ps.setString(i++, p.getSpecialty());
		ps.setString(i++, p.getEmail());
		ps.setString(i++, p.getMessageFilter());
		return ps;
	}
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.PrescriptionReportBean;

/**
 * A loader for PrescriptionReportBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class PrescriptionReportBeanLoader implements BeanLoader<PrescriptionReportBean> {
	private PrescriptionBeanLoader presLoader;
	private OfficeVisitLoader ovLoader;

	public PrescriptionReportBeanLoader() {
		ovLoader = new OfficeVisitLoader();
		presLoader = new PrescriptionBeanLoader();
	}

	public List<PrescriptionReportBean> loadList(ResultSet rs) throws SQLException {
		ArrayList<PrescriptionReportBean> list = new ArrayList<PrescriptionReportBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public PrescriptionReportBean loadSingle(ResultSet rs) throws SQLException {
		PrescriptionReportBean pres = new PrescriptionReportBean();
		pres.setOfficeVisit(ovLoader.loadSingle(rs));
		pres.setPrescription(presLoader.loadSingle(rs));
		return pres;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, PrescriptionReportBean pres)
			throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm;

/**
 * A loader for VisitReminderReturnForms.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class VisitReminderReturnFormLoader implements BeanLoader<VisitReminderReturnForm> {

	public List<VisitReminderReturnForm> loadList(ResultSet rs) throws SQLException {
		ArrayList<VisitReminderReturnForm> list = new ArrayList<VisitReminderReturnForm>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public VisitReminderReturnForm loadSingle(ResultSet rs) throws SQLException {
		int i = 0;
		return new VisitReminderReturnForm(rs.getLong(++i),// hcpid
				rs.getLong(++i),// patient ID
				rs.getString(++i),// last name
				rs.getString(++i),// first
				rs.getString(++i),// phone1
				rs.getString(++i),// phone2
				rs.getString(++i));// ,// phone3
		// "diagnosis: " + rs.getString(++i),
		// "last visit: " + rs.getString(++i));
	}

	public PreparedStatement loadParameters(PreparedStatement ps, VisitReminderReturnForm bean)
			throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}

}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.FamilyMemberBean;

/**
 * A loader for FamilyMemberBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class FamilyBeanLoader implements BeanLoader<FamilyMemberBean> {
	private String relation;

	public FamilyBeanLoader(String relation) {
		this.relation = relation;
	}

	public List<FamilyMemberBean> loadList(ResultSet rs) throws SQLException {
		ArrayList<FamilyMemberBean> list = new ArrayList<FamilyMemberBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, FamilyMemberBean bean) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}

	public FamilyMemberBean loadSingle(ResultSet rs) throws SQLException {
		FamilyMemberBean fam = new FamilyMemberBean();
		fam.setRelation(relation);
		fam.setFirstName(rs.getString("FirstName"));
		fam.setLastName(rs.getString("LastName"));
		fam.setMid(rs.getInt("MID"));
		return fam;
	}
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.AllergyBean;

/**
 * A loader for AllergyBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class AllergyBeanLoader implements BeanLoader<AllergyBean> {

	public List<AllergyBean> loadList(ResultSet rs) throws SQLException {
		ArrayList<AllergyBean> list = new ArrayList<AllergyBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public AllergyBean loadSingle(ResultSet rs) throws SQLException {
		AllergyBean allergy = new AllergyBean();
		allergy.setId(rs.getLong("ID"));
		allergy.setPatientID(rs.getLong("PatientID"));
		allergy.setDescription(rs.getString("Description"));
		allergy.setFirstFound(rs.getTimestamp("FirstFound"));
		return allergy;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, AllergyBean bean) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}

}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.ReferralBean;
import edu.ncsu.csc.itrust.beans.ReferralBean.ReferralStatus;

/**
 * A loader for ReferralBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class ReferralBeanLoader implements BeanLoader<ReferralBean> {

	public ReferralBeanLoader() {

	}

	public List<ReferralBean> loadList(ResultSet rs) throws SQLException {
		ArrayList<ReferralBean> list = new ArrayList<ReferralBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public ReferralBean loadSingle(ResultSet rs) throws SQLException {
		ReferralBean ref = new ReferralBean();
		// ERIC: fixed to correct for the mysql database bug plaguing java 1.5
		ref.setId((long) rs.getInt("id"));
		//ref.setId(rs.getLong("id"));
		ref.setSenderID(rs.getLong("SenderID"));
		ref.setReceiverID(rs.getLong("ReceiverID"));
		ref.setPatientID((long) rs.getInt("PatientID"));
		ref.setReferralDetails(rs.getString("ReferralDetails"));
		ref.setConsultationDetails(rs.getString("ConsultationDetails"));
		
		if (rs.getString("Status").equals("Pending")) 
			ref.setStatus(ReferralStatus.Pending);
		else if (rs.getString("Status").equals("Finished")) 
			ref.setStatus(ReferralStatus.Finished);
		else 
			ref.setStatus(ReferralStatus.Declined);
		
		
		return ref;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, ReferralBean ref) throws SQLException {
		ps.setLong(1, ref.getPatientID());
		ps.setLong(2, ref.getSenderID());
		ps.setLong(3, ref.getReceiverID());
		ps.setString(4, ref.getReferralDetails());
		ps.setString(5, ref.getConsultationDetails());
		ps.setString(6, ref.getStatus().toString());
		return ps;
	}
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.MedicationBean;

/**
 * A loader for MedicationBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class MedicationBeanLoader implements BeanLoader<MedicationBean> {
	public MedicationBeanLoader() {
	}

	public List<MedicationBean> loadList(ResultSet rs) throws SQLException {
		ArrayList<MedicationBean> list = new ArrayList<MedicationBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public MedicationBean loadSingle(ResultSet rs) throws SQLException {
		// MedicationBean med = new MedicationBean();
		MedicationBean med = new MedicationBean(rs.getString("Code"));
		med.setDescription(rs.getString("Description"));
		return med;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, MedicationBean bean) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.MessageBean;

/**
 * A loader for MessageBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class MessageBeanLoader implements BeanLoader<MessageBean> {

	public List<MessageBean> loadList(ResultSet rs) throws SQLException {
		List<MessageBean> list = new ArrayList<MessageBean>();
		while (rs.next())
			list.add(loadSingle(rs));
		return list;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, MessageBean message) throws SQLException {
		ps.setLong(1, message.getFrom());
		ps.setLong(2, message.getTo());
		ps.setString(3, message.getBody());
		ps.setString(4, message.getSubject());
		ps.setInt(5, message.getRead());
		if (message.getParentMessageId() != 0L) {
				ps.setLong(6, message.getParentMessageId());
		}
		return ps;
	}

	public MessageBean loadSingle(ResultSet rs) throws SQLException {
		MessageBean message = new MessageBean();
		message.setMessageId(rs.getLong("message_id"));
		message.setFrom(rs.getLong("from_id"));
		message.setTo(rs.getLong("to_id"));
		message.setSubject(rs.getString("subject"));
		message.setBody(rs.getString("message"));
		message.setSentDate(rs.getTimestamp("sent_date"));
		message.setRead(rs.getInt("been_read"));
		message.setParentMessageId(rs.getLong("parent_msg_id"));
		return message;
	}

}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;

/**
 * A loader for DiagnosisBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader} 
 */

public class DiagnosisBeanLoader implements BeanLoader<DiagnosisBean> {
	private boolean loadOVDiagnosisID = false;

	public DiagnosisBeanLoader() {
		loadOVDiagnosisID = false;
	}

	public DiagnosisBeanLoader(boolean loadOVDiagnosisID) {
		this.loadOVDiagnosisID = loadOVDiagnosisID;
	}

	public List<DiagnosisBean> loadList(ResultSet rs) throws SQLException {
		ArrayList<DiagnosisBean> list = new ArrayList<DiagnosisBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public DiagnosisBean loadSingle(ResultSet rs) throws SQLException {
		
		DiagnosisBean diag = new DiagnosisBean(rs.getString("Code"), rs.getString("Description"), rs.getString("Chronic"));
		if (loadOVDiagnosisID) {
			diag.setOvDiagnosisID(rs.getInt("ID"));
			diag.setVisitID(rs.getLong("VisitID"));
		}
		return diag;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, DiagnosisBean bean) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.ProcedureBean;

/**
 * A loader for ProcedureBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class ProcedureBeanLoader implements BeanLoader<ProcedureBean> {
	private boolean loadOVProcedureID;

	public ProcedureBeanLoader() {
		this.loadOVProcedureID = false;
	}

	public ProcedureBeanLoader(boolean loadOVProcedureID) {
		this.loadOVProcedureID = loadOVProcedureID;
	}

	public List<ProcedureBean> loadList(ResultSet rs) throws SQLException {
		ArrayList<ProcedureBean> list = new ArrayList<ProcedureBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public ProcedureBean loadSingle(ResultSet rs) throws SQLException {
		ProcedureBean procedure = new ProcedureBean(rs.getString("Code"));
		procedure.setDescription(rs.getString("Description"));
		procedure.setAttribute(rs.getString("Attribute"));
		if (loadOVProcedureID) {
			procedure.setOvProcedureID(rs.getLong("ID"));
			procedure.setDate(rs.getDate("visitDate"));
		}
		
		return procedure;

	}

	public PreparedStatement loadParameters(PreparedStatement ps, ProcedureBean bean) throws SQLException {
		ps.setString(1, bean.getDescription());
		return ps;
	}
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.DrugInteractionBean;

/**
 * A loader for MedicationBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class DrugInteractionBeanLoader implements BeanLoader<DrugInteractionBean> {
	public DrugInteractionBeanLoader() {
	}

	public List<DrugInteractionBean> loadList(ResultSet rs) throws SQLException {
		ArrayList<DrugInteractionBean> list = new ArrayList<DrugInteractionBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public DrugInteractionBean loadSingle(ResultSet rs) throws SQLException {
		// MedicationBean med = new MedicationBean();
		DrugInteractionBean drugIt = new DrugInteractionBean();
		drugIt.setDescription(rs.getString("Description"));
		drugIt.setFirstDrug(rs.getString("FirstDrug"));
		drugIt.setSecondDrug(rs.getString("SecondDrug"));
		return drugIt;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, DrugInteractionBean bean) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}
}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.ReportRequestBean;


/**
 * A loader for ReportRequestBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class ReportRequestBeanLoader implements BeanLoader<ReportRequestBean> {

	public List<ReportRequestBean> loadList(ResultSet rs) throws SQLException {
		ArrayList<ReportRequestBean> list = new ArrayList<ReportRequestBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public ReportRequestBean loadSingle(ResultSet rs) throws SQLException {
		ReportRequestBean b = new ReportRequestBean();
		b.setID(rs.getLong("ID"));
		b.setRequesterMID(rs.getLong("RequesterMID"));
		b.setPatientMID(rs.getLong("PatientMID"));
		b.setRequestedDate(rs.getTimestamp("RequestedDate"));
		b.setViewedDate(rs.getTimestamp("ViewedDate"));
		b.setStatus(rs.getString("Status"));
		return b;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, ReportRequestBean bean) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}


}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;

/**
 * A loader for RemoteMonitoringDataBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class RemoteMonitoringDataBeanLoader implements BeanLoader<RemoteMonitoringDataBean> {

	public List<RemoteMonitoringDataBean> loadList(ResultSet rs) throws SQLException {
		List<RemoteMonitoringDataBean> list = new ArrayList<RemoteMonitoringDataBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, RemoteMonitoringDataBean bean) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}

	public RemoteMonitoringDataBean loadSingle(ResultSet rs) throws SQLException {
		RemoteMonitoringDataBean d = new RemoteMonitoringDataBean();
		d.setLoggedInMID(rs.getLong("PatientID"));
		d.setSystolicBloodPressure(rs.getInt("systolicBloodPressure"));
		d.setDiastolicBloodPressure(rs.getInt("diastolicBloodPressure"));
		d.setGlucoseLevel(rs.getInt("glucoseLevel"));
		d.setTime(rs.getTimestamp("timeLogged"));
		d.setReporterRole(rs.getString("ReporterRole"));
		d.setReporterMID(rs.getLong("ReporterID"));
		return d;
	}

}

package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.AdverseEventBean;

/**
 * A loader for AdverseEventBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class AdverseEventBeanLoader implements BeanLoader<AdverseEventBean> {

	public List<AdverseEventBean> loadList(ResultSet rs) throws SQLException {
		ArrayList<AdverseEventBean> list = new ArrayList<AdverseEventBean>();
		while (rs.next()) {
			list.add(loadSingle(rs));
		}
		return list;
	}

	public AdverseEventBean loadSingle(ResultSet rs) throws SQLException {
		AdverseEventBean adverseEvent = new AdverseEventBean();
		adverseEvent.setMID(rs.getString("PatientMID"));
		adverseEvent.setDrug(rs.getString("PresImmu"));
		adverseEvent.setDescription(rs.getString("Comment"));
		adverseEvent.setCode(rs.getString("Code"));
		adverseEvent.setDate(rs.getTimestamp("TimeLogged").toString());
		adverseEvent.setId(rs.getInt("id"));
		adverseEvent.setStatus(rs.getString("Status"));
		return adverseEvent;
	}

	public PreparedStatement loadParameters(PreparedStatement ps, AdverseEventBean bean) throws SQLException {
		throw new IllegalStateException("unimplemented!");
	}

}

package edu.ncsu.csc.itrust.beans;

/**
 * A bean for storing data about a security question and answer.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class SecurityQA {

	String question, answer, confirmAnswer;

	public String getQuestion() {
		return question;
	}

	public void setQuestion(String question) {
		this.question = question;
	}

	public String getAnswer() {
		return answer;
	}

	public void setAnswer(String answer) {
		this.answer = answer;
	}

	public String getConfirmAnswer() {
		return confirmAnswer;
	}

	public void setConfirmAnswer(String confirmAnswer) {
		this.confirmAnswer = confirmAnswer;
	}

}

package edu.ncsu.csc.itrust.beans;

/**
 * A bean for storing data about Family Members.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class FamilyMemberBean {
	private long mid = 0;
	private String relation = "";
	private String firstName = "";
	private String lastName = "";

	public FamilyMemberBean() {
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getFullName() {
		return getFirstName() + " " + getLastName();
	}

	public long getMid() {
		return mid;
	}

	public void setMid(long mid) {
		this.mid = mid;
	}

	public String getRelation() {
		return relation;
	}

	public void setRelation(String relation) {
		this.relation = relation;
	}
}

package edu.ncsu.csc.itrust.beans;

/**
 * A bean for storing data about a message from one user to another.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class DrugInteractionBean {
	String firstDrug;
	String secondDrug;
	String description;
	/**
	 * @return the firstDrug
	 */
	public String getFirstDrug() {
		return firstDrug;
	}
	/**
	 * @param firstDrug the firstDrug to set
	 */
	public void setFirstDrug(String firstDrug) {
		this.firstDrug = firstDrug;
	}
	/**
	 * @return the secondDrug
	 */
	public String getSecondDrug() {
		return secondDrug;
	}
	/**
	 * @param secondDrug the secondDrug to set
	 */
	public void setSecondDrug(String secondDrug) {
		this.secondDrug = secondDrug;
	}
	/**
	 * @return the description
	 */
	public String getDescription() {
		return description;
	}
	/**
	 * @param description the description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}
	
	
	
	

}

package edu.ncsu.csc.itrust.beans;

/**
 * A medication is the same thing as an ND code - it's like "Aspirin". A medication is not associated with an
 * office visit; that's a "prescription". See {@link PrescriptionBean}
 * 
 * @author Andy Meneely
 * 
 */
public class MedicationBean {
	private String NDCode = "";
	private String description = "";

	public MedicationBean() {
	}

	public MedicationBean(String code) {
		NDCode = code;
	}

	public MedicationBean(String code, String description) {
		NDCode = code;
		this.description = description;
	}

	/**
	 * Gets the ND Code for this procedure
	 * 
	 * @return The ND Code for this procedure
	 */
	public String getNDCode() {
		return NDCode;
	}

	public void setNDCode(String code) {
		NDCode = code;
	}

	/**
	 * Gets the ND Description for this procedure
	 * 
	 * @return The ND Description for this procedure
	 */
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getNDCodeFormatted() {
		String code = getNDCode();
		if (code.length() > 5)
			return code.substring(0, 5) + "-" + code.substring(5);
		else
			return code;
	}

	@Override
	public boolean equals(Object other) {
		return (other != null) && this.getClass().equals(other.getClass())
				&& this.equals((MedicationBean) other);
	}

	public int hashCode() {
		assert false : "hashCode not designed";
		return 42; // any arbitrary constant will do
	}

	private boolean equals(MedicationBean other) {
		return description.equals(other.description) && NDCode.equals(other.NDCode);
	}
}

package edu.ncsu.csc.itrust.beans;

import edu.ncsu.csc.itrust.enums.Role;
import java.io.Serializable;
import java.util.List;

/**
 * A bean for storing data about a hospital employee.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class PersonnelBean implements Serializable {
	private static final long serialVersionUID = 6575544592646001050L;
	
	private long MID = 0;
	private long AMID = 0;
	private Role role;
	private String firstName = "";
	private String lastName = "";
	private String password = "";
	private String confirmPassword = "";
	private String securityQuestion = "";
	private String securityAnswer = "";
	private String streetAddress1 = "";
	private String streetAddress2 = "";
	private String city = "";
	private String state = "";
	private String zip1 = "";
	private String zip2 = "";
	private String phone1 = "";
	private String phone2 = "";
	private String phone3 = "";
	private String email = "";
	private String specialty = "";
	private String messageFilter= "";

	public String getMessageFilter() {
		return messageFilter;
	}

	public void setMessageFilter(String messageFilter) {
		this.messageFilter = messageFilter;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public long getAMID() {
		return AMID;
	}

	public void setAMID(long amid) {
		AMID = amid;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public String getConfirmPassword() {
		return confirmPassword;
	}

	public void setConfirmPassword(String confirmPassword) {
		this.confirmPassword = confirmPassword;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getFullName() {
		return getFirstName() + " " + getLastName();
	}

	public long getMID() {
		return MID;
	}

	public void setMID(long mid) {
		MID = mid;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getPhone() {
		return phone1 + "-" + phone2 + "-" + phone3;
	}

	public String getPhone1() {
		return phone1;
	}

	public void setPhone1(String phone1) {
		this.phone1 = phone1;
	}

	public String getPhone2() {
		return phone2;
	}

	public void setPhone2(String phone2) {
		this.phone2 = phone2;
	}

	public String getPhone3() {
		return phone3;
	}

	public void setPhone3(String phone3) {
		this.phone3 = phone3;
	}

	public Role getRole() {
		return role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	public String getSecurityAnswer() {
		return securityAnswer;
	}

	public void setSecurityAnswer(String securityAnswer) {
		this.securityAnswer = securityAnswer;
	}

	public String getSecurityQuestion() {
		return securityQuestion;
	}

	public void setSecurityQuestion(String securityQuestion) {
		this.securityQuestion = securityQuestion;
	}

	public String getState() {
		return state;
	}

	public void setState(String state) {
		this.state = state;
	}

	public String getStreetAddress1() {
		return streetAddress1;
	}

	public void setStreetAddress1(String streetAddress1) {
		this.streetAddress1 = streetAddress1;
	}

	public String getStreetAddress2() {
		return streetAddress2;
	}

	public void setStreetAddress2(String streetAddress2) {
		this.streetAddress2 = streetAddress2;
	}

	public String getZip() {
		if (getZip2() != null && !"".equals(getZip2()))
			return getZip1() + "-" + getZip2();
		else
			return getZip1();
	}

	public String getZip1() {
		return zip1;
	}

	public void setZip1(String zip1) {
		this.zip1 = zip1;
	}

	public String getZip2() {
		return zip2;
	}

	public void setZip2(String zip2) {
		this.zip2 = zip2;
	}
	
	public String getSpecialty() {
		return specialty;
	}
	
	public void setSpecialty(String specialty) {
		this.specialty = specialty;
	}
	
	/*
	public int compareTo(PersonnelBean other) {
		if (MID == other.getMID()) return 0;
		if (MID > other.getMID()) return 1;
		return -1;
	}*/
	
	public int getIndexIn(List<PersonnelBean> list) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i).MID == this.MID) return i;
		}
		return -1;
	}

}

package edu.ncsu.csc.itrust;

import java.util.Random;

/**
 * Generates a random string of characters
 * 
 * @author Andy
 * 
 */
public class RandomPassword {
	private static final Random rand = new Random();

	/**
	 * Returns a string of random characters
	 * 
	 * @return a string of random characters
	 */
	public static String getRandomPassword() {
		String str = "";
		for (int i = 0; i < 10; i++) {
			str += (char) (rand.nextInt(26) + 'a');
		}
		return str;
	}
}

package edu.ncsu.csc.itrust;

import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Sends email to users. Since we don't want to train spammers in 326, this just inserts into a database. If
 * we put this into an actual system, we would replace this class with stuff from javax.mail
 * 
 * @author Andy
 * 
 */
public class EmailUtil {
	private DAOFactory factory;

	public EmailUtil(DAOFactory factory) {
		this.factory = factory;
	}

	// DO NOT SEND REAL EMAILS!!!!!
	// Sending emails - even to a throwaway account, is a waste of bandwidth and looks very suspicious.
	// If you want to know how to send emails from Java, just Google it on your own time.
	public void sendEmail(Email email) throws DBException {
		factory.getFakeEmailDAO().sendEmailRecord(email);
	}
}

package edu.ncsu.csc.itrust.exception;

import java.io.IOException;
import java.util.List;
import javax.servlet.jsp.JspWriter;

/**
 * This exception is used specifically for when an action involves the correct
 * and proper submission of a web form.  Form Validation is handled by a series of
 * other classes, but when form validation is incorrect or incomplete, this exception
 * is thrown. 
 */
public class FormValidationException extends Exception {
	private static final long serialVersionUID = 1L;
	private ErrorList errorList;

	/**
	 * Constructor with error messages passed as a list of parameters to the method.
	 * @param errorMessages The list of error messages to be returned in the special form validation box.
	 */
	public FormValidationException(String... errorMessages) {
		errorList = new ErrorList();
		for (String msg : errorMessages) {
			errorList.addIfNotNull(msg);
		}
	}

	/**
	 * Constructor with error messages as a special ErrorList data type.
	 * @param errorList An ErrorList object which contains the list of error messages.
	 */
	public FormValidationException(ErrorList errorList) {
		this.errorList = errorList;
	}

	/**
	 * Returns the error list as a java.util.List of Strings.
	 * @return The error list
	 */
	public List<String> getErrorList() {
		return errorList.getMessageList();
	}

	/**
	 * The error message will be displayed at the top of the iTrust page as in other iTrust Exceptions.
	 */
	@Override
	public String getMessage() {
		return "This form has not been validated correctly. The following field are not properly filled in: "
				+ errorList.toString();
	}

	/**
	 * The special formatting for error messages is then kept in one place.
	 * @param out The output writer (in this case a JSPWriter) where the formatted list will go.
	 * @throws IOException If the writer is incorrect.
	 */
	public void printHTML(JspWriter out) throws IOException {
		out.print("<h2>Information not valid</h2><div class=\"errorList\">");
		for (String errorMessage : errorList) {
			out.print(errorMessage + "<br />");
		}
		out.print("</div>");
	}
}

package edu.ncsu.csc.itrust.exception;

import java.sql.SQLException;

/**
 * The reasoning behind this wrapper exception is security. When an SQL Exception gets thrown all the way back
 * to the JSP, we begin to reveal details about our database (even knowing that it's MySQL is bad!) So, we
 * make a wrapper exception with a vague description, but we also keep track of the SQL Exception for
 * debugging and testing purposes.
 * 
 * @author Andy
 * 
 */
public class DBException extends iTrustException {
	private static final long serialVersionUID = -6554118510590118376L;
	private SQLException sqlException = null;

	public DBException(SQLException e) {
		super("A database exception has occurred. Please see the log in the console for stacktrace");
		this.sqlException = e;
	}

	/**
	 * @return The SQL Exception that was responsible for this error.
	 */
	public SQLException getSQLException() {
		return sqlException;
	}

	@Override
	public String getExtendedMessage() {
		if (sqlException != null)
			return sqlException.getMessage();
		else
			return super.getExtendedMessage();
	}
}

package edu.ncsu.csc.itrust.exception;

/**
 * This error message is thrown when checking for health risk indicators and the
 * patient has had no health records entered.  It is a separate case than an iTrustException
 * because the error handling is slightly different. 
 */
public class NoHealthRecordsException extends iTrustException {

	public static final String MESSAGE = "The patient did not have any health records recorded. "
			+ "No risks can be calculated if no records exist";

	private static final long serialVersionUID = 7082694071460355325L;

	/**
	 * The default constructor, which just passes a pre-specified message to an iTrustException.
	 */
	public NoHealthRecordsException() {
		super(MESSAGE);
	}
}

package edu.ncsu.csc.itrust.exception;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * Used by the validators to create a list of error messages.
 * 
 * @author Andy
 * 
 */
public class ErrorList implements Iterable<String> {
	private List<String> errorList;

	public ErrorList() {
		errorList = new ArrayList<String>();
	}

	/**
	 * Adds a message to the list if it's not a Java null or empty string.
	 * 
	 * @param errorMessage
	 */
	public void addIfNotNull(String errorMessage) {
		if (errorMessage != null && !"".equals(errorMessage))
			errorList.add(errorMessage);
	}

	/**
	 * Returns the list of error messages
	 * 
	 * @return
	 */
	public List<String> getMessageList() {
		return errorList;
	}

	/**
	 * Returns true if the list has any errors
	 * 
	 * @return
	 */
	public boolean hasErrors() {
		return errorList.size() != 0;
	}

	@Override
	public String toString() {
		return errorList.toString();
	}

	public Iterator<String> iterator() {
		return errorList.iterator();
	}
}

package edu.ncsu.csc.itrust.exception;

/**
 * A specialized exception class for displaying iTrust error messages.
 * This exception is handled by the default iTrust exception handler.
 */
public class iTrustException extends Exception {
	private static final long serialVersionUID = 1L;
	String message = null;

	/**
	 * The typical constructor.
	 * @param message A message to be displayed to the screen.
	 */
	public iTrustException(String message) {
		this.message = message;
	}

	/**
	 * For messages which are displayed to the user. Usually, this is a very general message for security
	 * reasons.
	 */
	@Override
	public String getMessage() {
		if (message == null)
			return "An error has occurred. Please see log for details.";
		return message;
	}

	/**
	 * For exceptions which show a lot of technical detail, usually delegated to a subclass
	 * 
	 * @return
	 */
	public String getExtendedMessage() {
		return "No extended information.";
	}
}

package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.enums.Gender;

/**
 * Checks if the patient's gender matches the given at-risk one.
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class GenderFactor extends PatientRiskFactor {
	private PatientBean patient;
	private Gender gender;

	public GenderFactor(PatientBean patient, Gender gender) {
		this.patient = patient;
		this.gender = gender;
	}

	public String getDescription() {
		return "Patient is " + patient.getGender().toString().toLowerCase();
	}

	public boolean hasFactor() {
		return gender.equals(patient.getGender()) && !gender.equals(Gender.NotSpecified);
	}
}

package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Risk factor delegates to the DAO to see if a patient has ever smoked in their life
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class SmokingFactor extends PatientRiskFactor {
	private long patientID;
	private DAOFactory factory;

	public SmokingFactor(DAOFactory factory, long patientID) {
		this.factory = factory;
		this.patientID = patientID;
	}

	public String getDescription() {
		return "Patient is or was a smoker";
	}

	public boolean hasFactor() {
		try {
			return factory.getRiskDAO().hasSmoked(patientID);
		} catch (DBException e) {
			e.printStackTrace();
			return false;
		}
	}
}

package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.beans.HealthRecord;

/**
 * Checks if the patient's blood pressure is above a given threshold.
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class HypertensionFactor extends PatientRiskFactor {
	private static final int systolicThreshold = 240;
	private static final int diastolicThreshold = 120;
	private HealthRecord record;

	public HypertensionFactor(HealthRecord currentHealthRecord) {
		this.record = currentHealthRecord;
	}

	public String getDescription() {
		return "Patient has hypertension";
	}

	public boolean hasFactor() {
		return (record.getBloodPressureSystolic() > systolicThreshold)
				|| (record.getBloodPressureDiastolic() > diastolicThreshold);
	}
}

package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.beans.PatientBean;

/**
 * The risk factor associated with checking if a person is over a particular age
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * @author Andy
 */
public class AgeFactor extends PatientRiskFactor {
	private PatientBean patient;
	private int age;

	public AgeFactor(PatientBean patient, int age) {
		this.age = age;
		this.patient = patient;
	}

	public String getDescription() {
		return "Patient is over " + age;
	}

	public boolean hasFactor() {
		return patient.getAge() > age;
	}
}

package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.beans.HealthRecord;

/**
 * Checks the patient's body mass index over the given threshold
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class WeightFactor extends PatientRiskFactor {
	private HealthRecord currentHealthRecord;
	private int bmiThreshold;

	public WeightFactor(HealthRecord currentHealthRecord, int bmiThreshold) {
		this.currentHealthRecord = currentHealthRecord;
		this.bmiThreshold = bmiThreshold;
	}

	public String getDescription() {
		return "Patient's body mass index is over " + bmiThreshold;
	}

	public boolean hasFactor() {
		double bmi = currentHealthRecord.getBodyMassIndex();
		return bmi > bmiThreshold && !Double.isInfinite(bmi);
	}
}

package edu.ncsu.csc.itrust.risk.factors;

/**
 * Abstract class for risk factors, the hasRiskFactor delegates to the protected version. Caches the result in
 * case it gets checked more than once.
 * 
 * @author Andy
 * 
 */
abstract public class PatientRiskFactor {
	private Boolean hasRisk = null;

	/**
	 * @return A textual description of what the patient's status is that's causing the risk.
	 */
	abstract public String getDescription();

	/**
	 * @return A boolean indicating whether the patient has the increased risk.
	 */
	abstract protected boolean hasFactor();

	/**
	 * @return A boolean indicating whether the patient has the increased risk.
	 */
	public boolean hasRiskFactor() {
		if (hasRisk == null)
			hasRisk = hasFactor();
		return hasRisk;
	}
}

package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Checks for prior diagnoses by delegatin to the DAO
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class PriorDiagnosisFactor extends PatientRiskFactor {
	private long patientID;
	private DAOFactory factory;
	private double lowerICDCode;
	private double upperICDCode;

	public PriorDiagnosisFactor(DAOFactory factory, long patientID, double lowerICDCode, double upperICDCode) {
		this.factory = factory;
		this.patientID = patientID;
		this.lowerICDCode = lowerICDCode;
		this.upperICDCode = upperICDCode;
	}

	public String getDescription() {
		return "Patient has had related diagnoses";
	}

	public boolean hasFactor() {
		try {
			return factory.getRiskDAO().hadPriorDiagnoses(patientID, lowerICDCode, upperICDCode);
		} catch (DBException e) {
			e.printStackTrace();
			return false;
		}
	}
}

package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.beans.HealthRecord;

/**
 * Checks if cholesterol is over a given threshold for a given patient
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class CholesterolFactor extends PatientRiskFactor {
	private static final int hdlThreshold = 35;
	private static final int ldlThreshold = 240;
	private static final int triThreshold = 250;
	private HealthRecord record;

	public CholesterolFactor(HealthRecord currentHealthRecord) {
		this.record = currentHealthRecord;
	}

	public String getDescription() {
		return "Patient has bad cholesterol";
	}

	public boolean hasFactor() {
		return (record.getCholesterolHDL() < hdlThreshold) || (record.getCholesterolLDL() > ldlThreshold)
				|| (record.getCholesterolTri() > triThreshold);
	}
}

package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.enums.Ethnicity;

/**
 * Checks if the ethnicity of a patient matches the one at risk
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class EthnicityFactor extends PatientRiskFactor {
	private Ethnicity[] atRisk;
	private PatientBean patient;

	public EthnicityFactor(PatientBean patient, Ethnicity... atRisks) {
		this.atRisk = atRisks.clone();
		this.patient = patient;
	}

	public String getDescription() {
		return "Patient's ethnicity is " + patient.getEthnicity();
	}

	public boolean hasFactor() {
		for (Ethnicity ethnicity : atRisk) {
			if (patient.getEthnicity().equals(ethnicity) && !Ethnicity.NotSpecified.equals(ethnicity))
				return true;
		}
		return false;
	}
}

package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Checks if a patient has a family history of a given diagnosis range. Delegates straight to the DAO.
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class FamilyHistoryFactor extends PatientRiskFactor {
	private long patientID;
	private DAOFactory factory;
	private double icdUpper;
	private double icdLower;

	public FamilyHistoryFactor(DAOFactory factory, long patientID, double icdLower, double icdUpper) {
		this.factory = factory;
		this.patientID = patientID;
		this.icdLower = icdLower;
		this.icdUpper = icdUpper;
	}

	public String getDescription() {
		return "Patient has a family history of this disease";
	}

	public boolean hasFactor() {
		try {
			return factory.getRiskDAO().hasFamilyHistory(patientID, icdLower, icdUpper);
		} catch (DBException e) {
			e.printStackTrace();
			return false;
		}
	}
}

package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Checks if the patient had the given diagnoses during childhood.
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class ChildhoodInfectionFactor extends PatientRiskFactor {
	private final double[] icdCodes;
	private final long patientID;
	private final DAOFactory factory;

	public ChildhoodInfectionFactor(DAOFactory factory, long mid, double... icdCodes) {
		this.factory = factory;
		this.patientID = mid;
		this.icdCodes = icdCodes.clone();
	}

	public String getDescription() {
		return "This patient had a viral infection during their childhood that would increase the risk for this diesease";
	}

	public boolean hasFactor() {
		try {
			return factory.getRiskDAO().hadChildhoodInfection(patientID, icdCodes);
		} catch (DBException e) {
			System.err.println("DBException on Childhood Infection Risk, giving no risk");
			return false;
		}
	}
}

package edu.ncsu.csc.itrust.risk;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.enums.Ethnicity;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;
import edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor;
import edu.ncsu.csc.itrust.risk.factors.EthnicityFactor;
import edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor;
import edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor;

/**
 * Checks to see if the given patient is at risk for Type 1 Diabetes.
 * For details on what each method does, see {@link RiskChecker}
 * 
 * @author Andy
 * 
 */
public class Type1DiabetesRisks extends RiskChecker {
	public Type1DiabetesRisks(DAOFactory factory, long patientID) throws DBException,
			NoHealthRecordsException {
		super(factory, patientID);
	}

	@Override
	public boolean qualifiesForDisease() {
		return patient.getAge() < 12;
	}

	@Override
	protected List<PatientRiskFactor> getDiseaseRiskFactors() {
		List<PatientRiskFactor> factors = new ArrayList<PatientRiskFactor>();
		factors.add(new EthnicityFactor(patient, Ethnicity.Caucasian));
		factors.add(new FamilyHistoryFactor(factory, patient.getMID(), 250.0, 251.0));
		factors.add(new ChildhoodInfectionFactor(factory, patient.getMID(), 79.30));
		return factors;
	}

	@Override
	public String getName() {
		return "Type 1 Diabetes";
	}
}

package edu.ncsu.csc.itrust.risk;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;

/**
 * Figures out which risk checker strategy to use
 * 
 * @author Andy
 * 
 */
public class ChronicDiseaseMediator {
	private List<RiskChecker> riskCheckers;

	/**
	 * Given a factory and patient ID, and sets up a list of all risk checkers
	 * 
	 * @param factory The DAOFactory to be used in creating the necessary DAOs to perform the checks.
	 * @param pid The MID of the patient in question.
	 * @throws DBException
	 * @throws NoHealthRecordsException
	 */
	public ChronicDiseaseMediator(DAOFactory factory, long pid) throws DBException, NoHealthRecordsException {
		riskCheckers = new ArrayList<RiskChecker>();
		riskCheckers.add(new HeartDiseaseRisks(factory, pid));
		riskCheckers.add(new Type1DiabetesRisks(factory, pid));
		riskCheckers.add(new Type2DiabetesRisks(factory, pid));
	}

	/**
	 * @return A list of diseases that this patient is at risk for
	 */
	public List<RiskChecker> getDiseaseAtRisk() {
		List<RiskChecker> diseases = new ArrayList<RiskChecker>();
		for (RiskChecker diseaseChecker : riskCheckers) {
			if (diseaseChecker.isAtRisk())
				diseases.add(diseaseChecker);
		}
		return diseases;
	}
}

package edu.ncsu.csc.itrust.risk;

import static edu.ncsu.csc.itrust.enums.Ethnicity.AfricanAmerican;
import static edu.ncsu.csc.itrust.enums.Ethnicity.AmericanIndian;
import static edu.ncsu.csc.itrust.enums.Ethnicity.Asian;
import static edu.ncsu.csc.itrust.enums.Ethnicity.Hispanic;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;
import edu.ncsu.csc.itrust.risk.factors.AgeFactor;
import edu.ncsu.csc.itrust.risk.factors.CholesterolFactor;
import edu.ncsu.csc.itrust.risk.factors.EthnicityFactor;
import edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor;
import edu.ncsu.csc.itrust.risk.factors.HypertensionFactor;
import edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor;
import edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor;
import edu.ncsu.csc.itrust.risk.factors.WeightFactor;

/**
 * Checks to see if the given patient is at risk for Type II Diabetes.
 * For details on what each method does, see {@link RiskChecker}
 * 
 * @author Andy
 * 
 */
public class Type2DiabetesRisks extends RiskChecker {
	public Type2DiabetesRisks(DAOFactory factory, long patientID) throws DBException,
			NoHealthRecordsException {
		super(factory, patientID);
	}

	@Override
	public boolean qualifiesForDisease() {
		return patient.getAge() >= 12;
	}

	@Override
	protected List<PatientRiskFactor> getDiseaseRiskFactors() {
		List<PatientRiskFactor> factors = new ArrayList<PatientRiskFactor>();
		factors.add(new AgeFactor(patient, 45));
		factors.add(new EthnicityFactor(patient, Hispanic, AfricanAmerican, AmericanIndian, Asian));
		factors.add(new WeightFactor(currentHealthRecord, 25));
		factors.add(new HypertensionFactor(currentHealthRecord));
		factors.add(new CholesterolFactor(currentHealthRecord));
		factors.add(new PriorDiagnosisFactor(factory, patient.getMID(), 250.0, 251.0));
		factors.add(new FamilyHistoryFactor(factory, patient.getMID(), 250.0, 251.0));
		return factors;
	}

	@Override
	public String getName() {
		return "Type 2 Diabetes";
	}
}

package edu.ncsu.csc.itrust.risk;

import static edu.ncsu.csc.itrust.enums.Ethnicity.AfricanAmerican;
import static edu.ncsu.csc.itrust.enums.Ethnicity.AmericanIndian;
import static edu.ncsu.csc.itrust.enums.Ethnicity.Hispanic;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.enums.Gender;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;
import edu.ncsu.csc.itrust.risk.factors.AgeFactor;
import edu.ncsu.csc.itrust.risk.factors.CholesterolFactor;
import edu.ncsu.csc.itrust.risk.factors.EthnicityFactor;
import edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor;
import edu.ncsu.csc.itrust.risk.factors.GenderFactor;
import edu.ncsu.csc.itrust.risk.factors.HypertensionFactor;
import edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor;
import edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor;
import edu.ncsu.csc.itrust.risk.factors.SmokingFactor;
import edu.ncsu.csc.itrust.risk.factors.WeightFactor;

/**
 * Checks to see if the given patient is at risk for Heart Disease
 * For details on what each method does, see {@link RiskChecker}
 * @author Andy
 * 
 */
public class HeartDiseaseRisks extends RiskChecker {
	public HeartDiseaseRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {
		super(factory, patientID);
	}

	@Override
	public boolean qualifiesForDisease() {
		return true;
	}

	@Override
	protected List<PatientRiskFactor> getDiseaseRiskFactors() {
		List<PatientRiskFactor> factors = new ArrayList<PatientRiskFactor>();
		factors.add(new GenderFactor(patient, Gender.Male));
		factors.add(new AgeFactor(patient, 45));
		factors.add(new EthnicityFactor(patient, Hispanic, AfricanAmerican, AmericanIndian));
		factors.add(new WeightFactor(currentHealthRecord, 30));
		factors.add(new HypertensionFactor(currentHealthRecord));
		factors.add(new CholesterolFactor(currentHealthRecord));
		factors.add(new SmokingFactor(factory, patient.getMID()));
		factors.add(new PriorDiagnosisFactor(factory, patient.getMID(), 250.0, 251.0));
		factors.add(new FamilyHistoryFactor(factory, patient.getMID(), 350.0, 460.0));
		return factors;
	}

	@Override
	public String getName() {
		return "Heart Disease";
	}
}

package edu.ncsu.csc.itrust.risk;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.HealthRecord;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;
import edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor;

/**
 * An abstract class which has a number of utlity methods for checking risks.
 * 
 * When extending this class, use the methods to fill in all of the necessary information. Then use isAtRisk
 * and getPatientRiskFactors to get the actual risks. See the known subclasses for an example
 * 
 * @author Andy
 * 
 */
abstract public class RiskChecker {
	private static final int RISK_THRESHOLD = 3;
	protected PatientBean patient;
	protected HealthRecord currentHealthRecord;
	protected DAOFactory factory;

	public RiskChecker(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {
		this.factory = factory;
		HealthRecordsDAO hrDAO = factory.getHealthRecordsDAO();
		List<HealthRecord> records = hrDAO.getAllHealthRecords(patientID);
		if (records.size() > 0)
			currentHealthRecord = records.get(0);
		else
			throw new NoHealthRecordsException();

		patient = factory.getPatientDAO().getPatient(patientID);
	}

	/**
	 * @return The name of the disease being checked.
	 */
	abstract public String getName();

	/**
	 * @return A java.util.List of the risk factors increasing this patients disease risk.
	 */
	abstract protected List<PatientRiskFactor> getDiseaseRiskFactors();

	/**
	 * @return A boolean indicating whether the patient is at increased risk.
	 */
	abstract public boolean qualifiesForDisease();

	/**
	 * This method exists purely for performance - just stop once you hit the threshold. <br />
	 * <br />
	 * Also, the risk factors should be cached in the RiskFactor implementors - in getPatientRiskFactors there
	 * should be no double-querying
	 * 
	 * @return isAtRisk
	 */
	public boolean isAtRisk() {
		if (qualifiesForDisease()) {
			int numRisks = 0;
			List<PatientRiskFactor> diseaseRiskFactors = getDiseaseRiskFactors();
			for (PatientRiskFactor factor : diseaseRiskFactors) {
				if (factor.hasRiskFactor())
					numRisks++;
				if (numRisks >= RISK_THRESHOLD)
					return true;
			}
		}
		return false; // both an else from qualifies or NOT over the threshold
	}

	/**
	 * @return A java.util.List of patient risk factors associated with this disease.
	 */
	public List<PatientRiskFactor> getPatientRiskFactors() {
		List<PatientRiskFactor> patientRiskFactors = new ArrayList<PatientRiskFactor>();
		List<PatientRiskFactor> diseaseRiskFactors = getDiseaseRiskFactors();
		for (PatientRiskFactor factor : diseaseRiskFactors) {
			if (factor.hasRiskFactor()) {
				patientRiskFactors.add(factor);
			}
		}
		return patientRiskFactors;
	}
}

package edu.ncsu.csc.itrust;

import java.util.Locale;

/** Provides a singleton for accessing the current locale of iTrust
 *  Could possibly load the country and language from a file.
 *
 */
public class Localization {
	private Locale currentLocale;
	
	public Localization(){
		currentLocale = new Locale("en","US");
	}

	/**
	 * Returns the current locale
	 * @return the current locale
	 */
	public Locale getCurrentLocale(){
		return currentLocale;
	}
	
	static Localization currentInstance = null;
	
	/**
	 * singleton method, may want to make this thread safe, as far as I know
	 * iTrust doesn't do any multithreading though...
	 * @return Localization instance
	 */
	public static Localization instance(){
		if(currentInstance == null){
			currentInstance = new Localization();
		}
		return currentInstance;
	}
}

