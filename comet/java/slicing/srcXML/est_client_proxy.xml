<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C" filename="est_client_proxy.c">
<comment type="block">/** @file */</comment>
<comment type="block">/*------------------------------------------------------------------
 * est/est_client_proxy.c - EST client proxy mode code
 *
 *
 * March, 2016
 *
 * Copyright (c) 2016, 2017 by cisco Systems, Inc.
 * All rights reserved.
 *
 * crdaviso@cisco.com
 * 2016-03-02 
 **------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<comment type="line">// Watch out! winsock2 and friends has to be ahead of most things</comment>
<cpp:include>#   <cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#   <cpp:directive>include</cpp:directive> <cpp:file>&lt;Ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#   <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#   <cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#   <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#   <cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* WIN32 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"est_client_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"est.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"est_locl.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
    <comment type="block">/* _snprintf on Windows does not NULL-terminate when the output is
     * truncated. That's fine in this file as we reject truncated strings. */</comment>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCW_URL_SCHEMA_PORT_SIZE</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<comment type="block">/* Use WSAAddressToStringA instead of inet_ntop on Windows as inet_ntop does not
 * exist on Windows XP.
 * Can't use `const struct sockaddr *` here because WSAAddressToStringA takes
 * a LPSOCKADDR.
 */</comment>
<function><specifier>static</specifier> <type><name>int</name></type> <name>addr_to_str</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>str_size</name></decl></parameter>,
                        <parameter><decl><type><name>unsigned</name> <name>short</name> <name>int</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>dw_str_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>addr_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition> <block>{
        <case>case <expr><name>AF_INET</name></expr>:</case>
            <expr_stmt><expr><name>addr_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator><operator>-&gt;</operator><name>sin_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>AF_INET6</name></expr>:</case>
            <expr_stmt><expr><name>addr_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator><operator>-&gt;</operator><name>sin6_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <break>break;</break>
    }</block></switch>
    <expr_stmt><expr><name>dw_str_size</name> <operator>=</operator> <name>str_size</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>addr_len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <call><name>WSAAddressToStringW</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPWSTR</name><operator>)</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dw_str_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <switch>switch <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition> <block>{
        <case>case <expr><name>AF_INET</name></expr>:</case>
            <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator><operator>-&gt;</operator><name>sin_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr></argument>,
                    <argument><expr><name>str</name></expr></argument>,
                    <argument><expr><name>str_size</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then></if>
            <break>break;</break>
        <case>case <expr><name>AF_INET6</name></expr>:</case>
            <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator><operator>-&gt;</operator><name>sin6_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name></expr></argument>,
                    <argument><expr><name>str</name></expr></argument>,
                    <argument><expr><name>str_size</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then></if>
            <break>break;</break>
        <default>default:</default>
            <break>break;</break>
    }</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><specifier>static</specifier> <type><name>tcw_err_t</name></type> <name>tcw_direct_close</name> <parameter_list>(<parameter><decl><type><name>tcw_sock_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>tcw_err_t</name></type> <name>ret</name> <init>= <expr><name>TCW_OK</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>CLOSE_SOCKET</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>sock_fd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"close failed: %d"</literal></expr></argument>, <argument><expr><call><name>GET_SOCK_ERR</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_CLOSE</name></expr>;</expr_stmt>
        <comment type="block">/* SOCK_ERR already set */</comment>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>sock_fd</name></name> <operator>=</operator> <name>SOCK_INVALID</name></expr>;</expr_stmt>

<label><name>done</name>:</label>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Establish a direct socket connection with the EST server using
 * normal system calls
 */</comment>
<function><specifier>static</specifier> <type><name>tcw_err_t</name></type> <name>tcw_direct_connect</name> <parameter_list>(<parameter><decl><type><name>tcw_sock_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>tcw_opts_t</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>tcw_err_t</name></type> <name>ret</name> <init>= <expr><name>TCW_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addrs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>cur_addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SOCK_TYPE</name></type> <name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>saved_err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>port_str</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>sock_addr_str</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>sock_port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name>    <operator>=</operator> <name>AI_ADDRCONFIG</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>port_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>port_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%hu"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>port_str</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_ALLOC</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><call><name>EST_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"getaddrinfo(%s, %s)"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"getaddrinfo returned %d: %s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_RESOLV</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
        <comment type="block">/* SOCK_ERR already set */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{
            <case>case <expr><name>EAI_SYSTEM</name></expr>:</case>
                <comment type="block">/* SOCK_ERR already set */</comment>
                <break>break;</break>
            <case>case <expr><name>EAI_MEMORY</name></expr>:</case>
                <expr_stmt><expr><call><name>SET_SOCK_ERR_NOMEM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <comment type="block">/* Could not resolve host */</comment>
                <expr_stmt><expr><call><name>SET_SOCK_ERR_NONAME</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        }</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name>cur_addr</name> <operator>=</operator> <name>addrs</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>cur_addr</name></expr>)</condition> <block>{
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_OK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>cur_addr</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>EST_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"socket failed: %d"</literal></expr></argument>, <argument><expr><call><name>GET_SOCK_ERR</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_SOCKET</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cur_addr</name> <operator>=</operator> <name><name>cur_addr</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>

        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>addr_to_str</name><argument_list>(<argument><expr><name><name>cur_addr</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name>sock_addr_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sock_addr_str</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                          <argument><expr><operator>&amp;</operator><name>sock_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>EST_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"connect(%s port %hu)"</literal></expr></argument>, <argument><expr><name>sock_addr_str</name></expr></argument>, <argument><expr><name>sock_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>cur_addr</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>cur_addr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>EST_LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"connect failed: %d"</literal></expr></argument>, <argument><expr><call><name>GET_SOCK_ERR</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_CONNECT</name></expr>;</expr_stmt>
            <comment type="block">/* CLOSE_SOCKET() may clobber SOCK_ERR */</comment>
            <expr_stmt><expr><name>saved_err</name> <operator>=</operator> <call><name>GET_SOCK_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CLOSE_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fd</name> <operator>=</operator> <name>SOCK_INVALID</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SET_SOCK_ERR</name><argument_list>(<argument><expr><name>saved_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cur_addr</name> <operator>=</operator> <name><name>cur_addr</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <break>break;</break>
    }</block></while>
    <if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>sock_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"Could not connect to %s:%hu"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* ret and SOCK_ERR already set */</comment>
    }</block></else></if>
<label><name>done</name>:</label>
    <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBCURL</name></cpp:ifdef>
<function><specifier>static</specifier> <type><name>tcw_err_t</name></type> <name>tcw_curl_close</name> <parameter_list>(<parameter><decl><type><name>tcw_sock_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>tcw_err_t</name></type> <name>ret</name> <init>= <expr><name>TCW_OK</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>sock_fd</name></name> <operator>=</operator> <name>SOCK_INVALID</name></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>


<function><specifier>static</specifier> <type><name>tcw_err_t</name></type> <name>set_blocking_mode</name> <parameter_list>(<parameter><decl><type><name>tcw_sock_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocking</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>tcw_err_t</name></type> <name>ret</name> <init>= <expr><name>TCW_OK</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><name>blocking</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ioctlsocket</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>sock_fd</name></name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NO_ERROR</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * As per:
         * https://msdn.microsoft.com/en-us/library/windows/desktop/ms740126(v=vs.85).aspx
         *
         * Ioctl and Ioctlsocket/WSAIoctl
         *
         * Various C language run-time systems use the IOCTLs for purposes
         * unrelated to Windows Sockets. As a consequence, the ioctlsocket
         * function and the WSAIoctl function were defined to handle socket
         * functions that were performed by IOCTL and fcntl in the Berkeley
         * Software Distribution.
         *
         * Since ioctlsocket is the Windows equivalent of ioctl/fcntl, just
         * set return type accordingly.
         */</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_FCNTL</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>sock_fd</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>flags</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"fcntl(F_GETFL) failed: %d"</literal></expr></argument>, <argument><expr><call><name>GET_SOCK_ERR</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* SOCK_ERR is already set */</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_FCNTL</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name>blocking</name></expr> ?</condition><then> <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>O_NONBLOCK</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>flags</name> <operator>|</operator> <name>O_NONBLOCK</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>sock_fd</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"fcntl(F_SETFL) failed: %d"</literal></expr></argument>, <argument><expr><call><name>GET_SOCK_ERR</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* SOCK_ERR is already set */</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_FCNTL</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* WIN32 */</comment>

<label><name>done</name>:</label>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Establish a socket with the remote server using libcurl. Do not have it
 * actually send a URL. Leverage libcurl's proxy support to just establish
 * the connection.
 */</comment>
<function><specifier>static</specifier> <type><name>tcw_err_t</name></type> <name>tcw_curl_connect</name> <parameter_list>(<parameter><decl><type><name>tcw_sock_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>tcw_opts_t</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>tcw_err_t</name></type> <name>ret</name> <init>= <expr><name>TCW_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>url_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CURLcode</name></type> <name>curlcode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>curl_socket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>auth_bits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>proxy_type</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>saved_err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proxy_type_str</name> <init>= <expr><literal type="string">"NONE"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"curl_easy_init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_ALLOC</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>
    <comment type="block">/*
     * All we want libcurl to do here is establish the connection to
     * the proxy server.  Once that's done we'll use the socket
     * as we normally do on a direct connect to the EST server
     */</comment>
    <expr_stmt><expr><name>curlcode</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_CONNECT_ONLY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>curlcode</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(CURLOPT_CONNECT_ONLY) returned %d: %s"</literal></expr></argument>,
                    <argument><expr><name>curlcode</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name>url_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>TCW_URL_SCHEMA_PORT_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>url</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>url_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator><name>url</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"calloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_ALLOC</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>
    <comment type="block">/*
     * "http" here is telling libcurl not to wrap whatever data we send in
     *  SSL. 
     */</comment>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>url_size</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"http://%s:%hu"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>url_size</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_ALLOC</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name>curlcode</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>curlcode</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(CURLOPT_URL) returned %d: %s"</literal></expr></argument>, <argument><expr><name>curlcode</name></expr></argument>,
                    <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>

    <comment type="block">/*
     * proxy host and port
     */</comment>
    <expr_stmt><expr><name>curlcode</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_PROXY</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>proxy_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>curlcode</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(CURLOPT_PROXY) returned %d: %s"</literal></expr></argument>, <argument><expr><name>curlcode</name></expr></argument>,
                    <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name>curlcode</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_PROXYPORT</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>proxy_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>curlcode</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(CURLOPT_PROXYPORT) returned %d: %s"</literal></expr></argument>, <argument><expr><name>curlcode</name></expr></argument>,
                    <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>

    <comment type="block">/*
     * proxy protocol including HTTP tunnel mode
     */</comment>
    <if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>proxy_proto</name></name> <operator>==</operator> <name>EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>proxy_type</name> <operator>=</operator> <name>CURLPROXY_HTTP</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>proxy_type_str</name> <operator>=</operator> <literal type="string">"HTTP (no tunneling)"</literal></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>proxy_proto</name></name> <operator>==</operator> <name>EST_CLIENT_PROXY_HTTP_TUNNEL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>proxy_type</name> <operator>=</operator> <name>CURLPROXY_HTTP</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>proxy_type_str</name> <operator>=</operator> <literal type="string">"HTTP (tunneling)"</literal></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>proxy_proto</name></name> <operator>==</operator> <name>EST_CLIENT_PROXY_SOCKS4</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>proxy_type</name> <operator>=</operator> <name>CURLPROXY_SOCKS4</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>proxy_type_str</name> <operator>=</operator> <literal type="string">"SOCKS4"</literal></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>proxy_proto</name></name> <operator>==</operator> <name>EST_CLIENT_PROXY_SOCKS5</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>proxy_type</name> <operator>=</operator> <name>CURLPROXY_SOCKS5</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>proxy_type_str</name> <operator>=</operator> <literal type="string">"SOCKS5"</literal></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>proxy_proto</name></name> <operator>==</operator> <name>EST_CLIENT_PROXY_SOCKS4A</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>proxy_type</name> <operator>=</operator> <name>CURLPROXY_SOCKS4A</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>proxy_type_str</name> <operator>=</operator> <literal type="string">"SOCKS4A"</literal></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>proxy_proto</name></name> <operator>==</operator> <name>EST_CLIENT_PROXY_SOCKS5_HOSTNAME</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>proxy_type</name> <operator>=</operator> <name>CURLPROXY_SOCKS5_HOSTNAME</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>proxy_type_str</name> <operator>=</operator> <literal type="string">"SOCKS5_HOSTNAME"</literal></expr>;</expr_stmt>
    }</block></then></if></elseif></if>
    <expr_stmt><expr><name>curlcode</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_PROXYTYPE</name></expr></argument>, <argument><expr><name>proxy_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>curlcode</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(CURLOPT_PROXYTYPE) returned %d: %s"</literal></expr></argument>,
                    <argument><expr><name>curlcode</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>proxy_proto</name></name> <operator>==</operator> <name>EST_CLIENT_PROXY_HTTP_TUNNEL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>curlcode</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_HTTPPROXYTUNNEL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>curlcode</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(CURLOPT_HTTPPROXYTUNNEL) returned %d: %s"</literal></expr></argument>,
                        <argument><expr><name>curlcode</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_OTHER</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><name>curlcode</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_PROXYAUTH</name></expr></argument>, <argument><expr><name>CURLAUTH_BASIC</name><operator>|</operator><name>CURLAUTH_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>curlcode</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(CURLOPT_PROXYAUTH) returned %d: %s"</literal></expr></argument>,
                    <argument><expr><name>curlcode</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>

    <comment type="block">/*
     * username and password
     */</comment>
    <if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>proxy_username</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>proxy_password</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>curlcode</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_PROXYUSERNAME</name></expr></argument>,
                                    <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>proxy_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>curlcode</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(CURLOPT_PROXYUSERNAME) returned %d: %s"</literal></expr></argument>,
                        <argument><expr><name>curlcode</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_OTHER</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><name>curlcode</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_PROXYPASSWORD</name></expr></argument>,
                                    <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>proxy_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>curlcode</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(CURLOPT_PROXYPASSWORD) returned %d: %s"</literal></expr></argument>,
                        <argument><expr><name>curlcode</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_OTHER</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><name>auth_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>proxy_auth</name></name> <operator>&amp;</operator> <name>EST_CLIENT_PROXY_AUTH_BASIC</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>auth_bits</name> <operator>|=</operator> <name>CURLAUTH_BASIC</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>proxy_auth</name></name> <operator>&amp;</operator> <name>EST_CLIENT_PROXY_AUTH_NTLM</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>auth_bits</name> <operator>|=</operator> <name>CURLAUTH_NTLM</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>auth_bits</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>curlcode</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_PROXYAUTH</name></expr></argument>, <argument><expr><name>auth_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>curlcode</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(CURLOPT_PROXYAUTH) returned %d: %s"</literal></expr></argument>,
                            <argument><expr><name>curlcode</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_OTHER</name></expr>;</expr_stmt>
                <goto>goto <name>done</name>;</goto>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/*
     * no signals generated from libcurl
     */</comment>
    <expr_stmt><expr><name>curlcode</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_NOSIGNAL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>curlcode</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(CURLOPT_NOSIGNAL) returned %d: %s"</literal></expr></argument>,
                    <argument><expr><name>curlcode</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>

    <comment type="block">/*
     * perform the curl request
     */</comment>
    <expr_stmt><expr><call><name>EST_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"curl_easy_perform(%s), proxy type %s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>proxy_type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>curlcode</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>curlcode</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"curl_easy_perform(%s) returned %d: %s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>curlcode</name></expr></argument>,
                    <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>curlcode</name> <operator>==</operator> <name>CURLE_COULDNT_RESOLVE_PROXY</name> <operator>||</operator>
            <name>curlcode</name> <operator>==</operator> <name>CURLE_COULDNT_RESOLVE_HOST</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>SET_SOCK_ERR_NONAME</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_RESOLV</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>SET_SOCK_ERR_CONN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_CONNECT</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        }</block></else></if>
    }</block></then></if>

    <comment type="block">/*
     * retrieve the socket from libcurl
     */</comment>
    <expr_stmt><expr><name>curlcode</name> <operator>=</operator> <call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>curl_handle</name></name></expr></argument>, <argument><expr><name>CURLINFO_LASTSOCKET</name></expr></argument>,
                                 <argument><expr><operator>&amp;</operator><name>curl_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>curlcode</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"curl_easy_getinfo(CURLINFO_LASTSOCKET) returned %d: %s"</literal></expr></argument>,
                    <argument><expr><name>curlcode</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>
    <if>if <condition>(<expr><name>curl_socket</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"CURLINFO_LASTSOCKET: invalid socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>sock_fd</name></name> <operator>=</operator> <name>curl_socket</name></expr>;</expr_stmt>

    <comment type="block">/* after connection is made, set socket to blocking */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>set_blocking_mode</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TCW_OK</name></expr>)</condition><then> <block>{
        <comment type="block">/* SOCK_ERR is already set */</comment>
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"Failed to set socket to blocking"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>

  <label><name>done</name>:</label>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>url</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TCW_OK</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>saved_err</name> <operator>=</operator> <call><name>GET_SOCK_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tcw_curl_close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SET_SOCK_ERR</name><argument_list>(<argument><expr><name>saved_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * entry point to establish a connection with the remote EST server
 */</comment>
<function><type><name>tcw_err_t</name></type> <name>tcw_connect</name> <parameter_list>(<parameter><decl><type><name>tcw_sock_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>tcw_opts_t</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>SOCK_TYPE</name> <modifier>*</modifier></type><name>sock_fd</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>tcw_err_t</name></type> <name>ret</name> <init>= <expr><name>TCW_OK</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tcw_sock_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>sock_fd</name></name> <operator>=</operator> <name>SOCK_INVALID</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>proxy_proto</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>proxy_proto</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>proxy_proto</name></name> <operator>!=</operator> <name>EST_CLIENT_PROXY_NONE</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBCURL</name></cpp:ifdef>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tcw_curl_connect</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="block">/*
         * We should not make it this far, but if we do,
         * log a message as to why this is wrong and return
         */</comment>
        <expr_stmt><expr><call><name>EST_LOG_ERR</name><argument_list>(<argument><expr><literal type="string">"Proxy settings currently require libcurl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TCW_ERR_ARG</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tcw_direct_connect</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TCW_OK</name></expr>)</condition><then> <block>{
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><call><name>EST_LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"Successfully connected to %s:%hu"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>sock_fd</name> <operator>=</operator> <name><name>sock</name><operator>-&gt;</operator><name>sock_fd</name></name></expr>;</expr_stmt>

<label><name>done</name>:</label>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>tcw_err_t</name></type> <name>tcw_close</name> <parameter_list>(<parameter><decl><type><name>tcw_sock_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>tcw_err_t</name></type> <name>ret</name> <init>= <expr><name>TCW_OK</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>proxy_proto</name></name> <operator>==</operator> <name>EST_CLIENT_PROXY_NONE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tcw_direct_close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBCURL</name></cpp:ifdef>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tcw_curl_close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></else></if>

    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
</unit>
